/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

/**
 * Adds a host to an existing cluster.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::AdminAddHostRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminAddHostResponse "Response" object containing the
 *         result of the operation.
 */
AdminAddHostResponse adminAddHost( const AdminAddHostRequest& request_ ) const;

/**
 * Adds a host to an existing cluster.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::AdminAddHostRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminAddHostResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminAddHostResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminAddHostResponse& adminAddHost( const AdminAddHostRequest& request_,
                                    AdminAddHostResponse& response_ ) const;

/**
 * Adds a host to an existing cluster.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] hostAddress  IP address of the host that will be added to the
 *                         cluster. This host must have installed the same
 *                         version of Kinetica as the cluster to which it is
 *                         being added.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_add_host_dry_run
 *                             "admin_add_host_dry_run": If set to @ref
 *                             gpudb::admin_add_host_true "true", only
 *                             validation checks will be performed. No host is
 *                             added.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_add_host_true
 *                                     "admin_add_host_true"
 *                                 <li>@ref gpudb::admin_add_host_false
 *                                     "admin_add_host_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_add_host_false
 *                             "admin_add_host_false".
 *                         <li>@ref gpudb::admin_add_host_accepts_failover
 *                             "admin_add_host_accepts_failover": If set to
 *                             @ref gpudb::admin_add_host_true "true", the host
 *                             will accept processes (ranks, graph server,
 *                             etc.) in the event of a failover on another node
 *                             in the cluster.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_add_host_true
 *                                     "admin_add_host_true"
 *                                 <li>@ref gpudb::admin_add_host_false
 *                                     "admin_add_host_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_add_host_false
 *                             "admin_add_host_false".
 *                         <li>@ref gpudb::admin_add_host_public_address
 *                             "admin_add_host_public_address": The
 *                             publicly-accessible IP address for the host
 *                             being added, typically specified for clients
 *                             using multi-head operations. This setting is
 *                             required if any other host(s) in the cluster
 *                             specify a public address.
 *                         <li>@ref
 *                             gpudb::admin_add_host_host_manager_public_url
 *                             "admin_add_host_host_manager_public_url": The
 *                             publicly-accessible full path URL to the host
 *                             manager on the host being added, e.g.,
 *                             'http://172.123.45.67:9300'. The default host
 *                             manager port can be found in the <a
 *                             href="../../../install/shared/ports/"
 *                             target="_top">list of ports</a> used by
 *                             Kinetica.
 *                         <li>@ref gpudb::admin_add_host_ram_limit
 *                             "admin_add_host_ram_limit": The desired RAM
 *                             limit for the host being added, i.e. the sum of
 *                             RAM usage for all processes on the host will not
 *                             be able to exceed this value. Supported units: K
 *                             (thousand), KB (kilobytes), M (million), MB
 *                             (megabytes), G (billion), GB (gigabytes); if no
 *                             unit is provided, the value is assumed to be in
 *                             bytes. For example, if @ref
 *                             gpudb::admin_add_host_ram_limit "ram_limit" is
 *                             set to 10M, the resulting RAM limit is 10
 *                             million bytes. Set @ref
 *                             gpudb::admin_add_host_ram_limit "ram_limit" to
 *                             -1 to have no RAM limit.
 *                         <li>@ref gpudb::admin_add_host_gpus
 *                             "admin_add_host_gpus": Comma-delimited list of
 *                             GPU indices (starting at 1) that are eligible
 *                             for running worker processes. If left blank, all
 *                             GPUs on the host being added will be eligible.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AdminAddHostResponse "Response" object containing the
 *         result of the operation.
 */
AdminAddHostResponse adminAddHost( const std::string& hostAddress,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Adds a host to an existing cluster.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] hostAddress  IP address of the host that will be added to the
 *                         cluster. This host must have installed the same
 *                         version of Kinetica as the cluster to which it is
 *                         being added.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_add_host_dry_run
 *                             "admin_add_host_dry_run": If set to @ref
 *                             gpudb::admin_add_host_true "true", only
 *                             validation checks will be performed. No host is
 *                             added.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_add_host_true
 *                                     "admin_add_host_true"
 *                                 <li>@ref gpudb::admin_add_host_false
 *                                     "admin_add_host_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_add_host_false
 *                             "admin_add_host_false".
 *                         <li>@ref gpudb::admin_add_host_accepts_failover
 *                             "admin_add_host_accepts_failover": If set to
 *                             @ref gpudb::admin_add_host_true "true", the host
 *                             will accept processes (ranks, graph server,
 *                             etc.) in the event of a failover on another node
 *                             in the cluster.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_add_host_true
 *                                     "admin_add_host_true"
 *                                 <li>@ref gpudb::admin_add_host_false
 *                                     "admin_add_host_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_add_host_false
 *                             "admin_add_host_false".
 *                         <li>@ref gpudb::admin_add_host_public_address
 *                             "admin_add_host_public_address": The
 *                             publicly-accessible IP address for the host
 *                             being added, typically specified for clients
 *                             using multi-head operations. This setting is
 *                             required if any other host(s) in the cluster
 *                             specify a public address.
 *                         <li>@ref
 *                             gpudb::admin_add_host_host_manager_public_url
 *                             "admin_add_host_host_manager_public_url": The
 *                             publicly-accessible full path URL to the host
 *                             manager on the host being added, e.g.,
 *                             'http://172.123.45.67:9300'. The default host
 *                             manager port can be found in the <a
 *                             href="../../../install/shared/ports/"
 *                             target="_top">list of ports</a> used by
 *                             Kinetica.
 *                         <li>@ref gpudb::admin_add_host_ram_limit
 *                             "admin_add_host_ram_limit": The desired RAM
 *                             limit for the host being added, i.e. the sum of
 *                             RAM usage for all processes on the host will not
 *                             be able to exceed this value. Supported units: K
 *                             (thousand), KB (kilobytes), M (million), MB
 *                             (megabytes), G (billion), GB (gigabytes); if no
 *                             unit is provided, the value is assumed to be in
 *                             bytes. For example, if @ref
 *                             gpudb::admin_add_host_ram_limit "ram_limit" is
 *                             set to 10M, the resulting RAM limit is 10
 *                             million bytes. Set @ref
 *                             gpudb::admin_add_host_ram_limit "ram_limit" to
 *                             -1 to have no RAM limit.
 *                         <li>@ref gpudb::admin_add_host_gpus
 *                             "admin_add_host_gpus": Comma-delimited list of
 *                             GPU indices (starting at 1) that are eligible
 *                             for running worker processes. If left blank, all
 *                             GPUs on the host being added will be eligible.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminAddHostResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminAddHostResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminAddHostResponse& adminAddHost( const std::string& hostAddress,
                                    const std::map<std::string, std::string>& options,
                                    AdminAddHostResponse& response_ ) const;

/**
 * Add one or more ranks to an existing Kinetica cluster. The new ranks will
 * not contain any data initially (other than replicated tables) and will not
 * be assigned any shards. To rebalance data and shards across the cluster, use
 * @ref adminRebalance(const AdminRebalanceRequest&) const "adminRebalance".
 *
 * The database must be offline for this operation, see @ref
 * adminOffline(const AdminOfflineRequest&) const "adminOffline"
 *
 * For example, if attempting to add three new ranks (two ranks on host
 * 172.123.45.67 and one rank on host 172.123.45.68) to a Kinetica cluster with
 * additional configuration parameters:
 *
 * * @ref gpudb::AdminAddRanksRequest::hosts "hosts" would be an array
 * including 172.123.45.67 in the first two indices (signifying two ranks being
 * added to host 172.123.45.67) and 172.123.45.68 in the last index (signifying
 * one rank being added to host 172.123.45.67)
 * * @ref gpudb::AdminAddRanksRequest::configParams "configParams" would be an
 * array of maps, with each map corresponding to the ranks being added in @ref
 * gpudb::AdminAddRanksRequest::hosts "hosts". The key of each map would be the
 * configuration parameter name and the value would be the parameter's value,
 * e.g.\ '{"rank.gpu":"1"}'
 *
 * This endpoint's processing includes copying all replicated table data to the
 * new rank(s) and therefore could take a long time. The API call may time out
 * if run directly.  It is recommended to run this endpoint asynchronously via
 * @ref createJob(const CreateJobRequest&) const "createJob".
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::AdminAddRanksRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminAddRanksResponse "Response" object containing the
 *         result of the operation.
 */
AdminAddRanksResponse adminAddRanks( const AdminAddRanksRequest& request_ ) const;

/**
 * Add one or more ranks to an existing Kinetica cluster. The new ranks will
 * not contain any data initially (other than replicated tables) and will not
 * be assigned any shards. To rebalance data and shards across the cluster, use
 * @ref adminRebalance(const AdminRebalanceRequest&) const "adminRebalance".
 *
 * The database must be offline for this operation, see @ref
 * adminOffline(const AdminOfflineRequest&) const "adminOffline"
 *
 * For example, if attempting to add three new ranks (two ranks on host
 * 172.123.45.67 and one rank on host 172.123.45.68) to a Kinetica cluster with
 * additional configuration parameters:
 *
 * * @ref gpudb::AdminAddRanksRequest::hosts "hosts" would be an array
 * including 172.123.45.67 in the first two indices (signifying two ranks being
 * added to host 172.123.45.67) and 172.123.45.68 in the last index (signifying
 * one rank being added to host 172.123.45.67)
 * * @ref gpudb::AdminAddRanksRequest::configParams "configParams" would be an
 * array of maps, with each map corresponding to the ranks being added in @ref
 * gpudb::AdminAddRanksRequest::hosts "hosts". The key of each map would be the
 * configuration parameter name and the value would be the parameter's value,
 * e.g.\ '{"rank.gpu":"1"}'
 *
 * This endpoint's processing includes copying all replicated table data to the
 * new rank(s) and therefore could take a long time. The API call may time out
 * if run directly.  It is recommended to run this endpoint asynchronously via
 * @ref createJob(const CreateJobRequest&) const "createJob".
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::AdminAddRanksRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminAddRanksResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminAddRanksResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminAddRanksResponse& adminAddRanks( const AdminAddRanksRequest& request_,
                                      AdminAddRanksResponse& response_ ) const;

/**
 * Add one or more ranks to an existing Kinetica cluster. The new ranks will
 * not contain any data initially (other than replicated tables) and will not
 * be assigned any shards. To rebalance data and shards across the cluster, use
 * @ref adminRebalance(const std::map<std::string, std::string>&) const
 * "adminRebalance".
 *
 * The database must be offline for this operation, see @ref
 * adminOffline(const bool, const std::map<std::string, std::string>&) const
 * "adminOffline"
 *
 * For example, if attempting to add three new ranks (two ranks on host
 * 172.123.45.67 and one rank on host 172.123.45.68) to a Kinetica cluster with
 * additional configuration parameters:
 *
 * * @a hosts would be an array including 172.123.45.67 in the first two
 * indices (signifying two ranks being added to host 172.123.45.67) and
 * 172.123.45.68 in the last index (signifying one rank being added to host
 * 172.123.45.67)
 * * @a configParams would be an array of maps, with each map corresponding to
 * the ranks being added in @a hosts. The key of each map would be the
 * configuration parameter name and the value would be the parameter's value,
 * e.g.\ '{"rank.gpu":"1"}'
 *
 * This endpoint's processing includes copying all replicated table data to the
 * new rank(s) and therefore could take a long time. The API call may time out
 * if run directly.  It is recommended to run this endpoint asynchronously via
 * @ref
 * createJob(const std::string&, const std::string&, const std::vector<uint8_t>&, const std::string&, const std::map<std::string, std::string>&) const
 * "createJob".
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] hosts  Array of host IP addresses (matching a hostN.address from
 *                   the gpudb.conf file), or host identifiers (e.g. 'host0'
 *                   from the gpudb.conf file), on which to add ranks to the
 *                   cluster. The hosts must already be in the cluster. If
 *                   needed beforehand, to add a new host to the cluster use
 *                   @ref
 *                   adminAddHost(const std::string&, const std::map<std::string, std::string>&) const
 *                   "adminAddHost". Include the same entry as many times as
 *                   there are ranks to add to the cluster, e.g., if two ranks
 *                   on host 172.123.45.67 should be added, @a hosts could look
 *                   like '["172.123.45.67", "172.123.45.67"]'. All ranks will
 *                   be added simultaneously, i.e. they're not added in the
 *                   order of this array. Each entry in this array corresponds
 *                   to the entry at the same index in the @a configParams.
 * @param[in] configParams  Array of maps containing configuration parameters
 *                          to apply to the new ranks found in @a hosts. For
 *                          example, '{"rank.gpu":"2",
 *                          "tier.ram.rank.limit":"10000000000"}'. Currently,
 *                          the available parameters are rank-specific
 *                          parameters in the <a
 *                          href="../../../config/#config-main-network"
 *                          target="_top">Network</a>, <a
 *                          href="../../../config/#config-main-hardware"
 *                          target="_top">Hardware</a>, <a
 *                          href="../../../config/#config-main-text-search"
 *                          target="_top">Text Search</a>, and <a
 *                          href="../../../config/#config-main-ram-tier"
 *                          target="_top">RAM Tiered Storage</a> sections in
 *                          the gpudb.conf file, with the key exception of the
 *                          'rankN.host' settings in the Network section that
 *                          will be determined by @a hosts instead. Though many
 *                          of these configuration parameters typically are
 *                          affixed with 'rankN' in the gpudb.conf file (where
 *                          N is the rank number), the 'N' should be omitted in
 *                          @a configParams as the new rank number(s) are not
 *                          allocated until the ranks have been added to the
 *                          cluster. Each entry in this array corresponds to
 *                          the entry at the same index in the @a hosts. This
 *                          array must either be completely empty or have the
 *                          same number of elements as the @a hosts.  An empty
 *                          @a configParams array will result in the new ranks
 *                          being set with default parameters.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_add_ranks_dry_run
 *                             "admin_add_ranks_dry_run": If @ref
 *                             gpudb::admin_add_ranks_true "true", only
 *                             validation checks will be performed. No ranks
 *                             are added.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_add_ranks_true
 *                                     "admin_add_ranks_true"
 *                                 <li>@ref gpudb::admin_add_ranks_false
 *                                     "admin_add_ranks_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_add_ranks_false
 *                             "admin_add_ranks_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AdminAddRanksResponse "Response" object containing the
 *         result of the operation.
 */
AdminAddRanksResponse adminAddRanks( const std::vector<std::string>& hosts,
                                     const std::vector<std::map<std::string, std::string> >& configParams,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Add one or more ranks to an existing Kinetica cluster. The new ranks will
 * not contain any data initially (other than replicated tables) and will not
 * be assigned any shards. To rebalance data and shards across the cluster, use
 * @ref adminRebalance(const std::map<std::string, std::string>&) const
 * "adminRebalance".
 *
 * The database must be offline for this operation, see @ref
 * adminOffline(const bool, const std::map<std::string, std::string>&) const
 * "adminOffline"
 *
 * For example, if attempting to add three new ranks (two ranks on host
 * 172.123.45.67 and one rank on host 172.123.45.68) to a Kinetica cluster with
 * additional configuration parameters:
 *
 * * @a hosts would be an array including 172.123.45.67 in the first two
 * indices (signifying two ranks being added to host 172.123.45.67) and
 * 172.123.45.68 in the last index (signifying one rank being added to host
 * 172.123.45.67)
 * * @a configParams would be an array of maps, with each map corresponding to
 * the ranks being added in @a hosts. The key of each map would be the
 * configuration parameter name and the value would be the parameter's value,
 * e.g.\ '{"rank.gpu":"1"}'
 *
 * This endpoint's processing includes copying all replicated table data to the
 * new rank(s) and therefore could take a long time. The API call may time out
 * if run directly.  It is recommended to run this endpoint asynchronously via
 * @ref
 * createJob(const std::string&, const std::string&, const std::vector<uint8_t>&, const std::string&, const std::map<std::string, std::string>&) const
 * "createJob".
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] hosts  Array of host IP addresses (matching a hostN.address from
 *                   the gpudb.conf file), or host identifiers (e.g. 'host0'
 *                   from the gpudb.conf file), on which to add ranks to the
 *                   cluster. The hosts must already be in the cluster. If
 *                   needed beforehand, to add a new host to the cluster use
 *                   @ref
 *                   adminAddHost(const std::string&, const std::map<std::string, std::string>&) const
 *                   "adminAddHost". Include the same entry as many times as
 *                   there are ranks to add to the cluster, e.g., if two ranks
 *                   on host 172.123.45.67 should be added, @a hosts could look
 *                   like '["172.123.45.67", "172.123.45.67"]'. All ranks will
 *                   be added simultaneously, i.e. they're not added in the
 *                   order of this array. Each entry in this array corresponds
 *                   to the entry at the same index in the @a configParams.
 * @param[in] configParams  Array of maps containing configuration parameters
 *                          to apply to the new ranks found in @a hosts. For
 *                          example, '{"rank.gpu":"2",
 *                          "tier.ram.rank.limit":"10000000000"}'. Currently,
 *                          the available parameters are rank-specific
 *                          parameters in the <a
 *                          href="../../../config/#config-main-network"
 *                          target="_top">Network</a>, <a
 *                          href="../../../config/#config-main-hardware"
 *                          target="_top">Hardware</a>, <a
 *                          href="../../../config/#config-main-text-search"
 *                          target="_top">Text Search</a>, and <a
 *                          href="../../../config/#config-main-ram-tier"
 *                          target="_top">RAM Tiered Storage</a> sections in
 *                          the gpudb.conf file, with the key exception of the
 *                          'rankN.host' settings in the Network section that
 *                          will be determined by @a hosts instead. Though many
 *                          of these configuration parameters typically are
 *                          affixed with 'rankN' in the gpudb.conf file (where
 *                          N is the rank number), the 'N' should be omitted in
 *                          @a configParams as the new rank number(s) are not
 *                          allocated until the ranks have been added to the
 *                          cluster. Each entry in this array corresponds to
 *                          the entry at the same index in the @a hosts. This
 *                          array must either be completely empty or have the
 *                          same number of elements as the @a hosts.  An empty
 *                          @a configParams array will result in the new ranks
 *                          being set with default parameters.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_add_ranks_dry_run
 *                             "admin_add_ranks_dry_run": If @ref
 *                             gpudb::admin_add_ranks_true "true", only
 *                             validation checks will be performed. No ranks
 *                             are added.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_add_ranks_true
 *                                     "admin_add_ranks_true"
 *                                 <li>@ref gpudb::admin_add_ranks_false
 *                                     "admin_add_ranks_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_add_ranks_false
 *                             "admin_add_ranks_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminAddRanksResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminAddRanksResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminAddRanksResponse& adminAddRanks( const std::vector<std::string>& hosts,
                                      const std::vector<std::map<std::string, std::string> >& configParams,
                                      const std::map<std::string, std::string>& options,
                                      AdminAddRanksResponse& response_ ) const;

/**
 * Alter properties on an existing host in the cluster. Currently, the only
 * property that can be altered is a hosts ability to accept failover
 * processes.
 *
 * @param[in] request_  @ref gpudb::AdminAlterHostRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminAlterHostResponse "Response" object containing the
 *         result of the operation.
 */
AdminAlterHostResponse adminAlterHost( const AdminAlterHostRequest& request_ ) const;

/**
 * Alter properties on an existing host in the cluster. Currently, the only
 * property that can be altered is a hosts ability to accept failover
 * processes.
 *
 * @param[in] request_  @ref gpudb::AdminAlterHostRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminAlterHostResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminAlterHostResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminAlterHostResponse& adminAlterHost( const AdminAlterHostRequest& request_,
                                        AdminAlterHostResponse& response_ ) const;

/**
 * Alter properties on an existing host in the cluster. Currently, the only
 * property that can be altered is a hosts ability to accept failover
 * processes.
 *
 * @param[in] host  Identifies the host this applies to. Can be the host
 *                  address, or formatted as 'hostN' where N is the host number
 *                  as specified in gpudb.conf
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_alter_host_accepts_failover
 *                             "admin_alter_host_accepts_failover": If set to
 *                             @ref gpudb::admin_alter_host_true "true", the
 *                             host will accept processes (ranks, graph server,
 *                             etc.) in the event of a failover on another node
 *                             in the cluster.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_alter_host_true
 *                                     "admin_alter_host_true"
 *                                 <li>@ref gpudb::admin_alter_host_false
 *                                     "admin_alter_host_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_alter_host_false
 *                             "admin_alter_host_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AdminAlterHostResponse "Response" object containing the
 *         result of the operation.
 */
AdminAlterHostResponse adminAlterHost( const std::string& host,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Alter properties on an existing host in the cluster. Currently, the only
 * property that can be altered is a hosts ability to accept failover
 * processes.
 *
 * @param[in] host  Identifies the host this applies to. Can be the host
 *                  address, or formatted as 'hostN' where N is the host number
 *                  as specified in gpudb.conf
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_alter_host_accepts_failover
 *                             "admin_alter_host_accepts_failover": If set to
 *                             @ref gpudb::admin_alter_host_true "true", the
 *                             host will accept processes (ranks, graph server,
 *                             etc.) in the event of a failover on another node
 *                             in the cluster.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_alter_host_true
 *                                     "admin_alter_host_true"
 *                                 <li>@ref gpudb::admin_alter_host_false
 *                                     "admin_alter_host_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_alter_host_false
 *                             "admin_alter_host_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminAlterHostResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminAlterHostResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminAlterHostResponse& adminAlterHost( const std::string& host,
                                        const std::map<std::string, std::string>& options,
                                        AdminAlterHostResponse& response_ ) const;

/**
 * Perform the requested action on a list of one or more job(s). Based on the
 * type of job and the current state of execution, the action may not be
 * successfully executed. The final result of the attempted actions for each
 * specified job is returned in the status array of the response. See <a
 * href="../../../admin/job_manager/" target="_top">Job Manager</a> for more
 * information.
 *
 * @param[in] request_  @ref gpudb::AdminAlterJobsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminAlterJobsResponse "Response" object containing the
 *         result of the operation.
 */
AdminAlterJobsResponse adminAlterJobs( const AdminAlterJobsRequest& request_ ) const;

/**
 * Perform the requested action on a list of one or more job(s). Based on the
 * type of job and the current state of execution, the action may not be
 * successfully executed. The final result of the attempted actions for each
 * specified job is returned in the status array of the response. See <a
 * href="../../../admin/job_manager/" target="_top">Job Manager</a> for more
 * information.
 *
 * @param[in] request_  @ref gpudb::AdminAlterJobsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminAlterJobsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminAlterJobsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminAlterJobsResponse& adminAlterJobs( const AdminAlterJobsRequest& request_,
                                        AdminAlterJobsResponse& response_ ) const;

/**
 * Perform the requested action on a list of one or more job(s). Based on the
 * type of job and the current state of execution, the action may not be
 * successfully executed. The final result of the attempted actions for each
 * specified job is returned in the status array of the response. See <a
 * href="../../../admin/job_manager/" target="_top">Job Manager</a> for more
 * information.
 *
 * @param[in] jobIds  Jobs to be modified.
 * @param[in] action  Action to be performed on the jobs specified by job_ids.
 *                    Supported values:
 *                    <ul>
 *                        <li>@ref gpudb::admin_alter_jobs_cancel
 *                            "admin_alter_jobs_cancel"
 *                    </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_alter_jobs_job_tag
 *                             "admin_alter_jobs_job_tag": Job tag returned in
 *                             call to create the job
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AdminAlterJobsResponse "Response" object containing the
 *         result of the operation.
 */
AdminAlterJobsResponse adminAlterJobs( const std::vector<int64_t>& jobIds,
                                       const std::string& action,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Perform the requested action on a list of one or more job(s). Based on the
 * type of job and the current state of execution, the action may not be
 * successfully executed. The final result of the attempted actions for each
 * specified job is returned in the status array of the response. See <a
 * href="../../../admin/job_manager/" target="_top">Job Manager</a> for more
 * information.
 *
 * @param[in] jobIds  Jobs to be modified.
 * @param[in] action  Action to be performed on the jobs specified by job_ids.
 *                    Supported values:
 *                    <ul>
 *                        <li>@ref gpudb::admin_alter_jobs_cancel
 *                            "admin_alter_jobs_cancel"
 *                    </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_alter_jobs_job_tag
 *                             "admin_alter_jobs_job_tag": Job tag returned in
 *                             call to create the job
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminAlterJobsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminAlterJobsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminAlterJobsResponse& adminAlterJobs( const std::vector<int64_t>& jobIds,
                                        const std::string& action,
                                        const std::map<std::string, std::string>& options,
                                        AdminAlterJobsResponse& response_ ) const;

/**
 * Prepares the system for a backup by closing all open file handles after
 * allowing current active jobs to complete. When the database is in backup
 * mode, queries that result in a disk write operation will be blocked until
 * backup mode has been completed by using @ref
 * adminBackupEnd(const AdminBackupEndRequest&) const "adminBackupEnd".
 *
 * @param[in] request_  @ref gpudb::AdminBackupBeginRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminBackupBeginResponse "Response" object containing
 *         the result of the operation.
 */
AdminBackupBeginResponse adminBackupBegin( const AdminBackupBeginRequest& request_ ) const;

/**
 * Prepares the system for a backup by closing all open file handles after
 * allowing current active jobs to complete. When the database is in backup
 * mode, queries that result in a disk write operation will be blocked until
 * backup mode has been completed by using @ref
 * adminBackupEnd(const AdminBackupEndRequest&) const "adminBackupEnd".
 *
 * @param[in] request_  @ref gpudb::AdminBackupBeginRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminBackupBeginResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AdminBackupBeginResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AdminBackupBeginResponse& adminBackupBegin( const AdminBackupBeginRequest& request_,
                                            AdminBackupBeginResponse& response_ ) const;

/**
 * Prepares the system for a backup by closing all open file handles after
 * allowing current active jobs to complete. When the database is in backup
 * mode, queries that result in a disk write operation will be blocked until
 * backup mode has been completed by using @ref
 * adminBackupEnd(const std::map<std::string, std::string>&) const
 * "adminBackupEnd".
 *
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AdminBackupBeginResponse "Response" object containing
 *         the result of the operation.
 */
AdminBackupBeginResponse adminBackupBegin( const std::map<std::string, std::string>& options ) const;

/**
 * Prepares the system for a backup by closing all open file handles after
 * allowing current active jobs to complete. When the database is in backup
 * mode, queries that result in a disk write operation will be blocked until
 * backup mode has been completed by using @ref
 * adminBackupEnd(const std::map<std::string, std::string>&) const
 * "adminBackupEnd".
 *
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminBackupBeginResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AdminBackupBeginResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AdminBackupBeginResponse& adminBackupBegin( const std::map<std::string, std::string>& options,
                                            AdminBackupBeginResponse& response_ ) const;

/**
 * Restores the system to normal operating mode after a backup has completed,
 * allowing any queries that were blocked to complete.
 *
 * @param[in] request_  @ref gpudb::AdminBackupEndRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminBackupEndResponse "Response" object containing the
 *         result of the operation.
 */
AdminBackupEndResponse adminBackupEnd( const AdminBackupEndRequest& request_ ) const;

/**
 * Restores the system to normal operating mode after a backup has completed,
 * allowing any queries that were blocked to complete.
 *
 * @param[in] request_  @ref gpudb::AdminBackupEndRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminBackupEndResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminBackupEndResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminBackupEndResponse& adminBackupEnd( const AdminBackupEndRequest& request_,
                                        AdminBackupEndResponse& response_ ) const;

/**
 * Restores the system to normal operating mode after a backup has completed,
 * allowing any queries that were blocked to complete.
 *
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AdminBackupEndResponse "Response" object containing the
 *         result of the operation.
 */
AdminBackupEndResponse adminBackupEnd( const std::map<std::string, std::string>& options ) const;

/**
 * Restores the system to normal operating mode after a backup has completed,
 * allowing any queries that were blocked to complete.
 *
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminBackupEndResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminBackupEndResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminBackupEndResponse& adminBackupEnd( const std::map<std::string, std::string>& options,
                                        AdminBackupEndResponse& response_ ) const;

/**
 * Restarts the HA processing on the given cluster as a mechanism of accepting
 * breaking HA conf changes. Additionally the cluster is put into read-only
 * while HA is restarting.
 *
 * @param[in] request_  @ref gpudb::AdminHaRefreshRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminHaRefreshResponse "Response" object containing the
 *         result of the operation.
 */
AdminHaRefreshResponse adminHaRefresh( const AdminHaRefreshRequest& request_ ) const;

/**
 * Restarts the HA processing on the given cluster as a mechanism of accepting
 * breaking HA conf changes. Additionally the cluster is put into read-only
 * while HA is restarting.
 *
 * @param[in] request_  @ref gpudb::AdminHaRefreshRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminHaRefreshResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminHaRefreshResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminHaRefreshResponse& adminHaRefresh( const AdminHaRefreshRequest& request_,
                                        AdminHaRefreshResponse& response_ ) const;

/**
 * Restarts the HA processing on the given cluster as a mechanism of accepting
 * breaking HA conf changes. Additionally the cluster is put into read-only
 * while HA is restarting.
 *
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AdminHaRefreshResponse "Response" object containing the
 *         result of the operation.
 */
AdminHaRefreshResponse adminHaRefresh( const std::map<std::string, std::string>& options ) const;

/**
 * Restarts the HA processing on the given cluster as a mechanism of accepting
 * breaking HA conf changes. Additionally the cluster is put into read-only
 * while HA is restarting.
 *
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminHaRefreshResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminHaRefreshResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminHaRefreshResponse& adminHaRefresh( const std::map<std::string, std::string>& options,
                                        AdminHaRefreshResponse& response_ ) const;

/**
 * Take the system offline. When the system is offline, no user operations can
 * be performed with the exception of a system shutdown.
 *
 * @param[in] request_  @ref gpudb::AdminOfflineRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminOfflineResponse "Response" object containing the
 *         result of the operation.
 */
AdminOfflineResponse adminOffline( const AdminOfflineRequest& request_ ) const;

/**
 * Take the system offline. When the system is offline, no user operations can
 * be performed with the exception of a system shutdown.
 *
 * @param[in] request_  @ref gpudb::AdminOfflineRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminOfflineResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminOfflineResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminOfflineResponse& adminOffline( const AdminOfflineRequest& request_,
                                    AdminOfflineResponse& response_ ) const;

/**
 * Take the system offline. When the system is offline, no user operations can
 * be performed with the exception of a system shutdown.
 *
 * @param[in] offline  Set to true if desired state is offline.
 *                     Supported values:
 *                     <ul>
 *                         <li>true
 *                         <li>false
 *                     </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_offline_flush_to_disk
 *                             "admin_offline_flush_to_disk": Flush to disk
 *                             when going offline.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_offline_true
 *                                     "admin_offline_true"
 *                                 <li>@ref gpudb::admin_offline_false
 *                                     "admin_offline_false"
 *                             </ul>
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AdminOfflineResponse "Response" object containing the
 *         result of the operation.
 */
AdminOfflineResponse adminOffline( const bool offline,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Take the system offline. When the system is offline, no user operations can
 * be performed with the exception of a system shutdown.
 *
 * @param[in] offline  Set to true if desired state is offline.
 *                     Supported values:
 *                     <ul>
 *                         <li>true
 *                         <li>false
 *                     </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_offline_flush_to_disk
 *                             "admin_offline_flush_to_disk": Flush to disk
 *                             when going offline.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_offline_true
 *                                     "admin_offline_true"
 *                                 <li>@ref gpudb::admin_offline_false
 *                                     "admin_offline_false"
 *                             </ul>
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminOfflineResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminOfflineResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminOfflineResponse& adminOffline( const bool offline,
                                    const std::map<std::string, std::string>& options,
                                    AdminOfflineResponse& response_ ) const;

/**
 * Rebalance the data in the cluster so that all nodes contain an equal number
 * of records approximately and/or rebalance the shards to be equally
 * distributed (as much as possible) across all the ranks.
 *
 * The database must be offline for this operation, see @ref
 * adminOffline(const AdminOfflineRequest&) const "adminOffline"
 *
 * * If @ref adminRebalance(const AdminRebalanceRequest&) const
 * "adminRebalance" is invoked after a change is made to the cluster, e.g., a
 * host was added or removed, <a href="../../../concepts/tables/#sharding"
 * target="_top">sharded data</a> will be evenly redistributed across the
 * cluster by number of shards per rank while unsharded data will be
 * redistributed across the cluster by data size per rank
 * * If @ref adminRebalance(const AdminRebalanceRequest&) const
 * "adminRebalance" is invoked at some point when unsharded data (a.k.a. <a
 * href="../../../concepts/tables/#random-sharding"
 * target="_top">randomly-sharded</a>) in the cluster is unevenly distributed
 * over time, sharded data will not move while unsharded data will be
 * redistributed across the cluster by data size per rank
 *
 * NOTE: Replicated data will not move as a result of this call
 *
 * This endpoint's processing time depends on the amount of data in the system,
 * thus the API call may time out if run directly.  It is recommended to run
 * this endpoint asynchronously via @ref
 * createJob(const CreateJobRequest&) const "createJob".
 *
 * @param[in] request_  @ref gpudb::AdminRebalanceRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminRebalanceResponse "Response" object containing the
 *         result of the operation.
 */
AdminRebalanceResponse adminRebalance( const AdminRebalanceRequest& request_ ) const;

/**
 * Rebalance the data in the cluster so that all nodes contain an equal number
 * of records approximately and/or rebalance the shards to be equally
 * distributed (as much as possible) across all the ranks.
 *
 * The database must be offline for this operation, see @ref
 * adminOffline(const AdminOfflineRequest&) const "adminOffline"
 *
 * * If @ref adminRebalance(const AdminRebalanceRequest&) const
 * "adminRebalance" is invoked after a change is made to the cluster, e.g., a
 * host was added or removed, <a href="../../../concepts/tables/#sharding"
 * target="_top">sharded data</a> will be evenly redistributed across the
 * cluster by number of shards per rank while unsharded data will be
 * redistributed across the cluster by data size per rank
 * * If @ref adminRebalance(const AdminRebalanceRequest&) const
 * "adminRebalance" is invoked at some point when unsharded data (a.k.a. <a
 * href="../../../concepts/tables/#random-sharding"
 * target="_top">randomly-sharded</a>) in the cluster is unevenly distributed
 * over time, sharded data will not move while unsharded data will be
 * redistributed across the cluster by data size per rank
 *
 * NOTE: Replicated data will not move as a result of this call
 *
 * This endpoint's processing time depends on the amount of data in the system,
 * thus the API call may time out if run directly.  It is recommended to run
 * this endpoint asynchronously via @ref
 * createJob(const CreateJobRequest&) const "createJob".
 *
 * @param[in] request_  @ref gpudb::AdminRebalanceRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminRebalanceResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminRebalanceResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminRebalanceResponse& adminRebalance( const AdminRebalanceRequest& request_,
                                        AdminRebalanceResponse& response_ ) const;

/**
 * Rebalance the data in the cluster so that all nodes contain an equal number
 * of records approximately and/or rebalance the shards to be equally
 * distributed (as much as possible) across all the ranks.
 *
 * The database must be offline for this operation, see @ref
 * adminOffline(const bool, const std::map<std::string, std::string>&) const
 * "adminOffline"
 *
 * * If @ref adminRebalance(const std::map<std::string, std::string>&) const
 * "adminRebalance" is invoked after a change is made to the cluster, e.g., a
 * host was added or removed, <a href="../../../concepts/tables/#sharding"
 * target="_top">sharded data</a> will be evenly redistributed across the
 * cluster by number of shards per rank while unsharded data will be
 * redistributed across the cluster by data size per rank
 * * If @ref adminRebalance(const std::map<std::string, std::string>&) const
 * "adminRebalance" is invoked at some point when unsharded data (a.k.a. <a
 * href="../../../concepts/tables/#random-sharding"
 * target="_top">randomly-sharded</a>) in the cluster is unevenly distributed
 * over time, sharded data will not move while unsharded data will be
 * redistributed across the cluster by data size per rank
 *
 * NOTE: Replicated data will not move as a result of this call
 *
 * This endpoint's processing time depends on the amount of data in the system,
 * thus the API call may time out if run directly.  It is recommended to run
 * this endpoint asynchronously via @ref
 * createJob(const std::string&, const std::string&, const std::vector<uint8_t>&, const std::string&, const std::map<std::string, std::string>&) const
 * "createJob".
 *
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::admin_rebalance_rebalance_sharded_data
 *                             "admin_rebalance_rebalance_sharded_data": If
 *                             @ref gpudb::admin_rebalance_true "true", <a
 *                             href="../../../concepts/tables/#sharding"
 *                             target="_top">sharded data</a> will be
 *                             rebalanced approximately equally across the
 *                             cluster. Note that for clusters with large
 *                             amounts of sharded data, this data transfer
 *                             could be time consuming and result in delayed
 *                             query responses.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_rebalance_true
 *                                     "admin_rebalance_true"
 *                                 <li>@ref gpudb::admin_rebalance_false
 *                                     "admin_rebalance_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_rebalance_true
 *                             "admin_rebalance_true".
 *                         <li>@ref
 *                             gpudb::admin_rebalance_rebalance_unsharded_data
 *                             "admin_rebalance_rebalance_unsharded_data": If
 *                             @ref gpudb::admin_rebalance_true "true",
 *                             unsharded data (a.k.a. <a
 *                             href="../../../concepts/tables/#random-sharding"
 *                             target="_top">randomly-sharded</a>) will be
 *                             rebalanced approximately equally across the
 *                             cluster. Note that for clusters with large
 *                             amounts of unsharded data, this data transfer
 *                             could be time consuming and result in delayed
 *                             query responses.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_rebalance_true
 *                                     "admin_rebalance_true"
 *                                 <li>@ref gpudb::admin_rebalance_false
 *                                     "admin_rebalance_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_rebalance_true
 *                             "admin_rebalance_true".
 *                         <li>@ref gpudb::admin_rebalance_table_includes
 *                             "admin_rebalance_table_includes":
 *                             Comma-separated list of unsharded table names to
 *                             rebalance. Not applicable to sharded tables
 *                             because they are always rebalanced. Cannot be
 *                             used simultaneously with @ref
 *                             gpudb::admin_rebalance_table_excludes
 *                             "table_excludes". This parameter is ignored if
 *                             @ref
 *                             gpudb::admin_rebalance_rebalance_unsharded_data
 *                             "rebalance_unsharded_data" is @ref
 *                             gpudb::admin_rebalance_false "false".
 *                         <li>@ref gpudb::admin_rebalance_table_excludes
 *                             "admin_rebalance_table_excludes":
 *                             Comma-separated list of unsharded table names to
 *                             not rebalance. Not applicable to sharded tables
 *                             because they are always rebalanced. Cannot be
 *                             used simultaneously with @ref
 *                             gpudb::admin_rebalance_table_includes
 *                             "table_includes". This parameter is ignored if
 *                             @ref
 *                             gpudb::admin_rebalance_rebalance_unsharded_data
 *                             "rebalance_unsharded_data" is @ref
 *                             gpudb::admin_rebalance_false "false".
 *                         <li>@ref gpudb::admin_rebalance_aggressiveness
 *                             "admin_rebalance_aggressiveness": Influences how
 *                             much data is moved at a time during rebalance.
 *                             A higher @ref
 *                             gpudb::admin_rebalance_aggressiveness
 *                             "aggressiveness" will complete the rebalance
 *                             faster.  A lower @ref
 *                             gpudb::admin_rebalance_aggressiveness
 *                             "aggressiveness" will take longer but allow for
 *                             better interleaving between the rebalance and
 *                             other queries. Valid values are constants from 1
 *                             (lowest) to 10 (highest). The default value is
 *                             '10'.
 *                         <li>@ref
 *                             gpudb::admin_rebalance_compact_after_rebalance
 *                             "admin_rebalance_compact_after_rebalance":
 *                             Perform compaction of deleted records once the
 *                             rebalance completes to reclaim memory and disk
 *                             space. Default is @ref
 *                             gpudb::admin_rebalance_true "true", unless @ref
 *                             gpudb::admin_rebalance_repair_incorrectly_sharded_data
 *                             "repair_incorrectly_sharded_data" is set to @ref
 *                             gpudb::admin_rebalance_true "true".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_rebalance_true
 *                                     "admin_rebalance_true"
 *                                 <li>@ref gpudb::admin_rebalance_false
 *                                     "admin_rebalance_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_rebalance_true
 *                             "admin_rebalance_true".
 *                         <li>@ref gpudb::admin_rebalance_compact_only
 *                             "admin_rebalance_compact_only": If set to @ref
 *                             gpudb::admin_rebalance_true "true", ignore
 *                             rebalance options and attempt to perform
 *                             compaction of deleted records to reclaim memory
 *                             and disk space without rebalancing first.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_rebalance_true
 *                                     "admin_rebalance_true"
 *                                 <li>@ref gpudb::admin_rebalance_false
 *                                     "admin_rebalance_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_rebalance_false
 *                             "admin_rebalance_false".
 *                         <li>@ref
 *                             gpudb::admin_rebalance_repair_incorrectly_sharded_data
 *                             "admin_rebalance_repair_incorrectly_sharded_data":
 *                             Scans for any data sharded incorrectly and
 *                             re-routes the data to the correct location. Only
 *                             necessary if @ref
 *                             adminVerifyDb(const std::map<std::string, std::string>&) const
 *                             "adminVerifyDb" reports an error in sharding
 *                             alignment. This can be done as part of a typical
 *                             rebalance after expanding the cluster or in a
 *                             standalone fashion when it is believed that data
 *                             is sharded incorrectly somewhere in the cluster.
 *                             Compaction will not be performed by default when
 *                             this is enabled. If this option is set to @ref
 *                             gpudb::admin_rebalance_true "true", the time
 *                             necessary to rebalance and the memory used by
 *                             the rebalance may increase.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_rebalance_true
 *                                     "admin_rebalance_true"
 *                                 <li>@ref gpudb::admin_rebalance_false
 *                                     "admin_rebalance_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_rebalance_false
 *                             "admin_rebalance_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AdminRebalanceResponse "Response" object containing the
 *         result of the operation.
 */
AdminRebalanceResponse adminRebalance( const std::map<std::string, std::string>& options ) const;

/**
 * Rebalance the data in the cluster so that all nodes contain an equal number
 * of records approximately and/or rebalance the shards to be equally
 * distributed (as much as possible) across all the ranks.
 *
 * The database must be offline for this operation, see @ref
 * adminOffline(const bool, const std::map<std::string, std::string>&) const
 * "adminOffline"
 *
 * * If @ref adminRebalance(const std::map<std::string, std::string>&) const
 * "adminRebalance" is invoked after a change is made to the cluster, e.g., a
 * host was added or removed, <a href="../../../concepts/tables/#sharding"
 * target="_top">sharded data</a> will be evenly redistributed across the
 * cluster by number of shards per rank while unsharded data will be
 * redistributed across the cluster by data size per rank
 * * If @ref adminRebalance(const std::map<std::string, std::string>&) const
 * "adminRebalance" is invoked at some point when unsharded data (a.k.a. <a
 * href="../../../concepts/tables/#random-sharding"
 * target="_top">randomly-sharded</a>) in the cluster is unevenly distributed
 * over time, sharded data will not move while unsharded data will be
 * redistributed across the cluster by data size per rank
 *
 * NOTE: Replicated data will not move as a result of this call
 *
 * This endpoint's processing time depends on the amount of data in the system,
 * thus the API call may time out if run directly.  It is recommended to run
 * this endpoint asynchronously via @ref
 * createJob(const std::string&, const std::string&, const std::vector<uint8_t>&, const std::string&, const std::map<std::string, std::string>&) const
 * "createJob".
 *
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::admin_rebalance_rebalance_sharded_data
 *                             "admin_rebalance_rebalance_sharded_data": If
 *                             @ref gpudb::admin_rebalance_true "true", <a
 *                             href="../../../concepts/tables/#sharding"
 *                             target="_top">sharded data</a> will be
 *                             rebalanced approximately equally across the
 *                             cluster. Note that for clusters with large
 *                             amounts of sharded data, this data transfer
 *                             could be time consuming and result in delayed
 *                             query responses.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_rebalance_true
 *                                     "admin_rebalance_true"
 *                                 <li>@ref gpudb::admin_rebalance_false
 *                                     "admin_rebalance_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_rebalance_true
 *                             "admin_rebalance_true".
 *                         <li>@ref
 *                             gpudb::admin_rebalance_rebalance_unsharded_data
 *                             "admin_rebalance_rebalance_unsharded_data": If
 *                             @ref gpudb::admin_rebalance_true "true",
 *                             unsharded data (a.k.a. <a
 *                             href="../../../concepts/tables/#random-sharding"
 *                             target="_top">randomly-sharded</a>) will be
 *                             rebalanced approximately equally across the
 *                             cluster. Note that for clusters with large
 *                             amounts of unsharded data, this data transfer
 *                             could be time consuming and result in delayed
 *                             query responses.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_rebalance_true
 *                                     "admin_rebalance_true"
 *                                 <li>@ref gpudb::admin_rebalance_false
 *                                     "admin_rebalance_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_rebalance_true
 *                             "admin_rebalance_true".
 *                         <li>@ref gpudb::admin_rebalance_table_includes
 *                             "admin_rebalance_table_includes":
 *                             Comma-separated list of unsharded table names to
 *                             rebalance. Not applicable to sharded tables
 *                             because they are always rebalanced. Cannot be
 *                             used simultaneously with @ref
 *                             gpudb::admin_rebalance_table_excludes
 *                             "table_excludes". This parameter is ignored if
 *                             @ref
 *                             gpudb::admin_rebalance_rebalance_unsharded_data
 *                             "rebalance_unsharded_data" is @ref
 *                             gpudb::admin_rebalance_false "false".
 *                         <li>@ref gpudb::admin_rebalance_table_excludes
 *                             "admin_rebalance_table_excludes":
 *                             Comma-separated list of unsharded table names to
 *                             not rebalance. Not applicable to sharded tables
 *                             because they are always rebalanced. Cannot be
 *                             used simultaneously with @ref
 *                             gpudb::admin_rebalance_table_includes
 *                             "table_includes". This parameter is ignored if
 *                             @ref
 *                             gpudb::admin_rebalance_rebalance_unsharded_data
 *                             "rebalance_unsharded_data" is @ref
 *                             gpudb::admin_rebalance_false "false".
 *                         <li>@ref gpudb::admin_rebalance_aggressiveness
 *                             "admin_rebalance_aggressiveness": Influences how
 *                             much data is moved at a time during rebalance.
 *                             A higher @ref
 *                             gpudb::admin_rebalance_aggressiveness
 *                             "aggressiveness" will complete the rebalance
 *                             faster.  A lower @ref
 *                             gpudb::admin_rebalance_aggressiveness
 *                             "aggressiveness" will take longer but allow for
 *                             better interleaving between the rebalance and
 *                             other queries. Valid values are constants from 1
 *                             (lowest) to 10 (highest). The default value is
 *                             '10'.
 *                         <li>@ref
 *                             gpudb::admin_rebalance_compact_after_rebalance
 *                             "admin_rebalance_compact_after_rebalance":
 *                             Perform compaction of deleted records once the
 *                             rebalance completes to reclaim memory and disk
 *                             space. Default is @ref
 *                             gpudb::admin_rebalance_true "true", unless @ref
 *                             gpudb::admin_rebalance_repair_incorrectly_sharded_data
 *                             "repair_incorrectly_sharded_data" is set to @ref
 *                             gpudb::admin_rebalance_true "true".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_rebalance_true
 *                                     "admin_rebalance_true"
 *                                 <li>@ref gpudb::admin_rebalance_false
 *                                     "admin_rebalance_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_rebalance_true
 *                             "admin_rebalance_true".
 *                         <li>@ref gpudb::admin_rebalance_compact_only
 *                             "admin_rebalance_compact_only": If set to @ref
 *                             gpudb::admin_rebalance_true "true", ignore
 *                             rebalance options and attempt to perform
 *                             compaction of deleted records to reclaim memory
 *                             and disk space without rebalancing first.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_rebalance_true
 *                                     "admin_rebalance_true"
 *                                 <li>@ref gpudb::admin_rebalance_false
 *                                     "admin_rebalance_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_rebalance_false
 *                             "admin_rebalance_false".
 *                         <li>@ref
 *                             gpudb::admin_rebalance_repair_incorrectly_sharded_data
 *                             "admin_rebalance_repair_incorrectly_sharded_data":
 *                             Scans for any data sharded incorrectly and
 *                             re-routes the data to the correct location. Only
 *                             necessary if @ref
 *                             adminVerifyDb(const std::map<std::string, std::string>&) const
 *                             "adminVerifyDb" reports an error in sharding
 *                             alignment. This can be done as part of a typical
 *                             rebalance after expanding the cluster or in a
 *                             standalone fashion when it is believed that data
 *                             is sharded incorrectly somewhere in the cluster.
 *                             Compaction will not be performed by default when
 *                             this is enabled. If this option is set to @ref
 *                             gpudb::admin_rebalance_true "true", the time
 *                             necessary to rebalance and the memory used by
 *                             the rebalance may increase.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_rebalance_true
 *                                     "admin_rebalance_true"
 *                                 <li>@ref gpudb::admin_rebalance_false
 *                                     "admin_rebalance_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_rebalance_false
 *                             "admin_rebalance_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminRebalanceResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminRebalanceResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminRebalanceResponse& adminRebalance( const std::map<std::string, std::string>& options,
                                        AdminRebalanceResponse& response_ ) const;

/**
 * Removes a host from an existing cluster. If the host to be removed has any
 * ranks running on it, the ranks must be removed using @ref
 * adminRemoveRanks(const AdminRemoveRanksRequest&) const "adminRemoveRanks" or
 * manually switched over to a new host using @ref
 * adminSwitchover(const AdminSwitchoverRequest&) const "adminSwitchover" prior
 * to host removal. If the host to be removed has the graph server or SQL
 * planner running on it, these must be manually switched over to a new host
 * using @ref adminSwitchover(const AdminSwitchoverRequest&) const
 * "adminSwitchover".
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::AdminRemoveHostRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminRemoveHostResponse "Response" object containing the
 *         result of the operation.
 */
AdminRemoveHostResponse adminRemoveHost( const AdminRemoveHostRequest& request_ ) const;

/**
 * Removes a host from an existing cluster. If the host to be removed has any
 * ranks running on it, the ranks must be removed using @ref
 * adminRemoveRanks(const AdminRemoveRanksRequest&) const "adminRemoveRanks" or
 * manually switched over to a new host using @ref
 * adminSwitchover(const AdminSwitchoverRequest&) const "adminSwitchover" prior
 * to host removal. If the host to be removed has the graph server or SQL
 * planner running on it, these must be manually switched over to a new host
 * using @ref adminSwitchover(const AdminSwitchoverRequest&) const
 * "adminSwitchover".
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::AdminRemoveHostRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminRemoveHostResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminRemoveHostResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminRemoveHostResponse& adminRemoveHost( const AdminRemoveHostRequest& request_,
                                          AdminRemoveHostResponse& response_ ) const;

/**
 * Removes a host from an existing cluster. If the host to be removed has any
 * ranks running on it, the ranks must be removed using @ref
 * adminRemoveRanks(const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "adminRemoveRanks" or manually switched over to a new host using @ref
 * adminSwitchover(const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "adminSwitchover" prior to host removal. If the host to be removed has the
 * graph server or SQL planner running on it, these must be manually switched
 * over to a new host using @ref
 * adminSwitchover(const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "adminSwitchover".
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] host  Identifies the host this applies to. Can be the host
 *                  address, or formatted as 'hostN' where N is the host number
 *                  as specified in gpudb.conf
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_remove_host_dry_run
 *                             "admin_remove_host_dry_run": If set to @ref
 *                             gpudb::admin_remove_host_true "true", only
 *                             validation checks will be performed. No host is
 *                             removed.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_remove_host_true
 *                                     "admin_remove_host_true"
 *                                 <li>@ref gpudb::admin_remove_host_false
 *                                     "admin_remove_host_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_remove_host_false
 *                             "admin_remove_host_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AdminRemoveHostResponse "Response" object containing the
 *         result of the operation.
 */
AdminRemoveHostResponse adminRemoveHost( const std::string& host,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Removes a host from an existing cluster. If the host to be removed has any
 * ranks running on it, the ranks must be removed using @ref
 * adminRemoveRanks(const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "adminRemoveRanks" or manually switched over to a new host using @ref
 * adminSwitchover(const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "adminSwitchover" prior to host removal. If the host to be removed has the
 * graph server or SQL planner running on it, these must be manually switched
 * over to a new host using @ref
 * adminSwitchover(const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "adminSwitchover".
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] host  Identifies the host this applies to. Can be the host
 *                  address, or formatted as 'hostN' where N is the host number
 *                  as specified in gpudb.conf
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_remove_host_dry_run
 *                             "admin_remove_host_dry_run": If set to @ref
 *                             gpudb::admin_remove_host_true "true", only
 *                             validation checks will be performed. No host is
 *                             removed.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_remove_host_true
 *                                     "admin_remove_host_true"
 *                                 <li>@ref gpudb::admin_remove_host_false
 *                                     "admin_remove_host_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_remove_host_false
 *                             "admin_remove_host_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminRemoveHostResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminRemoveHostResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminRemoveHostResponse& adminRemoveHost( const std::string& host,
                                          const std::map<std::string, std::string>& options,
                                          AdminRemoveHostResponse& response_ ) const;

/**
 * Remove one or more ranks from an existing Kinetica cluster. All data will be
 * rebalanced to other ranks before the rank(s) is removed unless the @ref
 * gpudb::admin_remove_ranks_rebalance_sharded_data "rebalance_sharded_data" or
 * @ref gpudb::admin_remove_ranks_rebalance_unsharded_data
 * "rebalance_unsharded_data" parameters are set to @ref
 * gpudb::admin_remove_ranks_false "false" in the @ref
 * gpudb::AdminRemoveRanksRequest::options "options", in which case the
 * corresponding <a href="../../../concepts/tables/#sharding"
 * target="_top">sharded data</a> and/or unsharded data (a.k.a. <a
 * href="../../../concepts/tables/#random-sharding"
 * target="_top">randomly-sharded</a>) will be deleted.
 *
 * The database must be offline for this operation, see @ref
 * adminOffline(const AdminOfflineRequest&) const "adminOffline"
 *
 * This endpoint's processing time depends on the amount of data in the system,
 * thus the API call may time out if run directly.  It is recommended to run
 * this endpoint asynchronously via @ref
 * createJob(const CreateJobRequest&) const "createJob".
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::AdminRemoveRanksRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminRemoveRanksResponse "Response" object containing
 *         the result of the operation.
 */
AdminRemoveRanksResponse adminRemoveRanks( const AdminRemoveRanksRequest& request_ ) const;

/**
 * Remove one or more ranks from an existing Kinetica cluster. All data will be
 * rebalanced to other ranks before the rank(s) is removed unless the @ref
 * gpudb::admin_remove_ranks_rebalance_sharded_data "rebalance_sharded_data" or
 * @ref gpudb::admin_remove_ranks_rebalance_unsharded_data
 * "rebalance_unsharded_data" parameters are set to @ref
 * gpudb::admin_remove_ranks_false "false" in the @ref
 * gpudb::AdminRemoveRanksRequest::options "options", in which case the
 * corresponding <a href="../../../concepts/tables/#sharding"
 * target="_top">sharded data</a> and/or unsharded data (a.k.a. <a
 * href="../../../concepts/tables/#random-sharding"
 * target="_top">randomly-sharded</a>) will be deleted.
 *
 * The database must be offline for this operation, see @ref
 * adminOffline(const AdminOfflineRequest&) const "adminOffline"
 *
 * This endpoint's processing time depends on the amount of data in the system,
 * thus the API call may time out if run directly.  It is recommended to run
 * this endpoint asynchronously via @ref
 * createJob(const CreateJobRequest&) const "createJob".
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::AdminRemoveRanksRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminRemoveRanksResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AdminRemoveRanksResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AdminRemoveRanksResponse& adminRemoveRanks( const AdminRemoveRanksRequest& request_,
                                            AdminRemoveRanksResponse& response_ ) const;

/**
 * Remove one or more ranks from an existing Kinetica cluster. All data will be
 * rebalanced to other ranks before the rank(s) is removed unless the @ref
 * gpudb::admin_remove_ranks_rebalance_sharded_data "rebalance_sharded_data" or
 * @ref gpudb::admin_remove_ranks_rebalance_unsharded_data
 * "rebalance_unsharded_data" parameters are set to @ref
 * gpudb::admin_remove_ranks_false "false" in the @a options, in which case the
 * corresponding <a href="../../../concepts/tables/#sharding"
 * target="_top">sharded data</a> and/or unsharded data (a.k.a. <a
 * href="../../../concepts/tables/#random-sharding"
 * target="_top">randomly-sharded</a>) will be deleted.
 *
 * The database must be offline for this operation, see @ref
 * adminOffline(const bool, const std::map<std::string, std::string>&) const
 * "adminOffline"
 *
 * This endpoint's processing time depends on the amount of data in the system,
 * thus the API call may time out if run directly.  It is recommended to run
 * this endpoint asynchronously via @ref
 * createJob(const std::string&, const std::string&, const std::vector<uint8_t>&, const std::string&, const std::map<std::string, std::string>&) const
 * "createJob".
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] ranks  Each array value designates one or more ranks to remove
 *                   from the cluster. Values can be formatted as 'rankN' for a
 *                   specific rank, 'hostN' (from the gpudb.conf file) to
 *                   remove all ranks on that host, or the host IP address
 *                   (hostN.address from the gpub.conf file) which also removes
 *                   all ranks on that host. Rank 0 (the head rank) cannot be
 *                   removed (but can be moved to another host using @ref
 *                   adminSwitchover(const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                   "adminSwitchover"). At least one worker rank must be left
 *                   in the cluster after the operation.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::admin_remove_ranks_rebalance_sharded_data
 *                             "admin_remove_ranks_rebalance_sharded_data": If
 *                             @ref gpudb::admin_remove_ranks_true "true", <a
 *                             href="../../../concepts/tables/#sharding"
 *                             target="_top">sharded data</a> will be
 *                             rebalanced approximately equally across the
 *                             cluster. Note that for clusters with large
 *                             amounts of sharded data, this data transfer
 *                             could be time consuming and result in delayed
 *                             query responses.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_remove_ranks_true
 *                                     "admin_remove_ranks_true"
 *                                 <li>@ref gpudb::admin_remove_ranks_false
 *                                     "admin_remove_ranks_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_remove_ranks_true
 *                             "admin_remove_ranks_true".
 *                         <li>@ref
 *                             gpudb::admin_remove_ranks_rebalance_unsharded_data
 *                             "admin_remove_ranks_rebalance_unsharded_data":
 *                             If @ref gpudb::admin_remove_ranks_true "true",
 *                             unsharded data (a.k.a. <a
 *                             href="../../../concepts/tables/#random-sharding"
 *                             target="_top">randomly-sharded</a>) will be
 *                             rebalanced approximately equally across the
 *                             cluster. Note that for clusters with large
 *                             amounts of unsharded data, this data transfer
 *                             could be time consuming and result in delayed
 *                             query responses.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_remove_ranks_true
 *                                     "admin_remove_ranks_true"
 *                                 <li>@ref gpudb::admin_remove_ranks_false
 *                                     "admin_remove_ranks_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_remove_ranks_true
 *                             "admin_remove_ranks_true".
 *                         <li>@ref gpudb::admin_remove_ranks_aggressiveness
 *                             "admin_remove_ranks_aggressiveness": Influences
 *                             how much data is moved at a time during
 *                             rebalance.  A higher @ref
 *                             gpudb::admin_remove_ranks_aggressiveness
 *                             "aggressiveness" will complete the rebalance
 *                             faster.  A lower @ref
 *                             gpudb::admin_remove_ranks_aggressiveness
 *                             "aggressiveness" will take longer but allow for
 *                             better interleaving between the rebalance and
 *                             other queries. Valid values are constants from 1
 *                             (lowest) to 10 (highest). The default value is
 *                             '10'.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AdminRemoveRanksResponse "Response" object containing
 *         the result of the operation.
 */
AdminRemoveRanksResponse adminRemoveRanks( const std::vector<std::string>& ranks,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Remove one or more ranks from an existing Kinetica cluster. All data will be
 * rebalanced to other ranks before the rank(s) is removed unless the @ref
 * gpudb::admin_remove_ranks_rebalance_sharded_data "rebalance_sharded_data" or
 * @ref gpudb::admin_remove_ranks_rebalance_unsharded_data
 * "rebalance_unsharded_data" parameters are set to @ref
 * gpudb::admin_remove_ranks_false "false" in the @a options, in which case the
 * corresponding <a href="../../../concepts/tables/#sharding"
 * target="_top">sharded data</a> and/or unsharded data (a.k.a. <a
 * href="../../../concepts/tables/#random-sharding"
 * target="_top">randomly-sharded</a>) will be deleted.
 *
 * The database must be offline for this operation, see @ref
 * adminOffline(const bool, const std::map<std::string, std::string>&) const
 * "adminOffline"
 *
 * This endpoint's processing time depends on the amount of data in the system,
 * thus the API call may time out if run directly.  It is recommended to run
 * this endpoint asynchronously via @ref
 * createJob(const std::string&, const std::string&, const std::vector<uint8_t>&, const std::string&, const std::map<std::string, std::string>&) const
 * "createJob".
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] ranks  Each array value designates one or more ranks to remove
 *                   from the cluster. Values can be formatted as 'rankN' for a
 *                   specific rank, 'hostN' (from the gpudb.conf file) to
 *                   remove all ranks on that host, or the host IP address
 *                   (hostN.address from the gpub.conf file) which also removes
 *                   all ranks on that host. Rank 0 (the head rank) cannot be
 *                   removed (but can be moved to another host using @ref
 *                   adminSwitchover(const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                   "adminSwitchover"). At least one worker rank must be left
 *                   in the cluster after the operation.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::admin_remove_ranks_rebalance_sharded_data
 *                             "admin_remove_ranks_rebalance_sharded_data": If
 *                             @ref gpudb::admin_remove_ranks_true "true", <a
 *                             href="../../../concepts/tables/#sharding"
 *                             target="_top">sharded data</a> will be
 *                             rebalanced approximately equally across the
 *                             cluster. Note that for clusters with large
 *                             amounts of sharded data, this data transfer
 *                             could be time consuming and result in delayed
 *                             query responses.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_remove_ranks_true
 *                                     "admin_remove_ranks_true"
 *                                 <li>@ref gpudb::admin_remove_ranks_false
 *                                     "admin_remove_ranks_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_remove_ranks_true
 *                             "admin_remove_ranks_true".
 *                         <li>@ref
 *                             gpudb::admin_remove_ranks_rebalance_unsharded_data
 *                             "admin_remove_ranks_rebalance_unsharded_data":
 *                             If @ref gpudb::admin_remove_ranks_true "true",
 *                             unsharded data (a.k.a. <a
 *                             href="../../../concepts/tables/#random-sharding"
 *                             target="_top">randomly-sharded</a>) will be
 *                             rebalanced approximately equally across the
 *                             cluster. Note that for clusters with large
 *                             amounts of unsharded data, this data transfer
 *                             could be time consuming and result in delayed
 *                             query responses.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_remove_ranks_true
 *                                     "admin_remove_ranks_true"
 *                                 <li>@ref gpudb::admin_remove_ranks_false
 *                                     "admin_remove_ranks_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_remove_ranks_true
 *                             "admin_remove_ranks_true".
 *                         <li>@ref gpudb::admin_remove_ranks_aggressiveness
 *                             "admin_remove_ranks_aggressiveness": Influences
 *                             how much data is moved at a time during
 *                             rebalance.  A higher @ref
 *                             gpudb::admin_remove_ranks_aggressiveness
 *                             "aggressiveness" will complete the rebalance
 *                             faster.  A lower @ref
 *                             gpudb::admin_remove_ranks_aggressiveness
 *                             "aggressiveness" will take longer but allow for
 *                             better interleaving between the rebalance and
 *                             other queries. Valid values are constants from 1
 *                             (lowest) to 10 (highest). The default value is
 *                             '10'.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminRemoveRanksResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AdminRemoveRanksResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AdminRemoveRanksResponse& adminRemoveRanks( const std::vector<std::string>& ranks,
                                            const std::map<std::string, std::string>& options,
                                            AdminRemoveRanksResponse& response_ ) const;

/**
 * Manually repair a corrupted table.
 * Returns information about affected tables.
 *
 * @param[in] request_  @ref gpudb::AdminRepairTableRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminRepairTableResponse "Response" object containing
 *         the result of the operation.
 */
AdminRepairTableResponse adminRepairTable( const AdminRepairTableRequest& request_ ) const;

/**
 * Manually repair a corrupted table.
 * Returns information about affected tables.
 *
 * @param[in] request_  @ref gpudb::AdminRepairTableRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminRepairTableResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AdminRepairTableResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AdminRepairTableResponse& adminRepairTable( const AdminRepairTableRequest& request_,
                                            AdminRepairTableResponse& response_ ) const;

/**
 * Manually repair a corrupted table.
 * Returns information about affected tables.
 *
 * @param[in] tableNames  List of tables to query. An asterisk returns all
 *                        tables.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_repair_table_repair_policy
 *                             "admin_repair_table_repair_policy": Corrective
 *                             action to take.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::admin_repair_table_delete_chunks
 *                                     "admin_repair_table_delete_chunks":
 *                                     Deletes any corrupted chunks
 *                                 <li>@ref
 *                                     gpudb::admin_repair_table_shrink_columns
 *                                     "admin_repair_table_shrink_columns":
 *                                     Shrinks corrupted chunks to the shortest
 *                                     column
 *                                 <li>@ref
 *                                     gpudb::admin_repair_table_replay_wal
 *                                     "admin_repair_table_replay_wal":
 *                                     Manually invokes wal replay on the table
 *                             </ul>
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AdminRepairTableResponse "Response" object containing
 *         the result of the operation.
 */
AdminRepairTableResponse adminRepairTable( const std::vector<std::string>& tableNames,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Manually repair a corrupted table.
 * Returns information about affected tables.
 *
 * @param[in] tableNames  List of tables to query. An asterisk returns all
 *                        tables.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_repair_table_repair_policy
 *                             "admin_repair_table_repair_policy": Corrective
 *                             action to take.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::admin_repair_table_delete_chunks
 *                                     "admin_repair_table_delete_chunks":
 *                                     Deletes any corrupted chunks
 *                                 <li>@ref
 *                                     gpudb::admin_repair_table_shrink_columns
 *                                     "admin_repair_table_shrink_columns":
 *                                     Shrinks corrupted chunks to the shortest
 *                                     column
 *                                 <li>@ref
 *                                     gpudb::admin_repair_table_replay_wal
 *                                     "admin_repair_table_replay_wal":
 *                                     Manually invokes wal replay on the table
 *                             </ul>
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminRepairTableResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AdminRepairTableResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AdminRepairTableResponse& adminRepairTable( const std::vector<std::string>& tableNames,
                                            const std::map<std::string, std::string>& options,
                                            AdminRepairTableResponse& response_ ) const;

/**
 * Requests a list of the most recent alerts.
 * Returns lists of alert data, including timestamp and type.
 *
 * @param[in] request_  @ref gpudb::AdminShowAlertsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminShowAlertsResponse "Response" object containing the
 *         result of the operation.
 */
AdminShowAlertsResponse adminShowAlerts( const AdminShowAlertsRequest& request_ ) const;

/**
 * Requests a list of the most recent alerts.
 * Returns lists of alert data, including timestamp and type.
 *
 * @param[in] request_  @ref gpudb::AdminShowAlertsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminShowAlertsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminShowAlertsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminShowAlertsResponse& adminShowAlerts( const AdminShowAlertsRequest& request_,
                                          AdminShowAlertsResponse& response_ ) const;

/**
 * Requests a list of the most recent alerts.
 * Returns lists of alert data, including timestamp and type.
 *
 * @param[in] numAlerts  Number of most recent alerts to request. The response
 *                       will include up to @a numAlerts depending on how many
 *                       alerts there are in the system. A value of 0 returns
 *                       all stored alerts.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AdminShowAlertsResponse "Response" object containing the
 *         result of the operation.
 */
AdminShowAlertsResponse adminShowAlerts( const int32_t numAlerts,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Requests a list of the most recent alerts.
 * Returns lists of alert data, including timestamp and type.
 *
 * @param[in] numAlerts  Number of most recent alerts to request. The response
 *                       will include up to @a numAlerts depending on how many
 *                       alerts there are in the system. A value of 0 returns
 *                       all stored alerts.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminShowAlertsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminShowAlertsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminShowAlertsResponse& adminShowAlerts( const int32_t numAlerts,
                                          const std::map<std::string, std::string>& options,
                                          AdminShowAlertsResponse& response_ ) const;

/**
 * Requests the detailed status of the current operation (by default) or a
 * prior cluster operation specified by @ref
 * gpudb::AdminShowClusterOperationsRequest::historyIndex "historyIndex".
 * Returns details on the requested cluster operation.
 *
 * The response will also indicate how many cluster operations are stored in
 * the history.
 *
 * @param[in] request_  @ref gpudb::AdminShowClusterOperationsRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminShowClusterOperationsResponse "Response" object
 *         containing the result of the operation.
 */
AdminShowClusterOperationsResponse adminShowClusterOperations( const AdminShowClusterOperationsRequest& request_ ) const;

/**
 * Requests the detailed status of the current operation (by default) or a
 * prior cluster operation specified by @ref
 * gpudb::AdminShowClusterOperationsRequest::historyIndex "historyIndex".
 * Returns details on the requested cluster operation.
 *
 * The response will also indicate how many cluster operations are stored in
 * the history.
 *
 * @param[in] request_  @ref gpudb::AdminShowClusterOperationsRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminShowClusterOperationsResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::AdminShowClusterOperationsResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
AdminShowClusterOperationsResponse& adminShowClusterOperations( const AdminShowClusterOperationsRequest& request_,
                                                                AdminShowClusterOperationsResponse& response_ ) const;

/**
 * Requests the detailed status of the current operation (by default) or a
 * prior cluster operation specified by @a historyIndex.
 * Returns details on the requested cluster operation.
 *
 * The response will also indicate how many cluster operations are stored in
 * the history.
 *
 * @param[in] historyIndex  Indicates which cluster operation to retrieve.  Use
 *                          0 for the most recent. The default value is 0.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AdminShowClusterOperationsResponse "Response" object
 *         containing the result of the operation.
 */
AdminShowClusterOperationsResponse adminShowClusterOperations( const int32_t historyIndex,
                                                               const std::map<std::string, std::string>& options ) const;

/**
 * Requests the detailed status of the current operation (by default) or a
 * prior cluster operation specified by @a historyIndex.
 * Returns details on the requested cluster operation.
 *
 * The response will also indicate how many cluster operations are stored in
 * the history.
 *
 * @param[in] historyIndex  Indicates which cluster operation to retrieve.  Use
 *                          0 for the most recent. The default value is 0.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminShowClusterOperationsResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::AdminShowClusterOperationsResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
AdminShowClusterOperationsResponse& adminShowClusterOperations( const int32_t historyIndex,
                                                                const std::map<std::string, std::string>& options,
                                                                AdminShowClusterOperationsResponse& response_ ) const;

/**
 * Get a list of the current jobs in GPUdb.
 *
 * @param[in] request_  @ref gpudb::AdminShowJobsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminShowJobsResponse "Response" object containing the
 *         result of the operation.
 */
AdminShowJobsResponse adminShowJobs( const AdminShowJobsRequest& request_ ) const;

/**
 * Get a list of the current jobs in GPUdb.
 *
 * @param[in] request_  @ref gpudb::AdminShowJobsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminShowJobsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminShowJobsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminShowJobsResponse& adminShowJobs( const AdminShowJobsRequest& request_,
                                      AdminShowJobsResponse& response_ ) const;

/**
 * Get a list of the current jobs in GPUdb.
 *
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_show_jobs_show_async_jobs
 *                             "admin_show_jobs_show_async_jobs": If @ref
 *                             gpudb::admin_show_jobs_true "true", then the
 *                             completed async jobs are also included in the
 *                             response. By default, once the async jobs are
 *                             completed they are no longer included in the
 *                             jobs list.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_show_jobs_true
 *                                     "admin_show_jobs_true"
 *                                 <li>@ref gpudb::admin_show_jobs_false
 *                                     "admin_show_jobs_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_show_jobs_false
 *                             "admin_show_jobs_false".
 *                         <li>@ref gpudb::admin_show_jobs_show_worker_info
 *                             "admin_show_jobs_show_worker_info": If @ref
 *                             gpudb::admin_show_jobs_true "true", then
 *                             information is also returned from worker ranks.
 *                             By default only status from the head rank is
 *                             returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_show_jobs_true
 *                                     "admin_show_jobs_true"
 *                                 <li>@ref gpudb::admin_show_jobs_false
 *                                     "admin_show_jobs_false"
 *                             </ul>
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AdminShowJobsResponse "Response" object containing the
 *         result of the operation.
 */
AdminShowJobsResponse adminShowJobs( const std::map<std::string, std::string>& options ) const;

/**
 * Get a list of the current jobs in GPUdb.
 *
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_show_jobs_show_async_jobs
 *                             "admin_show_jobs_show_async_jobs": If @ref
 *                             gpudb::admin_show_jobs_true "true", then the
 *                             completed async jobs are also included in the
 *                             response. By default, once the async jobs are
 *                             completed they are no longer included in the
 *                             jobs list.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_show_jobs_true
 *                                     "admin_show_jobs_true"
 *                                 <li>@ref gpudb::admin_show_jobs_false
 *                                     "admin_show_jobs_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_show_jobs_false
 *                             "admin_show_jobs_false".
 *                         <li>@ref gpudb::admin_show_jobs_show_worker_info
 *                             "admin_show_jobs_show_worker_info": If @ref
 *                             gpudb::admin_show_jobs_true "true", then
 *                             information is also returned from worker ranks.
 *                             By default only status from the head rank is
 *                             returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_show_jobs_true
 *                                     "admin_show_jobs_true"
 *                                 <li>@ref gpudb::admin_show_jobs_false
 *                                     "admin_show_jobs_false"
 *                             </ul>
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminShowJobsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminShowJobsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminShowJobsResponse& adminShowJobs( const std::map<std::string, std::string>& options,
                                      AdminShowJobsResponse& response_ ) const;

/**
 * Show the mapping of shards to the corresponding rank and tom.  The response
 * message contains list of 16384 (total number of shards in the system) Rank
 * and TOM numbers corresponding to each shard.
 *
 * @param[in] request_  @ref gpudb::AdminShowShardsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminShowShardsResponse "Response" object containing the
 *         result of the operation.
 */
AdminShowShardsResponse adminShowShards( const AdminShowShardsRequest& request_ ) const;

/**
 * Show the mapping of shards to the corresponding rank and tom.  The response
 * message contains list of 16384 (total number of shards in the system) Rank
 * and TOM numbers corresponding to each shard.
 *
 * @param[in] request_  @ref gpudb::AdminShowShardsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminShowShardsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminShowShardsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminShowShardsResponse& adminShowShards( const AdminShowShardsRequest& request_,
                                          AdminShowShardsResponse& response_ ) const;

/**
 * Show the mapping of shards to the corresponding rank and tom.  The response
 * message contains list of 16384 (total number of shards in the system) Rank
 * and TOM numbers corresponding to each shard.
 *
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AdminShowShardsResponse "Response" object containing the
 *         result of the operation.
 */
AdminShowShardsResponse adminShowShards( const std::map<std::string, std::string>& options ) const;

/**
 * Show the mapping of shards to the corresponding rank and tom.  The response
 * message contains list of 16384 (total number of shards in the system) Rank
 * and TOM numbers corresponding to each shard.
 *
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminShowShardsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminShowShardsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminShowShardsResponse& adminShowShards( const std::map<std::string, std::string>& options,
                                          AdminShowShardsResponse& response_ ) const;

/**
 * Exits the database server application.
 *
 * @param[in] request_  @ref gpudb::AdminShutdownRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminShutdownResponse "Response" object containing the
 *         result of the operation.
 */
AdminShutdownResponse adminShutdown( const AdminShutdownRequest& request_ ) const;

/**
 * Exits the database server application.
 *
 * @param[in] request_  @ref gpudb::AdminShutdownRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminShutdownResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminShutdownResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminShutdownResponse& adminShutdown( const AdminShutdownRequest& request_,
                                      AdminShutdownResponse& response_ ) const;

/**
 * Exits the database server application.
 *
 * @param[in] exitType  Reserved for future use. User can pass an empty string.
 * @param[in] authorization  No longer used. User can pass an empty string.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AdminShutdownResponse "Response" object containing the
 *         result of the operation.
 */
AdminShutdownResponse adminShutdown( const std::string& exitType,
                                     const std::string& authorization,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Exits the database server application.
 *
 * @param[in] exitType  Reserved for future use. User can pass an empty string.
 * @param[in] authorization  No longer used. User can pass an empty string.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminShutdownResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminShutdownResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminShutdownResponse& adminShutdown( const std::string& exitType,
                                      const std::string& authorization,
                                      const std::map<std::string, std::string>& options,
                                      AdminShutdownResponse& response_ ) const;

/**
 * Manually switch over one or more processes to another host. Individual ranks
 * or entire hosts may be moved to another host.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::AdminSwitchoverRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminSwitchoverResponse "Response" object containing the
 *         result of the operation.
 */
AdminSwitchoverResponse adminSwitchover( const AdminSwitchoverRequest& request_ ) const;

/**
 * Manually switch over one or more processes to another host. Individual ranks
 * or entire hosts may be moved to another host.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::AdminSwitchoverRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminSwitchoverResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminSwitchoverResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminSwitchoverResponse& adminSwitchover( const AdminSwitchoverRequest& request_,
                                          AdminSwitchoverResponse& response_ ) const;

/**
 * Manually switch over one or more processes to another host. Individual ranks
 * or entire hosts may be moved to another host.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] processes  Indicates the process identifier to switch over to
 *                       another host. Options are 'hostN' and 'rankN' where
 *                       'N' corresponds to the number associated with a host
 *                       or rank in the <a
 *                       href="../../../config/#config-main-network"
 *                       target="_top">Network</a> section of the gpudb.conf
 *                       file; e.g., 'host[N].address' or 'rank[N].host'. If
 *                       'hostN' is provided, all processes on that host will
 *                       be moved to another host. Each entry in this array
 *                       will be switched over to the corresponding host entry
 *                       at the same index in @a destinations.
 * @param[in] destinations  Indicates to which host to switch over each
 *                          corresponding process given in @a processes. Each
 *                          index must be specified as 'hostN' where 'N'
 *                          corresponds to the number associated with a host or
 *                          rank in the <a
 *                          href="../../../config/#config-main-network"
 *                          target="_top">Network</a> section of the gpudb.conf
 *                          file; e.g., 'host[N].address'. Each entry in this
 *                          array will receive the corresponding process entry
 *                          at the same index in @a processes.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_switchover_dry_run
 *                             "admin_switchover_dry_run": If set to @ref
 *                             gpudb::admin_switchover_true "true", only
 *                             validation checks will be performed. Nothing is
 *                             switched over.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_switchover_true
 *                                     "admin_switchover_true"
 *                                 <li>@ref gpudb::admin_switchover_false
 *                                     "admin_switchover_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_switchover_false
 *                             "admin_switchover_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AdminSwitchoverResponse "Response" object containing the
 *         result of the operation.
 */
AdminSwitchoverResponse adminSwitchover( const std::vector<std::string>& processes,
                                         const std::vector<std::string>& destinations,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Manually switch over one or more processes to another host. Individual ranks
 * or entire hosts may be moved to another host.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] processes  Indicates the process identifier to switch over to
 *                       another host. Options are 'hostN' and 'rankN' where
 *                       'N' corresponds to the number associated with a host
 *                       or rank in the <a
 *                       href="../../../config/#config-main-network"
 *                       target="_top">Network</a> section of the gpudb.conf
 *                       file; e.g., 'host[N].address' or 'rank[N].host'. If
 *                       'hostN' is provided, all processes on that host will
 *                       be moved to another host. Each entry in this array
 *                       will be switched over to the corresponding host entry
 *                       at the same index in @a destinations.
 * @param[in] destinations  Indicates to which host to switch over each
 *                          corresponding process given in @a processes. Each
 *                          index must be specified as 'hostN' where 'N'
 *                          corresponds to the number associated with a host or
 *                          rank in the <a
 *                          href="../../../config/#config-main-network"
 *                          target="_top">Network</a> section of the gpudb.conf
 *                          file; e.g., 'host[N].address'. Each entry in this
 *                          array will receive the corresponding process entry
 *                          at the same index in @a processes.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_switchover_dry_run
 *                             "admin_switchover_dry_run": If set to @ref
 *                             gpudb::admin_switchover_true "true", only
 *                             validation checks will be performed. Nothing is
 *                             switched over.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_switchover_true
 *                                     "admin_switchover_true"
 *                                 <li>@ref gpudb::admin_switchover_false
 *                                     "admin_switchover_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_switchover_false
 *                             "admin_switchover_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminSwitchoverResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminSwitchoverResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminSwitchoverResponse& adminSwitchover( const std::vector<std::string>& processes,
                                          const std::vector<std::string>& destinations,
                                          const std::map<std::string, std::string>& options,
                                          AdminSwitchoverResponse& response_ ) const;

/**
 * Verify database is in a consistent state.  When inconsistencies or errors
 * are found, the verified_ok flag in the response is set to false and the list
 * of errors found is provided in the error_list.
 *
 * @param[in] request_  @ref gpudb::AdminVerifyDbRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AdminVerifyDbResponse "Response" object containing the
 *         result of the operation.
 */
AdminVerifyDbResponse adminVerifyDb( const AdminVerifyDbRequest& request_ ) const;

/**
 * Verify database is in a consistent state.  When inconsistencies or errors
 * are found, the verified_ok flag in the response is set to false and the list
 * of errors found is provided in the error_list.
 *
 * @param[in] request_  @ref gpudb::AdminVerifyDbRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AdminVerifyDbResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminVerifyDbResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminVerifyDbResponse& adminVerifyDb( const AdminVerifyDbRequest& request_,
                                      AdminVerifyDbResponse& response_ ) const;

/**
 * Verify database is in a consistent state.  When inconsistencies or errors
 * are found, the verified_ok flag in the response is set to false and the list
 * of errors found is provided in the error_list.
 *
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_verify_db_rebuild_on_error
 *                             "admin_verify_db_rebuild_on_error": [DEPRECATED
 *                             -- Use the Rebuild DB feature of GAdmin
 *                             instead.].
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_false
 *                             "admin_verify_db_false".
 *                         <li>@ref gpudb::admin_verify_db_verify_nulls
 *                             "admin_verify_db_verify_nulls": When @ref
 *                             gpudb::admin_verify_db_true "true", verifies
 *                             that null values are set to zero.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_false
 *                             "admin_verify_db_false".
 *                         <li>@ref gpudb::admin_verify_db_verify_persist
 *                             "admin_verify_db_verify_persist": When @ref
 *                             gpudb::admin_verify_db_true "true", persistent
 *                             objects will be compared against their state in
 *                             memory and workers will be checked for orphaned
 *                             table data in persist. To check for orphaned
 *                             worker data, either set @ref
 *                             gpudb::admin_verify_db_concurrent_safe
 *                             "concurrent_safe" in @a options to @ref
 *                             gpudb::admin_verify_db_true "true" or place the
 *                             database offline.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_false
 *                             "admin_verify_db_false".
 *                         <li>@ref gpudb::admin_verify_db_concurrent_safe
 *                             "admin_verify_db_concurrent_safe": When @ref
 *                             gpudb::admin_verify_db_true "true", allows this
 *                             endpoint to be run safely with other concurrent
 *                             database operations. Other operations may be
 *                             slower while this is running.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_true
 *                             "admin_verify_db_true".
 *                         <li>@ref gpudb::admin_verify_db_verify_rank0
 *                             "admin_verify_db_verify_rank0": If @ref
 *                             gpudb::admin_verify_db_true "true", compare
 *                             rank0 table metadata against workers' metadata.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_false
 *                             "admin_verify_db_false".
 *                         <li>@ref
 *                             gpudb::admin_verify_db_delete_orphaned_tables
 *                             "admin_verify_db_delete_orphaned_tables": If
 *                             @ref gpudb::admin_verify_db_true "true",
 *                             orphaned table directories found on workers for
 *                             which there is no corresponding metadata will be
 *                             deleted. Must set @ref
 *                             gpudb::admin_verify_db_verify_persist
 *                             "verify_persist" in @a options to @ref
 *                             gpudb::admin_verify_db_true "true". It is
 *                             recommended to run this while the database is
 *                             offline OR set @ref
 *                             gpudb::admin_verify_db_concurrent_safe
 *                             "concurrent_safe" in @a options to @ref
 *                             gpudb::admin_verify_db_true "true".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_false
 *                             "admin_verify_db_false".
 *                         <li>@ref
 *                             gpudb::admin_verify_db_verify_orphaned_tables_only
 *                             "admin_verify_db_verify_orphaned_tables_only":
 *                             If @ref gpudb::admin_verify_db_true "true", only
 *                             the presence of orphaned table directories will
 *                             be checked, all persistence checks will be
 *                             skipped.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_false
 *                             "admin_verify_db_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AdminVerifyDbResponse "Response" object containing the
 *         result of the operation.
 */
AdminVerifyDbResponse adminVerifyDb( const std::map<std::string, std::string>& options ) const;

/**
 * Verify database is in a consistent state.  When inconsistencies or errors
 * are found, the verified_ok flag in the response is set to false and the list
 * of errors found is provided in the error_list.
 *
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::admin_verify_db_rebuild_on_error
 *                             "admin_verify_db_rebuild_on_error": [DEPRECATED
 *                             -- Use the Rebuild DB feature of GAdmin
 *                             instead.].
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_false
 *                             "admin_verify_db_false".
 *                         <li>@ref gpudb::admin_verify_db_verify_nulls
 *                             "admin_verify_db_verify_nulls": When @ref
 *                             gpudb::admin_verify_db_true "true", verifies
 *                             that null values are set to zero.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_false
 *                             "admin_verify_db_false".
 *                         <li>@ref gpudb::admin_verify_db_verify_persist
 *                             "admin_verify_db_verify_persist": When @ref
 *                             gpudb::admin_verify_db_true "true", persistent
 *                             objects will be compared against their state in
 *                             memory and workers will be checked for orphaned
 *                             table data in persist. To check for orphaned
 *                             worker data, either set @ref
 *                             gpudb::admin_verify_db_concurrent_safe
 *                             "concurrent_safe" in @a options to @ref
 *                             gpudb::admin_verify_db_true "true" or place the
 *                             database offline.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_false
 *                             "admin_verify_db_false".
 *                         <li>@ref gpudb::admin_verify_db_concurrent_safe
 *                             "admin_verify_db_concurrent_safe": When @ref
 *                             gpudb::admin_verify_db_true "true", allows this
 *                             endpoint to be run safely with other concurrent
 *                             database operations. Other operations may be
 *                             slower while this is running.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_true
 *                             "admin_verify_db_true".
 *                         <li>@ref gpudb::admin_verify_db_verify_rank0
 *                             "admin_verify_db_verify_rank0": If @ref
 *                             gpudb::admin_verify_db_true "true", compare
 *                             rank0 table metadata against workers' metadata.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_false
 *                             "admin_verify_db_false".
 *                         <li>@ref
 *                             gpudb::admin_verify_db_delete_orphaned_tables
 *                             "admin_verify_db_delete_orphaned_tables": If
 *                             @ref gpudb::admin_verify_db_true "true",
 *                             orphaned table directories found on workers for
 *                             which there is no corresponding metadata will be
 *                             deleted. Must set @ref
 *                             gpudb::admin_verify_db_verify_persist
 *                             "verify_persist" in @a options to @ref
 *                             gpudb::admin_verify_db_true "true". It is
 *                             recommended to run this while the database is
 *                             offline OR set @ref
 *                             gpudb::admin_verify_db_concurrent_safe
 *                             "concurrent_safe" in @a options to @ref
 *                             gpudb::admin_verify_db_true "true".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_false
 *                             "admin_verify_db_false".
 *                         <li>@ref
 *                             gpudb::admin_verify_db_verify_orphaned_tables_only
 *                             "admin_verify_db_verify_orphaned_tables_only":
 *                             If @ref gpudb::admin_verify_db_true "true", only
 *                             the presence of orphaned table directories will
 *                             be checked, all persistence checks will be
 *                             skipped.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::admin_verify_db_true
 *                                     "admin_verify_db_true"
 *                                 <li>@ref gpudb::admin_verify_db_false
 *                                     "admin_verify_db_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::admin_verify_db_false
 *                             "admin_verify_db_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AdminVerifyDbResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AdminVerifyDbResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AdminVerifyDbResponse& adminVerifyDb( const std::map<std::string, std::string>& options,
                                      AdminVerifyDbResponse& response_ ) const;

/**
 * Calculates and returns the convex hull for the values in a table specified
 * by @ref gpudb::AggregateConvexHullRequest::tableName "tableName".
 *
 * @param[in] request_  @ref gpudb::AggregateConvexHullRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AggregateConvexHullResponse "Response" object containing
 *         the result of the operation.
 */
AggregateConvexHullResponse aggregateConvexHull( const AggregateConvexHullRequest& request_ ) const;

/**
 * Calculates and returns the convex hull for the values in a table specified
 * by @ref gpudb::AggregateConvexHullRequest::tableName "tableName".
 *
 * @param[in] request_  @ref gpudb::AggregateConvexHullRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AggregateConvexHullResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AggregateConvexHullResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AggregateConvexHullResponse& aggregateConvexHull( const AggregateConvexHullRequest& request_,
                                                  AggregateConvexHullResponse& response_ ) const;

/**
 * Calculates and returns the convex hull for the values in a table specified
 * by @a tableName.
 *
 * @param[in] tableName  Name of table on which the operation will be
 *                       performed. Must be an existing table, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] xColumnName  Name of the column containing the x coordinates of
 *                         the points for the operation being performed.
 * @param[in] yColumnName  Name of the column containing the y coordinates of
 *                         the points for the operation being performed.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AggregateConvexHullResponse "Response" object containing
 *         the result of the operation.
 */
AggregateConvexHullResponse aggregateConvexHull( const std::string& tableName,
                                                 const std::string& xColumnName,
                                                 const std::string& yColumnName,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Calculates and returns the convex hull for the values in a table specified
 * by @a tableName.
 *
 * @param[in] tableName  Name of table on which the operation will be
 *                       performed. Must be an existing table, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] xColumnName  Name of the column containing the x coordinates of
 *                         the points for the operation being performed.
 * @param[in] yColumnName  Name of the column containing the y coordinates of
 *                         the points for the operation being performed.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AggregateConvexHullResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AggregateConvexHullResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AggregateConvexHullResponse& aggregateConvexHull( const std::string& tableName,
                                                  const std::string& xColumnName,
                                                  const std::string& yColumnName,
                                                  const std::map<std::string, std::string>& options,
                                                  AggregateConvexHullResponse& response_ ) const;

/**
 * Calculates unique combinations (groups) of values for the given columns in a
 * given table or view and computes aggregates on each unique combination. This
 * is somewhat analogous to an SQL-style SELECT...GROUP BY.
 *
 * For aggregation details and examples, see <a
 * href="../../../concepts/aggregation/" target="_top">Aggregation</a>.  For
 * limitations, see <a href="../../../concepts/aggregation/#limitations"
 * target="_top">Aggregation Limitations</a>.
 *
 * Any column(s) can be grouped on, and all column types except
 * unrestricted-length strings may be used for computing applicable aggregates;
 * columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a> are unable to be used in grouping or
 * aggregation.
 *
 * The results can be paged via the @ref gpudb::AggregateGroupByRequest::offset
 * "offset" and @ref gpudb::AggregateGroupByRequest::limit "limit" parameters.
 * For example, to get 10 groups with the largest counts the inputs would be:
 * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
 *
 * @ref gpudb::AggregateGroupByRequest::options "options" can be used to
 * customize behavior of this call e.g.\ filtering or sorting the results.
 *
 * To group by columns 'x' and 'y' and compute the number of objects within
 * each group, use:  column_names=['x','y','count(*)'].
 *
 * To also compute the sum of 'z' over each group, use:
 * column_names=['x','y','count(*)','sum(z)'].
 *
 * Available <a href="../../../concepts/expressions/#aggregate-expressions"
 * target="_top">aggregation functions</a> are: count(*), sum, min, max, avg,
 * mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp, arg_min,
 * arg_max and count_distinct.
 *
 * Available grouping functions are <a href="../../../concepts/rollup/"
 * target="_top">Rollup</a>, <a href="../../../concepts/cube/"
 * target="_top">Cube</a>, and <a href="../../../concepts/grouping_sets/"
 * target="_top">Grouping Sets</a>
 *
 * This service also provides support for <a href="../../../concepts/pivot/"
 * target="_top">Pivot</a> operations.
 *
 * Filtering on aggregates is supported via expressions using <a
 * href="../../../concepts/expressions/#aggregate-expressions"
 * target="_top">aggregation functions</a> supplied to @ref
 * gpudb::aggregate_group_by_having "having".
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * If a @ref gpudb::aggregate_group_by_result_table "result_table" name is
 * specified in the @ref gpudb::AggregateGroupByRequest::options "options", the
 * results are stored in a new table with that name--no results are returned in
 * the response.  Both the table name and resulting column names must adhere to
 * <a href="../../../concepts/tables/#table" target="_top">standard naming
 * conventions</a>; column/aggregation expressions will need to be aliased.  If
 * the source table's <a href="../../../concepts/tables/#shard-keys"
 * target="_top">shard key</a> is used as the grouping column(s) and all result
 * records are selected (@ref gpudb::AggregateGroupByRequest::offset "offset"
 * is 0 and @ref gpudb::AggregateGroupByRequest::limit "limit" is -9999), the
 * result table will be sharded, in all other cases it will be replicated.
 * Sorting will properly function only if the result table is replicated or if
 * there is only one processing node and should not be relied upon in other
 * cases.  Not available when any of the values of @ref
 * gpudb::AggregateGroupByRequest::columnNames "columnNames" is an
 * unrestricted-length string.
 *
 * @param[in] request_  @ref gpudb::AggregateGroupByRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::RawAggregateGroupByResponse "Response" object containing
 *         the result of the operation.
 */
RawAggregateGroupByResponse aggregateGroupByRaw( const AggregateGroupByRequest& request_ ) const;

/**
 * Calculates unique combinations (groups) of values for the given columns in a
 * given table or view and computes aggregates on each unique combination. This
 * is somewhat analogous to an SQL-style SELECT...GROUP BY.
 *
 * For aggregation details and examples, see <a
 * href="../../../concepts/aggregation/" target="_top">Aggregation</a>.  For
 * limitations, see <a href="../../../concepts/aggregation/#limitations"
 * target="_top">Aggregation Limitations</a>.
 *
 * Any column(s) can be grouped on, and all column types except
 * unrestricted-length strings may be used for computing applicable aggregates;
 * columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a> are unable to be used in grouping or
 * aggregation.
 *
 * The results can be paged via the @ref gpudb::AggregateGroupByRequest::offset
 * "offset" and @ref gpudb::AggregateGroupByRequest::limit "limit" parameters.
 * For example, to get 10 groups with the largest counts the inputs would be:
 * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
 *
 * @ref gpudb::AggregateGroupByRequest::options "options" can be used to
 * customize behavior of this call e.g.\ filtering or sorting the results.
 *
 * To group by columns 'x' and 'y' and compute the number of objects within
 * each group, use:  column_names=['x','y','count(*)'].
 *
 * To also compute the sum of 'z' over each group, use:
 * column_names=['x','y','count(*)','sum(z)'].
 *
 * Available <a href="../../../concepts/expressions/#aggregate-expressions"
 * target="_top">aggregation functions</a> are: count(*), sum, min, max, avg,
 * mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp, arg_min,
 * arg_max and count_distinct.
 *
 * Available grouping functions are <a href="../../../concepts/rollup/"
 * target="_top">Rollup</a>, <a href="../../../concepts/cube/"
 * target="_top">Cube</a>, and <a href="../../../concepts/grouping_sets/"
 * target="_top">Grouping Sets</a>
 *
 * This service also provides support for <a href="../../../concepts/pivot/"
 * target="_top">Pivot</a> operations.
 *
 * Filtering on aggregates is supported via expressions using <a
 * href="../../../concepts/expressions/#aggregate-expressions"
 * target="_top">aggregation functions</a> supplied to @ref
 * gpudb::aggregate_group_by_having "having".
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * If a @ref gpudb::aggregate_group_by_result_table "result_table" name is
 * specified in the @ref gpudb::AggregateGroupByRequest::options "options", the
 * results are stored in a new table with that name--no results are returned in
 * the response.  Both the table name and resulting column names must adhere to
 * <a href="../../../concepts/tables/#table" target="_top">standard naming
 * conventions</a>; column/aggregation expressions will need to be aliased.  If
 * the source table's <a href="../../../concepts/tables/#shard-keys"
 * target="_top">shard key</a> is used as the grouping column(s) and all result
 * records are selected (@ref gpudb::AggregateGroupByRequest::offset "offset"
 * is 0 and @ref gpudb::AggregateGroupByRequest::limit "limit" is -9999), the
 * result table will be sharded, in all other cases it will be replicated.
 * Sorting will properly function only if the result table is replicated or if
 * there is only one processing node and should not be relied upon in other
 * cases.  Not available when any of the values of @ref
 * gpudb::AggregateGroupByRequest::columnNames "columnNames" is an
 * unrestricted-length string.
 *
 * @param[in] request_  @ref gpudb::AggregateGroupByRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RawAggregateGroupByResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RawAggregateGroupByResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
RawAggregateGroupByResponse& aggregateGroupByRaw( const AggregateGroupByRequest& request_,
                                                  RawAggregateGroupByResponse& response_ ) const;

/**
 * Calculates unique combinations (groups) of values for the given columns in a
 * given table or view and computes aggregates on each unique combination. This
 * is somewhat analogous to an SQL-style SELECT...GROUP BY.
 *
 * For aggregation details and examples, see <a
 * href="../../../concepts/aggregation/" target="_top">Aggregation</a>.  For
 * limitations, see <a href="../../../concepts/aggregation/#limitations"
 * target="_top">Aggregation Limitations</a>.
 *
 * Any column(s) can be grouped on, and all column types except
 * unrestricted-length strings may be used for computing applicable aggregates;
 * columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a> are unable to be used in grouping or
 * aggregation.
 *
 * The results can be paged via the @ref gpudb::AggregateGroupByRequest::offset
 * "offset" and @ref gpudb::AggregateGroupByRequest::limit "limit" parameters.
 * For example, to get 10 groups with the largest counts the inputs would be:
 * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
 *
 * @ref gpudb::AggregateGroupByRequest::options "options" can be used to
 * customize behavior of this call e.g.\ filtering or sorting the results.
 *
 * To group by columns 'x' and 'y' and compute the number of objects within
 * each group, use:  column_names=['x','y','count(*)'].
 *
 * To also compute the sum of 'z' over each group, use:
 * column_names=['x','y','count(*)','sum(z)'].
 *
 * Available <a href="../../../concepts/expressions/#aggregate-expressions"
 * target="_top">aggregation functions</a> are: count(*), sum, min, max, avg,
 * mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp, arg_min,
 * arg_max and count_distinct.
 *
 * Available grouping functions are <a href="../../../concepts/rollup/"
 * target="_top">Rollup</a>, <a href="../../../concepts/cube/"
 * target="_top">Cube</a>, and <a href="../../../concepts/grouping_sets/"
 * target="_top">Grouping Sets</a>
 *
 * This service also provides support for <a href="../../../concepts/pivot/"
 * target="_top">Pivot</a> operations.
 *
 * Filtering on aggregates is supported via expressions using <a
 * href="../../../concepts/expressions/#aggregate-expressions"
 * target="_top">aggregation functions</a> supplied to @ref
 * gpudb::aggregate_group_by_having "having".
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * If a @ref gpudb::aggregate_group_by_result_table "result_table" name is
 * specified in the @ref gpudb::AggregateGroupByRequest::options "options", the
 * results are stored in a new table with that name--no results are returned in
 * the response.  Both the table name and resulting column names must adhere to
 * <a href="../../../concepts/tables/#table" target="_top">standard naming
 * conventions</a>; column/aggregation expressions will need to be aliased.  If
 * the source table's <a href="../../../concepts/tables/#shard-keys"
 * target="_top">shard key</a> is used as the grouping column(s) and all result
 * records are selected (@ref gpudb::AggregateGroupByRequest::offset "offset"
 * is 0 and @ref gpudb::AggregateGroupByRequest::limit "limit" is -9999), the
 * result table will be sharded, in all other cases it will be replicated.
 * Sorting will properly function only if the result table is replicated or if
 * there is only one processing node and should not be relied upon in other
 * cases.  Not available when any of the values of @ref
 * gpudb::AggregateGroupByRequest::columnNames "columnNames" is an
 * unrestricted-length string.
 *
 * @param[in] request_  @ref gpudb::AggregateGroupByRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AggregateGroupByResponse "Response" object containing
 *         the result of the operation.
 */
AggregateGroupByResponse aggregateGroupBy( const AggregateGroupByRequest& request_ ) const;

/**
 * Calculates unique combinations (groups) of values for the given columns in a
 * given table or view and computes aggregates on each unique combination. This
 * is somewhat analogous to an SQL-style SELECT...GROUP BY.
 *
 * For aggregation details and examples, see <a
 * href="../../../concepts/aggregation/" target="_top">Aggregation</a>.  For
 * limitations, see <a href="../../../concepts/aggregation/#limitations"
 * target="_top">Aggregation Limitations</a>.
 *
 * Any column(s) can be grouped on, and all column types except
 * unrestricted-length strings may be used for computing applicable aggregates;
 * columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a> are unable to be used in grouping or
 * aggregation.
 *
 * The results can be paged via the @ref gpudb::AggregateGroupByRequest::offset
 * "offset" and @ref gpudb::AggregateGroupByRequest::limit "limit" parameters.
 * For example, to get 10 groups with the largest counts the inputs would be:
 * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
 *
 * @ref gpudb::AggregateGroupByRequest::options "options" can be used to
 * customize behavior of this call e.g.\ filtering or sorting the results.
 *
 * To group by columns 'x' and 'y' and compute the number of objects within
 * each group, use:  column_names=['x','y','count(*)'].
 *
 * To also compute the sum of 'z' over each group, use:
 * column_names=['x','y','count(*)','sum(z)'].
 *
 * Available <a href="../../../concepts/expressions/#aggregate-expressions"
 * target="_top">aggregation functions</a> are: count(*), sum, min, max, avg,
 * mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp, arg_min,
 * arg_max and count_distinct.
 *
 * Available grouping functions are <a href="../../../concepts/rollup/"
 * target="_top">Rollup</a>, <a href="../../../concepts/cube/"
 * target="_top">Cube</a>, and <a href="../../../concepts/grouping_sets/"
 * target="_top">Grouping Sets</a>
 *
 * This service also provides support for <a href="../../../concepts/pivot/"
 * target="_top">Pivot</a> operations.
 *
 * Filtering on aggregates is supported via expressions using <a
 * href="../../../concepts/expressions/#aggregate-expressions"
 * target="_top">aggregation functions</a> supplied to @ref
 * gpudb::aggregate_group_by_having "having".
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * If a @ref gpudb::aggregate_group_by_result_table "result_table" name is
 * specified in the @ref gpudb::AggregateGroupByRequest::options "options", the
 * results are stored in a new table with that name--no results are returned in
 * the response.  Both the table name and resulting column names must adhere to
 * <a href="../../../concepts/tables/#table" target="_top">standard naming
 * conventions</a>; column/aggregation expressions will need to be aliased.  If
 * the source table's <a href="../../../concepts/tables/#shard-keys"
 * target="_top">shard key</a> is used as the grouping column(s) and all result
 * records are selected (@ref gpudb::AggregateGroupByRequest::offset "offset"
 * is 0 and @ref gpudb::AggregateGroupByRequest::limit "limit" is -9999), the
 * result table will be sharded, in all other cases it will be replicated.
 * Sorting will properly function only if the result table is replicated or if
 * there is only one processing node and should not be relied upon in other
 * cases.  Not available when any of the values of @ref
 * gpudb::AggregateGroupByRequest::columnNames "columnNames" is an
 * unrestricted-length string.
 *
 * @param[in] request_  @ref gpudb::AggregateGroupByRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AggregateGroupByResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AggregateGroupByResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AggregateGroupByResponse& aggregateGroupBy( const AggregateGroupByRequest& request_,
                                            AggregateGroupByResponse& response_ ) const;

/**
 * Calculates unique combinations (groups) of values for the given columns in a
 * given table or view and computes aggregates on each unique combination. This
 * is somewhat analogous to an SQL-style SELECT...GROUP BY.
 *
 * For aggregation details and examples, see <a
 * href="../../../concepts/aggregation/" target="_top">Aggregation</a>.  For
 * limitations, see <a href="../../../concepts/aggregation/#limitations"
 * target="_top">Aggregation Limitations</a>.
 *
 * Any column(s) can be grouped on, and all column types except
 * unrestricted-length strings may be used for computing applicable aggregates;
 * columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a> are unable to be used in grouping or
 * aggregation.
 *
 * The results can be paged via the @a offset and @a limit parameters. For
 * example, to get 10 groups with the largest counts the inputs would be:
 * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
 *
 * @a options can be used to customize behavior of this call e.g.\ filtering or
 * sorting the results.
 *
 * To group by columns 'x' and 'y' and compute the number of objects within
 * each group, use:  column_names=['x','y','count(*)'].
 *
 * To also compute the sum of 'z' over each group, use:
 * column_names=['x','y','count(*)','sum(z)'].
 *
 * Available <a href="../../../concepts/expressions/#aggregate-expressions"
 * target="_top">aggregation functions</a> are: count(*), sum, min, max, avg,
 * mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp, arg_min,
 * arg_max and count_distinct.
 *
 * Available grouping functions are <a href="../../../concepts/rollup/"
 * target="_top">Rollup</a>, <a href="../../../concepts/cube/"
 * target="_top">Cube</a>, and <a href="../../../concepts/grouping_sets/"
 * target="_top">Grouping Sets</a>
 *
 * This service also provides support for <a href="../../../concepts/pivot/"
 * target="_top">Pivot</a> operations.
 *
 * Filtering on aggregates is supported via expressions using <a
 * href="../../../concepts/expressions/#aggregate-expressions"
 * target="_top">aggregation functions</a> supplied to @ref
 * gpudb::aggregate_group_by_having "having".
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * If a @ref gpudb::aggregate_group_by_result_table "result_table" name is
 * specified in the @a options, the results are stored in a new table with that
 * name--no results are returned in the response.  Both the table name and
 * resulting column names must adhere to <a
 * href="../../../concepts/tables/#table" target="_top">standard naming
 * conventions</a>; column/aggregation expressions will need to be aliased.  If
 * the source table's <a href="../../../concepts/tables/#shard-keys"
 * target="_top">shard key</a> is used as the grouping column(s) and all result
 * records are selected (@a offset is 0 and @a limit is -9999), the result
 * table will be sharded, in all other cases it will be replicated.  Sorting
 * will properly function only if the result table is replicated or if there is
 * only one processing node and should not be relied upon in other cases.  Not
 * available when any of the values of @a columnNames is an unrestricted-length
 * string.
 *
 * @param[in] tableName  Name of an existing table or view on which the
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnNames  List of one or more column names, expressions, and
 *                         aggregate expressions.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawAggregateGroupByResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::aggregate_group_by_create_temp_table
 *                             "aggregate_group_by_create_temp_table": If @ref
 *                             gpudb::aggregate_group_by_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table". If @ref
 *                             gpudb::aggregate_group_by_result_table_persist
 *                             "result_table_persist" is @ref
 *                             gpudb::aggregate_group_by_false "false" (or
 *                             unspecified), then this is always allowed even
 *                             if the caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::aggregate_group_by_qualified_result_table_name
 *                             "qualified_result_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_group_by_true
 *                                     "aggregate_group_by_true"
 *                                 <li>@ref gpudb::aggregate_group_by_false
 *                                     "aggregate_group_by_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_group_by_false
 *                             "aggregate_group_by_false".
 *                         <li>@ref gpudb::aggregate_group_by_collection_name
 *                             "aggregate_group_by_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema as part of @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table" and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema which is to
 *                             contain the table specified in @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table". If the schema provided is
 *                             non-existent, it will be automatically created.
 *                         <li>@ref gpudb::aggregate_group_by_expression
 *                             "aggregate_group_by_expression": Filter
 *                             expression to apply to the table prior to
 *                             computing the aggregate group by.
 *                         <li>@ref gpudb::aggregate_group_by_having
 *                             "aggregate_group_by_having": Filter expression
 *                             to apply to the aggregated results.
 *                         <li>@ref gpudb::aggregate_group_by_sort_order
 *                             "aggregate_group_by_sort_order": String
 *                             indicating how the returned values should be
 *                             sorted - ascending or descending.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_group_by_ascending
 *                                     "aggregate_group_by_ascending":
 *                                     Indicates that the returned values
 *                                     should be sorted in ascending order.
 *                                 <li>@ref
 *                                     gpudb::aggregate_group_by_descending
 *                                     "aggregate_group_by_descending":
 *                                     Indicates that the returned values
 *                                     should be sorted in descending order.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_group_by_ascending
 *                             "aggregate_group_by_ascending".
 *                         <li>@ref gpudb::aggregate_group_by_sort_by
 *                             "aggregate_group_by_sort_by": String determining
 *                             how the results are sorted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_group_by_key
 *                                     "aggregate_group_by_key": Indicates that
 *                                     the returned values should be sorted by
 *                                     key, which corresponds to the grouping
 *                                     columns. If you have multiple grouping
 *                                     columns (and are sorting by key), it
 *                                     will first sort the first grouping
 *                                     column, then the second grouping column,
 *                                     etc.
 *                                 <li>@ref gpudb::aggregate_group_by_value
 *                                     "aggregate_group_by_value": Indicates
 *                                     that the returned values should be
 *                                     sorted by value, which corresponds to
 *                                     the aggregates. If you have multiple
 *                                     aggregates (and are sorting by value),
 *                                     it will first sort by the first
 *                                     aggregate, then the second aggregate,
 *                                     etc.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_group_by_value
 *                             "aggregate_group_by_value".
 *                         <li>@ref gpudb::aggregate_group_by_order_by
 *                             "aggregate_group_by_order_by": Comma-separated
 *                             list of the columns to be sorted by as well as
 *                             the sort direction, e.g., 'timestamp asc, x
 *                             desc'. The default value is ''.
 *                         <li>@ref
 *                             gpudb::aggregate_group_by_strategy_definition
 *                             "aggregate_group_by_strategy_definition": The <a
 *                             href="../../../rm/concepts/#tier-strategies"
 *                             target="_top">tier strategy</a> for the table
 *                             and its columns.
 *                         <li>@ref gpudb::aggregate_group_by_result_table
 *                             "aggregate_group_by_result_table": The name of a
 *                             table used to store the results, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>.  Column
 *                             names (group-by and aggregate fields) need to be
 *                             given aliases e.g. ["FChar256 as fchar256",
 *                             "sum(FDouble) as sfd"].  If present, no results
 *                             are returned in the response.  This option is
 *                             not available if one of the grouping attributes
 *                             is an unrestricted string (i.e.; not charN)
 *                             type.
 *                         <li>@ref
 *                             gpudb::aggregate_group_by_result_table_persist
 *                             "aggregate_group_by_result_table_persist": If
 *                             @ref gpudb::aggregate_group_by_true "true", then
 *                             the result table specified in @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table" will be persisted and will not
 *                             expire unless a @ref
 *                             gpudb::aggregate_group_by_ttl "ttl" is
 *                             specified.   If @ref
 *                             gpudb::aggregate_group_by_false "false", then
 *                             the result table will be an in-memory table and
 *                             will expire unless a @ref
 *                             gpudb::aggregate_group_by_ttl "ttl" is specified
 *                             otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_group_by_true
 *                                     "aggregate_group_by_true"
 *                                 <li>@ref gpudb::aggregate_group_by_false
 *                                     "aggregate_group_by_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_group_by_false
 *                             "aggregate_group_by_false".
 *                         <li>@ref
 *                             gpudb::aggregate_group_by_result_table_force_replicated
 *                             "aggregate_group_by_result_table_force_replicated":
 *                             Force the result table to be replicated (ignores
 *                             any sharding). Must be used in combination with
 *                             the @ref gpudb::aggregate_group_by_result_table
 *                             "result_table" option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_group_by_true
 *                                     "aggregate_group_by_true"
 *                                 <li>@ref gpudb::aggregate_group_by_false
 *                                     "aggregate_group_by_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_group_by_false
 *                             "aggregate_group_by_false".
 *                         <li>@ref
 *                             gpudb::aggregate_group_by_result_table_generate_pk
 *                             "aggregate_group_by_result_table_generate_pk":
 *                             If @ref gpudb::aggregate_group_by_true "true"
 *                             then set a primary key for the result table.
 *                             Must be used in combination with the @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table" option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_group_by_true
 *                                     "aggregate_group_by_true"
 *                                 <li>@ref gpudb::aggregate_group_by_false
 *                                     "aggregate_group_by_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_group_by_false
 *                             "aggregate_group_by_false".
 *                         <li>@ref gpudb::aggregate_group_by_ttl
 *                             "aggregate_group_by_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the table specified in
 *                             @ref gpudb::aggregate_group_by_result_table
 *                             "result_table".
 *                         <li>@ref gpudb::aggregate_group_by_chunk_size
 *                             "aggregate_group_by_chunk_size": Indicates the
 *                             number of records per chunk to be used for the
 *                             result table. Must be used in combination with
 *                             the @ref gpudb::aggregate_group_by_result_table
 *                             "result_table" option.
 *                         <li>@ref
 *                             gpudb::aggregate_group_by_chunk_column_max_memory
 *                             "aggregate_group_by_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for the result
 *                             table. Must be used in combination with the @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_group_by_chunk_max_memory
 *                             "aggregate_group_by_chunk_max_memory": Indicates
 *                             the target maximum data size for all columns in
 *                             a chunk to be used for the result table. Must be
 *                             used in combination with the @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_group_by_create_indexes
 *                             "aggregate_group_by_create_indexes":
 *                             Comma-separated list of columns on which to
 *                             create indexes on the result table. Must be used
 *                             in combination with the @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_group_by_view_id
 *                             "aggregate_group_by_view_id": ID of view of
 *                             which the result table will be a member. The
 *                             default value is ''.
 *                         <li>@ref gpudb::aggregate_group_by_pivot
 *                             "aggregate_group_by_pivot": pivot column
 *                         <li>@ref gpudb::aggregate_group_by_pivot_values
 *                             "aggregate_group_by_pivot_values": The value
 *                             list provided will become the column headers in
 *                             the output. Should be the values from the
 *                             pivot_column.
 *                         <li>@ref gpudb::aggregate_group_by_grouping_sets
 *                             "aggregate_group_by_grouping_sets": Customize
 *                             the grouping attribute sets to compute the
 *                             aggregates. These sets can include ROLLUP or
 *                             CUBE operartors. The attribute sets should be
 *                             enclosed in paranthesis and can include
 *                             composite attributes. All attributes specified
 *                             in the grouping sets must present in the groupby
 *                             attributes.
 *                         <li>@ref gpudb::aggregate_group_by_rollup
 *                             "aggregate_group_by_rollup": This option is used
 *                             to specify the multilevel aggregates.
 *                         <li>@ref gpudb::aggregate_group_by_cube
 *                             "aggregate_group_by_cube": This option is used
 *                             to specify the multidimensional aggregates.
 *                         <li>@ref gpudb::aggregate_group_by_shard_key
 *                             "aggregate_group_by_shard_key": Comma-separated
 *                             list of the columns to be sharded on; e.g.
 *                             'column1, column2'.  The columns specified must
 *                             be present in @a columnNames.  If any alias is
 *                             given for any column name, the alias must be
 *                             used, rather than the original column name. The
 *                             default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AggregateGroupByResponse "Response" object containing
 *         the result of the operation.
 */
AggregateGroupByResponse aggregateGroupBy( const std::string& tableName,
                                           const std::vector<std::string>& columnNames,
                                           const int64_t offset,
                                           const int64_t limit,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Calculates unique combinations (groups) of values for the given columns in a
 * given table or view and computes aggregates on each unique combination. This
 * is somewhat analogous to an SQL-style SELECT...GROUP BY.
 *
 * For aggregation details and examples, see <a
 * href="../../../concepts/aggregation/" target="_top">Aggregation</a>.  For
 * limitations, see <a href="../../../concepts/aggregation/#limitations"
 * target="_top">Aggregation Limitations</a>.
 *
 * Any column(s) can be grouped on, and all column types except
 * unrestricted-length strings may be used for computing applicable aggregates;
 * columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a> are unable to be used in grouping or
 * aggregation.
 *
 * The results can be paged via the @a offset and @a limit parameters. For
 * example, to get 10 groups with the largest counts the inputs would be:
 * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
 *
 * @a options can be used to customize behavior of this call e.g.\ filtering or
 * sorting the results.
 *
 * To group by columns 'x' and 'y' and compute the number of objects within
 * each group, use:  column_names=['x','y','count(*)'].
 *
 * To also compute the sum of 'z' over each group, use:
 * column_names=['x','y','count(*)','sum(z)'].
 *
 * Available <a href="../../../concepts/expressions/#aggregate-expressions"
 * target="_top">aggregation functions</a> are: count(*), sum, min, max, avg,
 * mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp, arg_min,
 * arg_max and count_distinct.
 *
 * Available grouping functions are <a href="../../../concepts/rollup/"
 * target="_top">Rollup</a>, <a href="../../../concepts/cube/"
 * target="_top">Cube</a>, and <a href="../../../concepts/grouping_sets/"
 * target="_top">Grouping Sets</a>
 *
 * This service also provides support for <a href="../../../concepts/pivot/"
 * target="_top">Pivot</a> operations.
 *
 * Filtering on aggregates is supported via expressions using <a
 * href="../../../concepts/expressions/#aggregate-expressions"
 * target="_top">aggregation functions</a> supplied to @ref
 * gpudb::aggregate_group_by_having "having".
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * If a @ref gpudb::aggregate_group_by_result_table "result_table" name is
 * specified in the @a options, the results are stored in a new table with that
 * name--no results are returned in the response.  Both the table name and
 * resulting column names must adhere to <a
 * href="../../../concepts/tables/#table" target="_top">standard naming
 * conventions</a>; column/aggregation expressions will need to be aliased.  If
 * the source table's <a href="../../../concepts/tables/#shard-keys"
 * target="_top">shard key</a> is used as the grouping column(s) and all result
 * records are selected (@a offset is 0 and @a limit is -9999), the result
 * table will be sharded, in all other cases it will be replicated.  Sorting
 * will properly function only if the result table is replicated or if there is
 * only one processing node and should not be relied upon in other cases.  Not
 * available when any of the values of @a columnNames is an unrestricted-length
 * string.
 *
 * @param[in] tableName  Name of an existing table or view on which the
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnNames  List of one or more column names, expressions, and
 *                         aggregate expressions.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawAggregateGroupByResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::aggregate_group_by_create_temp_table
 *                             "aggregate_group_by_create_temp_table": If @ref
 *                             gpudb::aggregate_group_by_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table". If @ref
 *                             gpudb::aggregate_group_by_result_table_persist
 *                             "result_table_persist" is @ref
 *                             gpudb::aggregate_group_by_false "false" (or
 *                             unspecified), then this is always allowed even
 *                             if the caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::aggregate_group_by_qualified_result_table_name
 *                             "qualified_result_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_group_by_true
 *                                     "aggregate_group_by_true"
 *                                 <li>@ref gpudb::aggregate_group_by_false
 *                                     "aggregate_group_by_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_group_by_false
 *                             "aggregate_group_by_false".
 *                         <li>@ref gpudb::aggregate_group_by_collection_name
 *                             "aggregate_group_by_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema as part of @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table" and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema which is to
 *                             contain the table specified in @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table". If the schema provided is
 *                             non-existent, it will be automatically created.
 *                         <li>@ref gpudb::aggregate_group_by_expression
 *                             "aggregate_group_by_expression": Filter
 *                             expression to apply to the table prior to
 *                             computing the aggregate group by.
 *                         <li>@ref gpudb::aggregate_group_by_having
 *                             "aggregate_group_by_having": Filter expression
 *                             to apply to the aggregated results.
 *                         <li>@ref gpudb::aggregate_group_by_sort_order
 *                             "aggregate_group_by_sort_order": String
 *                             indicating how the returned values should be
 *                             sorted - ascending or descending.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_group_by_ascending
 *                                     "aggregate_group_by_ascending":
 *                                     Indicates that the returned values
 *                                     should be sorted in ascending order.
 *                                 <li>@ref
 *                                     gpudb::aggregate_group_by_descending
 *                                     "aggregate_group_by_descending":
 *                                     Indicates that the returned values
 *                                     should be sorted in descending order.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_group_by_ascending
 *                             "aggregate_group_by_ascending".
 *                         <li>@ref gpudb::aggregate_group_by_sort_by
 *                             "aggregate_group_by_sort_by": String determining
 *                             how the results are sorted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_group_by_key
 *                                     "aggregate_group_by_key": Indicates that
 *                                     the returned values should be sorted by
 *                                     key, which corresponds to the grouping
 *                                     columns. If you have multiple grouping
 *                                     columns (and are sorting by key), it
 *                                     will first sort the first grouping
 *                                     column, then the second grouping column,
 *                                     etc.
 *                                 <li>@ref gpudb::aggregate_group_by_value
 *                                     "aggregate_group_by_value": Indicates
 *                                     that the returned values should be
 *                                     sorted by value, which corresponds to
 *                                     the aggregates. If you have multiple
 *                                     aggregates (and are sorting by value),
 *                                     it will first sort by the first
 *                                     aggregate, then the second aggregate,
 *                                     etc.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_group_by_value
 *                             "aggregate_group_by_value".
 *                         <li>@ref gpudb::aggregate_group_by_order_by
 *                             "aggregate_group_by_order_by": Comma-separated
 *                             list of the columns to be sorted by as well as
 *                             the sort direction, e.g., 'timestamp asc, x
 *                             desc'. The default value is ''.
 *                         <li>@ref
 *                             gpudb::aggregate_group_by_strategy_definition
 *                             "aggregate_group_by_strategy_definition": The <a
 *                             href="../../../rm/concepts/#tier-strategies"
 *                             target="_top">tier strategy</a> for the table
 *                             and its columns.
 *                         <li>@ref gpudb::aggregate_group_by_result_table
 *                             "aggregate_group_by_result_table": The name of a
 *                             table used to store the results, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>.  Column
 *                             names (group-by and aggregate fields) need to be
 *                             given aliases e.g. ["FChar256 as fchar256",
 *                             "sum(FDouble) as sfd"].  If present, no results
 *                             are returned in the response.  This option is
 *                             not available if one of the grouping attributes
 *                             is an unrestricted string (i.e.; not charN)
 *                             type.
 *                         <li>@ref
 *                             gpudb::aggregate_group_by_result_table_persist
 *                             "aggregate_group_by_result_table_persist": If
 *                             @ref gpudb::aggregate_group_by_true "true", then
 *                             the result table specified in @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table" will be persisted and will not
 *                             expire unless a @ref
 *                             gpudb::aggregate_group_by_ttl "ttl" is
 *                             specified.   If @ref
 *                             gpudb::aggregate_group_by_false "false", then
 *                             the result table will be an in-memory table and
 *                             will expire unless a @ref
 *                             gpudb::aggregate_group_by_ttl "ttl" is specified
 *                             otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_group_by_true
 *                                     "aggregate_group_by_true"
 *                                 <li>@ref gpudb::aggregate_group_by_false
 *                                     "aggregate_group_by_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_group_by_false
 *                             "aggregate_group_by_false".
 *                         <li>@ref
 *                             gpudb::aggregate_group_by_result_table_force_replicated
 *                             "aggregate_group_by_result_table_force_replicated":
 *                             Force the result table to be replicated (ignores
 *                             any sharding). Must be used in combination with
 *                             the @ref gpudb::aggregate_group_by_result_table
 *                             "result_table" option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_group_by_true
 *                                     "aggregate_group_by_true"
 *                                 <li>@ref gpudb::aggregate_group_by_false
 *                                     "aggregate_group_by_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_group_by_false
 *                             "aggregate_group_by_false".
 *                         <li>@ref
 *                             gpudb::aggregate_group_by_result_table_generate_pk
 *                             "aggregate_group_by_result_table_generate_pk":
 *                             If @ref gpudb::aggregate_group_by_true "true"
 *                             then set a primary key for the result table.
 *                             Must be used in combination with the @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table" option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_group_by_true
 *                                     "aggregate_group_by_true"
 *                                 <li>@ref gpudb::aggregate_group_by_false
 *                                     "aggregate_group_by_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_group_by_false
 *                             "aggregate_group_by_false".
 *                         <li>@ref gpudb::aggregate_group_by_ttl
 *                             "aggregate_group_by_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the table specified in
 *                             @ref gpudb::aggregate_group_by_result_table
 *                             "result_table".
 *                         <li>@ref gpudb::aggregate_group_by_chunk_size
 *                             "aggregate_group_by_chunk_size": Indicates the
 *                             number of records per chunk to be used for the
 *                             result table. Must be used in combination with
 *                             the @ref gpudb::aggregate_group_by_result_table
 *                             "result_table" option.
 *                         <li>@ref
 *                             gpudb::aggregate_group_by_chunk_column_max_memory
 *                             "aggregate_group_by_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for the result
 *                             table. Must be used in combination with the @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_group_by_chunk_max_memory
 *                             "aggregate_group_by_chunk_max_memory": Indicates
 *                             the target maximum data size for all columns in
 *                             a chunk to be used for the result table. Must be
 *                             used in combination with the @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_group_by_create_indexes
 *                             "aggregate_group_by_create_indexes":
 *                             Comma-separated list of columns on which to
 *                             create indexes on the result table. Must be used
 *                             in combination with the @ref
 *                             gpudb::aggregate_group_by_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_group_by_view_id
 *                             "aggregate_group_by_view_id": ID of view of
 *                             which the result table will be a member. The
 *                             default value is ''.
 *                         <li>@ref gpudb::aggregate_group_by_pivot
 *                             "aggregate_group_by_pivot": pivot column
 *                         <li>@ref gpudb::aggregate_group_by_pivot_values
 *                             "aggregate_group_by_pivot_values": The value
 *                             list provided will become the column headers in
 *                             the output. Should be the values from the
 *                             pivot_column.
 *                         <li>@ref gpudb::aggregate_group_by_grouping_sets
 *                             "aggregate_group_by_grouping_sets": Customize
 *                             the grouping attribute sets to compute the
 *                             aggregates. These sets can include ROLLUP or
 *                             CUBE operartors. The attribute sets should be
 *                             enclosed in paranthesis and can include
 *                             composite attributes. All attributes specified
 *                             in the grouping sets must present in the groupby
 *                             attributes.
 *                         <li>@ref gpudb::aggregate_group_by_rollup
 *                             "aggregate_group_by_rollup": This option is used
 *                             to specify the multilevel aggregates.
 *                         <li>@ref gpudb::aggregate_group_by_cube
 *                             "aggregate_group_by_cube": This option is used
 *                             to specify the multidimensional aggregates.
 *                         <li>@ref gpudb::aggregate_group_by_shard_key
 *                             "aggregate_group_by_shard_key": Comma-separated
 *                             list of the columns to be sharded on; e.g.
 *                             'column1, column2'.  The columns specified must
 *                             be present in @a columnNames.  If any alias is
 *                             given for any column name, the alias must be
 *                             used, rather than the original column name. The
 *                             default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AggregateGroupByResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AggregateGroupByResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AggregateGroupByResponse& aggregateGroupBy( const std::string& tableName,
                                            const std::vector<std::string>& columnNames,
                                            const int64_t offset,
                                            const int64_t limit,
                                            const std::map<std::string, std::string>& options,
                                            AggregateGroupByResponse& response_ ) const;

/**
 * Performs a histogram calculation given a table, a column, and an interval
 * function. The @ref gpudb::AggregateHistogramRequest::interval "interval" is
 * used to produce bins of that size and the result, computed over the records
 * falling within each bin, is returned. For each bin, the start value is
 * inclusive, but the end value is exclusive--except for the very last bin for
 * which the end value is also inclusive.  The value returned for each bin is
 * the number of records in it, except when a column name is provided as a @ref
 * gpudb::aggregate_histogram_value_column "value_column".  In this latter case
 * the sum of the values corresponding to the @ref
 * gpudb::aggregate_histogram_value_column "value_column" is used as the result
 * instead.  The total number of bins requested cannot exceed 10,000.
 *
 * NOTE:  The Kinetica instance being accessed must be running a CUDA
 * (GPU-based) build to service a request that specifies a @ref
 * gpudb::aggregate_histogram_value_column "value_column".
 *
 * @param[in] request_  @ref gpudb::AggregateHistogramRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AggregateHistogramResponse "Response" object containing
 *         the result of the operation.
 */
AggregateHistogramResponse aggregateHistogram( const AggregateHistogramRequest& request_ ) const;

/**
 * Performs a histogram calculation given a table, a column, and an interval
 * function. The @ref gpudb::AggregateHistogramRequest::interval "interval" is
 * used to produce bins of that size and the result, computed over the records
 * falling within each bin, is returned. For each bin, the start value is
 * inclusive, but the end value is exclusive--except for the very last bin for
 * which the end value is also inclusive.  The value returned for each bin is
 * the number of records in it, except when a column name is provided as a @ref
 * gpudb::aggregate_histogram_value_column "value_column".  In this latter case
 * the sum of the values corresponding to the @ref
 * gpudb::aggregate_histogram_value_column "value_column" is used as the result
 * instead.  The total number of bins requested cannot exceed 10,000.
 *
 * NOTE:  The Kinetica instance being accessed must be running a CUDA
 * (GPU-based) build to service a request that specifies a @ref
 * gpudb::aggregate_histogram_value_column "value_column".
 *
 * @param[in] request_  @ref gpudb::AggregateHistogramRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AggregateHistogramResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AggregateHistogramResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AggregateHistogramResponse& aggregateHistogram( const AggregateHistogramRequest& request_,
                                                AggregateHistogramResponse& response_ ) const;

/**
 * Performs a histogram calculation given a table, a column, and an interval
 * function. The @a interval is used to produce bins of that size and the
 * result, computed over the records falling within each bin, is returned. For
 * each bin, the start value is inclusive, but the end value is
 * exclusive--except for the very last bin for which the end value is also
 * inclusive.  The value returned for each bin is the number of records in it,
 * except when a column name is provided as a @ref
 * gpudb::aggregate_histogram_value_column "value_column".  In this latter case
 * the sum of the values corresponding to the @ref
 * gpudb::aggregate_histogram_value_column "value_column" is used as the result
 * instead.  The total number of bins requested cannot exceed 10,000.
 *
 * NOTE:  The Kinetica instance being accessed must be running a CUDA
 * (GPU-based) build to service a request that specifies a @ref
 * gpudb::aggregate_histogram_value_column "value_column".
 *
 * @param[in] tableName  Name of the table on which the operation will be
 *                       performed. Must be an existing table, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnName  Name of a column or an expression of one or more
 *                        column names over which the histogram will be
 *                        calculated.
 * @param[in] start  Lower end value of the histogram interval, inclusive.
 * @param[in] end  Upper end value of the histogram interval, inclusive.
 * @param[in] interval  The size of each bin within the start and end
 *                      parameters.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::aggregate_histogram_value_column
 *                             "aggregate_histogram_value_column": The name of
 *                             the column to use when calculating the bin
 *                             values (values are summed).  The column must be
 *                             a numerical type (int, double, long, float).
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AggregateHistogramResponse "Response" object containing
 *         the result of the operation.
 */
AggregateHistogramResponse aggregateHistogram( const std::string& tableName,
                                               const std::string& columnName,
                                               const double start,
                                               const double end,
                                               const double interval,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Performs a histogram calculation given a table, a column, and an interval
 * function. The @a interval is used to produce bins of that size and the
 * result, computed over the records falling within each bin, is returned. For
 * each bin, the start value is inclusive, but the end value is
 * exclusive--except for the very last bin for which the end value is also
 * inclusive.  The value returned for each bin is the number of records in it,
 * except when a column name is provided as a @ref
 * gpudb::aggregate_histogram_value_column "value_column".  In this latter case
 * the sum of the values corresponding to the @ref
 * gpudb::aggregate_histogram_value_column "value_column" is used as the result
 * instead.  The total number of bins requested cannot exceed 10,000.
 *
 * NOTE:  The Kinetica instance being accessed must be running a CUDA
 * (GPU-based) build to service a request that specifies a @ref
 * gpudb::aggregate_histogram_value_column "value_column".
 *
 * @param[in] tableName  Name of the table on which the operation will be
 *                       performed. Must be an existing table, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnName  Name of a column or an expression of one or more
 *                        column names over which the histogram will be
 *                        calculated.
 * @param[in] start  Lower end value of the histogram interval, inclusive.
 * @param[in] end  Upper end value of the histogram interval, inclusive.
 * @param[in] interval  The size of each bin within the start and end
 *                      parameters.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::aggregate_histogram_value_column
 *                             "aggregate_histogram_value_column": The name of
 *                             the column to use when calculating the bin
 *                             values (values are summed).  The column must be
 *                             a numerical type (int, double, long, float).
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AggregateHistogramResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AggregateHistogramResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AggregateHistogramResponse& aggregateHistogram( const std::string& tableName,
                                                const std::string& columnName,
                                                const double start,
                                                const double end,
                                                const double interval,
                                                const std::map<std::string, std::string>& options,
                                                AggregateHistogramResponse& response_ ) const;

/**
 * This endpoint runs the k-means algorithm - a heuristic algorithm that
 * attempts to do k-means clustering.  An ideal k-means clustering algorithm
 * selects k points such that the sum of the mean squared distances of each
 * member of the set to the nearest of the k points is minimized.  The k-means
 * algorithm however does not necessarily produce such an ideal cluster.   It
 * begins with a randomly selected set of k points and then refines the
 * location of the points iteratively and settles to a local minimum.  Various
 * parameters and options are provided to control the heuristic search.
 *
 * NOTE:  The Kinetica instance being accessed must be running a CUDA
 * (GPU-based) build to service this request.
 *
 * @param[in] request_  @ref gpudb::AggregateKMeansRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AggregateKMeansResponse "Response" object containing the
 *         result of the operation.
 */
AggregateKMeansResponse aggregateKMeans( const AggregateKMeansRequest& request_ ) const;

/**
 * This endpoint runs the k-means algorithm - a heuristic algorithm that
 * attempts to do k-means clustering.  An ideal k-means clustering algorithm
 * selects k points such that the sum of the mean squared distances of each
 * member of the set to the nearest of the k points is minimized.  The k-means
 * algorithm however does not necessarily produce such an ideal cluster.   It
 * begins with a randomly selected set of k points and then refines the
 * location of the points iteratively and settles to a local minimum.  Various
 * parameters and options are provided to control the heuristic search.
 *
 * NOTE:  The Kinetica instance being accessed must be running a CUDA
 * (GPU-based) build to service this request.
 *
 * @param[in] request_  @ref gpudb::AggregateKMeansRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AggregateKMeansResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AggregateKMeansResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AggregateKMeansResponse& aggregateKMeans( const AggregateKMeansRequest& request_,
                                          AggregateKMeansResponse& response_ ) const;

/**
 * This endpoint runs the k-means algorithm - a heuristic algorithm that
 * attempts to do k-means clustering.  An ideal k-means clustering algorithm
 * selects k points such that the sum of the mean squared distances of each
 * member of the set to the nearest of the k points is minimized.  The k-means
 * algorithm however does not necessarily produce such an ideal cluster.   It
 * begins with a randomly selected set of k points and then refines the
 * location of the points iteratively and settles to a local minimum.  Various
 * parameters and options are provided to control the heuristic search.
 *
 * NOTE:  The Kinetica instance being accessed must be running a CUDA
 * (GPU-based) build to service this request.
 *
 * @param[in] tableName  Name of the table on which the operation will be
 *                       performed. Must be an existing table, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnNames  List of column names on which the operation would be
 *                         performed. If n columns are provided then each of
 *                         the k result points will have n dimensions
 *                         corresponding to the n columns.
 * @param[in] k  The number of mean points to be determined by the algorithm.
 * @param[in] tolerance  Stop iterating when the distances between successive
 *                       points is less than the given tolerance.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::aggregate_k_means_whiten
 *                             "aggregate_k_means_whiten": When set to 1 each
 *                             of the columns is first normalized by its stdv -
 *                             default is not to whiten.
 *                         <li>@ref gpudb::aggregate_k_means_max_iters
 *                             "aggregate_k_means_max_iters": Number of times
 *                             to try to hit the tolerance limit before giving
 *                             up - default is 10.
 *                         <li>@ref gpudb::aggregate_k_means_num_tries
 *                             "aggregate_k_means_num_tries": Number of times
 *                             to run the k-means algorithm with a different
 *                             randomly selected starting points - helps avoid
 *                             local minimum. Default is 1.
 *                         <li>@ref gpudb::aggregate_k_means_create_temp_table
 *                             "aggregate_k_means_create_temp_table": If @ref
 *                             gpudb::aggregate_k_means_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @ref
 *                             gpudb::aggregate_k_means_result_table
 *                             "result_table". If @ref
 *                             gpudb::aggregate_k_means_result_table_persist
 *                             "result_table_persist" is @ref
 *                             gpudb::aggregate_k_means_false "false" (or
 *                             unspecified), then this is always allowed even
 *                             if the caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::aggregate_k_means_qualified_result_table_name
 *                             "qualified_result_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_k_means_true
 *                                     "aggregate_k_means_true"
 *                                 <li>@ref gpudb::aggregate_k_means_false
 *                                     "aggregate_k_means_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_k_means_false
 *                             "aggregate_k_means_false".
 *                         <li>@ref gpudb::aggregate_k_means_result_table
 *                             "aggregate_k_means_result_table": The name of a
 *                             table used to store the results, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>.  If
 *                             this option is specified, the results are not
 *                             returned in the response.
 *                         <li>@ref
 *                             gpudb::aggregate_k_means_result_table_persist
 *                             "aggregate_k_means_result_table_persist": If
 *                             @ref gpudb::aggregate_k_means_true "true", then
 *                             the result table specified in @ref
 *                             gpudb::aggregate_k_means_result_table
 *                             "result_table" will be persisted and will not
 *                             expire unless a @ref
 *                             gpudb::aggregate_k_means_ttl "ttl" is specified.
 *                             If @ref gpudb::aggregate_k_means_false "false",
 *                             then the result table will be an in-memory table
 *                             and will expire unless a @ref
 *                             gpudb::aggregate_k_means_ttl "ttl" is specified
 *                             otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_k_means_true
 *                                     "aggregate_k_means_true"
 *                                 <li>@ref gpudb::aggregate_k_means_false
 *                                     "aggregate_k_means_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_k_means_false
 *                             "aggregate_k_means_false".
 *                         <li>@ref gpudb::aggregate_k_means_ttl
 *                             "aggregate_k_means_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the table specified in
 *                             @ref gpudb::aggregate_k_means_result_table
 *                             "result_table".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AggregateKMeansResponse "Response" object containing the
 *         result of the operation.
 */
AggregateKMeansResponse aggregateKMeans( const std::string& tableName,
                                         const std::vector<std::string>& columnNames,
                                         const int32_t k,
                                         const double tolerance,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * This endpoint runs the k-means algorithm - a heuristic algorithm that
 * attempts to do k-means clustering.  An ideal k-means clustering algorithm
 * selects k points such that the sum of the mean squared distances of each
 * member of the set to the nearest of the k points is minimized.  The k-means
 * algorithm however does not necessarily produce such an ideal cluster.   It
 * begins with a randomly selected set of k points and then refines the
 * location of the points iteratively and settles to a local minimum.  Various
 * parameters and options are provided to control the heuristic search.
 *
 * NOTE:  The Kinetica instance being accessed must be running a CUDA
 * (GPU-based) build to service this request.
 *
 * @param[in] tableName  Name of the table on which the operation will be
 *                       performed. Must be an existing table, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnNames  List of column names on which the operation would be
 *                         performed. If n columns are provided then each of
 *                         the k result points will have n dimensions
 *                         corresponding to the n columns.
 * @param[in] k  The number of mean points to be determined by the algorithm.
 * @param[in] tolerance  Stop iterating when the distances between successive
 *                       points is less than the given tolerance.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::aggregate_k_means_whiten
 *                             "aggregate_k_means_whiten": When set to 1 each
 *                             of the columns is first normalized by its stdv -
 *                             default is not to whiten.
 *                         <li>@ref gpudb::aggregate_k_means_max_iters
 *                             "aggregate_k_means_max_iters": Number of times
 *                             to try to hit the tolerance limit before giving
 *                             up - default is 10.
 *                         <li>@ref gpudb::aggregate_k_means_num_tries
 *                             "aggregate_k_means_num_tries": Number of times
 *                             to run the k-means algorithm with a different
 *                             randomly selected starting points - helps avoid
 *                             local minimum. Default is 1.
 *                         <li>@ref gpudb::aggregate_k_means_create_temp_table
 *                             "aggregate_k_means_create_temp_table": If @ref
 *                             gpudb::aggregate_k_means_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @ref
 *                             gpudb::aggregate_k_means_result_table
 *                             "result_table". If @ref
 *                             gpudb::aggregate_k_means_result_table_persist
 *                             "result_table_persist" is @ref
 *                             gpudb::aggregate_k_means_false "false" (or
 *                             unspecified), then this is always allowed even
 *                             if the caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::aggregate_k_means_qualified_result_table_name
 *                             "qualified_result_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_k_means_true
 *                                     "aggregate_k_means_true"
 *                                 <li>@ref gpudb::aggregate_k_means_false
 *                                     "aggregate_k_means_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_k_means_false
 *                             "aggregate_k_means_false".
 *                         <li>@ref gpudb::aggregate_k_means_result_table
 *                             "aggregate_k_means_result_table": The name of a
 *                             table used to store the results, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>.  If
 *                             this option is specified, the results are not
 *                             returned in the response.
 *                         <li>@ref
 *                             gpudb::aggregate_k_means_result_table_persist
 *                             "aggregate_k_means_result_table_persist": If
 *                             @ref gpudb::aggregate_k_means_true "true", then
 *                             the result table specified in @ref
 *                             gpudb::aggregate_k_means_result_table
 *                             "result_table" will be persisted and will not
 *                             expire unless a @ref
 *                             gpudb::aggregate_k_means_ttl "ttl" is specified.
 *                             If @ref gpudb::aggregate_k_means_false "false",
 *                             then the result table will be an in-memory table
 *                             and will expire unless a @ref
 *                             gpudb::aggregate_k_means_ttl "ttl" is specified
 *                             otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_k_means_true
 *                                     "aggregate_k_means_true"
 *                                 <li>@ref gpudb::aggregate_k_means_false
 *                                     "aggregate_k_means_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_k_means_false
 *                             "aggregate_k_means_false".
 *                         <li>@ref gpudb::aggregate_k_means_ttl
 *                             "aggregate_k_means_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the table specified in
 *                             @ref gpudb::aggregate_k_means_result_table
 *                             "result_table".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AggregateKMeansResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AggregateKMeansResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AggregateKMeansResponse& aggregateKMeans( const std::string& tableName,
                                          const std::vector<std::string>& columnNames,
                                          const int32_t k,
                                          const double tolerance,
                                          const std::map<std::string, std::string>& options,
                                          AggregateKMeansResponse& response_ ) const;

/**
 * Calculates and returns the minimum and maximum values of a particular column
 * in a table.
 *
 * @param[in] request_  @ref gpudb::AggregateMinMaxRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AggregateMinMaxResponse "Response" object containing the
 *         result of the operation.
 */
AggregateMinMaxResponse aggregateMinMax( const AggregateMinMaxRequest& request_ ) const;

/**
 * Calculates and returns the minimum and maximum values of a particular column
 * in a table.
 *
 * @param[in] request_  @ref gpudb::AggregateMinMaxRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AggregateMinMaxResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AggregateMinMaxResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AggregateMinMaxResponse& aggregateMinMax( const AggregateMinMaxRequest& request_,
                                          AggregateMinMaxResponse& response_ ) const;

/**
 * Calculates and returns the minimum and maximum values of a particular column
 * in a table.
 *
 * @param[in] tableName  Name of the table on which the operation will be
 *                       performed. Must be an existing table, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnName  Name of a column or an expression of one or more
 *                        column on which the min-max will be calculated.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AggregateMinMaxResponse "Response" object containing the
 *         result of the operation.
 */
AggregateMinMaxResponse aggregateMinMax( const std::string& tableName,
                                         const std::string& columnName,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Calculates and returns the minimum and maximum values of a particular column
 * in a table.
 *
 * @param[in] tableName  Name of the table on which the operation will be
 *                       performed. Must be an existing table, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnName  Name of a column or an expression of one or more
 *                        column on which the min-max will be calculated.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AggregateMinMaxResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AggregateMinMaxResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AggregateMinMaxResponse& aggregateMinMax( const std::string& tableName,
                                          const std::string& columnName,
                                          const std::map<std::string, std::string>& options,
                                          AggregateMinMaxResponse& response_ ) const;

/**
 * Calculates and returns the minimum and maximum x- and y-coordinates of a
 * particular geospatial geometry column in a table.
 *
 * @param[in] request_  @ref gpudb::AggregateMinMaxGeometryRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::AggregateMinMaxGeometryResponse "Response" object
 *         containing the result of the operation.
 */
AggregateMinMaxGeometryResponse aggregateMinMaxGeometry( const AggregateMinMaxGeometryRequest& request_ ) const;

/**
 * Calculates and returns the minimum and maximum x- and y-coordinates of a
 * particular geospatial geometry column in a table.
 *
 * @param[in] request_  @ref gpudb::AggregateMinMaxGeometryRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AggregateMinMaxGeometryResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::AggregateMinMaxGeometryResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
AggregateMinMaxGeometryResponse& aggregateMinMaxGeometry( const AggregateMinMaxGeometryRequest& request_,
                                                          AggregateMinMaxGeometryResponse& response_ ) const;

/**
 * Calculates and returns the minimum and maximum x- and y-coordinates of a
 * particular geospatial geometry column in a table.
 *
 * @param[in] tableName  Name of the table on which the operation will be
 *                       performed. Must be an existing table, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnName  Name of a geospatial geometry column on which the
 *                        min-max will be calculated.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AggregateMinMaxGeometryResponse "Response" object
 *         containing the result of the operation.
 */
AggregateMinMaxGeometryResponse aggregateMinMaxGeometry( const std::string& tableName,
                                                         const std::string& columnName,
                                                         const std::map<std::string, std::string>& options ) const;

/**
 * Calculates and returns the minimum and maximum x- and y-coordinates of a
 * particular geospatial geometry column in a table.
 *
 * @param[in] tableName  Name of the table on which the operation will be
 *                       performed. Must be an existing table, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnName  Name of a geospatial geometry column on which the
 *                        min-max will be calculated.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AggregateMinMaxGeometryResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::AggregateMinMaxGeometryResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
AggregateMinMaxGeometryResponse& aggregateMinMaxGeometry( const std::string& tableName,
                                                          const std::string& columnName,
                                                          const std::map<std::string, std::string>& options,
                                                          AggregateMinMaxGeometryResponse& response_ ) const;

/**
 * Calculates the requested statistics of the given column(s) in a given table.
 *
 * The available statistics are: @ref gpudb::aggregate_statistics_count "count"
 * (number of total objects), @ref gpudb::aggregate_statistics_mean "mean",
 * @ref gpudb::aggregate_statistics_stdv "stdv" (standard deviation), @ref
 * gpudb::aggregate_statistics_variance "variance", @ref
 * gpudb::aggregate_statistics_skew "skew", @ref
 * gpudb::aggregate_statistics_kurtosis "kurtosis", @ref
 * gpudb::aggregate_statistics_sum "sum", @ref gpudb::aggregate_statistics_min
 * "min", @ref gpudb::aggregate_statistics_max "max", @ref
 * gpudb::aggregate_statistics_weighted_average "weighted_average", @ref
 * gpudb::aggregate_statistics_cardinality "cardinality" (unique count), @ref
 * gpudb::aggregate_statistics_estimated_cardinality "estimated_cardinality",
 * @ref gpudb::aggregate_statistics_percentile "percentile", and @ref
 * gpudb::aggregate_statistics_percentile_rank "percentile_rank".
 *
 * Estimated cardinality is calculated by using the hyperloglog approximation
 * technique.
 *
 * Percentiles and percentile ranks are approximate and are calculated using
 * the t-digest algorithm. They must include the desired @ref
 * gpudb::aggregate_statistics_percentile "percentile"/@ref
 * gpudb::aggregate_statistics_percentile_rank "percentile_rank". To compute
 * multiple percentiles each value must be specified separately (i.e.\
 * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
 *
 * A second, comma-separated value can be added to the @ref
 * gpudb::aggregate_statistics_percentile "percentile" statistic to calculate
 * percentile resolution, e.g., a 50th percentile with 200 resolution would be
 * 'percentile(50,200)'.
 *
 * The weighted average statistic requires a weight column to be specified in
 * @ref gpudb::aggregate_statistics_weight_column_name "weight_column_name".
 * The weighted average is then defined as the sum of the products of @ref
 * gpudb::AggregateStatisticsRequest::columnName "columnName" times the @ref
 * gpudb::aggregate_statistics_weight_column_name "weight_column_name" values
 * divided by the sum of the @ref
 * gpudb::aggregate_statistics_weight_column_name "weight_column_name" values.
 *
 * Additional columns can be used in the calculation of statistics via @ref
 * gpudb::aggregate_statistics_additional_column_names
 * "additional_column_names".  Values in these columns will be included in the
 * overall aggregate calculation--individual aggregates will not be calculated
 * per additional column.  For instance, requesting the @ref
 * gpudb::aggregate_statistics_count "count" & @ref
 * gpudb::aggregate_statistics_mean "mean" of @ref
 * gpudb::AggregateStatisticsRequest::columnName "columnName" x and @ref
 * gpudb::aggregate_statistics_additional_column_names
 * "additional_column_names" y & z, where x holds the numbers 1-10, y holds
 * 11-20, and z holds 21-30, would return the total number of x, y, & z values
 * (30), and the single average value across all x, y, & z values (15.5).
 *
 * The response includes a list of key/value pairs of each statistic requested
 * and its corresponding value.
 *
 * @param[in] request_  @ref gpudb::AggregateStatisticsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AggregateStatisticsResponse "Response" object containing
 *         the result of the operation.
 */
AggregateStatisticsResponse aggregateStatistics( const AggregateStatisticsRequest& request_ ) const;

/**
 * Calculates the requested statistics of the given column(s) in a given table.
 *
 * The available statistics are: @ref gpudb::aggregate_statistics_count "count"
 * (number of total objects), @ref gpudb::aggregate_statistics_mean "mean",
 * @ref gpudb::aggregate_statistics_stdv "stdv" (standard deviation), @ref
 * gpudb::aggregate_statistics_variance "variance", @ref
 * gpudb::aggregate_statistics_skew "skew", @ref
 * gpudb::aggregate_statistics_kurtosis "kurtosis", @ref
 * gpudb::aggregate_statistics_sum "sum", @ref gpudb::aggregate_statistics_min
 * "min", @ref gpudb::aggregate_statistics_max "max", @ref
 * gpudb::aggregate_statistics_weighted_average "weighted_average", @ref
 * gpudb::aggregate_statistics_cardinality "cardinality" (unique count), @ref
 * gpudb::aggregate_statistics_estimated_cardinality "estimated_cardinality",
 * @ref gpudb::aggregate_statistics_percentile "percentile", and @ref
 * gpudb::aggregate_statistics_percentile_rank "percentile_rank".
 *
 * Estimated cardinality is calculated by using the hyperloglog approximation
 * technique.
 *
 * Percentiles and percentile ranks are approximate and are calculated using
 * the t-digest algorithm. They must include the desired @ref
 * gpudb::aggregate_statistics_percentile "percentile"/@ref
 * gpudb::aggregate_statistics_percentile_rank "percentile_rank". To compute
 * multiple percentiles each value must be specified separately (i.e.\
 * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
 *
 * A second, comma-separated value can be added to the @ref
 * gpudb::aggregate_statistics_percentile "percentile" statistic to calculate
 * percentile resolution, e.g., a 50th percentile with 200 resolution would be
 * 'percentile(50,200)'.
 *
 * The weighted average statistic requires a weight column to be specified in
 * @ref gpudb::aggregate_statistics_weight_column_name "weight_column_name".
 * The weighted average is then defined as the sum of the products of @ref
 * gpudb::AggregateStatisticsRequest::columnName "columnName" times the @ref
 * gpudb::aggregate_statistics_weight_column_name "weight_column_name" values
 * divided by the sum of the @ref
 * gpudb::aggregate_statistics_weight_column_name "weight_column_name" values.
 *
 * Additional columns can be used in the calculation of statistics via @ref
 * gpudb::aggregate_statistics_additional_column_names
 * "additional_column_names".  Values in these columns will be included in the
 * overall aggregate calculation--individual aggregates will not be calculated
 * per additional column.  For instance, requesting the @ref
 * gpudb::aggregate_statistics_count "count" & @ref
 * gpudb::aggregate_statistics_mean "mean" of @ref
 * gpudb::AggregateStatisticsRequest::columnName "columnName" x and @ref
 * gpudb::aggregate_statistics_additional_column_names
 * "additional_column_names" y & z, where x holds the numbers 1-10, y holds
 * 11-20, and z holds 21-30, would return the total number of x, y, & z values
 * (30), and the single average value across all x, y, & z values (15.5).
 *
 * The response includes a list of key/value pairs of each statistic requested
 * and its corresponding value.
 *
 * @param[in] request_  @ref gpudb::AggregateStatisticsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AggregateStatisticsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AggregateStatisticsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AggregateStatisticsResponse& aggregateStatistics( const AggregateStatisticsRequest& request_,
                                                  AggregateStatisticsResponse& response_ ) const;

/**
 * Calculates the requested statistics of the given column(s) in a given table.
 *
 * The available statistics are: @ref gpudb::aggregate_statistics_count "count"
 * (number of total objects), @ref gpudb::aggregate_statistics_mean "mean",
 * @ref gpudb::aggregate_statistics_stdv "stdv" (standard deviation), @ref
 * gpudb::aggregate_statistics_variance "variance", @ref
 * gpudb::aggregate_statistics_skew "skew", @ref
 * gpudb::aggregate_statistics_kurtosis "kurtosis", @ref
 * gpudb::aggregate_statistics_sum "sum", @ref gpudb::aggregate_statistics_min
 * "min", @ref gpudb::aggregate_statistics_max "max", @ref
 * gpudb::aggregate_statistics_weighted_average "weighted_average", @ref
 * gpudb::aggregate_statistics_cardinality "cardinality" (unique count), @ref
 * gpudb::aggregate_statistics_estimated_cardinality "estimated_cardinality",
 * @ref gpudb::aggregate_statistics_percentile "percentile", and @ref
 * gpudb::aggregate_statistics_percentile_rank "percentile_rank".
 *
 * Estimated cardinality is calculated by using the hyperloglog approximation
 * technique.
 *
 * Percentiles and percentile ranks are approximate and are calculated using
 * the t-digest algorithm. They must include the desired @ref
 * gpudb::aggregate_statistics_percentile "percentile"/@ref
 * gpudb::aggregate_statistics_percentile_rank "percentile_rank". To compute
 * multiple percentiles each value must be specified separately (i.e.\
 * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
 *
 * A second, comma-separated value can be added to the @ref
 * gpudb::aggregate_statistics_percentile "percentile" statistic to calculate
 * percentile resolution, e.g., a 50th percentile with 200 resolution would be
 * 'percentile(50,200)'.
 *
 * The weighted average statistic requires a weight column to be specified in
 * @ref gpudb::aggregate_statistics_weight_column_name "weight_column_name".
 * The weighted average is then defined as the sum of the products of @a
 * columnName times the @ref gpudb::aggregate_statistics_weight_column_name
 * "weight_column_name" values divided by the sum of the @ref
 * gpudb::aggregate_statistics_weight_column_name "weight_column_name" values.
 *
 * Additional columns can be used in the calculation of statistics via @ref
 * gpudb::aggregate_statistics_additional_column_names
 * "additional_column_names".  Values in these columns will be included in the
 * overall aggregate calculation--individual aggregates will not be calculated
 * per additional column.  For instance, requesting the @ref
 * gpudb::aggregate_statistics_count "count" & @ref
 * gpudb::aggregate_statistics_mean "mean" of @a columnName x and @ref
 * gpudb::aggregate_statistics_additional_column_names
 * "additional_column_names" y & z, where x holds the numbers 1-10, y holds
 * 11-20, and z holds 21-30, would return the total number of x, y, & z values
 * (30), and the single average value across all x, y, & z values (15.5).
 *
 * The response includes a list of key/value pairs of each statistic requested
 * and its corresponding value.
 *
 * @param[in] tableName  Name of the table on which the statistics operation
 *                       will be performed, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnName  Name of the primary column for which the statistics
 *                        are to be calculated.
 * @param[in] stats  Comma separated list of the statistics to calculate, e.g.
 *                   "sum,mean".
 *                   Supported values:
 *                   <ul>
 *                       <li>@ref gpudb::aggregate_statistics_count
 *                           "aggregate_statistics_count": Number of objects
 *                           (independent of the given column(s)).
 *                       <li>@ref gpudb::aggregate_statistics_mean
 *                           "aggregate_statistics_mean": Arithmetic mean
 *                           (average), equivalent to sum/count.
 *                       <li>@ref gpudb::aggregate_statistics_stdv
 *                           "aggregate_statistics_stdv": Sample standard
 *                           deviation (denominator is count-1).
 *                       <li>@ref gpudb::aggregate_statistics_variance
 *                           "aggregate_statistics_variance": Unbiased sample
 *                           variance (denominator is count-1).
 *                       <li>@ref gpudb::aggregate_statistics_skew
 *                           "aggregate_statistics_skew": Skewness (third
 *                           standardized moment).
 *                       <li>@ref gpudb::aggregate_statistics_kurtosis
 *                           "aggregate_statistics_kurtosis": Kurtosis (fourth
 *                           standardized moment).
 *                       <li>@ref gpudb::aggregate_statistics_sum
 *                           "aggregate_statistics_sum": Sum of all values in
 *                           the column(s).
 *                       <li>@ref gpudb::aggregate_statistics_min
 *                           "aggregate_statistics_min": Minimum value of the
 *                           column(s).
 *                       <li>@ref gpudb::aggregate_statistics_max
 *                           "aggregate_statistics_max": Maximum value of the
 *                           column(s).
 *                       <li>@ref gpudb::aggregate_statistics_weighted_average
 *                           "aggregate_statistics_weighted_average": Weighted
 *                           arithmetic mean (using the option @ref
 *                           gpudb::aggregate_statistics_weight_column_name
 *                           "weight_column_name" as the weighting column).
 *                       <li>@ref gpudb::aggregate_statistics_cardinality
 *                           "aggregate_statistics_cardinality": Number of
 *                           unique values in the column(s).
 *                       <li>@ref
 *                           gpudb::aggregate_statistics_estimated_cardinality
 *                           "aggregate_statistics_estimated_cardinality":
 *                           Estimate (via hyperloglog technique) of the number
 *                           of unique values in the column(s).
 *                       <li>@ref gpudb::aggregate_statistics_percentile
 *                           "aggregate_statistics_percentile": Estimate (via
 *                           t-digest) of the given percentile of the column(s)
 *                           (percentile(50.0) will be an approximation of the
 *                           median). Add a second, comma-separated value to
 *                           calculate percentile resolution, e.g.,
 *                           'percentile(75,150)'
 *                       <li>@ref gpudb::aggregate_statistics_percentile_rank
 *                           "aggregate_statistics_percentile_rank": Estimate
 *                           (via t-digest) of the percentile rank of the given
 *                           value in the column(s) (if the given value is the
 *                           median of the column(s),
 *                           percentile_rank(&lt;median&gt;) will return
 *                           approximately 50.0).
 *                   </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::aggregate_statistics_additional_column_names
 *                             "aggregate_statistics_additional_column_names":
 *                             A list of comma separated column names over
 *                             which statistics can be accumulated along with
 *                             the primary column.  All columns listed and @a
 *                             columnName must be of the same type.  Must not
 *                             include the column specified in @a columnName
 *                             and no column can be listed twice.
 *                         <li>@ref
 *                             gpudb::aggregate_statistics_weight_column_name
 *                             "aggregate_statistics_weight_column_name": Name
 *                             of column used as weighting attribute for the
 *                             weighted average statistic.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AggregateStatisticsResponse "Response" object containing
 *         the result of the operation.
 */
AggregateStatisticsResponse aggregateStatistics( const std::string& tableName,
                                                 const std::string& columnName,
                                                 const std::string& stats,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Calculates the requested statistics of the given column(s) in a given table.
 *
 * The available statistics are: @ref gpudb::aggregate_statistics_count "count"
 * (number of total objects), @ref gpudb::aggregate_statistics_mean "mean",
 * @ref gpudb::aggregate_statistics_stdv "stdv" (standard deviation), @ref
 * gpudb::aggregate_statistics_variance "variance", @ref
 * gpudb::aggregate_statistics_skew "skew", @ref
 * gpudb::aggregate_statistics_kurtosis "kurtosis", @ref
 * gpudb::aggregate_statistics_sum "sum", @ref gpudb::aggregate_statistics_min
 * "min", @ref gpudb::aggregate_statistics_max "max", @ref
 * gpudb::aggregate_statistics_weighted_average "weighted_average", @ref
 * gpudb::aggregate_statistics_cardinality "cardinality" (unique count), @ref
 * gpudb::aggregate_statistics_estimated_cardinality "estimated_cardinality",
 * @ref gpudb::aggregate_statistics_percentile "percentile", and @ref
 * gpudb::aggregate_statistics_percentile_rank "percentile_rank".
 *
 * Estimated cardinality is calculated by using the hyperloglog approximation
 * technique.
 *
 * Percentiles and percentile ranks are approximate and are calculated using
 * the t-digest algorithm. They must include the desired @ref
 * gpudb::aggregate_statistics_percentile "percentile"/@ref
 * gpudb::aggregate_statistics_percentile_rank "percentile_rank". To compute
 * multiple percentiles each value must be specified separately (i.e.\
 * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
 *
 * A second, comma-separated value can be added to the @ref
 * gpudb::aggregate_statistics_percentile "percentile" statistic to calculate
 * percentile resolution, e.g., a 50th percentile with 200 resolution would be
 * 'percentile(50,200)'.
 *
 * The weighted average statistic requires a weight column to be specified in
 * @ref gpudb::aggregate_statistics_weight_column_name "weight_column_name".
 * The weighted average is then defined as the sum of the products of @a
 * columnName times the @ref gpudb::aggregate_statistics_weight_column_name
 * "weight_column_name" values divided by the sum of the @ref
 * gpudb::aggregate_statistics_weight_column_name "weight_column_name" values.
 *
 * Additional columns can be used in the calculation of statistics via @ref
 * gpudb::aggregate_statistics_additional_column_names
 * "additional_column_names".  Values in these columns will be included in the
 * overall aggregate calculation--individual aggregates will not be calculated
 * per additional column.  For instance, requesting the @ref
 * gpudb::aggregate_statistics_count "count" & @ref
 * gpudb::aggregate_statistics_mean "mean" of @a columnName x and @ref
 * gpudb::aggregate_statistics_additional_column_names
 * "additional_column_names" y & z, where x holds the numbers 1-10, y holds
 * 11-20, and z holds 21-30, would return the total number of x, y, & z values
 * (30), and the single average value across all x, y, & z values (15.5).
 *
 * The response includes a list of key/value pairs of each statistic requested
 * and its corresponding value.
 *
 * @param[in] tableName  Name of the table on which the statistics operation
 *                       will be performed, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnName  Name of the primary column for which the statistics
 *                        are to be calculated.
 * @param[in] stats  Comma separated list of the statistics to calculate, e.g.
 *                   "sum,mean".
 *                   Supported values:
 *                   <ul>
 *                       <li>@ref gpudb::aggregate_statistics_count
 *                           "aggregate_statistics_count": Number of objects
 *                           (independent of the given column(s)).
 *                       <li>@ref gpudb::aggregate_statistics_mean
 *                           "aggregate_statistics_mean": Arithmetic mean
 *                           (average), equivalent to sum/count.
 *                       <li>@ref gpudb::aggregate_statistics_stdv
 *                           "aggregate_statistics_stdv": Sample standard
 *                           deviation (denominator is count-1).
 *                       <li>@ref gpudb::aggregate_statistics_variance
 *                           "aggregate_statistics_variance": Unbiased sample
 *                           variance (denominator is count-1).
 *                       <li>@ref gpudb::aggregate_statistics_skew
 *                           "aggregate_statistics_skew": Skewness (third
 *                           standardized moment).
 *                       <li>@ref gpudb::aggregate_statistics_kurtosis
 *                           "aggregate_statistics_kurtosis": Kurtosis (fourth
 *                           standardized moment).
 *                       <li>@ref gpudb::aggregate_statistics_sum
 *                           "aggregate_statistics_sum": Sum of all values in
 *                           the column(s).
 *                       <li>@ref gpudb::aggregate_statistics_min
 *                           "aggregate_statistics_min": Minimum value of the
 *                           column(s).
 *                       <li>@ref gpudb::aggregate_statistics_max
 *                           "aggregate_statistics_max": Maximum value of the
 *                           column(s).
 *                       <li>@ref gpudb::aggregate_statistics_weighted_average
 *                           "aggregate_statistics_weighted_average": Weighted
 *                           arithmetic mean (using the option @ref
 *                           gpudb::aggregate_statistics_weight_column_name
 *                           "weight_column_name" as the weighting column).
 *                       <li>@ref gpudb::aggregate_statistics_cardinality
 *                           "aggregate_statistics_cardinality": Number of
 *                           unique values in the column(s).
 *                       <li>@ref
 *                           gpudb::aggregate_statistics_estimated_cardinality
 *                           "aggregate_statistics_estimated_cardinality":
 *                           Estimate (via hyperloglog technique) of the number
 *                           of unique values in the column(s).
 *                       <li>@ref gpudb::aggregate_statistics_percentile
 *                           "aggregate_statistics_percentile": Estimate (via
 *                           t-digest) of the given percentile of the column(s)
 *                           (percentile(50.0) will be an approximation of the
 *                           median). Add a second, comma-separated value to
 *                           calculate percentile resolution, e.g.,
 *                           'percentile(75,150)'
 *                       <li>@ref gpudb::aggregate_statistics_percentile_rank
 *                           "aggregate_statistics_percentile_rank": Estimate
 *                           (via t-digest) of the percentile rank of the given
 *                           value in the column(s) (if the given value is the
 *                           median of the column(s),
 *                           percentile_rank(&lt;median&gt;) will return
 *                           approximately 50.0).
 *                   </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::aggregate_statistics_additional_column_names
 *                             "aggregate_statistics_additional_column_names":
 *                             A list of comma separated column names over
 *                             which statistics can be accumulated along with
 *                             the primary column.  All columns listed and @a
 *                             columnName must be of the same type.  Must not
 *                             include the column specified in @a columnName
 *                             and no column can be listed twice.
 *                         <li>@ref
 *                             gpudb::aggregate_statistics_weight_column_name
 *                             "aggregate_statistics_weight_column_name": Name
 *                             of column used as weighting attribute for the
 *                             weighted average statistic.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AggregateStatisticsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AggregateStatisticsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AggregateStatisticsResponse& aggregateStatistics( const std::string& tableName,
                                                  const std::string& columnName,
                                                  const std::string& stats,
                                                  const std::map<std::string, std::string>& options,
                                                  AggregateStatisticsResponse& response_ ) const;

/**
 * Divides the given set into bins and calculates statistics of the values of a
 * value-column in each bin.  The bins are based on the values of a given
 * binning-column.  The statistics that may be requested are mean, stdv
 * (standard deviation), variance, skew, kurtosis, sum, min, max, first, last
 * and weighted average. In addition to the requested statistics the count of
 * total samples in each bin is returned. This counts vector is just the
 * histogram of the column used to divide the set members into bins. The
 * weighted average statistic requires a weight column to be specified in @ref
 * gpudb::aggregate_statistics_by_range_weight_column_name
 * "weight_column_name". The weighted average is then defined as the sum of the
 * products of the value column times the weight column divided by the sum of
 * the weight column.
 *
 * There are two methods for binning the set members. In the first, which can
 * be used for numeric valued binning-columns, a min, max and interval are
 * specified. The number of bins, nbins, is the integer upper bound of
 * (max-min)/interval. Values that fall in the range
 * [min+n*interval,min+(n+1)*interval) are placed in the nth bin where n ranges
 * from 0..nbin-2. The final bin is [min+(nbin-1)*interval,max]. In the second
 * method, @ref gpudb::aggregate_statistics_by_range_bin_values "bin_values"
 * specifies a list of binning column values. Binning-columns whose value
 * matches the nth member of the @ref
 * gpudb::aggregate_statistics_by_range_bin_values "bin_values" list are placed
 * in the nth bin. When a list is provided, the binning-column must be of type
 * string or int.
 *
 * NOTE:  The Kinetica instance being accessed must be running a CUDA
 * (GPU-based) build to service this request.
 *
 * @param[in] request_  @ref gpudb::AggregateStatisticsByRangeRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::AggregateStatisticsByRangeResponse "Response" object
 *         containing the result of the operation.
 */
AggregateStatisticsByRangeResponse aggregateStatisticsByRange( const AggregateStatisticsByRangeRequest& request_ ) const;

/**
 * Divides the given set into bins and calculates statistics of the values of a
 * value-column in each bin.  The bins are based on the values of a given
 * binning-column.  The statistics that may be requested are mean, stdv
 * (standard deviation), variance, skew, kurtosis, sum, min, max, first, last
 * and weighted average. In addition to the requested statistics the count of
 * total samples in each bin is returned. This counts vector is just the
 * histogram of the column used to divide the set members into bins. The
 * weighted average statistic requires a weight column to be specified in @ref
 * gpudb::aggregate_statistics_by_range_weight_column_name
 * "weight_column_name". The weighted average is then defined as the sum of the
 * products of the value column times the weight column divided by the sum of
 * the weight column.
 *
 * There are two methods for binning the set members. In the first, which can
 * be used for numeric valued binning-columns, a min, max and interval are
 * specified. The number of bins, nbins, is the integer upper bound of
 * (max-min)/interval. Values that fall in the range
 * [min+n*interval,min+(n+1)*interval) are placed in the nth bin where n ranges
 * from 0..nbin-2. The final bin is [min+(nbin-1)*interval,max]. In the second
 * method, @ref gpudb::aggregate_statistics_by_range_bin_values "bin_values"
 * specifies a list of binning column values. Binning-columns whose value
 * matches the nth member of the @ref
 * gpudb::aggregate_statistics_by_range_bin_values "bin_values" list are placed
 * in the nth bin. When a list is provided, the binning-column must be of type
 * string or int.
 *
 * NOTE:  The Kinetica instance being accessed must be running a CUDA
 * (GPU-based) build to service this request.
 *
 * @param[in] request_  @ref gpudb::AggregateStatisticsByRangeRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AggregateStatisticsByRangeResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::AggregateStatisticsByRangeResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
AggregateStatisticsByRangeResponse& aggregateStatisticsByRange( const AggregateStatisticsByRangeRequest& request_,
                                                                AggregateStatisticsByRangeResponse& response_ ) const;

/**
 * Divides the given set into bins and calculates statistics of the values of a
 * value-column in each bin.  The bins are based on the values of a given
 * binning-column.  The statistics that may be requested are mean, stdv
 * (standard deviation), variance, skew, kurtosis, sum, min, max, first, last
 * and weighted average. In addition to the requested statistics the count of
 * total samples in each bin is returned. This counts vector is just the
 * histogram of the column used to divide the set members into bins. The
 * weighted average statistic requires a weight column to be specified in @ref
 * gpudb::aggregate_statistics_by_range_weight_column_name
 * "weight_column_name". The weighted average is then defined as the sum of the
 * products of the value column times the weight column divided by the sum of
 * the weight column.
 *
 * There are two methods for binning the set members. In the first, which can
 * be used for numeric valued binning-columns, a min, max and interval are
 * specified. The number of bins, nbins, is the integer upper bound of
 * (max-min)/interval. Values that fall in the range
 * [min+n*interval,min+(n+1)*interval) are placed in the nth bin where n ranges
 * from 0..nbin-2. The final bin is [min+(nbin-1)*interval,max]. In the second
 * method, @ref gpudb::aggregate_statistics_by_range_bin_values "bin_values"
 * specifies a list of binning column values. Binning-columns whose value
 * matches the nth member of the @ref
 * gpudb::aggregate_statistics_by_range_bin_values "bin_values" list are placed
 * in the nth bin. When a list is provided, the binning-column must be of type
 * string or int.
 *
 * NOTE:  The Kinetica instance being accessed must be running a CUDA
 * (GPU-based) build to service this request.
 *
 * @param[in] tableName  Name of the table on which the ranged-statistics
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] selectExpression  For a non-empty expression statistics are
 *                              calculated for those records for which the
 *                              expression is true. The default value is ''.
 * @param[in] columnName  Name of the binning-column used to divide the set
 *                        samples into bins.
 * @param[in] valueColumnName  Name of the value-column for which statistics
 *                             are to be computed.
 * @param[in] stats  A string of comma separated list of the statistics to
 *                   calculate, e.g. 'sum,mean'. Available statistics: mean,
 *                   stdv (standard deviation), variance, skew, kurtosis, sum.
 * @param[in] start  The lower bound of the binning-column.
 * @param[in] end  The upper bound of the binning-column.
 * @param[in] interval  The interval of a bin. Set members fall into bin i if
 *                      the binning-column falls in the range
 *                      [start+interval*i, start+interval*(i+1)).
 * @param[in] options  Map of optional parameters:
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::aggregate_statistics_by_range_additional_column_names
 *                             "aggregate_statistics_by_range_additional_column_names":
 *                             A list of comma separated value-column names
 *                             over which statistics can be accumulated along
 *                             with the primary value_column.
 *                         <li>@ref
 *                             gpudb::aggregate_statistics_by_range_bin_values
 *                             "aggregate_statistics_by_range_bin_values": A
 *                             list of comma separated binning-column values.
 *                             Values that match the nth bin_values value are
 *                             placed in the nth bin.
 *                         <li>@ref
 *                             gpudb::aggregate_statistics_by_range_weight_column_name
 *                             "aggregate_statistics_by_range_weight_column_name":
 *                             Name of the column used as weighting column for
 *                             the weighted_average statistic.
 *                         <li>@ref
 *                             gpudb::aggregate_statistics_by_range_order_column_name
 *                             "aggregate_statistics_by_range_order_column_name":
 *                             Name of the column used for candlestick charting
 *                             techniques.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AggregateStatisticsByRangeResponse "Response" object
 *         containing the result of the operation.
 */
AggregateStatisticsByRangeResponse aggregateStatisticsByRange( const std::string& tableName,
                                                               const std::string& selectExpression,
                                                               const std::string& columnName,
                                                               const std::string& valueColumnName,
                                                               const std::string& stats,
                                                               const double start,
                                                               const double end,
                                                               const double interval,
                                                               const std::map<std::string, std::string>& options ) const;

/**
 * Divides the given set into bins and calculates statistics of the values of a
 * value-column in each bin.  The bins are based on the values of a given
 * binning-column.  The statistics that may be requested are mean, stdv
 * (standard deviation), variance, skew, kurtosis, sum, min, max, first, last
 * and weighted average. In addition to the requested statistics the count of
 * total samples in each bin is returned. This counts vector is just the
 * histogram of the column used to divide the set members into bins. The
 * weighted average statistic requires a weight column to be specified in @ref
 * gpudb::aggregate_statistics_by_range_weight_column_name
 * "weight_column_name". The weighted average is then defined as the sum of the
 * products of the value column times the weight column divided by the sum of
 * the weight column.
 *
 * There are two methods for binning the set members. In the first, which can
 * be used for numeric valued binning-columns, a min, max and interval are
 * specified. The number of bins, nbins, is the integer upper bound of
 * (max-min)/interval. Values that fall in the range
 * [min+n*interval,min+(n+1)*interval) are placed in the nth bin where n ranges
 * from 0..nbin-2. The final bin is [min+(nbin-1)*interval,max]. In the second
 * method, @ref gpudb::aggregate_statistics_by_range_bin_values "bin_values"
 * specifies a list of binning column values. Binning-columns whose value
 * matches the nth member of the @ref
 * gpudb::aggregate_statistics_by_range_bin_values "bin_values" list are placed
 * in the nth bin. When a list is provided, the binning-column must be of type
 * string or int.
 *
 * NOTE:  The Kinetica instance being accessed must be running a CUDA
 * (GPU-based) build to service this request.
 *
 * @param[in] tableName  Name of the table on which the ranged-statistics
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] selectExpression  For a non-empty expression statistics are
 *                              calculated for those records for which the
 *                              expression is true. The default value is ''.
 * @param[in] columnName  Name of the binning-column used to divide the set
 *                        samples into bins.
 * @param[in] valueColumnName  Name of the value-column for which statistics
 *                             are to be computed.
 * @param[in] stats  A string of comma separated list of the statistics to
 *                   calculate, e.g. 'sum,mean'. Available statistics: mean,
 *                   stdv (standard deviation), variance, skew, kurtosis, sum.
 * @param[in] start  The lower bound of the binning-column.
 * @param[in] end  The upper bound of the binning-column.
 * @param[in] interval  The interval of a bin. Set members fall into bin i if
 *                      the binning-column falls in the range
 *                      [start+interval*i, start+interval*(i+1)).
 * @param[in] options  Map of optional parameters:
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::aggregate_statistics_by_range_additional_column_names
 *                             "aggregate_statistics_by_range_additional_column_names":
 *                             A list of comma separated value-column names
 *                             over which statistics can be accumulated along
 *                             with the primary value_column.
 *                         <li>@ref
 *                             gpudb::aggregate_statistics_by_range_bin_values
 *                             "aggregate_statistics_by_range_bin_values": A
 *                             list of comma separated binning-column values.
 *                             Values that match the nth bin_values value are
 *                             placed in the nth bin.
 *                         <li>@ref
 *                             gpudb::aggregate_statistics_by_range_weight_column_name
 *                             "aggregate_statistics_by_range_weight_column_name":
 *                             Name of the column used as weighting column for
 *                             the weighted_average statistic.
 *                         <li>@ref
 *                             gpudb::aggregate_statistics_by_range_order_column_name
 *                             "aggregate_statistics_by_range_order_column_name":
 *                             Name of the column used for candlestick charting
 *                             techniques.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AggregateStatisticsByRangeResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::AggregateStatisticsByRangeResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
AggregateStatisticsByRangeResponse& aggregateStatisticsByRange( const std::string& tableName,
                                                                const std::string& selectExpression,
                                                                const std::string& columnName,
                                                                const std::string& valueColumnName,
                                                                const std::string& stats,
                                                                const double start,
                                                                const double end,
                                                                const double interval,
                                                                const std::map<std::string, std::string>& options,
                                                                AggregateStatisticsByRangeResponse& response_ ) const;

/**
 * Returns all the unique values from a particular column (specified by @ref
 * gpudb::AggregateUniqueRequest::columnName "columnName") of a particular
 * table or view (specified by @ref gpudb::AggregateUniqueRequest::tableName
 * "tableName"). If @ref gpudb::AggregateUniqueRequest::columnName "columnName"
 * is a numeric column, the values will be in @ref
 * gpudb::RawAggregateUniqueResponse::binaryEncodedResponse
 * "binaryEncodedResponse". Otherwise if @ref
 * gpudb::AggregateUniqueRequest::columnName "columnName" is a string column,
 * the values will be in @ref
 * gpudb::RawAggregateUniqueResponse::jsonEncodedResponse
 * "jsonEncodedResponse".  The results can be paged via @ref
 * gpudb::AggregateUniqueRequest::offset "offset" and @ref
 * gpudb::AggregateUniqueRequest::limit "limit" parameters.
 *
 * Columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a> are unable to be used with this function.
 *
 * To get the first 10 unique values sorted in descending order @ref
 * gpudb::AggregateUniqueRequest::options "options" would be:
 * @code
 *
 *     {"limit":"10","sort_order":"descending"}
 *
 * @endcode
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * If a @ref gpudb::aggregate_unique_result_table "result_table" name is
 * specified in the @ref gpudb::AggregateUniqueRequest::options "options", the
 * results are stored in a new table with that name--no results are returned in
 * the response.  Both the table name and resulting column name must adhere to
 * <a href="../../../concepts/tables/#table" target="_top">standard naming
 * conventions</a>; any column expression will need to be aliased.  If the
 * source table's <a href="../../../concepts/tables/#shard-keys"
 * target="_top">shard key</a> is used as the @ref
 * gpudb::AggregateUniqueRequest::columnName "columnName", the result table
 * will be sharded, in all other cases it will be replicated.  Sorting will
 * properly function only if the result table is replicated or if there is only
 * one processing node and should not be relied upon in other cases.  Not
 * available if the value of @ref gpudb::AggregateUniqueRequest::columnName
 * "columnName" is an unrestricted-length string.
 *
 * @param[in] request_  @ref gpudb::AggregateUniqueRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::RawAggregateUniqueResponse "Response" object containing
 *         the result of the operation.
 */
RawAggregateUniqueResponse aggregateUniqueRaw( const AggregateUniqueRequest& request_ ) const;

/**
 * Returns all the unique values from a particular column (specified by @ref
 * gpudb::AggregateUniqueRequest::columnName "columnName") of a particular
 * table or view (specified by @ref gpudb::AggregateUniqueRequest::tableName
 * "tableName"). If @ref gpudb::AggregateUniqueRequest::columnName "columnName"
 * is a numeric column, the values will be in @ref
 * gpudb::RawAggregateUniqueResponse::binaryEncodedResponse
 * "binaryEncodedResponse". Otherwise if @ref
 * gpudb::AggregateUniqueRequest::columnName "columnName" is a string column,
 * the values will be in @ref
 * gpudb::RawAggregateUniqueResponse::jsonEncodedResponse
 * "jsonEncodedResponse".  The results can be paged via @ref
 * gpudb::AggregateUniqueRequest::offset "offset" and @ref
 * gpudb::AggregateUniqueRequest::limit "limit" parameters.
 *
 * Columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a> are unable to be used with this function.
 *
 * To get the first 10 unique values sorted in descending order @ref
 * gpudb::AggregateUniqueRequest::options "options" would be:
 * @code
 *
 *     {"limit":"10","sort_order":"descending"}
 *
 * @endcode
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * If a @ref gpudb::aggregate_unique_result_table "result_table" name is
 * specified in the @ref gpudb::AggregateUniqueRequest::options "options", the
 * results are stored in a new table with that name--no results are returned in
 * the response.  Both the table name and resulting column name must adhere to
 * <a href="../../../concepts/tables/#table" target="_top">standard naming
 * conventions</a>; any column expression will need to be aliased.  If the
 * source table's <a href="../../../concepts/tables/#shard-keys"
 * target="_top">shard key</a> is used as the @ref
 * gpudb::AggregateUniqueRequest::columnName "columnName", the result table
 * will be sharded, in all other cases it will be replicated.  Sorting will
 * properly function only if the result table is replicated or if there is only
 * one processing node and should not be relied upon in other cases.  Not
 * available if the value of @ref gpudb::AggregateUniqueRequest::columnName
 * "columnName" is an unrestricted-length string.
 *
 * @param[in] request_  @ref gpudb::AggregateUniqueRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RawAggregateUniqueResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RawAggregateUniqueResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
RawAggregateUniqueResponse& aggregateUniqueRaw( const AggregateUniqueRequest& request_,
                                                RawAggregateUniqueResponse& response_ ) const;

/**
 * Returns all the unique values from a particular column (specified by @ref
 * gpudb::AggregateUniqueRequest::columnName "columnName") of a particular
 * table or view (specified by @ref gpudb::AggregateUniqueRequest::tableName
 * "tableName"). If @ref gpudb::AggregateUniqueRequest::columnName "columnName"
 * is a numeric column, the values will be in @ref
 * gpudb::RawAggregateUniqueResponse::binaryEncodedResponse
 * "binaryEncodedResponse". Otherwise if @ref
 * gpudb::AggregateUniqueRequest::columnName "columnName" is a string column,
 * the values will be in @ref
 * gpudb::RawAggregateUniqueResponse::jsonEncodedResponse
 * "jsonEncodedResponse".  The results can be paged via @ref
 * gpudb::AggregateUniqueRequest::offset "offset" and @ref
 * gpudb::AggregateUniqueRequest::limit "limit" parameters.
 *
 * Columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a> are unable to be used with this function.
 *
 * To get the first 10 unique values sorted in descending order @ref
 * gpudb::AggregateUniqueRequest::options "options" would be:
 * @code
 *
 *     {"limit":"10","sort_order":"descending"}
 *
 * @endcode
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * If a @ref gpudb::aggregate_unique_result_table "result_table" name is
 * specified in the @ref gpudb::AggregateUniqueRequest::options "options", the
 * results are stored in a new table with that name--no results are returned in
 * the response.  Both the table name and resulting column name must adhere to
 * <a href="../../../concepts/tables/#table" target="_top">standard naming
 * conventions</a>; any column expression will need to be aliased.  If the
 * source table's <a href="../../../concepts/tables/#shard-keys"
 * target="_top">shard key</a> is used as the @ref
 * gpudb::AggregateUniqueRequest::columnName "columnName", the result table
 * will be sharded, in all other cases it will be replicated.  Sorting will
 * properly function only if the result table is replicated or if there is only
 * one processing node and should not be relied upon in other cases.  Not
 * available if the value of @ref gpudb::AggregateUniqueRequest::columnName
 * "columnName" is an unrestricted-length string.
 *
 * @param[in] request_  @ref gpudb::AggregateUniqueRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AggregateUniqueResponse "Response" object containing the
 *         result of the operation.
 */
AggregateUniqueResponse aggregateUnique( const AggregateUniqueRequest& request_ ) const;

/**
 * Returns all the unique values from a particular column (specified by @ref
 * gpudb::AggregateUniqueRequest::columnName "columnName") of a particular
 * table or view (specified by @ref gpudb::AggregateUniqueRequest::tableName
 * "tableName"). If @ref gpudb::AggregateUniqueRequest::columnName "columnName"
 * is a numeric column, the values will be in @ref
 * gpudb::RawAggregateUniqueResponse::binaryEncodedResponse
 * "binaryEncodedResponse". Otherwise if @ref
 * gpudb::AggregateUniqueRequest::columnName "columnName" is a string column,
 * the values will be in @ref
 * gpudb::RawAggregateUniqueResponse::jsonEncodedResponse
 * "jsonEncodedResponse".  The results can be paged via @ref
 * gpudb::AggregateUniqueRequest::offset "offset" and @ref
 * gpudb::AggregateUniqueRequest::limit "limit" parameters.
 *
 * Columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a> are unable to be used with this function.
 *
 * To get the first 10 unique values sorted in descending order @ref
 * gpudb::AggregateUniqueRequest::options "options" would be:
 * @code
 *
 *     {"limit":"10","sort_order":"descending"}
 *
 * @endcode
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * If a @ref gpudb::aggregate_unique_result_table "result_table" name is
 * specified in the @ref gpudb::AggregateUniqueRequest::options "options", the
 * results are stored in a new table with that name--no results are returned in
 * the response.  Both the table name and resulting column name must adhere to
 * <a href="../../../concepts/tables/#table" target="_top">standard naming
 * conventions</a>; any column expression will need to be aliased.  If the
 * source table's <a href="../../../concepts/tables/#shard-keys"
 * target="_top">shard key</a> is used as the @ref
 * gpudb::AggregateUniqueRequest::columnName "columnName", the result table
 * will be sharded, in all other cases it will be replicated.  Sorting will
 * properly function only if the result table is replicated or if there is only
 * one processing node and should not be relied upon in other cases.  Not
 * available if the value of @ref gpudb::AggregateUniqueRequest::columnName
 * "columnName" is an unrestricted-length string.
 *
 * @param[in] request_  @ref gpudb::AggregateUniqueRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AggregateUniqueResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AggregateUniqueResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AggregateUniqueResponse& aggregateUnique( const AggregateUniqueRequest& request_,
                                          AggregateUniqueResponse& response_ ) const;

/**
 * Returns all the unique values from a particular column (specified by @a
 * columnName) of a particular table or view (specified by @a tableName). If @a
 * columnName is a numeric column, the values will be in @ref
 * gpudb::RawAggregateUniqueResponse::binaryEncodedResponse
 * "binaryEncodedResponse". Otherwise if @a columnName is a string column, the
 * values will be in @ref
 * gpudb::RawAggregateUniqueResponse::jsonEncodedResponse
 * "jsonEncodedResponse".  The results can be paged via @a offset and @a limit
 * parameters.
 *
 * Columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a> are unable to be used with this function.
 *
 * To get the first 10 unique values sorted in descending order @a options
 * would be:
 * @code
 *
 *     {"limit":"10","sort_order":"descending"}
 *
 * @endcode
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * If a @ref gpudb::aggregate_unique_result_table "result_table" name is
 * specified in the @a options, the results are stored in a new table with that
 * name--no results are returned in the response.  Both the table name and
 * resulting column name must adhere to <a
 * href="../../../concepts/tables/#table" target="_top">standard naming
 * conventions</a>; any column expression will need to be aliased.  If the
 * source table's <a href="../../../concepts/tables/#shard-keys"
 * target="_top">shard key</a> is used as the @a columnName, the result table
 * will be sharded, in all other cases it will be replicated.  Sorting will
 * properly function only if the result table is replicated or if there is only
 * one processing node and should not be relied upon in other cases.  Not
 * available if the value of @a columnName is an unrestricted-length string.
 *
 * @param[in] tableName  Name of an existing table or view on which the
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnName  Name of the column or an expression containing one or
 *                        more column names on which the unique function would
 *                        be applied.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawAggregateUniqueResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::aggregate_unique_create_temp_table
 *                             "aggregate_unique_create_temp_table": If @ref
 *                             gpudb::aggregate_unique_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table". If @ref
 *                             gpudb::aggregate_unique_result_table_persist
 *                             "result_table_persist" is @ref
 *                             gpudb::aggregate_unique_false "false" (or
 *                             unspecified), then this is always allowed even
 *                             if the caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::aggregate_unique_qualified_result_table_name
 *                             "qualified_result_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unique_true
 *                                     "aggregate_unique_true"
 *                                 <li>@ref gpudb::aggregate_unique_false
 *                                     "aggregate_unique_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unique_false
 *                             "aggregate_unique_false".
 *                         <li>@ref gpudb::aggregate_unique_collection_name
 *                             "aggregate_unique_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema as part of @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table" and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema which is to
 *                             contain the table specified in @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table". If the schema provided is
 *                             non-existent, it will be automatically created.
 *                         <li>@ref gpudb::aggregate_unique_expression
 *                             "aggregate_unique_expression": Optional filter
 *                             expression to apply to the table.
 *                         <li>@ref gpudb::aggregate_unique_sort_order
 *                             "aggregate_unique_sort_order": String indicating
 *                             how the returned values should be sorted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unique_ascending
 *                                     "aggregate_unique_ascending"
 *                                 <li>@ref gpudb::aggregate_unique_descending
 *                                     "aggregate_unique_descending"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unique_ascending
 *                             "aggregate_unique_ascending".
 *                         <li>@ref gpudb::aggregate_unique_order_by
 *                             "aggregate_unique_order_by": Comma-separated
 *                             list of the columns to be sorted by as well as
 *                             the sort direction, e.g., 'timestamp asc, x
 *                             desc'. The default value is ''.
 *                         <li>@ref gpudb::aggregate_unique_result_table
 *                             "aggregate_unique_result_table": The name of the
 *                             table used to store the results, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>.  If
 *                             present, no results are returned in the
 *                             response.  Not available if @a columnName is an
 *                             unrestricted-length string.
 *                         <li>@ref
 *                             gpudb::aggregate_unique_result_table_persist
 *                             "aggregate_unique_result_table_persist": If @ref
 *                             gpudb::aggregate_unique_true "true", then the
 *                             result table specified in @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table" will be persisted and will not
 *                             expire unless a @ref gpudb::aggregate_unique_ttl
 *                             "ttl" is specified.   If @ref
 *                             gpudb::aggregate_unique_false "false", then the
 *                             result table will be an in-memory table and will
 *                             expire unless a @ref gpudb::aggregate_unique_ttl
 *                             "ttl" is specified otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unique_true
 *                                     "aggregate_unique_true"
 *                                 <li>@ref gpudb::aggregate_unique_false
 *                                     "aggregate_unique_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unique_false
 *                             "aggregate_unique_false".
 *                         <li>@ref
 *                             gpudb::aggregate_unique_result_table_force_replicated
 *                             "aggregate_unique_result_table_force_replicated":
 *                             Force the result table to be replicated (ignores
 *                             any sharding). Must be used in combination with
 *                             the @ref gpudb::aggregate_unique_result_table
 *                             "result_table" option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unique_true
 *                                     "aggregate_unique_true"
 *                                 <li>@ref gpudb::aggregate_unique_false
 *                                     "aggregate_unique_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unique_false
 *                             "aggregate_unique_false".
 *                         <li>@ref
 *                             gpudb::aggregate_unique_result_table_generate_pk
 *                             "aggregate_unique_result_table_generate_pk": If
 *                             @ref gpudb::aggregate_unique_true "true" then
 *                             set a primary key for the result table. Must be
 *                             used in combination with the @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table" option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unique_true
 *                                     "aggregate_unique_true"
 *                                 <li>@ref gpudb::aggregate_unique_false
 *                                     "aggregate_unique_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unique_false
 *                             "aggregate_unique_false".
 *                         <li>@ref gpudb::aggregate_unique_ttl
 *                             "aggregate_unique_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the table specified in
 *                             @ref gpudb::aggregate_unique_result_table
 *                             "result_table".
 *                         <li>@ref gpudb::aggregate_unique_chunk_size
 *                             "aggregate_unique_chunk_size": Indicates the
 *                             number of records per chunk to be used for the
 *                             result table. Must be used in combination with
 *                             the @ref gpudb::aggregate_unique_result_table
 *                             "result_table" option.
 *                         <li>@ref
 *                             gpudb::aggregate_unique_chunk_column_max_memory
 *                             "aggregate_unique_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for the result
 *                             table. Must be used in combination with the @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_unique_chunk_max_memory
 *                             "aggregate_unique_chunk_max_memory": Indicates
 *                             the target maximum data size for all columns in
 *                             a chunk to be used for the result table. Must be
 *                             used in combination with the @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_unique_view_id
 *                             "aggregate_unique_view_id": ID of view of which
 *                             the result table will be a member. The default
 *                             value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AggregateUniqueResponse "Response" object containing the
 *         result of the operation.
 */
AggregateUniqueResponse aggregateUnique( const std::string& tableName,
                                         const std::string& columnName,
                                         const int64_t offset,
                                         const int64_t limit,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Returns all the unique values from a particular column (specified by @a
 * columnName) of a particular table or view (specified by @a tableName). If @a
 * columnName is a numeric column, the values will be in @ref
 * gpudb::RawAggregateUniqueResponse::binaryEncodedResponse
 * "binaryEncodedResponse". Otherwise if @a columnName is a string column, the
 * values will be in @ref
 * gpudb::RawAggregateUniqueResponse::jsonEncodedResponse
 * "jsonEncodedResponse".  The results can be paged via @a offset and @a limit
 * parameters.
 *
 * Columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a> are unable to be used with this function.
 *
 * To get the first 10 unique values sorted in descending order @a options
 * would be:
 * @code
 *
 *     {"limit":"10","sort_order":"descending"}
 *
 * @endcode
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * If a @ref gpudb::aggregate_unique_result_table "result_table" name is
 * specified in the @a options, the results are stored in a new table with that
 * name--no results are returned in the response.  Both the table name and
 * resulting column name must adhere to <a
 * href="../../../concepts/tables/#table" target="_top">standard naming
 * conventions</a>; any column expression will need to be aliased.  If the
 * source table's <a href="../../../concepts/tables/#shard-keys"
 * target="_top">shard key</a> is used as the @a columnName, the result table
 * will be sharded, in all other cases it will be replicated.  Sorting will
 * properly function only if the result table is replicated or if there is only
 * one processing node and should not be relied upon in other cases.  Not
 * available if the value of @a columnName is an unrestricted-length string.
 *
 * @param[in] tableName  Name of an existing table or view on which the
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnName  Name of the column or an expression containing one or
 *                        more column names on which the unique function would
 *                        be applied.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawAggregateUniqueResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::aggregate_unique_create_temp_table
 *                             "aggregate_unique_create_temp_table": If @ref
 *                             gpudb::aggregate_unique_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table". If @ref
 *                             gpudb::aggregate_unique_result_table_persist
 *                             "result_table_persist" is @ref
 *                             gpudb::aggregate_unique_false "false" (or
 *                             unspecified), then this is always allowed even
 *                             if the caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::aggregate_unique_qualified_result_table_name
 *                             "qualified_result_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unique_true
 *                                     "aggregate_unique_true"
 *                                 <li>@ref gpudb::aggregate_unique_false
 *                                     "aggregate_unique_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unique_false
 *                             "aggregate_unique_false".
 *                         <li>@ref gpudb::aggregate_unique_collection_name
 *                             "aggregate_unique_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema as part of @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table" and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema which is to
 *                             contain the table specified in @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table". If the schema provided is
 *                             non-existent, it will be automatically created.
 *                         <li>@ref gpudb::aggregate_unique_expression
 *                             "aggregate_unique_expression": Optional filter
 *                             expression to apply to the table.
 *                         <li>@ref gpudb::aggregate_unique_sort_order
 *                             "aggregate_unique_sort_order": String indicating
 *                             how the returned values should be sorted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unique_ascending
 *                                     "aggregate_unique_ascending"
 *                                 <li>@ref gpudb::aggregate_unique_descending
 *                                     "aggregate_unique_descending"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unique_ascending
 *                             "aggregate_unique_ascending".
 *                         <li>@ref gpudb::aggregate_unique_order_by
 *                             "aggregate_unique_order_by": Comma-separated
 *                             list of the columns to be sorted by as well as
 *                             the sort direction, e.g., 'timestamp asc, x
 *                             desc'. The default value is ''.
 *                         <li>@ref gpudb::aggregate_unique_result_table
 *                             "aggregate_unique_result_table": The name of the
 *                             table used to store the results, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>.  If
 *                             present, no results are returned in the
 *                             response.  Not available if @a columnName is an
 *                             unrestricted-length string.
 *                         <li>@ref
 *                             gpudb::aggregate_unique_result_table_persist
 *                             "aggregate_unique_result_table_persist": If @ref
 *                             gpudb::aggregate_unique_true "true", then the
 *                             result table specified in @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table" will be persisted and will not
 *                             expire unless a @ref gpudb::aggregate_unique_ttl
 *                             "ttl" is specified.   If @ref
 *                             gpudb::aggregate_unique_false "false", then the
 *                             result table will be an in-memory table and will
 *                             expire unless a @ref gpudb::aggregate_unique_ttl
 *                             "ttl" is specified otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unique_true
 *                                     "aggregate_unique_true"
 *                                 <li>@ref gpudb::aggregate_unique_false
 *                                     "aggregate_unique_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unique_false
 *                             "aggregate_unique_false".
 *                         <li>@ref
 *                             gpudb::aggregate_unique_result_table_force_replicated
 *                             "aggregate_unique_result_table_force_replicated":
 *                             Force the result table to be replicated (ignores
 *                             any sharding). Must be used in combination with
 *                             the @ref gpudb::aggregate_unique_result_table
 *                             "result_table" option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unique_true
 *                                     "aggregate_unique_true"
 *                                 <li>@ref gpudb::aggregate_unique_false
 *                                     "aggregate_unique_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unique_false
 *                             "aggregate_unique_false".
 *                         <li>@ref
 *                             gpudb::aggregate_unique_result_table_generate_pk
 *                             "aggregate_unique_result_table_generate_pk": If
 *                             @ref gpudb::aggregate_unique_true "true" then
 *                             set a primary key for the result table. Must be
 *                             used in combination with the @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table" option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unique_true
 *                                     "aggregate_unique_true"
 *                                 <li>@ref gpudb::aggregate_unique_false
 *                                     "aggregate_unique_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unique_false
 *                             "aggregate_unique_false".
 *                         <li>@ref gpudb::aggregate_unique_ttl
 *                             "aggregate_unique_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the table specified in
 *                             @ref gpudb::aggregate_unique_result_table
 *                             "result_table".
 *                         <li>@ref gpudb::aggregate_unique_chunk_size
 *                             "aggregate_unique_chunk_size": Indicates the
 *                             number of records per chunk to be used for the
 *                             result table. Must be used in combination with
 *                             the @ref gpudb::aggregate_unique_result_table
 *                             "result_table" option.
 *                         <li>@ref
 *                             gpudb::aggregate_unique_chunk_column_max_memory
 *                             "aggregate_unique_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for the result
 *                             table. Must be used in combination with the @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_unique_chunk_max_memory
 *                             "aggregate_unique_chunk_max_memory": Indicates
 *                             the target maximum data size for all columns in
 *                             a chunk to be used for the result table. Must be
 *                             used in combination with the @ref
 *                             gpudb::aggregate_unique_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_unique_view_id
 *                             "aggregate_unique_view_id": ID of view of which
 *                             the result table will be a member. The default
 *                             value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AggregateUniqueResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AggregateUniqueResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AggregateUniqueResponse& aggregateUnique( const std::string& tableName,
                                          const std::string& columnName,
                                          const int64_t offset,
                                          const int64_t limit,
                                          const std::map<std::string, std::string>& options,
                                          AggregateUniqueResponse& response_ ) const;

/**
 * Rotate the column values into rows values.
 *
 * For unpivot details and examples, see <a href="../../../concepts/unpivot/"
 * target="_top">Unpivot</a>.  For limitations, see <a
 * href="../../../concepts/unpivot/#limitations" target="_top">Unpivot
 * Limitations</a>.
 *
 * Unpivot is used to normalize tables that are built for cross tabular
 * reporting purposes. The unpivot operator rotates the column values for all
 * the pivoted columns. A variable column, value column and all columns from
 * the source table except the unpivot columns are projected into the result
 * table. The variable column and value columns in the result table indicate
 * the pivoted column name and values respectively.
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * @param[in] request_  @ref gpudb::AggregateUnpivotRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::RawAggregateUnpivotResponse "Response" object containing
 *         the result of the operation.
 */
RawAggregateUnpivotResponse aggregateUnpivotRaw( const AggregateUnpivotRequest& request_ ) const;

/**
 * Rotate the column values into rows values.
 *
 * For unpivot details and examples, see <a href="../../../concepts/unpivot/"
 * target="_top">Unpivot</a>.  For limitations, see <a
 * href="../../../concepts/unpivot/#limitations" target="_top">Unpivot
 * Limitations</a>.
 *
 * Unpivot is used to normalize tables that are built for cross tabular
 * reporting purposes. The unpivot operator rotates the column values for all
 * the pivoted columns. A variable column, value column and all columns from
 * the source table except the unpivot columns are projected into the result
 * table. The variable column and value columns in the result table indicate
 * the pivoted column name and values respectively.
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * @param[in] request_  @ref gpudb::AggregateUnpivotRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RawAggregateUnpivotResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RawAggregateUnpivotResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
RawAggregateUnpivotResponse& aggregateUnpivotRaw( const AggregateUnpivotRequest& request_,
                                                  RawAggregateUnpivotResponse& response_ ) const;

/**
 * Rotate the column values into rows values.
 *
 * For unpivot details and examples, see <a href="../../../concepts/unpivot/"
 * target="_top">Unpivot</a>.  For limitations, see <a
 * href="../../../concepts/unpivot/#limitations" target="_top">Unpivot
 * Limitations</a>.
 *
 * Unpivot is used to normalize tables that are built for cross tabular
 * reporting purposes. The unpivot operator rotates the column values for all
 * the pivoted columns. A variable column, value column and all columns from
 * the source table except the unpivot columns are projected into the result
 * table. The variable column and value columns in the result table indicate
 * the pivoted column name and values respectively.
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * @param[in] request_  @ref gpudb::AggregateUnpivotRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AggregateUnpivotResponse "Response" object containing
 *         the result of the operation.
 */
AggregateUnpivotResponse aggregateUnpivot( const AggregateUnpivotRequest& request_ ) const;

/**
 * Rotate the column values into rows values.
 *
 * For unpivot details and examples, see <a href="../../../concepts/unpivot/"
 * target="_top">Unpivot</a>.  For limitations, see <a
 * href="../../../concepts/unpivot/#limitations" target="_top">Unpivot
 * Limitations</a>.
 *
 * Unpivot is used to normalize tables that are built for cross tabular
 * reporting purposes. The unpivot operator rotates the column values for all
 * the pivoted columns. A variable column, value column and all columns from
 * the source table except the unpivot columns are projected into the result
 * table. The variable column and value columns in the result table indicate
 * the pivoted column name and values respectively.
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * @param[in] request_  @ref gpudb::AggregateUnpivotRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AggregateUnpivotResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AggregateUnpivotResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AggregateUnpivotResponse& aggregateUnpivot( const AggregateUnpivotRequest& request_,
                                            AggregateUnpivotResponse& response_ ) const;

/**
 * Rotate the column values into rows values.
 *
 * For unpivot details and examples, see <a href="../../../concepts/unpivot/"
 * target="_top">Unpivot</a>.  For limitations, see <a
 * href="../../../concepts/unpivot/#limitations" target="_top">Unpivot
 * Limitations</a>.
 *
 * Unpivot is used to normalize tables that are built for cross tabular
 * reporting purposes. The unpivot operator rotates the column values for all
 * the pivoted columns. A variable column, value column and all columns from
 * the source table except the unpivot columns are projected into the result
 * table. The variable column and value columns in the result table indicate
 * the pivoted column name and values respectively.
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * @param[in] tableName  Name of the table on which the operation will be
 *                       performed. Must be an existing table/view, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnNames  List of column names or expressions. A wildcard '*'
 *                         can be used to include all the non-pivoted columns
 *                         from the source table.
 * @param[in] variableColumnName  Specifies the variable/parameter column name.
 *                                The default value is ''.
 * @param[in] valueColumnName  Specifies the value column name. The default
 *                             value is ''.
 * @param[in] pivotedColumns  List of one or more values typically the column
 *                            names of the input table. All the columns in the
 *                            source table must have the same data type.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::aggregate_unpivot_create_temp_table
 *                             "aggregate_unpivot_create_temp_table": If @ref
 *                             gpudb::aggregate_unpivot_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table". If @ref
 *                             gpudb::aggregate_unpivot_result_table_persist
 *                             "result_table_persist" is @ref
 *                             gpudb::aggregate_unpivot_false "false" (or
 *                             unspecified), then this is always allowed even
 *                             if the caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::aggregate_unpivot_qualified_result_table_name
 *                             "qualified_result_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unpivot_true
 *                                     "aggregate_unpivot_true"
 *                                 <li>@ref gpudb::aggregate_unpivot_false
 *                                     "aggregate_unpivot_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unpivot_false
 *                             "aggregate_unpivot_false".
 *                         <li>@ref gpudb::aggregate_unpivot_collection_name
 *                             "aggregate_unpivot_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema as part of @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table" and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema which is to
 *                             contain the table specified in @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table". If the schema is non-existent,
 *                             it will be automatically created.
 *                         <li>@ref gpudb::aggregate_unpivot_result_table
 *                             "aggregate_unpivot_result_table": The name of a
 *                             table used to store the results, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>. If
 *                             present, no results are returned in the
 *                             response.
 *                         <li>@ref
 *                             gpudb::aggregate_unpivot_result_table_persist
 *                             "aggregate_unpivot_result_table_persist": If
 *                             @ref gpudb::aggregate_unpivot_true "true", then
 *                             the result table specified in @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table" will be persisted and will not
 *                             expire unless a @ref
 *                             gpudb::aggregate_unpivot_ttl "ttl" is specified.
 *                             If @ref gpudb::aggregate_unpivot_false "false",
 *                             then the result table will be an in-memory table
 *                             and will expire unless a @ref
 *                             gpudb::aggregate_unpivot_ttl "ttl" is specified
 *                             otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unpivot_true
 *                                     "aggregate_unpivot_true"
 *                                 <li>@ref gpudb::aggregate_unpivot_false
 *                                     "aggregate_unpivot_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unpivot_false
 *                             "aggregate_unpivot_false".
 *                         <li>@ref gpudb::aggregate_unpivot_expression
 *                             "aggregate_unpivot_expression": Filter
 *                             expression to apply to the table prior to
 *                             unpivot processing.
 *                         <li>@ref gpudb::aggregate_unpivot_order_by
 *                             "aggregate_unpivot_order_by": Comma-separated
 *                             list of the columns to be sorted by; e.g.
 *                             'timestamp asc, x desc'.  The columns specified
 *                             must be present in input table.  If any alias is
 *                             given for any column name, the alias must be
 *                             used, rather than the original column name. The
 *                             default value is ''.
 *                         <li>@ref gpudb::aggregate_unpivot_chunk_size
 *                             "aggregate_unpivot_chunk_size": Indicates the
 *                             number of records per chunk to be used for the
 *                             result table. Must be used in combination with
 *                             the @ref gpudb::aggregate_unpivot_result_table
 *                             "result_table" option.
 *                         <li>@ref
 *                             gpudb::aggregate_unpivot_chunk_column_max_memory
 *                             "aggregate_unpivot_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for the result
 *                             table. Must be used in combination with the @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_unpivot_chunk_max_memory
 *                             "aggregate_unpivot_chunk_max_memory": Indicates
 *                             the target maximum data size for all columns in
 *                             a chunk to be used for the result table. Must be
 *                             used in combination with the @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_unpivot_limit
 *                             "aggregate_unpivot_limit": The number of records
 *                             to keep. The default value is ''.
 *                         <li>@ref gpudb::aggregate_unpivot_ttl
 *                             "aggregate_unpivot_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the table specified in
 *                             @ref gpudb::aggregate_unpivot_result_table
 *                             "result_table".
 *                         <li>@ref gpudb::aggregate_unpivot_view_id
 *                             "aggregate_unpivot_view_id": view this result
 *                             table is part of. The default value is ''.
 *                         <li>@ref gpudb::aggregate_unpivot_create_indexes
 *                             "aggregate_unpivot_create_indexes":
 *                             Comma-separated list of columns on which to
 *                             create indexes on the table specified in @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table". The columns specified must be
 *                             present in output column names.  If any alias is
 *                             given for any column name, the alias must be
 *                             used, rather than the original column name.
 *                         <li>@ref
 *                             gpudb::aggregate_unpivot_result_table_force_replicated
 *                             "aggregate_unpivot_result_table_force_replicated":
 *                             Force the result table to be replicated (ignores
 *                             any sharding). Must be used in combination with
 *                             the @ref gpudb::aggregate_unpivot_result_table
 *                             "result_table" option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unpivot_true
 *                                     "aggregate_unpivot_true"
 *                                 <li>@ref gpudb::aggregate_unpivot_false
 *                                     "aggregate_unpivot_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unpivot_false
 *                             "aggregate_unpivot_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AggregateUnpivotResponse "Response" object containing
 *         the result of the operation.
 */
AggregateUnpivotResponse aggregateUnpivot( const std::string& tableName,
                                           const std::vector<std::string>& columnNames,
                                           const std::string& variableColumnName,
                                           const std::string& valueColumnName,
                                           const std::vector<std::string>& pivotedColumns,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Rotate the column values into rows values.
 *
 * For unpivot details and examples, see <a href="../../../concepts/unpivot/"
 * target="_top">Unpivot</a>.  For limitations, see <a
 * href="../../../concepts/unpivot/#limitations" target="_top">Unpivot
 * Limitations</a>.
 *
 * Unpivot is used to normalize tables that are built for cross tabular
 * reporting purposes. The unpivot operator rotates the column values for all
 * the pivoted columns. A variable column, value column and all columns from
 * the source table except the unpivot columns are projected into the result
 * table. The variable column and value columns in the result table indicate
 * the pivoted column name and values respectively.
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * @param[in] tableName  Name of the table on which the operation will be
 *                       performed. Must be an existing table/view, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnNames  List of column names or expressions. A wildcard '*'
 *                         can be used to include all the non-pivoted columns
 *                         from the source table.
 * @param[in] variableColumnName  Specifies the variable/parameter column name.
 *                                The default value is ''.
 * @param[in] valueColumnName  Specifies the value column name. The default
 *                             value is ''.
 * @param[in] pivotedColumns  List of one or more values typically the column
 *                            names of the input table. All the columns in the
 *                            source table must have the same data type.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::aggregate_unpivot_create_temp_table
 *                             "aggregate_unpivot_create_temp_table": If @ref
 *                             gpudb::aggregate_unpivot_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table". If @ref
 *                             gpudb::aggregate_unpivot_result_table_persist
 *                             "result_table_persist" is @ref
 *                             gpudb::aggregate_unpivot_false "false" (or
 *                             unspecified), then this is always allowed even
 *                             if the caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::aggregate_unpivot_qualified_result_table_name
 *                             "qualified_result_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unpivot_true
 *                                     "aggregate_unpivot_true"
 *                                 <li>@ref gpudb::aggregate_unpivot_false
 *                                     "aggregate_unpivot_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unpivot_false
 *                             "aggregate_unpivot_false".
 *                         <li>@ref gpudb::aggregate_unpivot_collection_name
 *                             "aggregate_unpivot_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema as part of @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table" and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema which is to
 *                             contain the table specified in @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table". If the schema is non-existent,
 *                             it will be automatically created.
 *                         <li>@ref gpudb::aggregate_unpivot_result_table
 *                             "aggregate_unpivot_result_table": The name of a
 *                             table used to store the results, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>. If
 *                             present, no results are returned in the
 *                             response.
 *                         <li>@ref
 *                             gpudb::aggregate_unpivot_result_table_persist
 *                             "aggregate_unpivot_result_table_persist": If
 *                             @ref gpudb::aggregate_unpivot_true "true", then
 *                             the result table specified in @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table" will be persisted and will not
 *                             expire unless a @ref
 *                             gpudb::aggregate_unpivot_ttl "ttl" is specified.
 *                             If @ref gpudb::aggregate_unpivot_false "false",
 *                             then the result table will be an in-memory table
 *                             and will expire unless a @ref
 *                             gpudb::aggregate_unpivot_ttl "ttl" is specified
 *                             otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unpivot_true
 *                                     "aggregate_unpivot_true"
 *                                 <li>@ref gpudb::aggregate_unpivot_false
 *                                     "aggregate_unpivot_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unpivot_false
 *                             "aggregate_unpivot_false".
 *                         <li>@ref gpudb::aggregate_unpivot_expression
 *                             "aggregate_unpivot_expression": Filter
 *                             expression to apply to the table prior to
 *                             unpivot processing.
 *                         <li>@ref gpudb::aggregate_unpivot_order_by
 *                             "aggregate_unpivot_order_by": Comma-separated
 *                             list of the columns to be sorted by; e.g.
 *                             'timestamp asc, x desc'.  The columns specified
 *                             must be present in input table.  If any alias is
 *                             given for any column name, the alias must be
 *                             used, rather than the original column name. The
 *                             default value is ''.
 *                         <li>@ref gpudb::aggregate_unpivot_chunk_size
 *                             "aggregate_unpivot_chunk_size": Indicates the
 *                             number of records per chunk to be used for the
 *                             result table. Must be used in combination with
 *                             the @ref gpudb::aggregate_unpivot_result_table
 *                             "result_table" option.
 *                         <li>@ref
 *                             gpudb::aggregate_unpivot_chunk_column_max_memory
 *                             "aggregate_unpivot_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for the result
 *                             table. Must be used in combination with the @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_unpivot_chunk_max_memory
 *                             "aggregate_unpivot_chunk_max_memory": Indicates
 *                             the target maximum data size for all columns in
 *                             a chunk to be used for the result table. Must be
 *                             used in combination with the @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table" option.
 *                         <li>@ref gpudb::aggregate_unpivot_limit
 *                             "aggregate_unpivot_limit": The number of records
 *                             to keep. The default value is ''.
 *                         <li>@ref gpudb::aggregate_unpivot_ttl
 *                             "aggregate_unpivot_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the table specified in
 *                             @ref gpudb::aggregate_unpivot_result_table
 *                             "result_table".
 *                         <li>@ref gpudb::aggregate_unpivot_view_id
 *                             "aggregate_unpivot_view_id": view this result
 *                             table is part of. The default value is ''.
 *                         <li>@ref gpudb::aggregate_unpivot_create_indexes
 *                             "aggregate_unpivot_create_indexes":
 *                             Comma-separated list of columns on which to
 *                             create indexes on the table specified in @ref
 *                             gpudb::aggregate_unpivot_result_table
 *                             "result_table". The columns specified must be
 *                             present in output column names.  If any alias is
 *                             given for any column name, the alias must be
 *                             used, rather than the original column name.
 *                         <li>@ref
 *                             gpudb::aggregate_unpivot_result_table_force_replicated
 *                             "aggregate_unpivot_result_table_force_replicated":
 *                             Force the result table to be replicated (ignores
 *                             any sharding). Must be used in combination with
 *                             the @ref gpudb::aggregate_unpivot_result_table
 *                             "result_table" option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::aggregate_unpivot_true
 *                                     "aggregate_unpivot_true"
 *                                 <li>@ref gpudb::aggregate_unpivot_false
 *                                     "aggregate_unpivot_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::aggregate_unpivot_false
 *                             "aggregate_unpivot_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AggregateUnpivotResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AggregateUnpivotResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AggregateUnpivotResponse& aggregateUnpivot( const std::string& tableName,
                                            const std::vector<std::string>& columnNames,
                                            const std::string& variableColumnName,
                                            const std::string& valueColumnName,
                                            const std::vector<std::string>& pivotedColumns,
                                            const std::map<std::string, std::string>& options,
                                            AggregateUnpivotResponse& response_ ) const;

/**
 * Alter the properties of an existing <a href="../../../concepts/credentials/"
 * target="_top">credential</a>.
 *
 * @param[in] request_  @ref gpudb::AlterCredentialRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterCredentialResponse "Response" object containing the
 *         result of the operation.
 */
AlterCredentialResponse alterCredential( const AlterCredentialRequest& request_ ) const;

/**
 * Alter the properties of an existing <a href="../../../concepts/credentials/"
 * target="_top">credential</a>.
 *
 * @param[in] request_  @ref gpudb::AlterCredentialRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterCredentialResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterCredentialResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterCredentialResponse& alterCredential( const AlterCredentialRequest& request_,
                                          AlterCredentialResponse& response_ ) const;

/**
 * Alter the properties of an existing <a href="../../../concepts/credentials/"
 * target="_top">credential</a>.
 *
 * @param[in] credentialName  Name of the credential to be altered. Must be an
 *                            existing credential.
 * @param[in] credentialUpdatesMap  Map containing the properties of the
 *                                  credential to be updated. Error if empty.
 *                                  <ul>
 *                                      <li>@ref gpudb::alter_credential_type
 *                                          "alter_credential_type": New type
 *                                          for the credential.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_aws_access_key
 *                                                  "alter_credential_aws_access_key"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_aws_iam_role
 *                                                  "alter_credential_aws_iam_role"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_azure_ad
 *                                                  "alter_credential_azure_ad"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_azure_oauth
 *                                                  "alter_credential_azure_oauth"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_azure_sas
 *                                                  "alter_credential_azure_sas"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_azure_storage_key
 *                                                  "alter_credential_azure_storage_key"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_docker
 *                                                  "alter_credential_docker"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_gcs_service_account_id
 *                                                  "alter_credential_gcs_service_account_id"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_gcs_service_account_keys
 *                                                  "alter_credential_gcs_service_account_keys"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_hdfs
 *                                                  "alter_credential_hdfs"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_kafka
 *                                                  "alter_credential_kafka"
 *                                          </ul>
 *                                      <li>@ref
 *                                          gpudb::alter_credential_identity
 *                                          "alter_credential_identity": New
 *                                          user for the credential
 *                                      <li>@ref gpudb::alter_credential_secret
 *                                          "alter_credential_secret": New
 *                                          password for the credential
 *                                      <li>@ref
 *                                          gpudb::alter_credential_schema_name
 *                                          "alter_credential_schema_name":
 *                                          Updates the schema name.  If @ref
 *                                          gpudb::alter_credential_schema_name
 *                                          "schema_name" doesn't exist, an
 *                                          error will be thrown. If @ref
 *                                          gpudb::alter_credential_schema_name
 *                                          "schema_name" is empty, then the
 *                                          user's default schema will be used.
 *                                  </ul>
 * @param[in] options  Optional parameters.
 *
 * @return @ref gpudb::AlterCredentialResponse "Response" object containing the
 *         result of the operation.
 */
AlterCredentialResponse alterCredential( const std::string& credentialName,
                                         const std::map<std::string, std::string>& credentialUpdatesMap,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Alter the properties of an existing <a href="../../../concepts/credentials/"
 * target="_top">credential</a>.
 *
 * @param[in] credentialName  Name of the credential to be altered. Must be an
 *                            existing credential.
 * @param[in] credentialUpdatesMap  Map containing the properties of the
 *                                  credential to be updated. Error if empty.
 *                                  <ul>
 *                                      <li>@ref gpudb::alter_credential_type
 *                                          "alter_credential_type": New type
 *                                          for the credential.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_aws_access_key
 *                                                  "alter_credential_aws_access_key"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_aws_iam_role
 *                                                  "alter_credential_aws_iam_role"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_azure_ad
 *                                                  "alter_credential_azure_ad"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_azure_oauth
 *                                                  "alter_credential_azure_oauth"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_azure_sas
 *                                                  "alter_credential_azure_sas"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_azure_storage_key
 *                                                  "alter_credential_azure_storage_key"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_docker
 *                                                  "alter_credential_docker"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_gcs_service_account_id
 *                                                  "alter_credential_gcs_service_account_id"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_gcs_service_account_keys
 *                                                  "alter_credential_gcs_service_account_keys"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_hdfs
 *                                                  "alter_credential_hdfs"
 *                                              <li>@ref
 *                                                  gpudb::alter_credential_kafka
 *                                                  "alter_credential_kafka"
 *                                          </ul>
 *                                      <li>@ref
 *                                          gpudb::alter_credential_identity
 *                                          "alter_credential_identity": New
 *                                          user for the credential
 *                                      <li>@ref gpudb::alter_credential_secret
 *                                          "alter_credential_secret": New
 *                                          password for the credential
 *                                      <li>@ref
 *                                          gpudb::alter_credential_schema_name
 *                                          "alter_credential_schema_name":
 *                                          Updates the schema name.  If @ref
 *                                          gpudb::alter_credential_schema_name
 *                                          "schema_name" doesn't exist, an
 *                                          error will be thrown. If @ref
 *                                          gpudb::alter_credential_schema_name
 *                                          "schema_name" is empty, then the
 *                                          user's default schema will be used.
 *                                  </ul>
 * @param[in] options  Optional parameters.
 * @param[out] response_  @ref gpudb::AlterCredentialResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterCredentialResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterCredentialResponse& alterCredential( const std::string& credentialName,
                                          const std::map<std::string, std::string>& credentialUpdatesMap,
                                          const std::map<std::string, std::string>& options,
                                          AlterCredentialResponse& response_ ) const;

/**
 * Alters the properties of an existing <a href="../../../concepts/data_sinks/"
 * target="_top">data sink</a>
 *
 * @param[in] request_  @ref gpudb::AlterDatasinkRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterDatasinkResponse "Response" object containing the
 *         result of the operation.
 */
AlterDatasinkResponse alterDatasink( const AlterDatasinkRequest& request_ ) const;

/**
 * Alters the properties of an existing <a href="../../../concepts/data_sinks/"
 * target="_top">data sink</a>
 *
 * @param[in] request_  @ref gpudb::AlterDatasinkRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterDatasinkResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterDatasinkResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterDatasinkResponse& alterDatasink( const AlterDatasinkRequest& request_,
                                      AlterDatasinkResponse& response_ ) const;

/**
 * Alters the properties of an existing <a href="../../../concepts/data_sinks/"
 * target="_top">data sink</a>
 *
 * @param[in] name  Name of the data sink to be altered. Must be an existing
 *                  data sink.
 * @param[in] datasinkUpdatesMap  Map containing the properties of the data
 *                                sink to be updated. Error if empty.
 *                                <ul>
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_destination
 *                                        "alter_datasink_destination":
 *                                        Destination for the output data in
 *                                        format
 *                                        'destination_type://path[:port]'.
 *                                        Supported destination types are
 *                                        'http', 'https' and 'kafka'.
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_connection_timeout
 *                                        "alter_datasink_connection_timeout":
 *                                        Timeout in seconds for connecting to
 *                                        this sink
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_wait_timeout
 *                                        "alter_datasink_wait_timeout":
 *                                        Timeout in seconds for waiting for a
 *                                        response from this sink
 *                                    <li>@ref gpudb::alter_datasink_credential
 *                                        "alter_datasink_credential": Name of
 *                                        the <a
 *                                        href="../../../concepts/credentials/"
 *                                        target="_top">credential</a> object
 *                                        to be used in this data sink
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_bucket_name
 *                                        "alter_datasink_s3_bucket_name": Name
 *                                        of the Amazon S3 bucket to use as the
 *                                        data sink
 *                                    <li>@ref gpudb::alter_datasink_s3_region
 *                                        "alter_datasink_s3_region": Name of
 *                                        the Amazon S3 region where the given
 *                                        bucket is located
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_verify_ssl
 *                                        "alter_datasink_s3_verify_ssl": Set
 *                                        to false for testing purposes or when
 *                                        necessary to bypass TLS errors (e.g.
 *                                        self-signed certificates). This value
 *                                        is true by default.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_true
 *                                        "alter_datasink_true".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_use_virtual_addressing
 *                                        "alter_datasink_s3_use_virtual_addressing":
 *                                        When true (default), the requests URI
 *                                        should be specified in
 *                                        virtual-hosted-style format where the
 *                                        bucket name is part of the domain
 *                                        name in the URL.   Otherwise set to
 *                                        false to use path-style URI for
 *                                        requests.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_true
 *                                        "alter_datasink_true".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_aws_role_arn
 *                                        "alter_datasink_s3_aws_role_arn":
 *                                        Amazon IAM Role ARN which has
 *                                        required S3 permissions that can be
 *                                        assumed for the given S3 IAM user
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_encryption_customer_algorithm
 *                                        "alter_datasink_s3_encryption_customer_algorithm":
 *                                        Customer encryption algorithm used
 *                                        encrypting data
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_encryption_customer_key
 *                                        "alter_datasink_s3_encryption_customer_key":
 *                                        Customer encryption key to encrypt or
 *                                        decrypt data
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_encryption_type
 *                                        "alter_datasink_s3_encryption_type":
 *                                        Server side encryption type
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_kms_key_id
 *                                        "alter_datasink_s3_kms_key_id": KMS
 *                                        key
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_hdfs_kerberos_keytab
 *                                        "alter_datasink_hdfs_kerberos_keytab":
 *                                        Kerberos keytab file location for the
 *                                        given HDFS user.  This may be a KIFS
 *                                        file.
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_hdfs_delegation_token
 *                                        "alter_datasink_hdfs_delegation_token":
 *                                        Delegation token for the given HDFS
 *                                        user
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_hdfs_use_kerberos
 *                                        "alter_datasink_hdfs_use_kerberos":
 *                                        Use kerberos authentication for the
 *                                        given HDFS cluster.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_false
 *                                        "alter_datasink_false".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_azure_storage_account_name
 *                                        "alter_datasink_azure_storage_account_name":
 *                                        Name of the Azure storage account to
 *                                        use as the data sink, this is valid
 *                                        only if tenant_id is specified
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_azure_container_name
 *                                        "alter_datasink_azure_container_name":
 *                                        Name of the Azure storage container
 *                                        to use as the data sink
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_azure_tenant_id
 *                                        "alter_datasink_azure_tenant_id":
 *                                        Active Directory tenant ID (or
 *                                        directory ID)
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_azure_sas_token
 *                                        "alter_datasink_azure_sas_token":
 *                                        Shared access signature token for
 *                                        Azure storage account to use as the
 *                                        data sink
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_azure_oauth_token
 *                                        "alter_datasink_azure_oauth_token":
 *                                        Oauth token to access given storage
 *                                        container
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_gcs_bucket_name
 *                                        "alter_datasink_gcs_bucket_name":
 *                                        Name of the Google Cloud Storage
 *                                        bucket to use as the data sink
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_gcs_project_id
 *                                        "alter_datasink_gcs_project_id": Name
 *                                        of the Google Cloud project to use as
 *                                        the data sink
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_gcs_service_account_keys
 *                                        "alter_datasink_gcs_service_account_keys":
 *                                        Google Cloud service account keys to
 *                                        use for authenticating the data sink
 *                                    <li>@ref gpudb::alter_datasink_kafka_url
 *                                        "alter_datasink_kafka_url": The
 *                                        publicly-accessible full path URL to
 *                                        the kafka broker, e.g.,
 *                                        'http://172.123.45.67:9300'.
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_kafka_topic_name
 *                                        "alter_datasink_kafka_topic_name":
 *                                        Name of the Kafka topic to use for
 *                                        this data sink, if it references a
 *                                        Kafka broker
 *                                    <li>@ref gpudb::alter_datasink_anonymous
 *                                        "alter_datasink_anonymous": Create an
 *                                        anonymous connection to the storage
 *                                        provider--DEPRECATED: this is now the
 *                                        default.  Specify
 *                                        use_managed_credentials for
 *                                        non-anonymous connection.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_true
 *                                        "alter_datasink_true".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_use_managed_credentials
 *                                        "alter_datasink_use_managed_credentials":
 *                                        When no credentials are supplied, we
 *                                        use anonymous access by default.  If
 *                                        this is set, we will use cloud
 *                                        provider user settings.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_false
 *                                        "alter_datasink_false".
 *                                    <li>@ref gpudb::alter_datasink_use_https
 *                                        "alter_datasink_use_https": Use https
 *                                        to connect to datasink if true,
 *                                        otherwise use http.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_true
 *                                        "alter_datasink_true".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_max_batch_size
 *                                        "alter_datasink_max_batch_size":
 *                                        Maximum number of records per
 *                                        notification message. The default
 *                                        value is '1'.
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_max_message_size
 *                                        "alter_datasink_max_message_size":
 *                                        Maximum size in bytes of each
 *                                        notification message. The default
 *                                        value is '1000000'.
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_json_format
 *                                        "alter_datasink_json_format": The
 *                                        desired format of JSON encoded
 *                                        notifications message.   If @ref
 *                                        gpudb::alter_datasink_nested
 *                                        "nested", records are returned as an
 *                                        array. Otherwise, only a single
 *                                        record per messages is returned.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_flat
 *                                                "alter_datasink_flat"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_nested
 *                                                "alter_datasink_nested"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_flat
 *                                        "alter_datasink_flat".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_skip_validation
 *                                        "alter_datasink_skip_validation":
 *                                        Bypass validation of connection to
 *                                        this data sink.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_false
 *                                        "alter_datasink_false".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_schema_name
 *                                        "alter_datasink_schema_name": Updates
 *                                        the schema name.  If @ref
 *                                        gpudb::alter_datasink_schema_name
 *                                        "schema_name" doesn't exist, an error
 *                                        will be thrown. If @ref
 *                                        gpudb::alter_datasink_schema_name
 *                                        "schema_name" is empty, then the
 *                                        user's default schema will be used.
 *                                </ul>
 * @param[in] options  Optional parameters.
 *
 * @return @ref gpudb::AlterDatasinkResponse "Response" object containing the
 *         result of the operation.
 */
AlterDatasinkResponse alterDatasink( const std::string& name,
                                     const std::map<std::string, std::string>& datasinkUpdatesMap,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Alters the properties of an existing <a href="../../../concepts/data_sinks/"
 * target="_top">data sink</a>
 *
 * @param[in] name  Name of the data sink to be altered. Must be an existing
 *                  data sink.
 * @param[in] datasinkUpdatesMap  Map containing the properties of the data
 *                                sink to be updated. Error if empty.
 *                                <ul>
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_destination
 *                                        "alter_datasink_destination":
 *                                        Destination for the output data in
 *                                        format
 *                                        'destination_type://path[:port]'.
 *                                        Supported destination types are
 *                                        'http', 'https' and 'kafka'.
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_connection_timeout
 *                                        "alter_datasink_connection_timeout":
 *                                        Timeout in seconds for connecting to
 *                                        this sink
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_wait_timeout
 *                                        "alter_datasink_wait_timeout":
 *                                        Timeout in seconds for waiting for a
 *                                        response from this sink
 *                                    <li>@ref gpudb::alter_datasink_credential
 *                                        "alter_datasink_credential": Name of
 *                                        the <a
 *                                        href="../../../concepts/credentials/"
 *                                        target="_top">credential</a> object
 *                                        to be used in this data sink
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_bucket_name
 *                                        "alter_datasink_s3_bucket_name": Name
 *                                        of the Amazon S3 bucket to use as the
 *                                        data sink
 *                                    <li>@ref gpudb::alter_datasink_s3_region
 *                                        "alter_datasink_s3_region": Name of
 *                                        the Amazon S3 region where the given
 *                                        bucket is located
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_verify_ssl
 *                                        "alter_datasink_s3_verify_ssl": Set
 *                                        to false for testing purposes or when
 *                                        necessary to bypass TLS errors (e.g.
 *                                        self-signed certificates). This value
 *                                        is true by default.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_true
 *                                        "alter_datasink_true".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_use_virtual_addressing
 *                                        "alter_datasink_s3_use_virtual_addressing":
 *                                        When true (default), the requests URI
 *                                        should be specified in
 *                                        virtual-hosted-style format where the
 *                                        bucket name is part of the domain
 *                                        name in the URL.   Otherwise set to
 *                                        false to use path-style URI for
 *                                        requests.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_true
 *                                        "alter_datasink_true".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_aws_role_arn
 *                                        "alter_datasink_s3_aws_role_arn":
 *                                        Amazon IAM Role ARN which has
 *                                        required S3 permissions that can be
 *                                        assumed for the given S3 IAM user
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_encryption_customer_algorithm
 *                                        "alter_datasink_s3_encryption_customer_algorithm":
 *                                        Customer encryption algorithm used
 *                                        encrypting data
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_encryption_customer_key
 *                                        "alter_datasink_s3_encryption_customer_key":
 *                                        Customer encryption key to encrypt or
 *                                        decrypt data
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_encryption_type
 *                                        "alter_datasink_s3_encryption_type":
 *                                        Server side encryption type
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_s3_kms_key_id
 *                                        "alter_datasink_s3_kms_key_id": KMS
 *                                        key
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_hdfs_kerberos_keytab
 *                                        "alter_datasink_hdfs_kerberos_keytab":
 *                                        Kerberos keytab file location for the
 *                                        given HDFS user.  This may be a KIFS
 *                                        file.
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_hdfs_delegation_token
 *                                        "alter_datasink_hdfs_delegation_token":
 *                                        Delegation token for the given HDFS
 *                                        user
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_hdfs_use_kerberos
 *                                        "alter_datasink_hdfs_use_kerberos":
 *                                        Use kerberos authentication for the
 *                                        given HDFS cluster.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_false
 *                                        "alter_datasink_false".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_azure_storage_account_name
 *                                        "alter_datasink_azure_storage_account_name":
 *                                        Name of the Azure storage account to
 *                                        use as the data sink, this is valid
 *                                        only if tenant_id is specified
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_azure_container_name
 *                                        "alter_datasink_azure_container_name":
 *                                        Name of the Azure storage container
 *                                        to use as the data sink
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_azure_tenant_id
 *                                        "alter_datasink_azure_tenant_id":
 *                                        Active Directory tenant ID (or
 *                                        directory ID)
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_azure_sas_token
 *                                        "alter_datasink_azure_sas_token":
 *                                        Shared access signature token for
 *                                        Azure storage account to use as the
 *                                        data sink
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_azure_oauth_token
 *                                        "alter_datasink_azure_oauth_token":
 *                                        Oauth token to access given storage
 *                                        container
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_gcs_bucket_name
 *                                        "alter_datasink_gcs_bucket_name":
 *                                        Name of the Google Cloud Storage
 *                                        bucket to use as the data sink
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_gcs_project_id
 *                                        "alter_datasink_gcs_project_id": Name
 *                                        of the Google Cloud project to use as
 *                                        the data sink
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_gcs_service_account_keys
 *                                        "alter_datasink_gcs_service_account_keys":
 *                                        Google Cloud service account keys to
 *                                        use for authenticating the data sink
 *                                    <li>@ref gpudb::alter_datasink_kafka_url
 *                                        "alter_datasink_kafka_url": The
 *                                        publicly-accessible full path URL to
 *                                        the kafka broker, e.g.,
 *                                        'http://172.123.45.67:9300'.
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_kafka_topic_name
 *                                        "alter_datasink_kafka_topic_name":
 *                                        Name of the Kafka topic to use for
 *                                        this data sink, if it references a
 *                                        Kafka broker
 *                                    <li>@ref gpudb::alter_datasink_anonymous
 *                                        "alter_datasink_anonymous": Create an
 *                                        anonymous connection to the storage
 *                                        provider--DEPRECATED: this is now the
 *                                        default.  Specify
 *                                        use_managed_credentials for
 *                                        non-anonymous connection.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_true
 *                                        "alter_datasink_true".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_use_managed_credentials
 *                                        "alter_datasink_use_managed_credentials":
 *                                        When no credentials are supplied, we
 *                                        use anonymous access by default.  If
 *                                        this is set, we will use cloud
 *                                        provider user settings.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_false
 *                                        "alter_datasink_false".
 *                                    <li>@ref gpudb::alter_datasink_use_https
 *                                        "alter_datasink_use_https": Use https
 *                                        to connect to datasink if true,
 *                                        otherwise use http.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_true
 *                                        "alter_datasink_true".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_max_batch_size
 *                                        "alter_datasink_max_batch_size":
 *                                        Maximum number of records per
 *                                        notification message. The default
 *                                        value is '1'.
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_max_message_size
 *                                        "alter_datasink_max_message_size":
 *                                        Maximum size in bytes of each
 *                                        notification message. The default
 *                                        value is '1000000'.
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_json_format
 *                                        "alter_datasink_json_format": The
 *                                        desired format of JSON encoded
 *                                        notifications message.   If @ref
 *                                        gpudb::alter_datasink_nested
 *                                        "nested", records are returned as an
 *                                        array. Otherwise, only a single
 *                                        record per messages is returned.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_flat
 *                                                "alter_datasink_flat"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_nested
 *                                                "alter_datasink_nested"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_flat
 *                                        "alter_datasink_flat".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_skip_validation
 *                                        "alter_datasink_skip_validation":
 *                                        Bypass validation of connection to
 *                                        this data sink.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_true
 *                                                "alter_datasink_true"
 *                                            <li>@ref
 *                                                gpudb::alter_datasink_false
 *                                                "alter_datasink_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_datasink_false
 *                                        "alter_datasink_false".
 *                                    <li>@ref
 *                                        gpudb::alter_datasink_schema_name
 *                                        "alter_datasink_schema_name": Updates
 *                                        the schema name.  If @ref
 *                                        gpudb::alter_datasink_schema_name
 *                                        "schema_name" doesn't exist, an error
 *                                        will be thrown. If @ref
 *                                        gpudb::alter_datasink_schema_name
 *                                        "schema_name" is empty, then the
 *                                        user's default schema will be used.
 *                                </ul>
 * @param[in] options  Optional parameters.
 * @param[out] response_  @ref gpudb::AlterDatasinkResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterDatasinkResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterDatasinkResponse& alterDatasink( const std::string& name,
                                      const std::map<std::string, std::string>& datasinkUpdatesMap,
                                      const std::map<std::string, std::string>& options,
                                      AlterDatasinkResponse& response_ ) const;

/**
 * Alters the properties of an existing <a
 * href="../../../concepts/data_sources/" target="_top">data source</a>
 *
 * @param[in] request_  @ref gpudb::AlterDatasourceRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterDatasourceResponse "Response" object containing the
 *         result of the operation.
 */
AlterDatasourceResponse alterDatasource( const AlterDatasourceRequest& request_ ) const;

/**
 * Alters the properties of an existing <a
 * href="../../../concepts/data_sources/" target="_top">data source</a>
 *
 * @param[in] request_  @ref gpudb::AlterDatasourceRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterDatasourceResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterDatasourceResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterDatasourceResponse& alterDatasource( const AlterDatasourceRequest& request_,
                                          AlterDatasourceResponse& response_ ) const;

/**
 * Alters the properties of an existing <a
 * href="../../../concepts/data_sources/" target="_top">data source</a>
 *
 * @param[in] name  Name of the data source to be altered. Must be an existing
 *                  data source.
 * @param[in] datasourceUpdatesMap  Map containing the properties of the data
 *                                  source to be updated. Error if empty.
 *                                  <ul>
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_location
 *                                          "alter_datasource_location":
 *                                          Location of the remote storage in
 *                                          'storage_provider_type://[storage_path[:storage_port]]'
 *                                          format.  Supported storage provider
 *                                          types are
 *                                          'azure','gcs','hdfs','kafka' and
 *                                          's3'.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_user_name
 *                                          "alter_datasource_user_name": Name
 *                                          of the remote system user; may be
 *                                          an empty string
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_password
 *                                          "alter_datasource_password":
 *                                          Password for the remote system
 *                                          user; may be an empty string
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_skip_validation
 *                                          "alter_datasource_skip_validation":
 *                                          Bypass validation of connection to
 *                                          remote source.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true"
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false"
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_false
 *                                          "alter_datasource_false".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_connection_timeout
 *                                          "alter_datasource_connection_timeout":
 *                                          Timeout in seconds for connecting
 *                                          to this storage provider
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_wait_timeout
 *                                          "alter_datasource_wait_timeout":
 *                                          Timeout in seconds for reading from
 *                                          this storage provider
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_credential
 *                                          "alter_datasource_credential": Name
 *                                          of the <a
 *                                          href="../../../concepts/credentials"
 *                                          target="_top">credential</a> object
 *                                          to be used in data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_bucket_name
 *                                          "alter_datasource_s3_bucket_name":
 *                                          Name of the Amazon S3 bucket to use
 *                                          as the data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_region
 *                                          "alter_datasource_s3_region": Name
 *                                          of the Amazon S3 region where the
 *                                          given bucket is located
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_verify_ssl
 *                                          "alter_datasource_s3_verify_ssl":
 *                                          Set to false for testing purposes
 *                                          or when necessary to bypass TLS
 *                                          errors (e.g. self-signed
 *                                          certificates). This value is true
 *                                          by default.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true"
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false"
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_true
 *                                          "alter_datasource_true".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_use_virtual_addressing
 *                                          "alter_datasource_s3_use_virtual_addressing":
 *                                          Whether to use virtual addressing
 *                                          when referencing the Amazon S3
 *                                          source.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true":
 *                                                  The requests URI should be
 *                                                  specified in
 *                                                  virtual-hosted-style format
 *                                                  where the bucket name is
 *                                                  part of the domain name in
 *                                                  the URL.
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false":
 *                                                  Use path-style URI for
 *                                                  requests.
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_true
 *                                          "alter_datasource_true".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_aws_role_arn
 *                                          "alter_datasource_s3_aws_role_arn":
 *                                          Amazon IAM Role ARN which has
 *                                          required S3 permissions that can be
 *                                          assumed for the given S3 IAM user
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_encryption_customer_algorithm
 *                                          "alter_datasource_s3_encryption_customer_algorithm":
 *                                          Customer encryption algorithm used
 *                                          encrypting data
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_encryption_customer_key
 *                                          "alter_datasource_s3_encryption_customer_key":
 *                                          Customer encryption key to encrypt
 *                                          or decrypt data
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_hdfs_kerberos_keytab
 *                                          "alter_datasource_hdfs_kerberos_keytab":
 *                                          Kerberos keytab file location for
 *                                          the given HDFS user.  This may be a
 *                                          KIFS file.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_hdfs_delegation_token
 *                                          "alter_datasource_hdfs_delegation_token":
 *                                          Delegation token for the given HDFS
 *                                          user
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_hdfs_use_kerberos
 *                                          "alter_datasource_hdfs_use_kerberos":
 *                                          Use kerberos authentication for the
 *                                          given HDFS cluster.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true"
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false"
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_false
 *                                          "alter_datasource_false".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_azure_storage_account_name
 *                                          "alter_datasource_azure_storage_account_name":
 *                                          Name of the Azure storage account
 *                                          to use as the data source, this is
 *                                          valid only if tenant_id is
 *                                          specified
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_azure_container_name
 *                                          "alter_datasource_azure_container_name":
 *                                          Name of the Azure storage container
 *                                          to use as the data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_azure_tenant_id
 *                                          "alter_datasource_azure_tenant_id":
 *                                          Active Directory tenant ID (or
 *                                          directory ID)
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_azure_sas_token
 *                                          "alter_datasource_azure_sas_token":
 *                                          Shared access signature token for
 *                                          Azure storage account to use as the
 *                                          data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_azure_oauth_token
 *                                          "alter_datasource_azure_oauth_token":
 *                                          OAuth token to access given storage
 *                                          container
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_gcs_bucket_name
 *                                          "alter_datasource_gcs_bucket_name":
 *                                          Name of the Google Cloud Storage
 *                                          bucket to use as the data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_gcs_project_id
 *                                          "alter_datasource_gcs_project_id":
 *                                          Name of the Google Cloud project to
 *                                          use as the data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_gcs_service_account_keys
 *                                          "alter_datasource_gcs_service_account_keys":
 *                                          Google Cloud service account keys
 *                                          to use for authenticating the data
 *                                          source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_kafka_url
 *                                          "alter_datasource_kafka_url": The
 *                                          publicly-accessible full path URL
 *                                          to the Kafka broker, e.g.,
 *                                          'http://172.123.45.67:9300'.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_kafka_topic_name
 *                                          "alter_datasource_kafka_topic_name":
 *                                          Name of the Kafka topic to use as
 *                                          the data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_jdbc_driver_jar_path
 *                                          "alter_datasource_jdbc_driver_jar_path":
 *                                          JDBC driver jar file location.
 *                                          This may be a KIFS file.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_jdbc_driver_class_name
 *                                          "alter_datasource_jdbc_driver_class_name":
 *                                          Name of the JDBC driver class
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_anonymous
 *                                          "alter_datasource_anonymous":
 *                                          Create an anonymous connection to
 *                                          the storage provider--DEPRECATED:
 *                                          this is now the default.  Specify
 *                                          use_managed_credentials for
 *                                          non-anonymous connection.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true"
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false"
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_true
 *                                          "alter_datasource_true".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_use_managed_credentials
 *                                          "alter_datasource_use_managed_credentials":
 *                                          When no credentials are supplied,
 *                                          we use anonymous access by default.
 *                                          If this is set, we will use cloud
 *                                          provider user settings.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true"
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false"
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_false
 *                                          "alter_datasource_false".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_use_https
 *                                          "alter_datasource_use_https": Use
 *                                          https to connect to datasource if
 *                                          true, otherwise use http.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true"
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false"
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_true
 *                                          "alter_datasource_true".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_schema_name
 *                                          "alter_datasource_schema_name":
 *                                          Updates the schema name.  If @ref
 *                                          gpudb::alter_datasource_schema_name
 *                                          "schema_name" doesn't exist, an
 *                                          error will be thrown. If @ref
 *                                          gpudb::alter_datasource_schema_name
 *                                          "schema_name" is empty, then the
 *                                          user's default schema will be used.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_schema_registry_location
 *                                          "alter_datasource_schema_registry_location":
 *                                          Location of Confluent Schema
 *                                          Registry in
 *                                          '[storage_path[:storage_port]]'
 *                                          format.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_schema_registry_credential
 *                                          "alter_datasource_schema_registry_credential":
 *                                          Confluent Schema Registry <a
 *                                          href="../../../concepts/credentials"
 *                                          target="_top">credential</a> object
 *                                          name.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_schema_registry_port
 *                                          "alter_datasource_schema_registry_port":
 *                                          Confluent Schema Registry port
 *                                          (optional).
 *                                  </ul>
 * @param[in] options  Optional parameters.
 *
 * @return @ref gpudb::AlterDatasourceResponse "Response" object containing the
 *         result of the operation.
 */
AlterDatasourceResponse alterDatasource( const std::string& name,
                                         const std::map<std::string, std::string>& datasourceUpdatesMap,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Alters the properties of an existing <a
 * href="../../../concepts/data_sources/" target="_top">data source</a>
 *
 * @param[in] name  Name of the data source to be altered. Must be an existing
 *                  data source.
 * @param[in] datasourceUpdatesMap  Map containing the properties of the data
 *                                  source to be updated. Error if empty.
 *                                  <ul>
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_location
 *                                          "alter_datasource_location":
 *                                          Location of the remote storage in
 *                                          'storage_provider_type://[storage_path[:storage_port]]'
 *                                          format.  Supported storage provider
 *                                          types are
 *                                          'azure','gcs','hdfs','kafka' and
 *                                          's3'.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_user_name
 *                                          "alter_datasource_user_name": Name
 *                                          of the remote system user; may be
 *                                          an empty string
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_password
 *                                          "alter_datasource_password":
 *                                          Password for the remote system
 *                                          user; may be an empty string
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_skip_validation
 *                                          "alter_datasource_skip_validation":
 *                                          Bypass validation of connection to
 *                                          remote source.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true"
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false"
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_false
 *                                          "alter_datasource_false".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_connection_timeout
 *                                          "alter_datasource_connection_timeout":
 *                                          Timeout in seconds for connecting
 *                                          to this storage provider
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_wait_timeout
 *                                          "alter_datasource_wait_timeout":
 *                                          Timeout in seconds for reading from
 *                                          this storage provider
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_credential
 *                                          "alter_datasource_credential": Name
 *                                          of the <a
 *                                          href="../../../concepts/credentials"
 *                                          target="_top">credential</a> object
 *                                          to be used in data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_bucket_name
 *                                          "alter_datasource_s3_bucket_name":
 *                                          Name of the Amazon S3 bucket to use
 *                                          as the data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_region
 *                                          "alter_datasource_s3_region": Name
 *                                          of the Amazon S3 region where the
 *                                          given bucket is located
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_verify_ssl
 *                                          "alter_datasource_s3_verify_ssl":
 *                                          Set to false for testing purposes
 *                                          or when necessary to bypass TLS
 *                                          errors (e.g. self-signed
 *                                          certificates). This value is true
 *                                          by default.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true"
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false"
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_true
 *                                          "alter_datasource_true".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_use_virtual_addressing
 *                                          "alter_datasource_s3_use_virtual_addressing":
 *                                          Whether to use virtual addressing
 *                                          when referencing the Amazon S3
 *                                          source.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true":
 *                                                  The requests URI should be
 *                                                  specified in
 *                                                  virtual-hosted-style format
 *                                                  where the bucket name is
 *                                                  part of the domain name in
 *                                                  the URL.
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false":
 *                                                  Use path-style URI for
 *                                                  requests.
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_true
 *                                          "alter_datasource_true".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_aws_role_arn
 *                                          "alter_datasource_s3_aws_role_arn":
 *                                          Amazon IAM Role ARN which has
 *                                          required S3 permissions that can be
 *                                          assumed for the given S3 IAM user
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_encryption_customer_algorithm
 *                                          "alter_datasource_s3_encryption_customer_algorithm":
 *                                          Customer encryption algorithm used
 *                                          encrypting data
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_s3_encryption_customer_key
 *                                          "alter_datasource_s3_encryption_customer_key":
 *                                          Customer encryption key to encrypt
 *                                          or decrypt data
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_hdfs_kerberos_keytab
 *                                          "alter_datasource_hdfs_kerberos_keytab":
 *                                          Kerberos keytab file location for
 *                                          the given HDFS user.  This may be a
 *                                          KIFS file.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_hdfs_delegation_token
 *                                          "alter_datasource_hdfs_delegation_token":
 *                                          Delegation token for the given HDFS
 *                                          user
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_hdfs_use_kerberos
 *                                          "alter_datasource_hdfs_use_kerberos":
 *                                          Use kerberos authentication for the
 *                                          given HDFS cluster.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true"
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false"
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_false
 *                                          "alter_datasource_false".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_azure_storage_account_name
 *                                          "alter_datasource_azure_storage_account_name":
 *                                          Name of the Azure storage account
 *                                          to use as the data source, this is
 *                                          valid only if tenant_id is
 *                                          specified
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_azure_container_name
 *                                          "alter_datasource_azure_container_name":
 *                                          Name of the Azure storage container
 *                                          to use as the data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_azure_tenant_id
 *                                          "alter_datasource_azure_tenant_id":
 *                                          Active Directory tenant ID (or
 *                                          directory ID)
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_azure_sas_token
 *                                          "alter_datasource_azure_sas_token":
 *                                          Shared access signature token for
 *                                          Azure storage account to use as the
 *                                          data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_azure_oauth_token
 *                                          "alter_datasource_azure_oauth_token":
 *                                          OAuth token to access given storage
 *                                          container
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_gcs_bucket_name
 *                                          "alter_datasource_gcs_bucket_name":
 *                                          Name of the Google Cloud Storage
 *                                          bucket to use as the data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_gcs_project_id
 *                                          "alter_datasource_gcs_project_id":
 *                                          Name of the Google Cloud project to
 *                                          use as the data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_gcs_service_account_keys
 *                                          "alter_datasource_gcs_service_account_keys":
 *                                          Google Cloud service account keys
 *                                          to use for authenticating the data
 *                                          source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_kafka_url
 *                                          "alter_datasource_kafka_url": The
 *                                          publicly-accessible full path URL
 *                                          to the Kafka broker, e.g.,
 *                                          'http://172.123.45.67:9300'.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_kafka_topic_name
 *                                          "alter_datasource_kafka_topic_name":
 *                                          Name of the Kafka topic to use as
 *                                          the data source
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_jdbc_driver_jar_path
 *                                          "alter_datasource_jdbc_driver_jar_path":
 *                                          JDBC driver jar file location.
 *                                          This may be a KIFS file.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_jdbc_driver_class_name
 *                                          "alter_datasource_jdbc_driver_class_name":
 *                                          Name of the JDBC driver class
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_anonymous
 *                                          "alter_datasource_anonymous":
 *                                          Create an anonymous connection to
 *                                          the storage provider--DEPRECATED:
 *                                          this is now the default.  Specify
 *                                          use_managed_credentials for
 *                                          non-anonymous connection.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true"
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false"
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_true
 *                                          "alter_datasource_true".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_use_managed_credentials
 *                                          "alter_datasource_use_managed_credentials":
 *                                          When no credentials are supplied,
 *                                          we use anonymous access by default.
 *                                          If this is set, we will use cloud
 *                                          provider user settings.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true"
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false"
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_false
 *                                          "alter_datasource_false".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_use_https
 *                                          "alter_datasource_use_https": Use
 *                                          https to connect to datasource if
 *                                          true, otherwise use http.
 *                                          Supported values:
 *                                          <ul>
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_true
 *                                                  "alter_datasource_true"
 *                                              <li>@ref
 *                                                  gpudb::alter_datasource_false
 *                                                  "alter_datasource_false"
 *                                          </ul>
 *                                          The default value is @ref
 *                                          gpudb::alter_datasource_true
 *                                          "alter_datasource_true".
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_schema_name
 *                                          "alter_datasource_schema_name":
 *                                          Updates the schema name.  If @ref
 *                                          gpudb::alter_datasource_schema_name
 *                                          "schema_name" doesn't exist, an
 *                                          error will be thrown. If @ref
 *                                          gpudb::alter_datasource_schema_name
 *                                          "schema_name" is empty, then the
 *                                          user's default schema will be used.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_schema_registry_location
 *                                          "alter_datasource_schema_registry_location":
 *                                          Location of Confluent Schema
 *                                          Registry in
 *                                          '[storage_path[:storage_port]]'
 *                                          format.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_schema_registry_credential
 *                                          "alter_datasource_schema_registry_credential":
 *                                          Confluent Schema Registry <a
 *                                          href="../../../concepts/credentials"
 *                                          target="_top">credential</a> object
 *                                          name.
 *                                      <li>@ref
 *                                          gpudb::alter_datasource_schema_registry_port
 *                                          "alter_datasource_schema_registry_port":
 *                                          Confluent Schema Registry port
 *                                          (optional).
 *                                  </ul>
 * @param[in] options  Optional parameters.
 * @param[out] response_  @ref gpudb::AlterDatasourceResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterDatasourceResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterDatasourceResponse& alterDatasource( const std::string& name,
                                          const std::map<std::string, std::string>& datasourceUpdatesMap,
                                          const std::map<std::string, std::string>& options,
                                          AlterDatasourceResponse& response_ ) const;

/**
 * Alters an existing directory in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] request_  @ref gpudb::AlterDirectoryRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterDirectoryResponse "Response" object containing the
 *         result of the operation.
 */
AlterDirectoryResponse alterDirectory( const AlterDirectoryRequest& request_ ) const;

/**
 * Alters an existing directory in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] request_  @ref gpudb::AlterDirectoryRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterDirectoryResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterDirectoryResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterDirectoryResponse& alterDirectory( const AlterDirectoryRequest& request_,
                                        AlterDirectoryResponse& response_ ) const;

/**
 * Alters an existing directory in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] directoryName  Name of the directory in KiFS to be altered.
 * @param[in] directoryUpdatesMap  Map containing the properties of the
 *                                 directory to be altered. Error if empty.
 *                                 <ul>
 *                                     <li>@ref
 *                                         gpudb::alter_directory_data_limit
 *                                         "alter_directory_data_limit": The
 *                                         maximum capacity, in bytes, to apply
 *                                         to the directory. Set to -1 to
 *                                         indicate no upper limit.
 *                                 </ul>
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AlterDirectoryResponse "Response" object containing the
 *         result of the operation.
 */
AlterDirectoryResponse alterDirectory( const std::string& directoryName,
                                       const std::map<std::string, std::string>& directoryUpdatesMap,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Alters an existing directory in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] directoryName  Name of the directory in KiFS to be altered.
 * @param[in] directoryUpdatesMap  Map containing the properties of the
 *                                 directory to be altered. Error if empty.
 *                                 <ul>
 *                                     <li>@ref
 *                                         gpudb::alter_directory_data_limit
 *                                         "alter_directory_data_limit": The
 *                                         maximum capacity, in bytes, to apply
 *                                         to the directory. Set to -1 to
 *                                         indicate no upper limit.
 *                                 </ul>
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AlterDirectoryResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterDirectoryResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterDirectoryResponse& alterDirectory( const std::string& directoryName,
                                        const std::map<std::string, std::string>& directoryUpdatesMap,
                                        const std::map<std::string, std::string>& options,
                                        AlterDirectoryResponse& response_ ) const;

/**
 * Alters an existing environment which can be referenced by a <a
 * href="../../../concepts/udf/" target="_top">user-defined function</a> (UDF).
 *
 * @param[in] request_  @ref gpudb::AlterEnvironmentRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterEnvironmentResponse "Response" object containing
 *         the result of the operation.
 */
AlterEnvironmentResponse alterEnvironment( const AlterEnvironmentRequest& request_ ) const;

/**
 * Alters an existing environment which can be referenced by a <a
 * href="../../../concepts/udf/" target="_top">user-defined function</a> (UDF).
 *
 * @param[in] request_  @ref gpudb::AlterEnvironmentRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterEnvironmentResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AlterEnvironmentResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AlterEnvironmentResponse& alterEnvironment( const AlterEnvironmentRequest& request_,
                                            AlterEnvironmentResponse& response_ ) const;

/**
 * Alters an existing environment which can be referenced by a <a
 * href="../../../concepts/udf/" target="_top">user-defined function</a> (UDF).
 *
 * @param[in] environmentName  Name of the environment to be altered.
 * @param[in] action  Modification operation to be applied.
 *                    Supported values:
 *                    <ul>
 *                        <li>@ref gpudb::alter_environment_install_package
 *                            "alter_environment_install_package": Install a
 *                            python package from PyPI, an external data source
 *                            or KiFS
 *                        <li>@ref
 *                            gpudb::alter_environment_install_requirements
 *                            "alter_environment_install_requirements": Install
 *                            packages from a requirements file
 *                        <li>@ref gpudb::alter_environment_uninstall_package
 *                            "alter_environment_uninstall_package": Uninstall
 *                            a python package.
 *                        <li>@ref
 *                            gpudb::alter_environment_uninstall_requirements
 *                            "alter_environment_uninstall_requirements":
 *                            Uninstall packages from a requirements file
 *                        <li>@ref gpudb::alter_environment_reset
 *                            "alter_environment_reset": Uninstalls all
 *                            packages in the environment and resets it to the
 *                            original state at time of creation
 *                        <li>@ref gpudb::alter_environment_rebuild
 *                            "alter_environment_rebuild": Recreates the
 *                            environment and re-installs all packages,
 *                            upgrades the packages if necessary based on
 *                            dependencies
 *                    </ul>
 * @param[in] value  The value of the modification, depending on @a action.
 *                   For example, if @a action is @ref
 *                   gpudb::alter_environment_install_package
 *                   "install_package", this would be the python package name.
 *                   If @a action is @ref
 *                   gpudb::alter_environment_install_requirements
 *                   "install_requirements", this would be the path of a
 *                   requirements file from which to install packages.  If an
 *                   external data source is specified in @ref
 *                   gpudb::alter_environment_datasource_name
 *                   "datasource_name", this can be the path to a wheel file or
 *                   source archive. Alternatively, if installing from a file
 *                   (wheel or source archive), the value may be a reference to
 *                   a file in <a href="../../../tools/kifs/"
 *                   target="_top">KiFS</a>.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::alter_environment_datasource_name
 *                             "alter_environment_datasource_name": Name of an
 *                             existing external data source from which
 *                             packages specified in @a value can be loaded
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AlterEnvironmentResponse "Response" object containing
 *         the result of the operation.
 */
AlterEnvironmentResponse alterEnvironment( const std::string& environmentName,
                                           const std::string& action,
                                           const std::string& value,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Alters an existing environment which can be referenced by a <a
 * href="../../../concepts/udf/" target="_top">user-defined function</a> (UDF).
 *
 * @param[in] environmentName  Name of the environment to be altered.
 * @param[in] action  Modification operation to be applied.
 *                    Supported values:
 *                    <ul>
 *                        <li>@ref gpudb::alter_environment_install_package
 *                            "alter_environment_install_package": Install a
 *                            python package from PyPI, an external data source
 *                            or KiFS
 *                        <li>@ref
 *                            gpudb::alter_environment_install_requirements
 *                            "alter_environment_install_requirements": Install
 *                            packages from a requirements file
 *                        <li>@ref gpudb::alter_environment_uninstall_package
 *                            "alter_environment_uninstall_package": Uninstall
 *                            a python package.
 *                        <li>@ref
 *                            gpudb::alter_environment_uninstall_requirements
 *                            "alter_environment_uninstall_requirements":
 *                            Uninstall packages from a requirements file
 *                        <li>@ref gpudb::alter_environment_reset
 *                            "alter_environment_reset": Uninstalls all
 *                            packages in the environment and resets it to the
 *                            original state at time of creation
 *                        <li>@ref gpudb::alter_environment_rebuild
 *                            "alter_environment_rebuild": Recreates the
 *                            environment and re-installs all packages,
 *                            upgrades the packages if necessary based on
 *                            dependencies
 *                    </ul>
 * @param[in] value  The value of the modification, depending on @a action.
 *                   For example, if @a action is @ref
 *                   gpudb::alter_environment_install_package
 *                   "install_package", this would be the python package name.
 *                   If @a action is @ref
 *                   gpudb::alter_environment_install_requirements
 *                   "install_requirements", this would be the path of a
 *                   requirements file from which to install packages.  If an
 *                   external data source is specified in @ref
 *                   gpudb::alter_environment_datasource_name
 *                   "datasource_name", this can be the path to a wheel file or
 *                   source archive. Alternatively, if installing from a file
 *                   (wheel or source archive), the value may be a reference to
 *                   a file in <a href="../../../tools/kifs/"
 *                   target="_top">KiFS</a>.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::alter_environment_datasource_name
 *                             "alter_environment_datasource_name": Name of an
 *                             existing external data source from which
 *                             packages specified in @a value can be loaded
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AlterEnvironmentResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AlterEnvironmentResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AlterEnvironmentResponse& alterEnvironment( const std::string& environmentName,
                                            const std::string& action,
                                            const std::string& value,
                                            const std::map<std::string, std::string>& options,
                                            AlterEnvironmentResponse& response_ ) const;

/** @private */
AlterGraphResponse alterGraph( const AlterGraphRequest& request_ ) const;

/** @private */
AlterGraphResponse& alterGraph( const AlterGraphRequest& request_,
                                AlterGraphResponse& response_ ) const;

/** @private */
AlterGraphResponse alterGraph( const std::string& graphName,
                               const std::string& action,
                               const std::string& actionArg,
                               const std::map<std::string, std::string>& options ) const;

/** @private */
AlterGraphResponse& alterGraph( const std::string& graphName,
                                const std::string& action,
                                const std::string& actionArg,
                                const std::map<std::string, std::string>& options,
                                AlterGraphResponse& response_ ) const;

/** @private */
AlterModelResponse alterModel( const AlterModelRequest& request_ ) const;

/** @private */
AlterModelResponse& alterModel( const AlterModelRequest& request_,
                                AlterModelResponse& response_ ) const;

/** @private */
AlterModelResponse alterModel( const std::string& modelName,
                               const std::string& action,
                               const std::string& value,
                               const std::map<std::string, std::string>& options ) const;

/** @private */
AlterModelResponse& alterModel( const std::string& modelName,
                                const std::string& action,
                                const std::string& value,
                                const std::map<std::string, std::string>& options,
                                AlterModelResponse& response_ ) const;

/**
 * Alters the properties of an exisiting resource group to facilitate resource
 * management.
 *
 * @param[in] request_  @ref gpudb::AlterResourceGroupRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterResourceGroupResponse "Response" object containing
 *         the result of the operation.
 */
AlterResourceGroupResponse alterResourceGroup( const AlterResourceGroupRequest& request_ ) const;

/**
 * Alters the properties of an exisiting resource group to facilitate resource
 * management.
 *
 * @param[in] request_  @ref gpudb::AlterResourceGroupRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterResourceGroupResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AlterResourceGroupResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AlterResourceGroupResponse& alterResourceGroup( const AlterResourceGroupRequest& request_,
                                                AlterResourceGroupResponse& response_ ) const;

/**
 * Alters the properties of an exisiting resource group to facilitate resource
 * management.
 *
 * @param[in] name  Name of the group to be altered. Must be an existing
 *                  resource group name or an empty string when used
 *                  inconjunction with the is_default_group option.
 * @param[in] tierAttributes  Optional map containing tier names and their
 *                            respective attribute group limits.  The only
 *                            valid attribute limit that can be set is
 *                            max_memory (in bytes) for the VRAM & RAM tiers.
 *                            For instance, to set max VRAM capacity to 1GB and
 *                            max RAM capacity to 10GB, use:
 *                            {'VRAM':{'max_memory':'1000000000'},
 *                            'RAM':{'max_memory':'10000000000'}}.
 *                            <ul>
 *                                <li>@ref
 *                                    gpudb::alter_resource_group_max_memory
 *                                    "alter_resource_group_max_memory":
 *                                    Maximum amount of memory usable in the
 *                                    given tier at one time for this group.
 *                            </ul>
 *                            The default value is an empty map.
 * @param[in] ranking  If the resource group ranking is to be updated, this
 *                     indicates the relative ranking among existing resource
 *                     groups where this resource group will be moved; leave
 *                     blank if not changing the ranking.  When using @ref
 *                     gpudb::alter_resource_group_before "before" or @ref
 *                     gpudb::alter_resource_group_after "after", specify which
 *                     resource group this one will be inserted before or after
 *                     in @a adjoiningResourceGroup.
 *                     Supported values:
 *                     <ul>
 *                         <li>@ref gpudb::alter_resource_group_empty_string
 *                             "alter_resource_group_empty_string"
 *                         <li>@ref gpudb::alter_resource_group_first
 *                             "alter_resource_group_first"
 *                         <li>@ref gpudb::alter_resource_group_last
 *                             "alter_resource_group_last"
 *                         <li>@ref gpudb::alter_resource_group_before
 *                             "alter_resource_group_before"
 *                         <li>@ref gpudb::alter_resource_group_after
 *                             "alter_resource_group_after"
 *                     </ul>
 *                     The default value is @ref
 *                     gpudb::alter_resource_group_empty_string
 *                     "alter_resource_group_empty_string".
 * @param[in] adjoiningResourceGroup  If @a ranking is @ref
 *                                    gpudb::alter_resource_group_before
 *                                    "before" or @ref
 *                                    gpudb::alter_resource_group_after
 *                                    "after", this field indicates the
 *                                    resource group before or after which the
 *                                    current group will be placed; otherwise,
 *                                    leave blank. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::alter_resource_group_max_cpu_concurrency
 *                             "alter_resource_group_max_cpu_concurrency":
 *                             Maximum number of simultaneous threads that will
 *                             be used to execute a request for this group. The
 *                             minimum allowed value is '4'.
 *                         <li>@ref gpudb::alter_resource_group_max_data
 *                             "alter_resource_group_max_data": Maximum amount
 *                             of cumulative ram usage regardless of tier
 *                             status for this group. The minimum allowed value
 *                             is '-1'.
 *                         <li>@ref
 *                             gpudb::alter_resource_group_max_scheduling_priority
 *                             "alter_resource_group_max_scheduling_priority":
 *                             Maximum priority of a scheduled task for this
 *                             group. The minimum allowed value is '1'. The
 *                             maximum allowed value is '100'.
 *                         <li>@ref
 *                             gpudb::alter_resource_group_max_tier_priority
 *                             "alter_resource_group_max_tier_priority":
 *                             Maximum priority of a tiered object for this
 *                             group. The minimum allowed value is '1'. The
 *                             maximum allowed value is '10'.
 *                         <li>@ref
 *                             gpudb::alter_resource_group_is_default_group
 *                             "alter_resource_group_is_default_group": If @ref
 *                             gpudb::alter_resource_group_true "true", this
 *                             request applies to the global default resource
 *                             group. It is an error for this field to be @ref
 *                             gpudb::alter_resource_group_true "true" when the
 *                             @a name field is also populated.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_resource_group_true
 *                                     "alter_resource_group_true"
 *                                 <li>@ref gpudb::alter_resource_group_false
 *                                     "alter_resource_group_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_resource_group_false
 *                             "alter_resource_group_false".
 *                         <li>@ref gpudb::alter_resource_group_persist
 *                             "alter_resource_group_persist": If @ref
 *                             gpudb::alter_resource_group_true "true" and a
 *                             system-level change was requested, the system
 *                             configuration will be written to disk upon
 *                             successful application of this request. This
 *                             will commit the changes from this request and
 *                             any additional in-memory modifications.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_resource_group_true
 *                                     "alter_resource_group_true"
 *                                 <li>@ref gpudb::alter_resource_group_false
 *                                     "alter_resource_group_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_resource_group_true
 *                             "alter_resource_group_true".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AlterResourceGroupResponse "Response" object containing
 *         the result of the operation.
 */
AlterResourceGroupResponse alterResourceGroup( const std::string& name,
                                               const std::map<std::string, std::map<std::string, std::string> >& tierAttributes,
                                               const std::string& ranking,
                                               const std::string& adjoiningResourceGroup,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Alters the properties of an exisiting resource group to facilitate resource
 * management.
 *
 * @param[in] name  Name of the group to be altered. Must be an existing
 *                  resource group name or an empty string when used
 *                  inconjunction with the is_default_group option.
 * @param[in] tierAttributes  Optional map containing tier names and their
 *                            respective attribute group limits.  The only
 *                            valid attribute limit that can be set is
 *                            max_memory (in bytes) for the VRAM & RAM tiers.
 *                            For instance, to set max VRAM capacity to 1GB and
 *                            max RAM capacity to 10GB, use:
 *                            {'VRAM':{'max_memory':'1000000000'},
 *                            'RAM':{'max_memory':'10000000000'}}.
 *                            <ul>
 *                                <li>@ref
 *                                    gpudb::alter_resource_group_max_memory
 *                                    "alter_resource_group_max_memory":
 *                                    Maximum amount of memory usable in the
 *                                    given tier at one time for this group.
 *                            </ul>
 *                            The default value is an empty map.
 * @param[in] ranking  If the resource group ranking is to be updated, this
 *                     indicates the relative ranking among existing resource
 *                     groups where this resource group will be moved; leave
 *                     blank if not changing the ranking.  When using @ref
 *                     gpudb::alter_resource_group_before "before" or @ref
 *                     gpudb::alter_resource_group_after "after", specify which
 *                     resource group this one will be inserted before or after
 *                     in @a adjoiningResourceGroup.
 *                     Supported values:
 *                     <ul>
 *                         <li>@ref gpudb::alter_resource_group_empty_string
 *                             "alter_resource_group_empty_string"
 *                         <li>@ref gpudb::alter_resource_group_first
 *                             "alter_resource_group_first"
 *                         <li>@ref gpudb::alter_resource_group_last
 *                             "alter_resource_group_last"
 *                         <li>@ref gpudb::alter_resource_group_before
 *                             "alter_resource_group_before"
 *                         <li>@ref gpudb::alter_resource_group_after
 *                             "alter_resource_group_after"
 *                     </ul>
 *                     The default value is @ref
 *                     gpudb::alter_resource_group_empty_string
 *                     "alter_resource_group_empty_string".
 * @param[in] adjoiningResourceGroup  If @a ranking is @ref
 *                                    gpudb::alter_resource_group_before
 *                                    "before" or @ref
 *                                    gpudb::alter_resource_group_after
 *                                    "after", this field indicates the
 *                                    resource group before or after which the
 *                                    current group will be placed; otherwise,
 *                                    leave blank. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::alter_resource_group_max_cpu_concurrency
 *                             "alter_resource_group_max_cpu_concurrency":
 *                             Maximum number of simultaneous threads that will
 *                             be used to execute a request for this group. The
 *                             minimum allowed value is '4'.
 *                         <li>@ref gpudb::alter_resource_group_max_data
 *                             "alter_resource_group_max_data": Maximum amount
 *                             of cumulative ram usage regardless of tier
 *                             status for this group. The minimum allowed value
 *                             is '-1'.
 *                         <li>@ref
 *                             gpudb::alter_resource_group_max_scheduling_priority
 *                             "alter_resource_group_max_scheduling_priority":
 *                             Maximum priority of a scheduled task for this
 *                             group. The minimum allowed value is '1'. The
 *                             maximum allowed value is '100'.
 *                         <li>@ref
 *                             gpudb::alter_resource_group_max_tier_priority
 *                             "alter_resource_group_max_tier_priority":
 *                             Maximum priority of a tiered object for this
 *                             group. The minimum allowed value is '1'. The
 *                             maximum allowed value is '10'.
 *                         <li>@ref
 *                             gpudb::alter_resource_group_is_default_group
 *                             "alter_resource_group_is_default_group": If @ref
 *                             gpudb::alter_resource_group_true "true", this
 *                             request applies to the global default resource
 *                             group. It is an error for this field to be @ref
 *                             gpudb::alter_resource_group_true "true" when the
 *                             @a name field is also populated.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_resource_group_true
 *                                     "alter_resource_group_true"
 *                                 <li>@ref gpudb::alter_resource_group_false
 *                                     "alter_resource_group_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_resource_group_false
 *                             "alter_resource_group_false".
 *                         <li>@ref gpudb::alter_resource_group_persist
 *                             "alter_resource_group_persist": If @ref
 *                             gpudb::alter_resource_group_true "true" and a
 *                             system-level change was requested, the system
 *                             configuration will be written to disk upon
 *                             successful application of this request. This
 *                             will commit the changes from this request and
 *                             any additional in-memory modifications.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_resource_group_true
 *                                     "alter_resource_group_true"
 *                                 <li>@ref gpudb::alter_resource_group_false
 *                                     "alter_resource_group_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_resource_group_true
 *                             "alter_resource_group_true".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AlterResourceGroupResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AlterResourceGroupResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AlterResourceGroupResponse& alterResourceGroup( const std::string& name,
                                                const std::map<std::string, std::map<std::string, std::string> >& tierAttributes,
                                                const std::string& ranking,
                                                const std::string& adjoiningResourceGroup,
                                                const std::map<std::string, std::string>& options,
                                                AlterResourceGroupResponse& response_ ) const;

/**
 * Alters a Role.
 *
 * @param[in] request_  @ref gpudb::AlterRoleRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterRoleResponse "Response" object containing the
 *         result of the operation.
 */
AlterRoleResponse alterRole( const AlterRoleRequest& request_ ) const;

/**
 * Alters a Role.
 *
 * @param[in] request_  @ref gpudb::AlterRoleRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterRoleResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterRoleResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterRoleResponse& alterRole( const AlterRoleRequest& request_,
                              AlterRoleResponse& response_ ) const;

/**
 * Alters a Role.
 *
 * @param[in] name  Name of the role to be altered. Must be an existing role.
 * @param[in] action  Modification operation to be applied to the role.
 *                    Supported values:
 *                    <ul>
 *                        <li>@ref gpudb::alter_role_set_comment
 *                            "alter_role_set_comment": Sets the comment for an
 *                            internal role.
 *                        <li>@ref gpudb::alter_role_set_resource_group
 *                            "alter_role_set_resource_group": Sets the
 *                            resource group for an internal role. The resource
 *                            group must exist, otherwise, an empty string
 *                            assigns the role to the default resource group.
 *                    </ul>
 * @param[in] value  The value of the modification, depending on @a action.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AlterRoleResponse "Response" object containing the
 *         result of the operation.
 */
AlterRoleResponse alterRole( const std::string& name,
                             const std::string& action,
                             const std::string& value,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Alters a Role.
 *
 * @param[in] name  Name of the role to be altered. Must be an existing role.
 * @param[in] action  Modification operation to be applied to the role.
 *                    Supported values:
 *                    <ul>
 *                        <li>@ref gpudb::alter_role_set_comment
 *                            "alter_role_set_comment": Sets the comment for an
 *                            internal role.
 *                        <li>@ref gpudb::alter_role_set_resource_group
 *                            "alter_role_set_resource_group": Sets the
 *                            resource group for an internal role. The resource
 *                            group must exist, otherwise, an empty string
 *                            assigns the role to the default resource group.
 *                    </ul>
 * @param[in] value  The value of the modification, depending on @a action.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AlterRoleResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterRoleResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterRoleResponse& alterRole( const std::string& name,
                              const std::string& action,
                              const std::string& value,
                              const std::map<std::string, std::string>& options,
                              AlterRoleResponse& response_ ) const;

/**
 * Used to change the name of a SQL-style <a href="../../../concepts/schemas/"
 * target="_top">schema</a>, specified in @ref
 * gpudb::AlterSchemaRequest::schemaName "schemaName".
 *
 * @param[in] request_  @ref gpudb::AlterSchemaRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterSchemaResponse "Response" object containing the
 *         result of the operation.
 */
AlterSchemaResponse alterSchema( const AlterSchemaRequest& request_ ) const;

/**
 * Used to change the name of a SQL-style <a href="../../../concepts/schemas/"
 * target="_top">schema</a>, specified in @ref
 * gpudb::AlterSchemaRequest::schemaName "schemaName".
 *
 * @param[in] request_  @ref gpudb::AlterSchemaRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterSchemaResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterSchemaResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterSchemaResponse& alterSchema( const AlterSchemaRequest& request_,
                                  AlterSchemaResponse& response_ ) const;

/**
 * Used to change the name of a SQL-style <a href="../../../concepts/schemas/"
 * target="_top">schema</a>, specified in @a schemaName.
 *
 * @param[in] schemaName  Name of the schema to be altered.
 * @param[in] action  Modification operation to be applied.
 *                    Supported values:
 *                    <ul>
 *                        <li>@ref gpudb::alter_schema_add_comment
 *                            "alter_schema_add_comment": Adds a comment
 *                            describing the schema
 *                        <li>@ref gpudb::alter_schema_rename_schema
 *                            "alter_schema_rename_schema": Renames a schema to
 *                            @a value. Has the same naming restrictions as <a
 *                            href="../../../concepts/tables/"
 *                            target="_top">tables</a>.
 *                    </ul>
 * @param[in] value  The value of the modification, depending on @a action.
 *                   For now the only value of @a action is @ref
 *                   gpudb::alter_schema_rename_schema "rename_schema".  In
 *                   this case the value is the new name of the schema.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AlterSchemaResponse "Response" object containing the
 *         result of the operation.
 */
AlterSchemaResponse alterSchema( const std::string& schemaName,
                                 const std::string& action,
                                 const std::string& value,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Used to change the name of a SQL-style <a href="../../../concepts/schemas/"
 * target="_top">schema</a>, specified in @a schemaName.
 *
 * @param[in] schemaName  Name of the schema to be altered.
 * @param[in] action  Modification operation to be applied.
 *                    Supported values:
 *                    <ul>
 *                        <li>@ref gpudb::alter_schema_add_comment
 *                            "alter_schema_add_comment": Adds a comment
 *                            describing the schema
 *                        <li>@ref gpudb::alter_schema_rename_schema
 *                            "alter_schema_rename_schema": Renames a schema to
 *                            @a value. Has the same naming restrictions as <a
 *                            href="../../../concepts/tables/"
 *                            target="_top">tables</a>.
 *                    </ul>
 * @param[in] value  The value of the modification, depending on @a action.
 *                   For now the only value of @a action is @ref
 *                   gpudb::alter_schema_rename_schema "rename_schema".  In
 *                   this case the value is the new name of the schema.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AlterSchemaResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterSchemaResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterSchemaResponse& alterSchema( const std::string& schemaName,
                                  const std::string& action,
                                  const std::string& value,
                                  const std::map<std::string, std::string>& options,
                                  AlterSchemaResponse& response_ ) const;

/**
 * The @ref alterSystemProperties(const AlterSystemPropertiesRequest&) const
 * "alterSystemProperties" endpoint is primarily used to simplify the testing
 * of the system and is not expected to be used during normal execution.
 * Commands are given through the @ref
 * gpudb::AlterSystemPropertiesRequest::propertyUpdatesMap "propertyUpdatesMap"
 * whose keys are commands and values are strings representing integer values
 * (for example '8000') or boolean values ('true' or 'false').
 *
 * @param[in] request_  @ref gpudb::AlterSystemPropertiesRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterSystemPropertiesResponse "Response" object
 *         containing the result of the operation.
 */
AlterSystemPropertiesResponse alterSystemProperties( const AlterSystemPropertiesRequest& request_ ) const;

/**
 * The @ref alterSystemProperties(const AlterSystemPropertiesRequest&) const
 * "alterSystemProperties" endpoint is primarily used to simplify the testing
 * of the system and is not expected to be used during normal execution.
 * Commands are given through the @ref
 * gpudb::AlterSystemPropertiesRequest::propertyUpdatesMap "propertyUpdatesMap"
 * whose keys are commands and values are strings representing integer values
 * (for example '8000') or boolean values ('true' or 'false').
 *
 * @param[in] request_  @ref gpudb::AlterSystemPropertiesRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterSystemPropertiesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AlterSystemPropertiesResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
AlterSystemPropertiesResponse& alterSystemProperties( const AlterSystemPropertiesRequest& request_,
                                                      AlterSystemPropertiesResponse& response_ ) const;

/**
 * The @ref
 * alterSystemProperties(const std::map<std::string, std::string>&, const std::map<std::string, std::string>&) const
 * "alterSystemProperties" endpoint is primarily used to simplify the testing
 * of the system and is not expected to be used during normal execution.
 * Commands are given through the @a propertyUpdatesMap whose keys are commands
 * and values are strings representing integer values (for example '8000') or
 * boolean values ('true' or 'false').
 *
 * @param[in] propertyUpdatesMap  Map containing the properties of the system
 *                                to be updated. Error if empty.
 *                                <ul>
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_concurrent_kernel_execution
 *                                        "alter_system_properties_concurrent_kernel_execution":
 *                                        Enables concurrent kernel execution
 *                                        if the value is @ref
 *                                        gpudb::alter_system_properties_true
 *                                        "true" and disables it if the value
 *                                        is @ref
 *                                        gpudb::alter_system_properties_false
 *                                        "false".
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_system_properties_true
 *                                                "alter_system_properties_true"
 *                                            <li>@ref
 *                                                gpudb::alter_system_properties_false
 *                                                "alter_system_properties_false"
 *                                        </ul>
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_subtask_concurrency_limit
 *                                        "alter_system_properties_subtask_concurrency_limit":
 *                                        Sets the maximum number of
 *                                        simultaneous threads allocated to a
 *                                        given request, on each rank. Note
 *                                        that thread allocation may also be
 *                                        limted by resource group limits
 *                                        and/or system load.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_chunk_size
 *                                        "alter_system_properties_chunk_size":
 *                                        Sets the number of records per chunk
 *                                        to be used for all new tables.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_chunk_column_max_memory
 *                                        "alter_system_properties_chunk_column_max_memory":
 *                                        Sets the target maximum data size for
 *                                        each column in a chunk to be used for
 *                                        all new tables.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_chunk_max_memory
 *                                        "alter_system_properties_chunk_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for all columns in a chunk to be
 *                                        used for all new tables.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_evict_columns
 *                                        "alter_system_properties_evict_columns":
 *                                        Attempts to evict columns from memory
 *                                        to the persistent store.  Value
 *                                        string is a semicolon separated list
 *                                        of entries, each entry being a table
 *                                        name optionally followed by a comma
 *                                        and a comma separated list of column
 *                                        names to attempt to evict.  An empty
 *                                        value string will attempt to evict
 *                                        all tables and columns.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_execution_mode
 *                                        "alter_system_properties_execution_mode":
 *                                        Sets the execution_mode for kernel
 *                                        executions to the specified string
 *                                        value. Possible values are host,
 *                                        device, default (engine decides) or
 *                                        an integer value that indicates max
 *                                        chunk size to exec on host
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_external_files_directory
 *                                        "alter_system_properties_external_files_directory":
 *                                        Sets the root directory path where
 *                                        external table data files are
 *                                        accessed from.  Path must exist on
 *                                        the head node
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_flush_to_disk
 *                                        "alter_system_properties_flush_to_disk":
 *                                        Flushes any changes to any tables to
 *                                        the persistent store.  These changes
 *                                        include updates to the vector store,
 *                                        object store, and text search store.
 *                                        Value string can be 'true', 'false'
 *                                        or 'text_search' to flush the text
 *                                        search store only.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_clear_cache
 *                                        "alter_system_properties_clear_cache":
 *                                        Clears cached results.  Useful to
 *                                        allow repeated timing of endpoints.
 *                                        Value string is the name of the table
 *                                        for which to clear the cached
 *                                        results, or an empty string to clear
 *                                        the cached results for all tables.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_communicator_test
 *                                        "alter_system_properties_communicator_test":
 *                                        Invoke the communicator test and
 *                                        report timing results. Value string
 *                                        is a semicolon separated list of
 *                                        [key]=[value] expressions.
 *                                        Expressions are:
 *                                        num_transactions=[num] where num is
 *                                        the number of request reply
 *                                        transactions to invoke per test;
 *                                        message_size=[bytes] where bytes is
 *                                        the size in bytes of the messages to
 *                                        send; check_values=[enabled] where if
 *                                        enabled is true the value of the
 *                                        messages received are verified.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_network_speed
 *                                        "alter_system_properties_network_speed":
 *                                        Invoke the network speed test and
 *                                        report timing results. Value string
 *                                        is a semicolon-separated list of
 *                                        [key]=[value] expressions.  Valid
 *                                        expressions are: seconds=[time] where
 *                                        time is the time in seconds to run
 *                                        the test; data_size=[bytes] where
 *                                        bytes is the size in bytes of the
 *                                        block to be transferred;
 *                                        threads=[number of threads];
 *                                        to_ranks=[space-separated list of
 *                                        ranks] where the list of ranks is the
 *                                        ranks that rank 0 will send data to
 *                                        and get data from. If to_ranks is
 *                                        unspecified then all worker ranks are
 *                                        used.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_request_timeout
 *                                        "alter_system_properties_request_timeout":
 *                                        Number of minutes after which
 *                                        filtering (e.g., @ref
 *                                        filter(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                        "filter") and aggregating (e.g., @ref
 *                                        aggregateGroupBy(const std::string&, const std::vector<std::string>&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 *                                        "aggregateGroupBy") queries will
 *                                        timeout. The default value is '20'.
 *                                        The minimum allowed value is '0'. The
 *                                        maximum allowed value is '1440'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_max_get_records_size
 *                                        "alter_system_properties_max_get_records_size":
 *                                        The maximum number of records the
 *                                        database will serve for a given data
 *                                        retrieval call. The default value is
 *                                        '20000'. The minimum allowed value is
 *                                        '0'. The maximum allowed value is
 *                                        '1000000'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_max_grbc_batch_size
 *                                        "alter_system_properties_max_grbc_batch_size":
 *                                        &lt;DEVELOPER&gt;
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_enable_audit
 *                                        "alter_system_properties_enable_audit":
 *                                        Enable or disable auditing.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_audit_headers
 *                                        "alter_system_properties_audit_headers":
 *                                        Enable or disable auditing of request
 *                                        headers.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_audit_body
 *                                        "alter_system_properties_audit_body":
 *                                        Enable or disable auditing of request
 *                                        bodies.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_audit_data
 *                                        "alter_system_properties_audit_data":
 *                                        Enable or disable auditing of request
 *                                        data.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_audit_response
 *                                        "alter_system_properties_audit_response":
 *                                        Enable or disable auditing of
 *                                        response information.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_shadow_agg_size
 *                                        "alter_system_properties_shadow_agg_size":
 *                                        Size of the shadow aggregate chunk
 *                                        cache in bytes. The default value is
 *                                        '10000000'. The minimum allowed value
 *                                        is '0'. The maximum allowed value is
 *                                        '2147483647'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_shadow_filter_size
 *                                        "alter_system_properties_shadow_filter_size":
 *                                        Size of the shadow filter chunk cache
 *                                        in bytes. The default value is
 *                                        '10000000'. The minimum allowed value
 *                                        is '0'. The maximum allowed value is
 *                                        '2147483647'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_synchronous_compression
 *                                        "alter_system_properties_synchronous_compression":
 *                                        compress vector on set_compression
 *                                        (instead of waiting for background
 *                                        thread). The default value is
 *                                        'false'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_enable_overlapped_equi_join
 *                                        "alter_system_properties_enable_overlapped_equi_join":
 *                                        Enable overlapped-equi-join filter.
 *                                        The default value is 'true'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_kafka_batch_size
 *                                        "alter_system_properties_kafka_batch_size":
 *                                        Maximum number of records to be
 *                                        ingested in a single batch. The
 *                                        default value is '1000'. The minimum
 *                                        allowed value is '1'. The maximum
 *                                        allowed value is '10000000'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_kafka_poll_timeout
 *                                        "alter_system_properties_kafka_poll_timeout":
 *                                        Maximum time (milliseconds) for each
 *                                        poll to get records from kafka. The
 *                                        default value is '0'. The minimum
 *                                        allowed value is '0'. The maximum
 *                                        allowed value is '1000'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_kafka_wait_time
 *                                        "alter_system_properties_kafka_wait_time":
 *                                        Maximum time (seconds) to buffer
 *                                        records received from kafka before
 *                                        ingestion. The default value is '30'.
 *                                        The minimum allowed value is '1'. The
 *                                        maximum allowed value is '120'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_egress_parquet_compression
 *                                        "alter_system_properties_egress_parquet_compression":
 *                                        Parquet file compression type.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_system_properties_uncompressed
 *                                                "alter_system_properties_uncompressed"
 *                                            <li>@ref
 *                                                gpudb::alter_system_properties_snappy
 *                                                "alter_system_properties_snappy"
 *                                            <li>@ref
 *                                                gpudb::alter_system_properties_gzip
 *                                                "alter_system_properties_gzip"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_system_properties_snappy
 *                                        "alter_system_properties_snappy".
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_egress_single_file_max_size
 *                                        "alter_system_properties_egress_single_file_max_size":
 *                                        Max file size (in MB) to allow saving
 *                                        to a single file. May be overridden
 *                                        by target limitations. The default
 *                                        value is '10000'. The minimum allowed
 *                                        value is '1'. The maximum allowed
 *                                        value is '200000'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_max_concurrent_kernels
 *                                        "alter_system_properties_max_concurrent_kernels":
 *                                        Sets the max_concurrent_kernels value
 *                                        of the conf. The minimum allowed
 *                                        value is '0'. The maximum allowed
 *                                        value is '256'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_system_metadata_retention_period
 *                                        "alter_system_properties_system_metadata_retention_period":
 *                                        Sets the
 *                                        system_metadata.retention_period
 *                                        value of the conf. The minimum
 *                                        allowed value is '1'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_tcs_per_tom
 *                                        "alter_system_properties_tcs_per_tom":
 *                                        Sets the tcs_per_tom value of the
 *                                        conf. The minimum allowed value is
 *                                        '2'. The maximum allowed value is
 *                                        '8192'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_tps_per_tom
 *                                        "alter_system_properties_tps_per_tom":
 *                                        Sets the tps_per_tom value of the
 *                                        conf. The minimum allowed value is
 *                                        '2'. The maximum allowed value is
 *                                        '8192'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_ai_enable_rag
 *                                        "alter_system_properties_ai_enable_rag":
 *                                        Enable RAG. The default value is
 *                                        'false'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_ai_api_provider
 *                                        "alter_system_properties_ai_api_provider":
 *                                        AI API provider type
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_ai_api_url
 *                                        "alter_system_properties_ai_api_url":
 *                                        AI API URL
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_ai_api_key
 *                                        "alter_system_properties_ai_api_key":
 *                                        AI API key
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_ai_api_connection_timeout
 *                                        "alter_system_properties_ai_api_connection_timeout":
 *                                        AI API connection timeout in seconds
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_ai_api_embeddings_model
 *                                        "alter_system_properties_ai_api_embeddings_model":
 *                                        AI API model name
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_telm_persist_query_metrics
 *                                        "alter_system_properties_telm_persist_query_metrics":
 *                                        Enable or disable persisting of query
 *                                        metrics.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_postgres_proxy_idle_connection_timeout
 *                                        "alter_system_properties_postgres_proxy_idle_connection_timeout":
 *                                        Idle connection timeout in seconds
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_postgres_proxy_keep_alive
 *                                        "alter_system_properties_postgres_proxy_keep_alive":
 *                                        Enable  postgres proxy keep alive.
 *                                        The default value is 'false'.
 *                                </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::alter_system_properties_evict_to_cold
 *                             "alter_system_properties_evict_to_cold": If @ref
 *                             gpudb::alter_system_properties_true "true" and
 *                             evict_columns is specified, the given objects
 *                             will be evicted to cold storage (if such a tier
 *                             exists).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_system_properties_true
 *                                     "alter_system_properties_true"
 *                                 <li>@ref
 *                                     gpudb::alter_system_properties_false
 *                                     "alter_system_properties_false"
 *                             </ul>
 *                         <li>@ref gpudb::alter_system_properties_persist
 *                             "alter_system_properties_persist": If @ref
 *                             gpudb::alter_system_properties_true "true" the
 *                             system configuration will be written to disk
 *                             upon successful application of this request.
 *                             This will commit the changes from this request
 *                             and any additional in-memory modifications.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_system_properties_true
 *                                     "alter_system_properties_true"
 *                                 <li>@ref
 *                                     gpudb::alter_system_properties_false
 *                                     "alter_system_properties_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_system_properties_true
 *                             "alter_system_properties_true".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AlterSystemPropertiesResponse "Response" object
 *         containing the result of the operation.
 */
AlterSystemPropertiesResponse alterSystemProperties( const std::map<std::string, std::string>& propertyUpdatesMap,
                                                     const std::map<std::string, std::string>& options ) const;

/**
 * The @ref
 * alterSystemProperties(const std::map<std::string, std::string>&, const std::map<std::string, std::string>&) const
 * "alterSystemProperties" endpoint is primarily used to simplify the testing
 * of the system and is not expected to be used during normal execution.
 * Commands are given through the @a propertyUpdatesMap whose keys are commands
 * and values are strings representing integer values (for example '8000') or
 * boolean values ('true' or 'false').
 *
 * @param[in] propertyUpdatesMap  Map containing the properties of the system
 *                                to be updated. Error if empty.
 *                                <ul>
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_concurrent_kernel_execution
 *                                        "alter_system_properties_concurrent_kernel_execution":
 *                                        Enables concurrent kernel execution
 *                                        if the value is @ref
 *                                        gpudb::alter_system_properties_true
 *                                        "true" and disables it if the value
 *                                        is @ref
 *                                        gpudb::alter_system_properties_false
 *                                        "false".
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_system_properties_true
 *                                                "alter_system_properties_true"
 *                                            <li>@ref
 *                                                gpudb::alter_system_properties_false
 *                                                "alter_system_properties_false"
 *                                        </ul>
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_subtask_concurrency_limit
 *                                        "alter_system_properties_subtask_concurrency_limit":
 *                                        Sets the maximum number of
 *                                        simultaneous threads allocated to a
 *                                        given request, on each rank. Note
 *                                        that thread allocation may also be
 *                                        limted by resource group limits
 *                                        and/or system load.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_chunk_size
 *                                        "alter_system_properties_chunk_size":
 *                                        Sets the number of records per chunk
 *                                        to be used for all new tables.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_chunk_column_max_memory
 *                                        "alter_system_properties_chunk_column_max_memory":
 *                                        Sets the target maximum data size for
 *                                        each column in a chunk to be used for
 *                                        all new tables.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_chunk_max_memory
 *                                        "alter_system_properties_chunk_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for all columns in a chunk to be
 *                                        used for all new tables.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_evict_columns
 *                                        "alter_system_properties_evict_columns":
 *                                        Attempts to evict columns from memory
 *                                        to the persistent store.  Value
 *                                        string is a semicolon separated list
 *                                        of entries, each entry being a table
 *                                        name optionally followed by a comma
 *                                        and a comma separated list of column
 *                                        names to attempt to evict.  An empty
 *                                        value string will attempt to evict
 *                                        all tables and columns.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_execution_mode
 *                                        "alter_system_properties_execution_mode":
 *                                        Sets the execution_mode for kernel
 *                                        executions to the specified string
 *                                        value. Possible values are host,
 *                                        device, default (engine decides) or
 *                                        an integer value that indicates max
 *                                        chunk size to exec on host
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_external_files_directory
 *                                        "alter_system_properties_external_files_directory":
 *                                        Sets the root directory path where
 *                                        external table data files are
 *                                        accessed from.  Path must exist on
 *                                        the head node
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_flush_to_disk
 *                                        "alter_system_properties_flush_to_disk":
 *                                        Flushes any changes to any tables to
 *                                        the persistent store.  These changes
 *                                        include updates to the vector store,
 *                                        object store, and text search store.
 *                                        Value string can be 'true', 'false'
 *                                        or 'text_search' to flush the text
 *                                        search store only.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_clear_cache
 *                                        "alter_system_properties_clear_cache":
 *                                        Clears cached results.  Useful to
 *                                        allow repeated timing of endpoints.
 *                                        Value string is the name of the table
 *                                        for which to clear the cached
 *                                        results, or an empty string to clear
 *                                        the cached results for all tables.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_communicator_test
 *                                        "alter_system_properties_communicator_test":
 *                                        Invoke the communicator test and
 *                                        report timing results. Value string
 *                                        is a semicolon separated list of
 *                                        [key]=[value] expressions.
 *                                        Expressions are:
 *                                        num_transactions=[num] where num is
 *                                        the number of request reply
 *                                        transactions to invoke per test;
 *                                        message_size=[bytes] where bytes is
 *                                        the size in bytes of the messages to
 *                                        send; check_values=[enabled] where if
 *                                        enabled is true the value of the
 *                                        messages received are verified.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_network_speed
 *                                        "alter_system_properties_network_speed":
 *                                        Invoke the network speed test and
 *                                        report timing results. Value string
 *                                        is a semicolon-separated list of
 *                                        [key]=[value] expressions.  Valid
 *                                        expressions are: seconds=[time] where
 *                                        time is the time in seconds to run
 *                                        the test; data_size=[bytes] where
 *                                        bytes is the size in bytes of the
 *                                        block to be transferred;
 *                                        threads=[number of threads];
 *                                        to_ranks=[space-separated list of
 *                                        ranks] where the list of ranks is the
 *                                        ranks that rank 0 will send data to
 *                                        and get data from. If to_ranks is
 *                                        unspecified then all worker ranks are
 *                                        used.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_request_timeout
 *                                        "alter_system_properties_request_timeout":
 *                                        Number of minutes after which
 *                                        filtering (e.g., @ref
 *                                        filter(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                        "filter") and aggregating (e.g., @ref
 *                                        aggregateGroupBy(const std::string&, const std::vector<std::string>&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 *                                        "aggregateGroupBy") queries will
 *                                        timeout. The default value is '20'.
 *                                        The minimum allowed value is '0'. The
 *                                        maximum allowed value is '1440'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_max_get_records_size
 *                                        "alter_system_properties_max_get_records_size":
 *                                        The maximum number of records the
 *                                        database will serve for a given data
 *                                        retrieval call. The default value is
 *                                        '20000'. The minimum allowed value is
 *                                        '0'. The maximum allowed value is
 *                                        '1000000'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_max_grbc_batch_size
 *                                        "alter_system_properties_max_grbc_batch_size":
 *                                        &lt;DEVELOPER&gt;
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_enable_audit
 *                                        "alter_system_properties_enable_audit":
 *                                        Enable or disable auditing.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_audit_headers
 *                                        "alter_system_properties_audit_headers":
 *                                        Enable or disable auditing of request
 *                                        headers.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_audit_body
 *                                        "alter_system_properties_audit_body":
 *                                        Enable or disable auditing of request
 *                                        bodies.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_audit_data
 *                                        "alter_system_properties_audit_data":
 *                                        Enable or disable auditing of request
 *                                        data.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_audit_response
 *                                        "alter_system_properties_audit_response":
 *                                        Enable or disable auditing of
 *                                        response information.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_shadow_agg_size
 *                                        "alter_system_properties_shadow_agg_size":
 *                                        Size of the shadow aggregate chunk
 *                                        cache in bytes. The default value is
 *                                        '10000000'. The minimum allowed value
 *                                        is '0'. The maximum allowed value is
 *                                        '2147483647'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_shadow_filter_size
 *                                        "alter_system_properties_shadow_filter_size":
 *                                        Size of the shadow filter chunk cache
 *                                        in bytes. The default value is
 *                                        '10000000'. The minimum allowed value
 *                                        is '0'. The maximum allowed value is
 *                                        '2147483647'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_synchronous_compression
 *                                        "alter_system_properties_synchronous_compression":
 *                                        compress vector on set_compression
 *                                        (instead of waiting for background
 *                                        thread). The default value is
 *                                        'false'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_enable_overlapped_equi_join
 *                                        "alter_system_properties_enable_overlapped_equi_join":
 *                                        Enable overlapped-equi-join filter.
 *                                        The default value is 'true'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_kafka_batch_size
 *                                        "alter_system_properties_kafka_batch_size":
 *                                        Maximum number of records to be
 *                                        ingested in a single batch. The
 *                                        default value is '1000'. The minimum
 *                                        allowed value is '1'. The maximum
 *                                        allowed value is '10000000'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_kafka_poll_timeout
 *                                        "alter_system_properties_kafka_poll_timeout":
 *                                        Maximum time (milliseconds) for each
 *                                        poll to get records from kafka. The
 *                                        default value is '0'. The minimum
 *                                        allowed value is '0'. The maximum
 *                                        allowed value is '1000'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_kafka_wait_time
 *                                        "alter_system_properties_kafka_wait_time":
 *                                        Maximum time (seconds) to buffer
 *                                        records received from kafka before
 *                                        ingestion. The default value is '30'.
 *                                        The minimum allowed value is '1'. The
 *                                        maximum allowed value is '120'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_egress_parquet_compression
 *                                        "alter_system_properties_egress_parquet_compression":
 *                                        Parquet file compression type.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::alter_system_properties_uncompressed
 *                                                "alter_system_properties_uncompressed"
 *                                            <li>@ref
 *                                                gpudb::alter_system_properties_snappy
 *                                                "alter_system_properties_snappy"
 *                                            <li>@ref
 *                                                gpudb::alter_system_properties_gzip
 *                                                "alter_system_properties_gzip"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::alter_system_properties_snappy
 *                                        "alter_system_properties_snappy".
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_egress_single_file_max_size
 *                                        "alter_system_properties_egress_single_file_max_size":
 *                                        Max file size (in MB) to allow saving
 *                                        to a single file. May be overridden
 *                                        by target limitations. The default
 *                                        value is '10000'. The minimum allowed
 *                                        value is '1'. The maximum allowed
 *                                        value is '200000'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_max_concurrent_kernels
 *                                        "alter_system_properties_max_concurrent_kernels":
 *                                        Sets the max_concurrent_kernels value
 *                                        of the conf. The minimum allowed
 *                                        value is '0'. The maximum allowed
 *                                        value is '256'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_system_metadata_retention_period
 *                                        "alter_system_properties_system_metadata_retention_period":
 *                                        Sets the
 *                                        system_metadata.retention_period
 *                                        value of the conf. The minimum
 *                                        allowed value is '1'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_tcs_per_tom
 *                                        "alter_system_properties_tcs_per_tom":
 *                                        Sets the tcs_per_tom value of the
 *                                        conf. The minimum allowed value is
 *                                        '2'. The maximum allowed value is
 *                                        '8192'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_tps_per_tom
 *                                        "alter_system_properties_tps_per_tom":
 *                                        Sets the tps_per_tom value of the
 *                                        conf. The minimum allowed value is
 *                                        '2'. The maximum allowed value is
 *                                        '8192'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_ai_enable_rag
 *                                        "alter_system_properties_ai_enable_rag":
 *                                        Enable RAG. The default value is
 *                                        'false'.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_ai_api_provider
 *                                        "alter_system_properties_ai_api_provider":
 *                                        AI API provider type
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_ai_api_url
 *                                        "alter_system_properties_ai_api_url":
 *                                        AI API URL
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_ai_api_key
 *                                        "alter_system_properties_ai_api_key":
 *                                        AI API key
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_ai_api_connection_timeout
 *                                        "alter_system_properties_ai_api_connection_timeout":
 *                                        AI API connection timeout in seconds
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_ai_api_embeddings_model
 *                                        "alter_system_properties_ai_api_embeddings_model":
 *                                        AI API model name
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_telm_persist_query_metrics
 *                                        "alter_system_properties_telm_persist_query_metrics":
 *                                        Enable or disable persisting of query
 *                                        metrics.
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_postgres_proxy_idle_connection_timeout
 *                                        "alter_system_properties_postgres_proxy_idle_connection_timeout":
 *                                        Idle connection timeout in seconds
 *                                    <li>@ref
 *                                        gpudb::alter_system_properties_postgres_proxy_keep_alive
 *                                        "alter_system_properties_postgres_proxy_keep_alive":
 *                                        Enable  postgres proxy keep alive.
 *                                        The default value is 'false'.
 *                                </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::alter_system_properties_evict_to_cold
 *                             "alter_system_properties_evict_to_cold": If @ref
 *                             gpudb::alter_system_properties_true "true" and
 *                             evict_columns is specified, the given objects
 *                             will be evicted to cold storage (if such a tier
 *                             exists).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_system_properties_true
 *                                     "alter_system_properties_true"
 *                                 <li>@ref
 *                                     gpudb::alter_system_properties_false
 *                                     "alter_system_properties_false"
 *                             </ul>
 *                         <li>@ref gpudb::alter_system_properties_persist
 *                             "alter_system_properties_persist": If @ref
 *                             gpudb::alter_system_properties_true "true" the
 *                             system configuration will be written to disk
 *                             upon successful application of this request.
 *                             This will commit the changes from this request
 *                             and any additional in-memory modifications.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_system_properties_true
 *                                     "alter_system_properties_true"
 *                                 <li>@ref
 *                                     gpudb::alter_system_properties_false
 *                                     "alter_system_properties_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_system_properties_true
 *                             "alter_system_properties_true".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AlterSystemPropertiesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AlterSystemPropertiesResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
AlterSystemPropertiesResponse& alterSystemProperties( const std::map<std::string, std::string>& propertyUpdatesMap,
                                                      const std::map<std::string, std::string>& options,
                                                      AlterSystemPropertiesResponse& response_ ) const;

/**
 * Apply various modifications to a table or view.  The available modifications
 * include the following:
 *
 * Manage a table's columns--a column can be added, removed, or have its <a
 * href="../../../concepts/types/" target="_top">type and properties</a>
 * modified, including whether it is <a
 * href="../../../concepts/dictionary_encoding/" target="_top">dictionary
 * encoded</a> or not.
 *
 * External tables cannot be modified except for their refresh method.
 *
 * Create or delete a <a href="../../../concepts/indexes/#column-index"
 * target="_top">column</a>, <a
 * href="../../../concepts/indexes/#chunk-skip-index" target="_top">chunk
 * skip</a>, <a href="../../../concepts/indexes/#geospatial-index"
 * target="_top">geospatial</a>, <a
 * href="../../../concepts/indexes/#cagra-index" target="_top">CAGRA</a>, or <a
 * href="../../../concepts/indexes/#hnsw-index" target="_top">HNSW</a> index.
 * This can speed up certain operations when using expressions containing
 * equality or relational operators on indexed columns. This only applies to
 * tables.
 *
 * Create or delete a <a href="../../../concepts/tables/#foreign-key"
 * target="_top">foreign key</a> on a particular column.
 *
 * Manage a <a href="../../../concepts/tables/#partitioning-by-range"
 * target="_top">range-partitioned</a> or a <a
 * href="../../../concepts/tables/#partitioning-by-list-manual"
 * target="_top">manual list-partitioned</a> table's partitions.
 *
 * Set (or reset) the <a href="../../../rm/concepts/#tier-strategies"
 * target="_top">tier strategy</a> of a table or view.
 *
 * Refresh and manage the refresh mode of a <a
 * href="../../../concepts/materialized_views/" target="_top">materialized
 * view</a> or an <a href="../../../concepts/external_tables/"
 * target="_top">external table</a>.
 *
 * Set the <a href="../../../concepts/ttl/" target="_top">time-to-live
 * (TTL)</a>. This can be applied to tables or views.
 *
 * Set the global access mode (i.e.\ locking) for a table. This setting trumps
 * any role-based access controls that may be in place; e.g., a user with write
 * access to a table marked read-only will not be able to insert records into
 * it. The mode can be set to read-only, write-only, read/write, and no access.
 *
 * @param[in] request_  @ref gpudb::AlterTableRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterTableResponse "Response" object containing the
 *         result of the operation.
 */
AlterTableResponse alterTable( const AlterTableRequest& request_ ) const;

/**
 * Apply various modifications to a table or view.  The available modifications
 * include the following:
 *
 * Manage a table's columns--a column can be added, removed, or have its <a
 * href="../../../concepts/types/" target="_top">type and properties</a>
 * modified, including whether it is <a
 * href="../../../concepts/dictionary_encoding/" target="_top">dictionary
 * encoded</a> or not.
 *
 * External tables cannot be modified except for their refresh method.
 *
 * Create or delete a <a href="../../../concepts/indexes/#column-index"
 * target="_top">column</a>, <a
 * href="../../../concepts/indexes/#chunk-skip-index" target="_top">chunk
 * skip</a>, <a href="../../../concepts/indexes/#geospatial-index"
 * target="_top">geospatial</a>, <a
 * href="../../../concepts/indexes/#cagra-index" target="_top">CAGRA</a>, or <a
 * href="../../../concepts/indexes/#hnsw-index" target="_top">HNSW</a> index.
 * This can speed up certain operations when using expressions containing
 * equality or relational operators on indexed columns. This only applies to
 * tables.
 *
 * Create or delete a <a href="../../../concepts/tables/#foreign-key"
 * target="_top">foreign key</a> on a particular column.
 *
 * Manage a <a href="../../../concepts/tables/#partitioning-by-range"
 * target="_top">range-partitioned</a> or a <a
 * href="../../../concepts/tables/#partitioning-by-list-manual"
 * target="_top">manual list-partitioned</a> table's partitions.
 *
 * Set (or reset) the <a href="../../../rm/concepts/#tier-strategies"
 * target="_top">tier strategy</a> of a table or view.
 *
 * Refresh and manage the refresh mode of a <a
 * href="../../../concepts/materialized_views/" target="_top">materialized
 * view</a> or an <a href="../../../concepts/external_tables/"
 * target="_top">external table</a>.
 *
 * Set the <a href="../../../concepts/ttl/" target="_top">time-to-live
 * (TTL)</a>. This can be applied to tables or views.
 *
 * Set the global access mode (i.e.\ locking) for a table. This setting trumps
 * any role-based access controls that may be in place; e.g., a user with write
 * access to a table marked read-only will not be able to insert records into
 * it. The mode can be set to read-only, write-only, read/write, and no access.
 *
 * @param[in] request_  @ref gpudb::AlterTableRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterTableResponse& alterTable( const AlterTableRequest& request_,
                                AlterTableResponse& response_ ) const;

/**
 * Apply various modifications to a table or view.  The available modifications
 * include the following:
 *
 * Manage a table's columns--a column can be added, removed, or have its <a
 * href="../../../concepts/types/" target="_top">type and properties</a>
 * modified, including whether it is <a
 * href="../../../concepts/dictionary_encoding/" target="_top">dictionary
 * encoded</a> or not.
 *
 * External tables cannot be modified except for their refresh method.
 *
 * Create or delete a <a href="../../../concepts/indexes/#column-index"
 * target="_top">column</a>, <a
 * href="../../../concepts/indexes/#chunk-skip-index" target="_top">chunk
 * skip</a>, <a href="../../../concepts/indexes/#geospatial-index"
 * target="_top">geospatial</a>, <a
 * href="../../../concepts/indexes/#cagra-index" target="_top">CAGRA</a>, or <a
 * href="../../../concepts/indexes/#hnsw-index" target="_top">HNSW</a> index.
 * This can speed up certain operations when using expressions containing
 * equality or relational operators on indexed columns. This only applies to
 * tables.
 *
 * Create or delete a <a href="../../../concepts/tables/#foreign-key"
 * target="_top">foreign key</a> on a particular column.
 *
 * Manage a <a href="../../../concepts/tables/#partitioning-by-range"
 * target="_top">range-partitioned</a> or a <a
 * href="../../../concepts/tables/#partitioning-by-list-manual"
 * target="_top">manual list-partitioned</a> table's partitions.
 *
 * Set (or reset) the <a href="../../../rm/concepts/#tier-strategies"
 * target="_top">tier strategy</a> of a table or view.
 *
 * Refresh and manage the refresh mode of a <a
 * href="../../../concepts/materialized_views/" target="_top">materialized
 * view</a> or an <a href="../../../concepts/external_tables/"
 * target="_top">external table</a>.
 *
 * Set the <a href="../../../concepts/ttl/" target="_top">time-to-live
 * (TTL)</a>. This can be applied to tables or views.
 *
 * Set the global access mode (i.e.\ locking) for a table. This setting trumps
 * any role-based access controls that may be in place; e.g., a user with write
 * access to a table marked read-only will not be able to insert records into
 * it. The mode can be set to read-only, write-only, read/write, and no access.
 *
 * @param[in] tableName  Table on which the operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. Must be an
 *                       existing table or view.
 * @param[in] action  Modification operation to be applied.
 *                    Supported values:
 *                    <ul>
 *                        <li>@ref gpudb::alter_table_allow_homogeneous_tables
 *                            "alter_table_allow_homogeneous_tables": No longer
 *                            supported; action will be ignored.
 *                        <li>@ref gpudb::alter_table_create_index
 *                            "alter_table_create_index": Creates a <a
 *                            href="../../../concepts/indexes/#column-index"
 *                            target="_top">column (attribute) index</a>, <a
 *                            href="../../../concepts/indexes/#chunk-skip-index"
 *                            target="_top">chunk skip index</a>, <a
 *                            href="../../../concepts/indexes/#geospatial-index"
 *                            target="_top">geospatial index</a>, <a
 *                            href="../../../concepts/indexes/#cagra-index"
 *                            target="_top">CAGRA index</a>, or <a
 *                            href="../../../concepts/indexes/#hnsw-index"
 *                            target="_top">HNSW index</a> (depending on the
 *                            specified @ref gpudb::alter_table_index_type
 *                            "index_type"), on the column name specified in @a
 *                            value. If this column already has the specified
 *                            index, an error will be returned.
 *                        <li>@ref gpudb::alter_table_refresh_index
 *                            "alter_table_refresh_index": Refreshes an index
 *                            identified by @ref gpudb::alter_table_index_type
 *                            "index_type", on the column name specified in @a
 *                            value. Currently applicable only to CAGRA
 *                            indices.
 *                        <li>@ref gpudb::alter_table_delete_index
 *                            "alter_table_delete_index": Deletes a <a
 *                            href="../../../concepts/indexes/#column-index"
 *                            target="_top">column (attribute) index</a>, <a
 *                            href="../../../concepts/indexes/#chunk-skip-index"
 *                            target="_top">chunk skip index</a>, <a
 *                            href="../../../concepts/indexes/#geospatial-index"
 *                            target="_top">geospatial index</a>, <a
 *                            href="../../../concepts/indexes/#cagra-index"
 *                            target="_top">CAGRA index</a>, or <a
 *                            href="../../../concepts/indexes/#hnsw-index"
 *                            target="_top">HNSW index</a> (depending on the
 *                            specified @ref gpudb::alter_table_index_type
 *                            "index_type"), on the column name specified in @a
 *                            value. If this column does not have the specified
 *                            index, an error will be returned.
 *                        <li>@ref gpudb::alter_table_move_to_collection
 *                            "alter_table_move_to_collection":
 *                            [DEPRECATED--please use @ref
 *                            gpudb::alter_table_move_to_schema
 *                            "move_to_schema" and use @ref
 *                            createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                            "createSchema" to create the schema if
 *                            non-existent]  Moves a table or view into a
 *                            schema named @a value.  If the schema provided is
 *                            non-existent, it will be automatically created.
 *                        <li>@ref gpudb::alter_table_move_to_schema
 *                            "alter_table_move_to_schema": Moves a table or
 *                            view into a schema named @a value. If the schema
 *                            provided is nonexistent, an error will be thrown.
 *                            If @a value is empty, then the table or view will
 *                            be placed in the user's default schema.
 *                        <li>@ref gpudb::alter_table_protected
 *                            "alter_table_protected": No longer used.
 *                            Previously set whether the given @a tableName
 *                            should be protected or not. The @a value would
 *                            have been either 'true' or 'false'.
 *                        <li>@ref gpudb::alter_table_rename_table
 *                            "alter_table_rename_table": Renames a table or
 *                            view to @a value. Has the same naming
 *                            restrictions as <a
 *                            href="../../../concepts/tables/"
 *                            target="_top">tables</a>.
 *                        <li>@ref gpudb::alter_table_ttl "alter_table_ttl":
 *                            Sets the <a href="../../../concepts/ttl/"
 *                            target="_top">time-to-live</a> in minutes of the
 *                            table or view specified in @a tableName.
 *                        <li>@ref gpudb::alter_table_add_comment
 *                            "alter_table_add_comment": Adds the comment
 *                            specified in @a value to the table specified in
 *                            @a tableName. Use @ref
 *                            gpudb::alter_table_column_name "column_name" to
 *                            set the comment for a column.
 *                        <li>@ref gpudb::alter_table_add_column
 *                            "alter_table_add_column": Adds the column
 *                            specified in @a value to the table specified in
 *                            @a tableName. Use @ref
 *                            gpudb::alter_table_column_type "column_type" and
 *                            @ref gpudb::alter_table_column_properties
 *                            "column_properties" in @a options to set the
 *                            column's type and properties, respectively.
 *                        <li>@ref gpudb::alter_table_change_column
 *                            "alter_table_change_column": Changes type and
 *                            properties of the column specified in @a value.
 *                            Use @ref gpudb::alter_table_column_type
 *                            "column_type" and @ref
 *                            gpudb::alter_table_column_properties
 *                            "column_properties" in @a options to set the
 *                            column's type and properties, respectively. Note
 *                            that primary key and/or shard key columns cannot
 *                            be changed. All unchanging column properties must
 *                            be listed for the change to take place, e.g., to
 *                            add dictionary encoding to an existing 'char4'
 *                            column, both 'char4' and 'dict' must be specified
 *                            in the @a options map.
 *                        <li>@ref gpudb::alter_table_set_column_compression
 *                            "alter_table_set_column_compression": No longer
 *                            supported; action will be ignored.
 *                        <li>@ref gpudb::alter_table_delete_column
 *                            "alter_table_delete_column": Deletes the column
 *                            specified in @a value from the table specified in
 *                            @a tableName.
 *                        <li>@ref gpudb::alter_table_create_foreign_key
 *                            "alter_table_create_foreign_key": Creates a <a
 *                            href="../../../concepts/tables/#foreign-key"
 *                            target="_top">foreign key</a> specified in @a
 *                            value using the format '(source_column_name [,
 *                            ...]) references
 *                            target_table_name(primary_key_column_name [,
 *                            ...]) [as foreign_key_name]'.
 *                        <li>@ref gpudb::alter_table_delete_foreign_key
 *                            "alter_table_delete_foreign_key": Deletes a <a
 *                            href="../../../concepts/tables/#foreign-key"
 *                            target="_top">foreign key</a>.  The @a value
 *                            should be the foreign_key_name specified when
 *                            creating the key or the complete string used to
 *                            define it.
 *                        <li>@ref gpudb::alter_table_add_partition
 *                            "alter_table_add_partition": Adds the partition
 *                            specified in @a value, to either a <a
 *                            href="../../../concepts/tables/#partitioning-by-range"
 *                            target="_top">range-partitioned</a> or <a
 *                            href="../../../concepts/tables/#partitioning-by-list-manual"
 *                            target="_top">manual list-partitioned</a> table.
 *                        <li>@ref gpudb::alter_table_remove_partition
 *                            "alter_table_remove_partition": Removes the
 *                            partition specified in @a value (and relocates
 *                            all of its data to the default partition) from
 *                            either a <a
 *                            href="../../../concepts/tables/#partitioning-by-range"
 *                            target="_top">range-partitioned</a> or <a
 *                            href="../../../concepts/tables/#partitioning-by-list-manual"
 *                            target="_top">manual list-partitioned</a> table.
 *                        <li>@ref gpudb::alter_table_delete_partition
 *                            "alter_table_delete_partition": Deletes the
 *                            partition specified in @a value (and all of its
 *                            data) from either a <a
 *                            href="../../../concepts/tables/#partitioning-by-range"
 *                            target="_top">range-partitioned</a> or <a
 *                            href="../../../concepts/tables/#partitioning-by-list-manual"
 *                            target="_top">manual list-partitioned</a> table.
 *                        <li>@ref gpudb::alter_table_set_global_access_mode
 *                            "alter_table_set_global_access_mode": Sets the
 *                            global access mode (i.e. locking) for the table
 *                            specified in @a tableName. Specify the access
 *                            mode in @a value. Valid modes are 'no_access',
 *                            'read_only', 'write_only' and 'read_write'.
 *                        <li>@ref gpudb::alter_table_refresh
 *                            "alter_table_refresh": For a <a
 *                            href="../../../concepts/materialized_views/"
 *                            target="_top">materialized view</a>, replays all
 *                            the table creation commands required to create
 *                            the view.  For an <a
 *                            href="../../../concepts/external_tables/"
 *                            target="_top">external table</a>, reloads all
 *                            data in the table from its associated source
 *                            files or <a
 *                            href="../../../concepts/data_sources/"
 *                            target="_top">data source</a>.
 *                        <li>@ref gpudb::alter_table_set_refresh_method
 *                            "alter_table_set_refresh_method": For a <a
 *                            href="../../../concepts/materialized_views/"
 *                            target="_top">materialized view</a>, sets the
 *                            method by which the view is refreshed to the
 *                            method specified in @a value - one of 'manual',
 *                            'periodic', or 'on_change'.  For an <a
 *                            href="../../../concepts/external_tables/"
 *                            target="_top">external table</a>, sets the method
 *                            by which the table is refreshed to the method
 *                            specified in @a value - either 'manual' or
 *                            'on_start'.
 *                        <li>@ref gpudb::alter_table_set_refresh_start_time
 *                            "alter_table_set_refresh_start_time": Sets the
 *                            time to start periodic refreshes of this <a
 *                            href="../../../concepts/materialized_views/"
 *                            target="_top">materialized view</a> to the
 *                            datetime string specified in @a value with format
 *                            'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes
 *                            occur at the specified time + N * the refresh
 *                            period.
 *                        <li>@ref gpudb::alter_table_set_refresh_stop_time
 *                            "alter_table_set_refresh_stop_time": Sets the
 *                            time to stop periodic refreshes of this <a
 *                            href="../../../concepts/materialized_views/"
 *                            target="_top">materialized view</a> to the
 *                            datetime string specified in @a value with format
 *                            'YYYY-MM-DD HH:MM:SS'.
 *                        <li>@ref gpudb::alter_table_set_refresh_period
 *                            "alter_table_set_refresh_period": Sets the time
 *                            interval in seconds at which to refresh this <a
 *                            href="../../../concepts/materialized_views/"
 *                            target="_top">materialized view</a> to the value
 *                            specified in @a value.  Also, sets the refresh
 *                            method to periodic if not already set.
 *                        <li>@ref gpudb::alter_table_set_refresh_span
 *                            "alter_table_set_refresh_span": Sets the future
 *                            time-offset(in seconds) for the view refresh to
 *                            stop.
 *                        <li>@ref gpudb::alter_table_set_refresh_execute_as
 *                            "alter_table_set_refresh_execute_as": Sets the
 *                            user name to refresh this <a
 *                            href="../../../concepts/materialized_views/"
 *                            target="_top">materialized view</a> to the value
 *                            specified in @a value.
 *                        <li>@ref
 *                            gpudb::alter_table_remove_text_search_attributes
 *                            "alter_table_remove_text_search_attributes":
 *                            Removes <a
 *                            href="../../../concepts/full_text_search/"
 *                            target="_top">text search</a> attribute from all
 *                            columns.
 *                        <li>@ref gpudb::alter_table_remove_shard_keys
 *                            "alter_table_remove_shard_keys": Removes the
 *                            shard key property from all columns, so that the
 *                            table will be considered randomly sharded.  The
 *                            data is not moved.  The @a value is ignored.
 *                        <li>@ref gpudb::alter_table_set_strategy_definition
 *                            "alter_table_set_strategy_definition": Sets the
 *                            <a href="../../../rm/concepts/#tier-strategies"
 *                            target="_top">tier strategy</a> for the table and
 *                            its columns to the one specified in @a value,
 *                            replacing the existing tier strategy in its
 *                            entirety.
 *                        <li>@ref
 *                            gpudb::alter_table_cancel_datasource_subscription
 *                            "alter_table_cancel_datasource_subscription":
 *                            Permanently unsubscribe a data source that is
 *                            loading continuously as a stream. The data source
 *                            can be Kafka / S3 / Azure.
 *                        <li>@ref
 *                            gpudb::alter_table_pause_datasource_subscription
 *                            "alter_table_pause_datasource_subscription":
 *                            Temporarily unsubscribe a data source that is
 *                            loading continuously as a stream. The data source
 *                            can be Kafka / S3 / Azure.
 *                        <li>@ref
 *                            gpudb::alter_table_resume_datasource_subscription
 *                            "alter_table_resume_datasource_subscription":
 *                            Resubscribe to a paused data source subscription.
 *                            The data source can be Kafka / S3 / Azure.
 *                        <li>@ref gpudb::alter_table_change_owner
 *                            "alter_table_change_owner": Change the owner
 *                            resource group of the table.
 *                    </ul>
 * @param[in] value  The value of the modification, depending on @a action. For
 *                   example, if @a action is @ref
 *                   gpudb::alter_table_add_column "add_column", this would be
 *                   the column name; while the column's definition would be
 *                   covered by the @ref gpudb::alter_table_column_type
 *                   "column_type", @ref gpudb::alter_table_column_properties
 *                   "column_properties", @ref
 *                   gpudb::alter_table_column_default_value
 *                   "column_default_value", and @ref
 *                   gpudb::alter_table_add_column_expression
 *                   "add_column_expression" in @a options. If @a action is
 *                   @ref gpudb::alter_table_ttl "ttl", it would be the number
 *                   of minutes for the new TTL. If @a action is @ref
 *                   gpudb::alter_table_refresh "refresh", this field would be
 *                   blank.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::alter_table_action
 *                             "alter_table_action"
 *                         <li>@ref gpudb::alter_table_column_name
 *                             "alter_table_column_name"
 *                         <li>@ref gpudb::alter_table_table_name
 *                             "alter_table_table_name"
 *                         <li>@ref gpudb::alter_table_column_default_value
 *                             "alter_table_column_default_value": When adding
 *                             a column, set a default value for existing
 *                             records.  For nullable columns, the default
 *                             value will be null, regardless of data type.
 *                         <li>@ref gpudb::alter_table_column_properties
 *                             "alter_table_column_properties": When adding or
 *                             changing a column, set the column properties
 *                             (strings, separated by a comma: data,
 *                             store_only, text_search, char8, int8 etc).
 *                         <li>@ref gpudb::alter_table_column_type
 *                             "alter_table_column_type": When adding or
 *                             changing a column, set the column type (strings,
 *                             separated by a comma: int, double, string, null
 *                             etc).
 *                         <li>@ref gpudb::alter_table_compression_type
 *                             "alter_table_compression_type": No longer
 *                             supported; option will be ignored.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_table_none
 *                                     "alter_table_none"
 *                                 <li>@ref gpudb::alter_table_snappy
 *                                     "alter_table_snappy"
 *                                 <li>@ref gpudb::alter_table_lz4
 *                                     "alter_table_lz4"
 *                                 <li>@ref gpudb::alter_table_lz4hc
 *                                     "alter_table_lz4hc"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_table_snappy "alter_table_snappy".
 *                         <li>@ref gpudb::alter_table_copy_values_from_column
 *                             "alter_table_copy_values_from_column":
 *                             [DEPRECATED--please use @ref
 *                             gpudb::alter_table_add_column_expression
 *                             "add_column_expression" instead.]
 *                         <li>@ref gpudb::alter_table_rename_column
 *                             "alter_table_rename_column": When changing a
 *                             column, specify new column name.
 *                         <li>@ref gpudb::alter_table_validate_change_column
 *                             "alter_table_validate_change_column": When
 *                             changing a column, validate the change before
 *                             applying it (or not).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_table_true
 *                                     "alter_table_true": Validate all values.
 *                                     A value too large (or too long) for the
 *                                     new type will prevent any change.
 *                                 <li>@ref gpudb::alter_table_false
 *                                     "alter_table_false": When a value is too
 *                                     large or long, it will be truncated.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_table_true "alter_table_true".
 *                         <li>@ref gpudb::alter_table_update_last_access_time
 *                             "alter_table_update_last_access_time": Indicates
 *                             whether the <a href="../../../concepts/ttl/"
 *                             target="_top">time-to-live</a> (TTL) expiration
 *                             countdown timer should be reset to the table's
 *                             TTL.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_table_true
 *                                     "alter_table_true": Reset the expiration
 *                                     countdown timer to the table's
 *                                     configured TTL.
 *                                 <li>@ref gpudb::alter_table_false
 *                                     "alter_table_false": Don't reset the
 *                                     timer; expiration countdown will
 *                                     continue from where it is, as if the
 *                                     table had not been accessed.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_table_true "alter_table_true".
 *                         <li>@ref gpudb::alter_table_add_column_expression
 *                             "alter_table_add_column_expression": When adding
 *                             a column, an optional expression to use for the
 *                             new column's values. Any valid expression may be
 *                             used, including one containing references to
 *                             existing columns in the same table.
 *                         <li>@ref gpudb::alter_table_strategy_definition
 *                             "alter_table_strategy_definition": Optional
 *                             parameter for specifying the <a
 *                             href="../../../rm/concepts/#tier-strategies"
 *                             target="_top">tier strategy</a> for the table
 *                             and its columns when @a action is @ref
 *                             gpudb::alter_table_set_strategy_definition
 *                             "set_strategy_definition", replacing the
 *                             existing tier strategy in its entirety.
 *                         <li>@ref gpudb::alter_table_index_type
 *                             "alter_table_index_type": Type of index to
 *                             create, when @a action is @ref
 *                             gpudb::alter_table_create_index "create_index";
 *                             to refresh, when @a action is @ref
 *                             gpudb::alter_table_refresh_index
 *                             "refresh_index"; or to delete, when @a action is
 *                             @ref gpudb::alter_table_delete_index
 *                             "delete_index".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_table_column
 *                                     "alter_table_column": Create or delete a
 *                                     <a
 *                                     href="../../../concepts/indexes/#column-index"
 *                                     target="_top">column (attribute)
 *                                     index</a>.
 *                                 <li>@ref gpudb::alter_table_chunk_skip
 *                                     "alter_table_chunk_skip": Create or
 *                                     delete a <a
 *                                     href="../../../concepts/indexes/#chunk-skip-index"
 *                                     target="_top">chunk skip index</a>.
 *                                 <li>@ref gpudb::alter_table_geospatial
 *                                     "alter_table_geospatial": Create or
 *                                     delete a <a
 *                                     href="../../../concepts/indexes/#geospatial-index"
 *                                     target="_top">geospatial index</a>
 *                                 <li>@ref gpudb::alter_table_cagra
 *                                     "alter_table_cagra": Create or delete a
 *                                     <a
 *                                     href="../../../concepts/indexes/#cagra-index"
 *                                     target="_top">CAGRA index</a> on a <a
 *                                     href="../../../vector_search/#vector-type"
 *                                     target="_top">vector column</a>
 *                                 <li>@ref gpudb::alter_table_hnsw
 *                                     "alter_table_hnsw": Create or delete an
 *                                     <a
 *                                     href="../../../concepts/indexes/#hnsw-index"
 *                                     target="_top">HNSW index</a> on a <a
 *                                     href="../../../vector_search/#vector-type"
 *                                     target="_top">vector column</a>
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_table_column "alter_table_column".
 *                         <li>@ref gpudb::alter_table_index_options
 *                             "alter_table_index_options": Options to use when
 *                             creating an index, in the format "key: value [,
 *                             key: value [, ...]]". Valid options vary by
 *                             index type.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AlterTableResponse "Response" object containing the
 *         result of the operation.
 */
AlterTableResponse alterTable( const std::string& tableName,
                               const std::string& action,
                               const std::string& value,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Apply various modifications to a table or view.  The available modifications
 * include the following:
 *
 * Manage a table's columns--a column can be added, removed, or have its <a
 * href="../../../concepts/types/" target="_top">type and properties</a>
 * modified, including whether it is <a
 * href="../../../concepts/dictionary_encoding/" target="_top">dictionary
 * encoded</a> or not.
 *
 * External tables cannot be modified except for their refresh method.
 *
 * Create or delete a <a href="../../../concepts/indexes/#column-index"
 * target="_top">column</a>, <a
 * href="../../../concepts/indexes/#chunk-skip-index" target="_top">chunk
 * skip</a>, <a href="../../../concepts/indexes/#geospatial-index"
 * target="_top">geospatial</a>, <a
 * href="../../../concepts/indexes/#cagra-index" target="_top">CAGRA</a>, or <a
 * href="../../../concepts/indexes/#hnsw-index" target="_top">HNSW</a> index.
 * This can speed up certain operations when using expressions containing
 * equality or relational operators on indexed columns. This only applies to
 * tables.
 *
 * Create or delete a <a href="../../../concepts/tables/#foreign-key"
 * target="_top">foreign key</a> on a particular column.
 *
 * Manage a <a href="../../../concepts/tables/#partitioning-by-range"
 * target="_top">range-partitioned</a> or a <a
 * href="../../../concepts/tables/#partitioning-by-list-manual"
 * target="_top">manual list-partitioned</a> table's partitions.
 *
 * Set (or reset) the <a href="../../../rm/concepts/#tier-strategies"
 * target="_top">tier strategy</a> of a table or view.
 *
 * Refresh and manage the refresh mode of a <a
 * href="../../../concepts/materialized_views/" target="_top">materialized
 * view</a> or an <a href="../../../concepts/external_tables/"
 * target="_top">external table</a>.
 *
 * Set the <a href="../../../concepts/ttl/" target="_top">time-to-live
 * (TTL)</a>. This can be applied to tables or views.
 *
 * Set the global access mode (i.e.\ locking) for a table. This setting trumps
 * any role-based access controls that may be in place; e.g., a user with write
 * access to a table marked read-only will not be able to insert records into
 * it. The mode can be set to read-only, write-only, read/write, and no access.
 *
 * @param[in] tableName  Table on which the operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. Must be an
 *                       existing table or view.
 * @param[in] action  Modification operation to be applied.
 *                    Supported values:
 *                    <ul>
 *                        <li>@ref gpudb::alter_table_allow_homogeneous_tables
 *                            "alter_table_allow_homogeneous_tables": No longer
 *                            supported; action will be ignored.
 *                        <li>@ref gpudb::alter_table_create_index
 *                            "alter_table_create_index": Creates a <a
 *                            href="../../../concepts/indexes/#column-index"
 *                            target="_top">column (attribute) index</a>, <a
 *                            href="../../../concepts/indexes/#chunk-skip-index"
 *                            target="_top">chunk skip index</a>, <a
 *                            href="../../../concepts/indexes/#geospatial-index"
 *                            target="_top">geospatial index</a>, <a
 *                            href="../../../concepts/indexes/#cagra-index"
 *                            target="_top">CAGRA index</a>, or <a
 *                            href="../../../concepts/indexes/#hnsw-index"
 *                            target="_top">HNSW index</a> (depending on the
 *                            specified @ref gpudb::alter_table_index_type
 *                            "index_type"), on the column name specified in @a
 *                            value. If this column already has the specified
 *                            index, an error will be returned.
 *                        <li>@ref gpudb::alter_table_refresh_index
 *                            "alter_table_refresh_index": Refreshes an index
 *                            identified by @ref gpudb::alter_table_index_type
 *                            "index_type", on the column name specified in @a
 *                            value. Currently applicable only to CAGRA
 *                            indices.
 *                        <li>@ref gpudb::alter_table_delete_index
 *                            "alter_table_delete_index": Deletes a <a
 *                            href="../../../concepts/indexes/#column-index"
 *                            target="_top">column (attribute) index</a>, <a
 *                            href="../../../concepts/indexes/#chunk-skip-index"
 *                            target="_top">chunk skip index</a>, <a
 *                            href="../../../concepts/indexes/#geospatial-index"
 *                            target="_top">geospatial index</a>, <a
 *                            href="../../../concepts/indexes/#cagra-index"
 *                            target="_top">CAGRA index</a>, or <a
 *                            href="../../../concepts/indexes/#hnsw-index"
 *                            target="_top">HNSW index</a> (depending on the
 *                            specified @ref gpudb::alter_table_index_type
 *                            "index_type"), on the column name specified in @a
 *                            value. If this column does not have the specified
 *                            index, an error will be returned.
 *                        <li>@ref gpudb::alter_table_move_to_collection
 *                            "alter_table_move_to_collection":
 *                            [DEPRECATED--please use @ref
 *                            gpudb::alter_table_move_to_schema
 *                            "move_to_schema" and use @ref
 *                            createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                            "createSchema" to create the schema if
 *                            non-existent]  Moves a table or view into a
 *                            schema named @a value.  If the schema provided is
 *                            non-existent, it will be automatically created.
 *                        <li>@ref gpudb::alter_table_move_to_schema
 *                            "alter_table_move_to_schema": Moves a table or
 *                            view into a schema named @a value. If the schema
 *                            provided is nonexistent, an error will be thrown.
 *                            If @a value is empty, then the table or view will
 *                            be placed in the user's default schema.
 *                        <li>@ref gpudb::alter_table_protected
 *                            "alter_table_protected": No longer used.
 *                            Previously set whether the given @a tableName
 *                            should be protected or not. The @a value would
 *                            have been either 'true' or 'false'.
 *                        <li>@ref gpudb::alter_table_rename_table
 *                            "alter_table_rename_table": Renames a table or
 *                            view to @a value. Has the same naming
 *                            restrictions as <a
 *                            href="../../../concepts/tables/"
 *                            target="_top">tables</a>.
 *                        <li>@ref gpudb::alter_table_ttl "alter_table_ttl":
 *                            Sets the <a href="../../../concepts/ttl/"
 *                            target="_top">time-to-live</a> in minutes of the
 *                            table or view specified in @a tableName.
 *                        <li>@ref gpudb::alter_table_add_comment
 *                            "alter_table_add_comment": Adds the comment
 *                            specified in @a value to the table specified in
 *                            @a tableName. Use @ref
 *                            gpudb::alter_table_column_name "column_name" to
 *                            set the comment for a column.
 *                        <li>@ref gpudb::alter_table_add_column
 *                            "alter_table_add_column": Adds the column
 *                            specified in @a value to the table specified in
 *                            @a tableName. Use @ref
 *                            gpudb::alter_table_column_type "column_type" and
 *                            @ref gpudb::alter_table_column_properties
 *                            "column_properties" in @a options to set the
 *                            column's type and properties, respectively.
 *                        <li>@ref gpudb::alter_table_change_column
 *                            "alter_table_change_column": Changes type and
 *                            properties of the column specified in @a value.
 *                            Use @ref gpudb::alter_table_column_type
 *                            "column_type" and @ref
 *                            gpudb::alter_table_column_properties
 *                            "column_properties" in @a options to set the
 *                            column's type and properties, respectively. Note
 *                            that primary key and/or shard key columns cannot
 *                            be changed. All unchanging column properties must
 *                            be listed for the change to take place, e.g., to
 *                            add dictionary encoding to an existing 'char4'
 *                            column, both 'char4' and 'dict' must be specified
 *                            in the @a options map.
 *                        <li>@ref gpudb::alter_table_set_column_compression
 *                            "alter_table_set_column_compression": No longer
 *                            supported; action will be ignored.
 *                        <li>@ref gpudb::alter_table_delete_column
 *                            "alter_table_delete_column": Deletes the column
 *                            specified in @a value from the table specified in
 *                            @a tableName.
 *                        <li>@ref gpudb::alter_table_create_foreign_key
 *                            "alter_table_create_foreign_key": Creates a <a
 *                            href="../../../concepts/tables/#foreign-key"
 *                            target="_top">foreign key</a> specified in @a
 *                            value using the format '(source_column_name [,
 *                            ...]) references
 *                            target_table_name(primary_key_column_name [,
 *                            ...]) [as foreign_key_name]'.
 *                        <li>@ref gpudb::alter_table_delete_foreign_key
 *                            "alter_table_delete_foreign_key": Deletes a <a
 *                            href="../../../concepts/tables/#foreign-key"
 *                            target="_top">foreign key</a>.  The @a value
 *                            should be the foreign_key_name specified when
 *                            creating the key or the complete string used to
 *                            define it.
 *                        <li>@ref gpudb::alter_table_add_partition
 *                            "alter_table_add_partition": Adds the partition
 *                            specified in @a value, to either a <a
 *                            href="../../../concepts/tables/#partitioning-by-range"
 *                            target="_top">range-partitioned</a> or <a
 *                            href="../../../concepts/tables/#partitioning-by-list-manual"
 *                            target="_top">manual list-partitioned</a> table.
 *                        <li>@ref gpudb::alter_table_remove_partition
 *                            "alter_table_remove_partition": Removes the
 *                            partition specified in @a value (and relocates
 *                            all of its data to the default partition) from
 *                            either a <a
 *                            href="../../../concepts/tables/#partitioning-by-range"
 *                            target="_top">range-partitioned</a> or <a
 *                            href="../../../concepts/tables/#partitioning-by-list-manual"
 *                            target="_top">manual list-partitioned</a> table.
 *                        <li>@ref gpudb::alter_table_delete_partition
 *                            "alter_table_delete_partition": Deletes the
 *                            partition specified in @a value (and all of its
 *                            data) from either a <a
 *                            href="../../../concepts/tables/#partitioning-by-range"
 *                            target="_top">range-partitioned</a> or <a
 *                            href="../../../concepts/tables/#partitioning-by-list-manual"
 *                            target="_top">manual list-partitioned</a> table.
 *                        <li>@ref gpudb::alter_table_set_global_access_mode
 *                            "alter_table_set_global_access_mode": Sets the
 *                            global access mode (i.e. locking) for the table
 *                            specified in @a tableName. Specify the access
 *                            mode in @a value. Valid modes are 'no_access',
 *                            'read_only', 'write_only' and 'read_write'.
 *                        <li>@ref gpudb::alter_table_refresh
 *                            "alter_table_refresh": For a <a
 *                            href="../../../concepts/materialized_views/"
 *                            target="_top">materialized view</a>, replays all
 *                            the table creation commands required to create
 *                            the view.  For an <a
 *                            href="../../../concepts/external_tables/"
 *                            target="_top">external table</a>, reloads all
 *                            data in the table from its associated source
 *                            files or <a
 *                            href="../../../concepts/data_sources/"
 *                            target="_top">data source</a>.
 *                        <li>@ref gpudb::alter_table_set_refresh_method
 *                            "alter_table_set_refresh_method": For a <a
 *                            href="../../../concepts/materialized_views/"
 *                            target="_top">materialized view</a>, sets the
 *                            method by which the view is refreshed to the
 *                            method specified in @a value - one of 'manual',
 *                            'periodic', or 'on_change'.  For an <a
 *                            href="../../../concepts/external_tables/"
 *                            target="_top">external table</a>, sets the method
 *                            by which the table is refreshed to the method
 *                            specified in @a value - either 'manual' or
 *                            'on_start'.
 *                        <li>@ref gpudb::alter_table_set_refresh_start_time
 *                            "alter_table_set_refresh_start_time": Sets the
 *                            time to start periodic refreshes of this <a
 *                            href="../../../concepts/materialized_views/"
 *                            target="_top">materialized view</a> to the
 *                            datetime string specified in @a value with format
 *                            'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes
 *                            occur at the specified time + N * the refresh
 *                            period.
 *                        <li>@ref gpudb::alter_table_set_refresh_stop_time
 *                            "alter_table_set_refresh_stop_time": Sets the
 *                            time to stop periodic refreshes of this <a
 *                            href="../../../concepts/materialized_views/"
 *                            target="_top">materialized view</a> to the
 *                            datetime string specified in @a value with format
 *                            'YYYY-MM-DD HH:MM:SS'.
 *                        <li>@ref gpudb::alter_table_set_refresh_period
 *                            "alter_table_set_refresh_period": Sets the time
 *                            interval in seconds at which to refresh this <a
 *                            href="../../../concepts/materialized_views/"
 *                            target="_top">materialized view</a> to the value
 *                            specified in @a value.  Also, sets the refresh
 *                            method to periodic if not already set.
 *                        <li>@ref gpudb::alter_table_set_refresh_span
 *                            "alter_table_set_refresh_span": Sets the future
 *                            time-offset(in seconds) for the view refresh to
 *                            stop.
 *                        <li>@ref gpudb::alter_table_set_refresh_execute_as
 *                            "alter_table_set_refresh_execute_as": Sets the
 *                            user name to refresh this <a
 *                            href="../../../concepts/materialized_views/"
 *                            target="_top">materialized view</a> to the value
 *                            specified in @a value.
 *                        <li>@ref
 *                            gpudb::alter_table_remove_text_search_attributes
 *                            "alter_table_remove_text_search_attributes":
 *                            Removes <a
 *                            href="../../../concepts/full_text_search/"
 *                            target="_top">text search</a> attribute from all
 *                            columns.
 *                        <li>@ref gpudb::alter_table_remove_shard_keys
 *                            "alter_table_remove_shard_keys": Removes the
 *                            shard key property from all columns, so that the
 *                            table will be considered randomly sharded.  The
 *                            data is not moved.  The @a value is ignored.
 *                        <li>@ref gpudb::alter_table_set_strategy_definition
 *                            "alter_table_set_strategy_definition": Sets the
 *                            <a href="../../../rm/concepts/#tier-strategies"
 *                            target="_top">tier strategy</a> for the table and
 *                            its columns to the one specified in @a value,
 *                            replacing the existing tier strategy in its
 *                            entirety.
 *                        <li>@ref
 *                            gpudb::alter_table_cancel_datasource_subscription
 *                            "alter_table_cancel_datasource_subscription":
 *                            Permanently unsubscribe a data source that is
 *                            loading continuously as a stream. The data source
 *                            can be Kafka / S3 / Azure.
 *                        <li>@ref
 *                            gpudb::alter_table_pause_datasource_subscription
 *                            "alter_table_pause_datasource_subscription":
 *                            Temporarily unsubscribe a data source that is
 *                            loading continuously as a stream. The data source
 *                            can be Kafka / S3 / Azure.
 *                        <li>@ref
 *                            gpudb::alter_table_resume_datasource_subscription
 *                            "alter_table_resume_datasource_subscription":
 *                            Resubscribe to a paused data source subscription.
 *                            The data source can be Kafka / S3 / Azure.
 *                        <li>@ref gpudb::alter_table_change_owner
 *                            "alter_table_change_owner": Change the owner
 *                            resource group of the table.
 *                    </ul>
 * @param[in] value  The value of the modification, depending on @a action. For
 *                   example, if @a action is @ref
 *                   gpudb::alter_table_add_column "add_column", this would be
 *                   the column name; while the column's definition would be
 *                   covered by the @ref gpudb::alter_table_column_type
 *                   "column_type", @ref gpudb::alter_table_column_properties
 *                   "column_properties", @ref
 *                   gpudb::alter_table_column_default_value
 *                   "column_default_value", and @ref
 *                   gpudb::alter_table_add_column_expression
 *                   "add_column_expression" in @a options. If @a action is
 *                   @ref gpudb::alter_table_ttl "ttl", it would be the number
 *                   of minutes for the new TTL. If @a action is @ref
 *                   gpudb::alter_table_refresh "refresh", this field would be
 *                   blank.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::alter_table_action
 *                             "alter_table_action"
 *                         <li>@ref gpudb::alter_table_column_name
 *                             "alter_table_column_name"
 *                         <li>@ref gpudb::alter_table_table_name
 *                             "alter_table_table_name"
 *                         <li>@ref gpudb::alter_table_column_default_value
 *                             "alter_table_column_default_value": When adding
 *                             a column, set a default value for existing
 *                             records.  For nullable columns, the default
 *                             value will be null, regardless of data type.
 *                         <li>@ref gpudb::alter_table_column_properties
 *                             "alter_table_column_properties": When adding or
 *                             changing a column, set the column properties
 *                             (strings, separated by a comma: data,
 *                             store_only, text_search, char8, int8 etc).
 *                         <li>@ref gpudb::alter_table_column_type
 *                             "alter_table_column_type": When adding or
 *                             changing a column, set the column type (strings,
 *                             separated by a comma: int, double, string, null
 *                             etc).
 *                         <li>@ref gpudb::alter_table_compression_type
 *                             "alter_table_compression_type": No longer
 *                             supported; option will be ignored.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_table_none
 *                                     "alter_table_none"
 *                                 <li>@ref gpudb::alter_table_snappy
 *                                     "alter_table_snappy"
 *                                 <li>@ref gpudb::alter_table_lz4
 *                                     "alter_table_lz4"
 *                                 <li>@ref gpudb::alter_table_lz4hc
 *                                     "alter_table_lz4hc"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_table_snappy "alter_table_snappy".
 *                         <li>@ref gpudb::alter_table_copy_values_from_column
 *                             "alter_table_copy_values_from_column":
 *                             [DEPRECATED--please use @ref
 *                             gpudb::alter_table_add_column_expression
 *                             "add_column_expression" instead.]
 *                         <li>@ref gpudb::alter_table_rename_column
 *                             "alter_table_rename_column": When changing a
 *                             column, specify new column name.
 *                         <li>@ref gpudb::alter_table_validate_change_column
 *                             "alter_table_validate_change_column": When
 *                             changing a column, validate the change before
 *                             applying it (or not).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_table_true
 *                                     "alter_table_true": Validate all values.
 *                                     A value too large (or too long) for the
 *                                     new type will prevent any change.
 *                                 <li>@ref gpudb::alter_table_false
 *                                     "alter_table_false": When a value is too
 *                                     large or long, it will be truncated.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_table_true "alter_table_true".
 *                         <li>@ref gpudb::alter_table_update_last_access_time
 *                             "alter_table_update_last_access_time": Indicates
 *                             whether the <a href="../../../concepts/ttl/"
 *                             target="_top">time-to-live</a> (TTL) expiration
 *                             countdown timer should be reset to the table's
 *                             TTL.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_table_true
 *                                     "alter_table_true": Reset the expiration
 *                                     countdown timer to the table's
 *                                     configured TTL.
 *                                 <li>@ref gpudb::alter_table_false
 *                                     "alter_table_false": Don't reset the
 *                                     timer; expiration countdown will
 *                                     continue from where it is, as if the
 *                                     table had not been accessed.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_table_true "alter_table_true".
 *                         <li>@ref gpudb::alter_table_add_column_expression
 *                             "alter_table_add_column_expression": When adding
 *                             a column, an optional expression to use for the
 *                             new column's values. Any valid expression may be
 *                             used, including one containing references to
 *                             existing columns in the same table.
 *                         <li>@ref gpudb::alter_table_strategy_definition
 *                             "alter_table_strategy_definition": Optional
 *                             parameter for specifying the <a
 *                             href="../../../rm/concepts/#tier-strategies"
 *                             target="_top">tier strategy</a> for the table
 *                             and its columns when @a action is @ref
 *                             gpudb::alter_table_set_strategy_definition
 *                             "set_strategy_definition", replacing the
 *                             existing tier strategy in its entirety.
 *                         <li>@ref gpudb::alter_table_index_type
 *                             "alter_table_index_type": Type of index to
 *                             create, when @a action is @ref
 *                             gpudb::alter_table_create_index "create_index";
 *                             to refresh, when @a action is @ref
 *                             gpudb::alter_table_refresh_index
 *                             "refresh_index"; or to delete, when @a action is
 *                             @ref gpudb::alter_table_delete_index
 *                             "delete_index".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_table_column
 *                                     "alter_table_column": Create or delete a
 *                                     <a
 *                                     href="../../../concepts/indexes/#column-index"
 *                                     target="_top">column (attribute)
 *                                     index</a>.
 *                                 <li>@ref gpudb::alter_table_chunk_skip
 *                                     "alter_table_chunk_skip": Create or
 *                                     delete a <a
 *                                     href="../../../concepts/indexes/#chunk-skip-index"
 *                                     target="_top">chunk skip index</a>.
 *                                 <li>@ref gpudb::alter_table_geospatial
 *                                     "alter_table_geospatial": Create or
 *                                     delete a <a
 *                                     href="../../../concepts/indexes/#geospatial-index"
 *                                     target="_top">geospatial index</a>
 *                                 <li>@ref gpudb::alter_table_cagra
 *                                     "alter_table_cagra": Create or delete a
 *                                     <a
 *                                     href="../../../concepts/indexes/#cagra-index"
 *                                     target="_top">CAGRA index</a> on a <a
 *                                     href="../../../vector_search/#vector-type"
 *                                     target="_top">vector column</a>
 *                                 <li>@ref gpudb::alter_table_hnsw
 *                                     "alter_table_hnsw": Create or delete an
 *                                     <a
 *                                     href="../../../concepts/indexes/#hnsw-index"
 *                                     target="_top">HNSW index</a> on a <a
 *                                     href="../../../vector_search/#vector-type"
 *                                     target="_top">vector column</a>
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::alter_table_column "alter_table_column".
 *                         <li>@ref gpudb::alter_table_index_options
 *                             "alter_table_index_options": Options to use when
 *                             creating an index, in the format "key: value [,
 *                             key: value [, ...]]". Valid options vary by
 *                             index type.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AlterTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterTableResponse& alterTable( const std::string& tableName,
                                const std::string& action,
                                const std::string& value,
                                const std::map<std::string, std::string>& options,
                                AlterTableResponse& response_ ) const;

/**
 * Apply various modifications to columns in a table, view.  The available
 * modifications include the following:
 *
 * Create or delete an <a href="../../../concepts/indexes/#column-index"
 * target="_top">index</a> on a particular column. This can speed up certain
 * operations when using expressions containing equality or relational
 * operators on indexed columns. This only applies to tables.
 *
 * Manage a table's columns--a column can be added, removed, or have its <a
 * href="../../../concepts/types/" target="_top">type and properties</a>
 * modified, including whether it is <a
 * href="../../../concepts/dictionary_encoding/" target="_top">dictionary
 * encoded</a> or not.
 *
 * @param[in] request_  @ref gpudb::AlterTableColumnsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterTableColumnsResponse "Response" object containing
 *         the result of the operation.
 */
AlterTableColumnsResponse alterTableColumns( const AlterTableColumnsRequest& request_ ) const;

/**
 * Apply various modifications to columns in a table, view.  The available
 * modifications include the following:
 *
 * Create or delete an <a href="../../../concepts/indexes/#column-index"
 * target="_top">index</a> on a particular column. This can speed up certain
 * operations when using expressions containing equality or relational
 * operators on indexed columns. This only applies to tables.
 *
 * Manage a table's columns--a column can be added, removed, or have its <a
 * href="../../../concepts/types/" target="_top">type and properties</a>
 * modified, including whether it is <a
 * href="../../../concepts/dictionary_encoding/" target="_top">dictionary
 * encoded</a> or not.
 *
 * @param[in] request_  @ref gpudb::AlterTableColumnsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterTableColumnsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AlterTableColumnsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AlterTableColumnsResponse& alterTableColumns( const AlterTableColumnsRequest& request_,
                                              AlterTableColumnsResponse& response_ ) const;

/**
 * Apply various modifications to columns in a table, view.  The available
 * modifications include the following:
 *
 * Create or delete an <a href="../../../concepts/indexes/#column-index"
 * target="_top">index</a> on a particular column. This can speed up certain
 * operations when using expressions containing equality or relational
 * operators on indexed columns. This only applies to tables.
 *
 * Manage a table's columns--a column can be added, removed, or have its <a
 * href="../../../concepts/types/" target="_top">type and properties</a>
 * modified, including whether it is <a
 * href="../../../concepts/dictionary_encoding/" target="_top">dictionary
 * encoded</a> or not.
 *
 * @param[in] tableName  Table on which the operation will be performed. Must
 *                       be an existing table or view, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnAlterations  List of alter table add/delete/change column
 *                               requests - all for the same table. Each
 *                               request is a map that includes 'column_name',
 *                               'action' and the options specific for the
 *                               action. Note that the same options as in alter
 *                               table requests but in the same map as the
 *                               column name and the action. For example:
 *                               [{'column_name':'col_1','action':'change_column','rename_column':'col_2'},{'column_name':'col_1','action':'add_column',
 *                               'type':'int','default_value':'1'}]
 * @param[in] options  Optional parameters.
 *
 * @return @ref gpudb::AlterTableColumnsResponse "Response" object containing
 *         the result of the operation.
 */
AlterTableColumnsResponse alterTableColumns( const std::string& tableName,
                                             const std::vector<std::map<std::string, std::string> >& columnAlterations,
                                             const std::map<std::string, std::string>& options ) const;

/**
 * Apply various modifications to columns in a table, view.  The available
 * modifications include the following:
 *
 * Create or delete an <a href="../../../concepts/indexes/#column-index"
 * target="_top">index</a> on a particular column. This can speed up certain
 * operations when using expressions containing equality or relational
 * operators on indexed columns. This only applies to tables.
 *
 * Manage a table's columns--a column can be added, removed, or have its <a
 * href="../../../concepts/types/" target="_top">type and properties</a>
 * modified, including whether it is <a
 * href="../../../concepts/dictionary_encoding/" target="_top">dictionary
 * encoded</a> or not.
 *
 * @param[in] tableName  Table on which the operation will be performed. Must
 *                       be an existing table or view, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] columnAlterations  List of alter table add/delete/change column
 *                               requests - all for the same table. Each
 *                               request is a map that includes 'column_name',
 *                               'action' and the options specific for the
 *                               action. Note that the same options as in alter
 *                               table requests but in the same map as the
 *                               column name and the action. For example:
 *                               [{'column_name':'col_1','action':'change_column','rename_column':'col_2'},{'column_name':'col_1','action':'add_column',
 *                               'type':'int','default_value':'1'}]
 * @param[in] options  Optional parameters.
 * @param[out] response_  @ref gpudb::AlterTableColumnsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AlterTableColumnsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AlterTableColumnsResponse& alterTableColumns( const std::string& tableName,
                                              const std::vector<std::map<std::string, std::string> >& columnAlterations,
                                              const std::map<std::string, std::string>& options,
                                              AlterTableColumnsResponse& response_ ) const;

/**
 * Updates (adds or changes) metadata for tables. The metadata key and values
 * must both be strings. This is an easy way to annotate whole tables rather
 * than single records within tables.  Some examples of metadata are owner of
 * the table, table creation timestamp etc.
 *
 * @param[in] request_  @ref gpudb::AlterTableMetadataRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterTableMetadataResponse "Response" object containing
 *         the result of the operation.
 */
AlterTableMetadataResponse alterTableMetadata( const AlterTableMetadataRequest& request_ ) const;

/**
 * Updates (adds or changes) metadata for tables. The metadata key and values
 * must both be strings. This is an easy way to annotate whole tables rather
 * than single records within tables.  Some examples of metadata are owner of
 * the table, table creation timestamp etc.
 *
 * @param[in] request_  @ref gpudb::AlterTableMetadataRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterTableMetadataResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AlterTableMetadataResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AlterTableMetadataResponse& alterTableMetadata( const AlterTableMetadataRequest& request_,
                                                AlterTableMetadataResponse& response_ ) const;

/**
 * Updates (adds or changes) metadata for tables. The metadata key and values
 * must both be strings. This is an easy way to annotate whole tables rather
 * than single records within tables.  Some examples of metadata are owner of
 * the table, table creation timestamp etc.
 *
 * @param[in] tableNames  Names of the tables whose metadata will be updated,
 *                        in [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.  All
 *                        specified tables must exist, or an error will be
 *                        returned.
 * @param[in] metadataMap  A map which contains the metadata of the tables that
 *                         are to be updated. Note that only one map is
 *                         provided for all the tables; so the change will be
 *                         applied to every table. If the provided map is
 *                         empty, then all existing metadata for the table(s)
 *                         will be cleared.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AlterTableMetadataResponse "Response" object containing
 *         the result of the operation.
 */
AlterTableMetadataResponse alterTableMetadata( const std::vector<std::string>& tableNames,
                                               const std::map<std::string, std::string>& metadataMap,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Updates (adds or changes) metadata for tables. The metadata key and values
 * must both be strings. This is an easy way to annotate whole tables rather
 * than single records within tables.  Some examples of metadata are owner of
 * the table, table creation timestamp etc.
 *
 * @param[in] tableNames  Names of the tables whose metadata will be updated,
 *                        in [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.  All
 *                        specified tables must exist, or an error will be
 *                        returned.
 * @param[in] metadataMap  A map which contains the metadata of the tables that
 *                         are to be updated. Note that only one map is
 *                         provided for all the tables; so the change will be
 *                         applied to every table. If the provided map is
 *                         empty, then all existing metadata for the table(s)
 *                         will be cleared.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AlterTableMetadataResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AlterTableMetadataResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AlterTableMetadataResponse& alterTableMetadata( const std::vector<std::string>& tableNames,
                                                const std::map<std::string, std::string>& metadataMap,
                                                const std::map<std::string, std::string>& options,
                                                AlterTableMetadataResponse& response_ ) const;

/**
 * Alters a table monitor previously created with @ref
 * createTableMonitor(const CreateTableMonitorRequest&) const
 * "createTableMonitor".
 *
 * @param[in] request_  @ref gpudb::AlterTableMonitorRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterTableMonitorResponse "Response" object containing
 *         the result of the operation.
 */
AlterTableMonitorResponse alterTableMonitor( const AlterTableMonitorRequest& request_ ) const;

/**
 * Alters a table monitor previously created with @ref
 * createTableMonitor(const CreateTableMonitorRequest&) const
 * "createTableMonitor".
 *
 * @param[in] request_  @ref gpudb::AlterTableMonitorRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterTableMonitorResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AlterTableMonitorResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AlterTableMonitorResponse& alterTableMonitor( const AlterTableMonitorRequest& request_,
                                              AlterTableMonitorResponse& response_ ) const;

/**
 * Alters a table monitor previously created with @ref
 * createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 * "createTableMonitor".
 *
 * @param[in] topicId  The topic ID returned by @ref
 *                     createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 *                     "createTableMonitor".
 * @param[in] monitorUpdatesMap  Map containing the properties of the table
 *                               monitor to be updated. Error if empty.
 *                               <ul>
 *                                   <li>@ref
 *                                       gpudb::alter_table_monitor_schema_name
 *                                       "alter_table_monitor_schema_name":
 *                                       Updates the schema name.  If @ref
 *                                       gpudb::alter_table_monitor_schema_name
 *                                       "schema_name" doesn't exist, an error
 *                                       will be thrown. If @ref
 *                                       gpudb::alter_table_monitor_schema_name
 *                                       "schema_name" is empty, then the
 *                                       user's default schema will be used.
 *                               </ul>
 * @param[in] options  Optional parameters.
 *
 * @return @ref gpudb::AlterTableMonitorResponse "Response" object containing
 *         the result of the operation.
 */
AlterTableMonitorResponse alterTableMonitor( const std::string& topicId,
                                             const std::map<std::string, std::string>& monitorUpdatesMap,
                                             const std::map<std::string, std::string>& options ) const;

/**
 * Alters a table monitor previously created with @ref
 * createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 * "createTableMonitor".
 *
 * @param[in] topicId  The topic ID returned by @ref
 *                     createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 *                     "createTableMonitor".
 * @param[in] monitorUpdatesMap  Map containing the properties of the table
 *                               monitor to be updated. Error if empty.
 *                               <ul>
 *                                   <li>@ref
 *                                       gpudb::alter_table_monitor_schema_name
 *                                       "alter_table_monitor_schema_name":
 *                                       Updates the schema name.  If @ref
 *                                       gpudb::alter_table_monitor_schema_name
 *                                       "schema_name" doesn't exist, an error
 *                                       will be thrown. If @ref
 *                                       gpudb::alter_table_monitor_schema_name
 *                                       "schema_name" is empty, then the
 *                                       user's default schema will be used.
 *                               </ul>
 * @param[in] options  Optional parameters.
 * @param[out] response_  @ref gpudb::AlterTableMonitorResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::AlterTableMonitorResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
AlterTableMonitorResponse& alterTableMonitor( const std::string& topicId,
                                              const std::map<std::string, std::string>& monitorUpdatesMap,
                                              const std::map<std::string, std::string>& options,
                                              AlterTableMonitorResponse& response_ ) const;

/**
 * Alters properties of an exisiting <a
 * href="../../../rm/concepts/#storage-tiers" target="_top">tier</a> to
 * facilitate <a href="../../../rm/concepts/" target="_top">resource
 * management</a>.
 *
 * To disable <a href="../../../rm/concepts/#watermark-based-eviction"
 * target="_top">watermark-based eviction</a>, set both @ref
 * gpudb::alter_tier_high_watermark "high_watermark" and @ref
 * gpudb::alter_tier_low_watermark "low_watermark" to 100.
 *
 * @param[in] request_  @ref gpudb::AlterTierRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterTierResponse "Response" object containing the
 *         result of the operation.
 */
AlterTierResponse alterTier( const AlterTierRequest& request_ ) const;

/**
 * Alters properties of an exisiting <a
 * href="../../../rm/concepts/#storage-tiers" target="_top">tier</a> to
 * facilitate <a href="../../../rm/concepts/" target="_top">resource
 * management</a>.
 *
 * To disable <a href="../../../rm/concepts/#watermark-based-eviction"
 * target="_top">watermark-based eviction</a>, set both @ref
 * gpudb::alter_tier_high_watermark "high_watermark" and @ref
 * gpudb::alter_tier_low_watermark "low_watermark" to 100.
 *
 * @param[in] request_  @ref gpudb::AlterTierRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterTierResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterTierResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterTierResponse& alterTier( const AlterTierRequest& request_,
                              AlterTierResponse& response_ ) const;

/**
 * Alters properties of an exisiting <a
 * href="../../../rm/concepts/#storage-tiers" target="_top">tier</a> to
 * facilitate <a href="../../../rm/concepts/" target="_top">resource
 * management</a>.
 *
 * To disable <a href="../../../rm/concepts/#watermark-based-eviction"
 * target="_top">watermark-based eviction</a>, set both @ref
 * gpudb::alter_tier_high_watermark "high_watermark" and @ref
 * gpudb::alter_tier_low_watermark "low_watermark" to 100.
 *
 * @param[in] name  Name of the tier to be altered. Must be an existing tier
 *                  group name.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::alter_tier_capacity
 *                             "alter_tier_capacity": Maximum size in bytes
 *                             this tier may hold at once.
 *                         <li>@ref gpudb::alter_tier_high_watermark
 *                             "alter_tier_high_watermark": Threshold of usage
 *                             of this tier's resource that once exceeded, will
 *                             trigger watermark-based eviction from this tier.
 *                             The minimum allowed value is '0'. The maximum
 *                             allowed value is '100'.
 *                         <li>@ref gpudb::alter_tier_low_watermark
 *                             "alter_tier_low_watermark": Threshold of
 *                             resource usage that once fallen below after
 *                             crossing the @ref
 *                             gpudb::alter_tier_high_watermark
 *                             "high_watermark", will cease watermark-based
 *                             eviction from this tier. The minimum allowed
 *                             value is '0'. The maximum allowed value is
 *                             '100'.
 *                         <li>@ref gpudb::alter_tier_wait_timeout
 *                             "alter_tier_wait_timeout": Timeout in seconds
 *                             for reading from or writing to this resource.
 *                             Applies to cold storage tiers only.
 *                         <li>@ref gpudb::alter_tier_persist
 *                             "alter_tier_persist": If @ref
 *                             gpudb::alter_tier_true "true" the system
 *                             configuration will be written to disk upon
 *                             successful application of this request. This
 *                             will commit the changes from this request and
 *                             any additional in-memory modifications.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_tier_true
 *                                     "alter_tier_true"
 *                                 <li>@ref gpudb::alter_tier_false
 *                                     "alter_tier_false"
 *                             </ul>
 *                             The default value is @ref gpudb::alter_tier_true
 *                             "alter_tier_true".
 *                         <li>@ref gpudb::alter_tier_rank "alter_tier_rank":
 *                             Apply the requested change only to a specific
 *                             rank. The minimum allowed value is '0'. The
 *                             maximum allowed value is '10000'.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AlterTierResponse "Response" object containing the
 *         result of the operation.
 */
AlterTierResponse alterTier( const std::string& name,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Alters properties of an exisiting <a
 * href="../../../rm/concepts/#storage-tiers" target="_top">tier</a> to
 * facilitate <a href="../../../rm/concepts/" target="_top">resource
 * management</a>.
 *
 * To disable <a href="../../../rm/concepts/#watermark-based-eviction"
 * target="_top">watermark-based eviction</a>, set both @ref
 * gpudb::alter_tier_high_watermark "high_watermark" and @ref
 * gpudb::alter_tier_low_watermark "low_watermark" to 100.
 *
 * @param[in] name  Name of the tier to be altered. Must be an existing tier
 *                  group name.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::alter_tier_capacity
 *                             "alter_tier_capacity": Maximum size in bytes
 *                             this tier may hold at once.
 *                         <li>@ref gpudb::alter_tier_high_watermark
 *                             "alter_tier_high_watermark": Threshold of usage
 *                             of this tier's resource that once exceeded, will
 *                             trigger watermark-based eviction from this tier.
 *                             The minimum allowed value is '0'. The maximum
 *                             allowed value is '100'.
 *                         <li>@ref gpudb::alter_tier_low_watermark
 *                             "alter_tier_low_watermark": Threshold of
 *                             resource usage that once fallen below after
 *                             crossing the @ref
 *                             gpudb::alter_tier_high_watermark
 *                             "high_watermark", will cease watermark-based
 *                             eviction from this tier. The minimum allowed
 *                             value is '0'. The maximum allowed value is
 *                             '100'.
 *                         <li>@ref gpudb::alter_tier_wait_timeout
 *                             "alter_tier_wait_timeout": Timeout in seconds
 *                             for reading from or writing to this resource.
 *                             Applies to cold storage tiers only.
 *                         <li>@ref gpudb::alter_tier_persist
 *                             "alter_tier_persist": If @ref
 *                             gpudb::alter_tier_true "true" the system
 *                             configuration will be written to disk upon
 *                             successful application of this request. This
 *                             will commit the changes from this request and
 *                             any additional in-memory modifications.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_tier_true
 *                                     "alter_tier_true"
 *                                 <li>@ref gpudb::alter_tier_false
 *                                     "alter_tier_false"
 *                             </ul>
 *                             The default value is @ref gpudb::alter_tier_true
 *                             "alter_tier_true".
 *                         <li>@ref gpudb::alter_tier_rank "alter_tier_rank":
 *                             Apply the requested change only to a specific
 *                             rank. The minimum allowed value is '0'. The
 *                             maximum allowed value is '10000'.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AlterTierResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterTierResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterTierResponse& alterTier( const std::string& name,
                              const std::map<std::string, std::string>& options,
                              AlterTierResponse& response_ ) const;

/**
 * Alters a user.
 *
 * @param[in] request_  @ref gpudb::AlterUserRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterUserResponse "Response" object containing the
 *         result of the operation.
 */
AlterUserResponse alterUser( const AlterUserRequest& request_ ) const;

/**
 * Alters a user.
 *
 * @param[in] request_  @ref gpudb::AlterUserRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterUserResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterUserResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterUserResponse& alterUser( const AlterUserRequest& request_,
                              AlterUserResponse& response_ ) const;

/**
 * Alters a user.
 *
 * @param[in] name  Name of the user to be altered. Must be an existing user.
 * @param[in] action  Modification operation to be applied to the user.
 *                    Supported values:
 *                    <ul>
 *                        <li>@ref gpudb::alter_user_set_comment
 *                            "alter_user_set_comment": Sets the comment for an
 *                            internal user.
 *                        <li>@ref gpudb::alter_user_set_password
 *                            "alter_user_set_password": Sets the password of
 *                            the user. The user must be an internal user.
 *                        <li>@ref gpudb::alter_user_set_resource_group
 *                            "alter_user_set_resource_group": Sets the
 *                            resource group for an internal user. The resource
 *                            group must exist, otherwise, an empty string
 *                            assigns the user to the default resource group.
 *                        <li>@ref gpudb::alter_user_set_default_schema
 *                            "alter_user_set_default_schema": Set the
 *                            default_schema for an internal user. An empty
 *                            string means the user will have no default
 *                            schema.
 *                    </ul>
 * @param[in] value  The value of the modification, depending on @a action.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::AlterUserResponse "Response" object containing the
 *         result of the operation.
 */
AlterUserResponse alterUser( const std::string& name,
                             const std::string& action,
                             const std::string& value,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Alters a user.
 *
 * @param[in] name  Name of the user to be altered. Must be an existing user.
 * @param[in] action  Modification operation to be applied to the user.
 *                    Supported values:
 *                    <ul>
 *                        <li>@ref gpudb::alter_user_set_comment
 *                            "alter_user_set_comment": Sets the comment for an
 *                            internal user.
 *                        <li>@ref gpudb::alter_user_set_password
 *                            "alter_user_set_password": Sets the password of
 *                            the user. The user must be an internal user.
 *                        <li>@ref gpudb::alter_user_set_resource_group
 *                            "alter_user_set_resource_group": Sets the
 *                            resource group for an internal user. The resource
 *                            group must exist, otherwise, an empty string
 *                            assigns the user to the default resource group.
 *                        <li>@ref gpudb::alter_user_set_default_schema
 *                            "alter_user_set_default_schema": Set the
 *                            default_schema for an internal user. An empty
 *                            string means the user will have no default
 *                            schema.
 *                    </ul>
 * @param[in] value  The value of the modification, depending on @a action.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::AlterUserResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterUserResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterUserResponse& alterUser( const std::string& name,
                              const std::string& action,
                              const std::string& value,
                              const std::map<std::string, std::string>& options,
                              AlterUserResponse& response_ ) const;

/**
 * Alters a video.
 *
 * @param[in] request_  @ref gpudb::AlterVideoRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AlterVideoResponse "Response" object containing the
 *         result of the operation.
 */
AlterVideoResponse alterVideo( const AlterVideoRequest& request_ ) const;

/**
 * Alters a video.
 *
 * @param[in] request_  @ref gpudb::AlterVideoRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterVideoResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterVideoResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterVideoResponse& alterVideo( const AlterVideoRequest& request_,
                                AlterVideoResponse& response_ ) const;

/**
 * Alters a video.
 *
 * @param[in] path  Fully-qualified <a href="../../../tools/kifs/"
 *                  target="_top">KiFS</a> path to the video to be altered.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::alter_video_ttl "alter_video_ttl":
 *                             Sets the <a href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the video.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AlterVideoResponse "Response" object containing the
 *         result of the operation.
 */
AlterVideoResponse alterVideo( const std::string& path,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Alters a video.
 *
 * @param[in] path  Fully-qualified <a href="../../../tools/kifs/"
 *                  target="_top">KiFS</a> path to the video to be altered.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::alter_video_ttl "alter_video_ttl":
 *                             Sets the <a href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the video.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AlterVideoResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterVideoResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AlterVideoResponse& alterVideo( const std::string& path,
                                const std::map<std::string, std::string>& options,
                                AlterVideoResponse& response_ ) const;

/**
 * Alters table wal settings.
 * Returns information about the requested table wal modifications.
 *
 * @param[in] request_  @ref gpudb::AlterWalRequest "Request" object containing
 *                      the parameters for the operation.
 *
 * @return @ref gpudb::AlterWalResponse "Response" object containing the result
 *         of the operation.
 */
AlterWalResponse alterWal( const AlterWalRequest& request_ ) const;

/**
 * Alters table wal settings.
 * Returns information about the requested table wal modifications.
 *
 * @param[in] request_  @ref gpudb::AlterWalRequest "Request" object containing
 *                      the parameters for the operation.
 * @param[out] response_  @ref gpudb::AlterWalResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterWalResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
AlterWalResponse& alterWal( const AlterWalRequest& request_,
                            AlterWalResponse& response_ ) const;

/**
 * Alters table wal settings.
 * Returns information about the requested table wal modifications.
 *
 * @param[in] tableNames  List of tables to modify. An asterisk changes the
 *                        system settings.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::alter_wal_max_segment_size
 *                             "alter_wal_max_segment_size": Maximum size of an
 *                             individual segment file
 *                         <li>@ref gpudb::alter_wal_segment_count
 *                             "alter_wal_segment_count": Approximate number of
 *                             segment files to split the wal across. Must be
 *                             at least two.
 *                         <li>@ref gpudb::alter_wal_sync_policy
 *                             "alter_wal_sync_policy": Maximum size of an
 *                             individual segment file.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_wal_none
 *                                     "alter_wal_none": Disables the wal
 *                                 <li>@ref gpudb::alter_wal_background
 *                                     "alter_wal_background": Wal entries are
 *                                     periodically written instead of
 *                                     immediately after each operation
 *                                 <li>@ref gpudb::alter_wal_flush
 *                                     "alter_wal_flush": Protects entries in
 *                                     the event of a database crash
 *                                 <li>@ref gpudb::alter_wal_fsync
 *                                     "alter_wal_fsync": Protects entries in
 *                                     the event of an OS crash
 *                             </ul>
 *                         <li>@ref gpudb::alter_wal_flush_frequency
 *                             "alter_wal_flush_frequency": Specifies how
 *                             frequently wal entries are written with
 *                             background sync. This is a global setting and
 *                             can only be used with the system
 *                             {options.table_names} specifier '*'.
 *                         <li>@ref gpudb::alter_wal_checksum
 *                             "alter_wal_checksum": If @ref
 *                             gpudb::alter_wal_true "true" each entry will be
 *                             checked against a protective checksum.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_wal_true
 *                                     "alter_wal_true"
 *                                 <li>@ref gpudb::alter_wal_false
 *                                     "alter_wal_false"
 *                             </ul>
 *                             The default value is @ref gpudb::alter_wal_true
 *                             "alter_wal_true".
 *                         <li>@ref gpudb::alter_wal_override_non_default
 *                             "alter_wal_override_non_default": If @ref
 *                             gpudb::alter_wal_true "true" tables with unique
 *                             wal settings will be overridden when applying a
 *                             system level change.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_wal_true
 *                                     "alter_wal_true"
 *                                 <li>@ref gpudb::alter_wal_false
 *                                     "alter_wal_false"
 *                             </ul>
 *                             The default value is @ref gpudb::alter_wal_false
 *                             "alter_wal_false".
 *                         <li>@ref gpudb::alter_wal_restore_system_settings
 *                             "alter_wal_restore_system_settings": If @ref
 *                             gpudb::alter_wal_true "true" tables with unique
 *                             wal settings will be reverted to the current
 *                             global settings. Cannot be used in conjunction
 *                             with any other option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_wal_true
 *                                     "alter_wal_true"
 *                                 <li>@ref gpudb::alter_wal_false
 *                                     "alter_wal_false"
 *                             </ul>
 *                             The default value is @ref gpudb::alter_wal_false
 *                             "alter_wal_false".
 *                         <li>@ref gpudb::alter_wal_persist
 *                             "alter_wal_persist": If @ref
 *                             gpudb::alter_wal_true "true" and a system-level
 *                             change was requested, the system configuration
 *                             will be written to disk upon successful
 *                             application of this request. This will commit
 *                             the changes from this request and any additional
 *                             in-memory modifications.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_wal_true
 *                                     "alter_wal_true"
 *                                 <li>@ref gpudb::alter_wal_false
 *                                     "alter_wal_false"
 *                             </ul>
 *                             The default value is @ref gpudb::alter_wal_true
 *                             "alter_wal_true".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AlterWalResponse "Response" object containing the result
 *         of the operation.
 */
AlterWalResponse alterWal( const std::vector<std::string>& tableNames,
                           const std::map<std::string, std::string>& options ) const;

/**
 * Alters table wal settings.
 * Returns information about the requested table wal modifications.
 *
 * @param[in] tableNames  List of tables to modify. An asterisk changes the
 *                        system settings.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::alter_wal_max_segment_size
 *                             "alter_wal_max_segment_size": Maximum size of an
 *                             individual segment file
 *                         <li>@ref gpudb::alter_wal_segment_count
 *                             "alter_wal_segment_count": Approximate number of
 *                             segment files to split the wal across. Must be
 *                             at least two.
 *                         <li>@ref gpudb::alter_wal_sync_policy
 *                             "alter_wal_sync_policy": Maximum size of an
 *                             individual segment file.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_wal_none
 *                                     "alter_wal_none": Disables the wal
 *                                 <li>@ref gpudb::alter_wal_background
 *                                     "alter_wal_background": Wal entries are
 *                                     periodically written instead of
 *                                     immediately after each operation
 *                                 <li>@ref gpudb::alter_wal_flush
 *                                     "alter_wal_flush": Protects entries in
 *                                     the event of a database crash
 *                                 <li>@ref gpudb::alter_wal_fsync
 *                                     "alter_wal_fsync": Protects entries in
 *                                     the event of an OS crash
 *                             </ul>
 *                         <li>@ref gpudb::alter_wal_flush_frequency
 *                             "alter_wal_flush_frequency": Specifies how
 *                             frequently wal entries are written with
 *                             background sync. This is a global setting and
 *                             can only be used with the system
 *                             {options.table_names} specifier '*'.
 *                         <li>@ref gpudb::alter_wal_checksum
 *                             "alter_wal_checksum": If @ref
 *                             gpudb::alter_wal_true "true" each entry will be
 *                             checked against a protective checksum.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_wal_true
 *                                     "alter_wal_true"
 *                                 <li>@ref gpudb::alter_wal_false
 *                                     "alter_wal_false"
 *                             </ul>
 *                             The default value is @ref gpudb::alter_wal_true
 *                             "alter_wal_true".
 *                         <li>@ref gpudb::alter_wal_override_non_default
 *                             "alter_wal_override_non_default": If @ref
 *                             gpudb::alter_wal_true "true" tables with unique
 *                             wal settings will be overridden when applying a
 *                             system level change.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_wal_true
 *                                     "alter_wal_true"
 *                                 <li>@ref gpudb::alter_wal_false
 *                                     "alter_wal_false"
 *                             </ul>
 *                             The default value is @ref gpudb::alter_wal_false
 *                             "alter_wal_false".
 *                         <li>@ref gpudb::alter_wal_restore_system_settings
 *                             "alter_wal_restore_system_settings": If @ref
 *                             gpudb::alter_wal_true "true" tables with unique
 *                             wal settings will be reverted to the current
 *                             global settings. Cannot be used in conjunction
 *                             with any other option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_wal_true
 *                                     "alter_wal_true"
 *                                 <li>@ref gpudb::alter_wal_false
 *                                     "alter_wal_false"
 *                             </ul>
 *                             The default value is @ref gpudb::alter_wal_false
 *                             "alter_wal_false".
 *                         <li>@ref gpudb::alter_wal_persist
 *                             "alter_wal_persist": If @ref
 *                             gpudb::alter_wal_true "true" and a system-level
 *                             change was requested, the system configuration
 *                             will be written to disk upon successful
 *                             application of this request. This will commit
 *                             the changes from this request and any additional
 *                             in-memory modifications.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::alter_wal_true
 *                                     "alter_wal_true"
 *                                 <li>@ref gpudb::alter_wal_false
 *                                     "alter_wal_false"
 *                             </ul>
 *                             The default value is @ref gpudb::alter_wal_true
 *                             "alter_wal_true".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AlterWalResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AlterWalResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
AlterWalResponse& alterWal( const std::vector<std::string>& tableNames,
                            const std::map<std::string, std::string>& options,
                            AlterWalResponse& response_ ) const;

/**
 * Append (or insert) all records from a source table (specified by @ref
 * gpudb::AppendRecordsRequest::sourceTableName "sourceTableName") to a
 * particular target table (specified by @ref
 * gpudb::AppendRecordsRequest::tableName "tableName"). The field map
 * (specified by @ref gpudb::AppendRecordsRequest::fieldMap "fieldMap") holds
 * the user specified map of target table column names with their mapped source
 * column names.
 *
 * @param[in] request_  @ref gpudb::AppendRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::AppendRecordsResponse "Response" object containing the
 *         result of the operation.
 */
AppendRecordsResponse appendRecords( const AppendRecordsRequest& request_ ) const;

/**
 * Append (or insert) all records from a source table (specified by @ref
 * gpudb::AppendRecordsRequest::sourceTableName "sourceTableName") to a
 * particular target table (specified by @ref
 * gpudb::AppendRecordsRequest::tableName "tableName"). The field map
 * (specified by @ref gpudb::AppendRecordsRequest::fieldMap "fieldMap") holds
 * the user specified map of target table column names with their mapped source
 * column names.
 *
 * @param[in] request_  @ref gpudb::AppendRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::AppendRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AppendRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AppendRecordsResponse& appendRecords( const AppendRecordsRequest& request_,
                                      AppendRecordsResponse& response_ ) const;

/**
 * Append (or insert) all records from a source table (specified by @a
 * sourceTableName) to a particular target table (specified by @a tableName).
 * The field map (specified by @a fieldMap) holds the user specified map of
 * target table column names with their mapped source column names.
 *
 * @param[in] tableName  The table name for the records to be appended, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] sourceTableName  The source table name to get records from, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a>.  Must
 *                             be an existing table name.
 * @param[in] fieldMap  Contains the mapping of column names from the target
 *                      table (specified by @a tableName) as the keys, and
 *                      corresponding column names or expressions (e.g.,
 *                      'col_name+1') from the source table (specified by @a
 *                      sourceTableName). Must be existing column names in
 *                      source table and target table, and their types must be
 *                      matched. For details on using expressions, see <a
 *                      href="../../../concepts/expressions/"
 *                      target="_top">Expressions</a>.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::append_records_offset
 *                             "append_records_offset": A positive integer
 *                             indicating the number of initial results to skip
 *                             from @a sourceTableName. Default is 0. The
 *                             minimum allowed value is 0. The maximum allowed
 *                             value is MAX_INT. The default value is '0'.
 *                         <li>@ref gpudb::append_records_limit
 *                             "append_records_limit": A positive integer
 *                             indicating the maximum number of results to be
 *                             returned from @a sourceTableName. Or END_OF_SET
 *                             (-9999) to indicate that the max number of
 *                             results should be returned. The default value is
 *                             '-9999'.
 *                         <li>@ref gpudb::append_records_expression
 *                             "append_records_expression": Optional filter
 *                             expression to apply to the @a sourceTableName.
 *                             The default value is ''.
 *                         <li>@ref gpudb::append_records_order_by
 *                             "append_records_order_by": Comma-separated list
 *                             of the columns to be sorted by from source table
 *                             (specified by @a sourceTableName), e.g.,
 *                             'timestamp asc, x desc'. The @ref
 *                             gpudb::append_records_order_by "order_by"
 *                             columns do not have to be present in @a
 *                             fieldMap. The default value is ''.
 *                         <li>@ref gpudb::append_records_update_on_existing_pk
 *                             "append_records_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             inserting source table records (specified by @a
 *                             sourceTableName) into a target table (specified
 *                             by @a tableName) with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::append_records_true "true", any existing
 *                             table record with primary key values that match
 *                             those of a source table record being inserted
 *                             will be replaced by that new record (the new
 *                             data will be "upserted"). If set to @ref
 *                             gpudb::append_records_false "false", any
 *                             existing table record with primary key values
 *                             that match those of a source table record being
 *                             inserted will remain unchanged, while the source
 *                             record will be rejected and an error handled as
 *                             determined by @ref
 *                             gpudb::append_records_ignore_existing_pk
 *                             "ignore_existing_pk".  If the specified table
 *                             does not have a primary key, then this option
 *                             has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::append_records_true
 *                                     "append_records_true": Upsert new
 *                                     records when primary keys match existing
 *                                     records
 *                                 <li>@ref gpudb::append_records_false
 *                                     "append_records_false": Reject new
 *                                     records when primary keys match existing
 *                                     records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::append_records_false
 *                             "append_records_false".
 *                         <li>@ref gpudb::append_records_ignore_existing_pk
 *                             "append_records_ignore_existing_pk": Specifies
 *                             the record collision error-suppression policy
 *                             for inserting source table records (specified by
 *                             @a sourceTableName) into a target table
 *                             (specified by @a tableName) with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             not in upsert mode (upsert mode is disabled when
 *                             @ref gpudb::append_records_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::append_records_false "false").  If set to
 *                             @ref gpudb::append_records_true "true", any
 *                             source table record being inserted that is
 *                             rejected for having primary key values that
 *                             match those of an existing target table record
 *                             will be ignored with no error generated.  If
 *                             @ref gpudb::append_records_false "false", the
 *                             rejection of any source table record for having
 *                             primary key values matching an existing target
 *                             table record will result in an error being
 *                             raised.  If the specified table does not have a
 *                             primary key or if upsert mode is in effect (@ref
 *                             gpudb::append_records_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::append_records_true "true"), then this
 *                             option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::append_records_true
 *                                     "append_records_true": Ignore source
 *                                     table records whose primary key values
 *                                     collide with those of target table
 *                                     records
 *                                 <li>@ref gpudb::append_records_false
 *                                     "append_records_false": Raise an error
 *                                     for any source table record whose
 *                                     primary key values collide with those of
 *                                     a target table record
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::append_records_false
 *                             "append_records_false".
 *                         <li>@ref gpudb::append_records_truncate_strings
 *                             "append_records_truncate_strings": If set to
 *                             @ref gpudb::append_records_true "true", it
 *                             allows inserting longer strings into smaller
 *                             charN string columns by truncating the longer
 *                             strings to fit.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::append_records_true
 *                                     "append_records_true"
 *                                 <li>@ref gpudb::append_records_false
 *                                     "append_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::append_records_false
 *                             "append_records_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::AppendRecordsResponse "Response" object containing the
 *         result of the operation.
 */
AppendRecordsResponse appendRecords( const std::string& tableName,
                                     const std::string& sourceTableName,
                                     const std::map<std::string, std::string>& fieldMap,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Append (or insert) all records from a source table (specified by @a
 * sourceTableName) to a particular target table (specified by @a tableName).
 * The field map (specified by @a fieldMap) holds the user specified map of
 * target table column names with their mapped source column names.
 *
 * @param[in] tableName  The table name for the records to be appended, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] sourceTableName  The source table name to get records from, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a>.  Must
 *                             be an existing table name.
 * @param[in] fieldMap  Contains the mapping of column names from the target
 *                      table (specified by @a tableName) as the keys, and
 *                      corresponding column names or expressions (e.g.,
 *                      'col_name+1') from the source table (specified by @a
 *                      sourceTableName). Must be existing column names in
 *                      source table and target table, and their types must be
 *                      matched. For details on using expressions, see <a
 *                      href="../../../concepts/expressions/"
 *                      target="_top">Expressions</a>.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::append_records_offset
 *                             "append_records_offset": A positive integer
 *                             indicating the number of initial results to skip
 *                             from @a sourceTableName. Default is 0. The
 *                             minimum allowed value is 0. The maximum allowed
 *                             value is MAX_INT. The default value is '0'.
 *                         <li>@ref gpudb::append_records_limit
 *                             "append_records_limit": A positive integer
 *                             indicating the maximum number of results to be
 *                             returned from @a sourceTableName. Or END_OF_SET
 *                             (-9999) to indicate that the max number of
 *                             results should be returned. The default value is
 *                             '-9999'.
 *                         <li>@ref gpudb::append_records_expression
 *                             "append_records_expression": Optional filter
 *                             expression to apply to the @a sourceTableName.
 *                             The default value is ''.
 *                         <li>@ref gpudb::append_records_order_by
 *                             "append_records_order_by": Comma-separated list
 *                             of the columns to be sorted by from source table
 *                             (specified by @a sourceTableName), e.g.,
 *                             'timestamp asc, x desc'. The @ref
 *                             gpudb::append_records_order_by "order_by"
 *                             columns do not have to be present in @a
 *                             fieldMap. The default value is ''.
 *                         <li>@ref gpudb::append_records_update_on_existing_pk
 *                             "append_records_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             inserting source table records (specified by @a
 *                             sourceTableName) into a target table (specified
 *                             by @a tableName) with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::append_records_true "true", any existing
 *                             table record with primary key values that match
 *                             those of a source table record being inserted
 *                             will be replaced by that new record (the new
 *                             data will be "upserted"). If set to @ref
 *                             gpudb::append_records_false "false", any
 *                             existing table record with primary key values
 *                             that match those of a source table record being
 *                             inserted will remain unchanged, while the source
 *                             record will be rejected and an error handled as
 *                             determined by @ref
 *                             gpudb::append_records_ignore_existing_pk
 *                             "ignore_existing_pk".  If the specified table
 *                             does not have a primary key, then this option
 *                             has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::append_records_true
 *                                     "append_records_true": Upsert new
 *                                     records when primary keys match existing
 *                                     records
 *                                 <li>@ref gpudb::append_records_false
 *                                     "append_records_false": Reject new
 *                                     records when primary keys match existing
 *                                     records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::append_records_false
 *                             "append_records_false".
 *                         <li>@ref gpudb::append_records_ignore_existing_pk
 *                             "append_records_ignore_existing_pk": Specifies
 *                             the record collision error-suppression policy
 *                             for inserting source table records (specified by
 *                             @a sourceTableName) into a target table
 *                             (specified by @a tableName) with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             not in upsert mode (upsert mode is disabled when
 *                             @ref gpudb::append_records_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::append_records_false "false").  If set to
 *                             @ref gpudb::append_records_true "true", any
 *                             source table record being inserted that is
 *                             rejected for having primary key values that
 *                             match those of an existing target table record
 *                             will be ignored with no error generated.  If
 *                             @ref gpudb::append_records_false "false", the
 *                             rejection of any source table record for having
 *                             primary key values matching an existing target
 *                             table record will result in an error being
 *                             raised.  If the specified table does not have a
 *                             primary key or if upsert mode is in effect (@ref
 *                             gpudb::append_records_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::append_records_true "true"), then this
 *                             option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::append_records_true
 *                                     "append_records_true": Ignore source
 *                                     table records whose primary key values
 *                                     collide with those of target table
 *                                     records
 *                                 <li>@ref gpudb::append_records_false
 *                                     "append_records_false": Raise an error
 *                                     for any source table record whose
 *                                     primary key values collide with those of
 *                                     a target table record
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::append_records_false
 *                             "append_records_false".
 *                         <li>@ref gpudb::append_records_truncate_strings
 *                             "append_records_truncate_strings": If set to
 *                             @ref gpudb::append_records_true "true", it
 *                             allows inserting longer strings into smaller
 *                             charN string columns by truncating the longer
 *                             strings to fit.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::append_records_true
 *                                     "append_records_true"
 *                                 <li>@ref gpudb::append_records_false
 *                                     "append_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::append_records_false
 *                             "append_records_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::AppendRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::AppendRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
AppendRecordsResponse& appendRecords( const std::string& tableName,
                                      const std::string& sourceTableName,
                                      const std::map<std::string, std::string>& fieldMap,
                                      const std::map<std::string, std::string>& options,
                                      AppendRecordsResponse& response_ ) const;

/**
 * Clears statistics (cardinality, mean value, etc.) for a column in a
 * specified table.
 *
 * @param[in] request_  @ref gpudb::ClearStatisticsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ClearStatisticsResponse "Response" object containing the
 *         result of the operation.
 */
ClearStatisticsResponse clearStatistics( const ClearStatisticsRequest& request_ ) const;

/**
 * Clears statistics (cardinality, mean value, etc.) for a column in a
 * specified table.
 *
 * @param[in] request_  @ref gpudb::ClearStatisticsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ClearStatisticsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ClearStatisticsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ClearStatisticsResponse& clearStatistics( const ClearStatisticsRequest& request_,
                                          ClearStatisticsResponse& response_ ) const;

/**
 * Clears statistics (cardinality, mean value, etc.) for a column in a
 * specified table.
 *
 * @param[in] tableName  Name of a table, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. Must be an
 *                       existing table. The default value is ''.
 * @param[in] columnName  Name of the column in @a tableName for which to clear
 *                        statistics. The column must be from an existing
 *                        table. An empty string clears statistics for all
 *                        columns in the table. The default value is ''.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::ClearStatisticsResponse "Response" object containing the
 *         result of the operation.
 */
ClearStatisticsResponse clearStatistics( const std::string& tableName,
                                         const std::string& columnName,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Clears statistics (cardinality, mean value, etc.) for a column in a
 * specified table.
 *
 * @param[in] tableName  Name of a table, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. Must be an
 *                       existing table. The default value is ''.
 * @param[in] columnName  Name of the column in @a tableName for which to clear
 *                        statistics. The column must be from an existing
 *                        table. An empty string clears statistics for all
 *                        columns in the table. The default value is ''.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::ClearStatisticsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ClearStatisticsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ClearStatisticsResponse& clearStatistics( const std::string& tableName,
                                          const std::string& columnName,
                                          const std::map<std::string, std::string>& options,
                                          ClearStatisticsResponse& response_ ) const;

/**
 * Clears (drops) one or all tables in the database cluster. The operation is
 * synchronous meaning that the table will be cleared before the function
 * returns. The response payload returns the status of the operation along with
 * the name of the table that was cleared.
 *
 * @param[in] request_  @ref gpudb::ClearTableRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ClearTableResponse "Response" object containing the
 *         result of the operation.
 */
ClearTableResponse clearTable( const ClearTableRequest& request_ ) const;

/**
 * Clears (drops) one or all tables in the database cluster. The operation is
 * synchronous meaning that the table will be cleared before the function
 * returns. The response payload returns the status of the operation along with
 * the name of the table that was cleared.
 *
 * @param[in] request_  @ref gpudb::ClearTableRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ClearTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ClearTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ClearTableResponse& clearTable( const ClearTableRequest& request_,
                                ClearTableResponse& response_ ) const;

/**
 * Clears (drops) one or all tables in the database cluster. The operation is
 * synchronous meaning that the table will be cleared before the function
 * returns. The response payload returns the status of the operation along with
 * the name of the table that was cleared.
 *
 * @param[in] tableName  Name of the table to be cleared, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. Must be an
 *                       existing table. Empty string clears all available
 *                       tables, though this behavior is be prevented by
 *                       default via gpudb.conf parameter 'disable_clear_all'.
 *                       The default value is ''.
 * @param[in] authorization  No longer used. User can pass an empty string. The
 *                           default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::clear_table_no_error_if_not_exists
 *                             "clear_table_no_error_if_not_exists": If @ref
 *                             gpudb::clear_table_true "true" and if the table
 *                             specified in @a tableName does not exist no
 *                             error is returned. If @ref
 *                             gpudb::clear_table_false "false" and if the
 *                             table specified in @a tableName does not exist
 *                             then an error is returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::clear_table_true
 *                                     "clear_table_true"
 *                                 <li>@ref gpudb::clear_table_false
 *                                     "clear_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::clear_table_false "clear_table_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ClearTableResponse "Response" object containing the
 *         result of the operation.
 */
ClearTableResponse clearTable( const std::string& tableName,
                               const std::string& authorization,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Clears (drops) one or all tables in the database cluster. The operation is
 * synchronous meaning that the table will be cleared before the function
 * returns. The response payload returns the status of the operation along with
 * the name of the table that was cleared.
 *
 * @param[in] tableName  Name of the table to be cleared, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. Must be an
 *                       existing table. Empty string clears all available
 *                       tables, though this behavior is be prevented by
 *                       default via gpudb.conf parameter 'disable_clear_all'.
 *                       The default value is ''.
 * @param[in] authorization  No longer used. User can pass an empty string. The
 *                           default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::clear_table_no_error_if_not_exists
 *                             "clear_table_no_error_if_not_exists": If @ref
 *                             gpudb::clear_table_true "true" and if the table
 *                             specified in @a tableName does not exist no
 *                             error is returned. If @ref
 *                             gpudb::clear_table_false "false" and if the
 *                             table specified in @a tableName does not exist
 *                             then an error is returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::clear_table_true
 *                                     "clear_table_true"
 *                                 <li>@ref gpudb::clear_table_false
 *                                     "clear_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::clear_table_false "clear_table_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ClearTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ClearTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ClearTableResponse& clearTable( const std::string& tableName,
                                const std::string& authorization,
                                const std::map<std::string, std::string>& options,
                                ClearTableResponse& response_ ) const;

/**
 * Deactivates a table monitor previously created with @ref
 * createTableMonitor(const CreateTableMonitorRequest&) const
 * "createTableMonitor".
 *
 * @param[in] request_  @ref gpudb::ClearTableMonitorRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ClearTableMonitorResponse "Response" object containing
 *         the result of the operation.
 */
ClearTableMonitorResponse clearTableMonitor( const ClearTableMonitorRequest& request_ ) const;

/**
 * Deactivates a table monitor previously created with @ref
 * createTableMonitor(const CreateTableMonitorRequest&) const
 * "createTableMonitor".
 *
 * @param[in] request_  @ref gpudb::ClearTableMonitorRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ClearTableMonitorResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ClearTableMonitorResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ClearTableMonitorResponse& clearTableMonitor( const ClearTableMonitorRequest& request_,
                                              ClearTableMonitorResponse& response_ ) const;

/**
 * Deactivates a table monitor previously created with @ref
 * createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 * "createTableMonitor".
 *
 * @param[in] topicId  The topic ID returned by @ref
 *                     createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 *                     "createTableMonitor".
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::clear_table_monitor_keep_autogenerated_sink
 *                             "clear_table_monitor_keep_autogenerated_sink":
 *                             If @ref gpudb::clear_table_monitor_true "true",
 *                             the auto-generated <a
 *                             href="../../../concepts/data_sinks/"
 *                             target="_top">datasink</a> associated with this
 *                             monitor, if there is one, will be retained for
 *                             further use. If @ref
 *                             gpudb::clear_table_monitor_false "false", then
 *                             the auto-generated sink will be dropped if there
 *                             are no other monitors referencing it.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::clear_table_monitor_true
 *                                     "clear_table_monitor_true"
 *                                 <li>@ref gpudb::clear_table_monitor_false
 *                                     "clear_table_monitor_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::clear_table_monitor_false
 *                             "clear_table_monitor_false".
 *                         <li>@ref
 *                             gpudb::clear_table_monitor_clear_all_references
 *                             "clear_table_monitor_clear_all_references": If
 *                             @ref gpudb::clear_table_monitor_true "true", all
 *                             references that share the same @a topicId will
 *                             be cleared.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::clear_table_monitor_true
 *                                     "clear_table_monitor_true"
 *                                 <li>@ref gpudb::clear_table_monitor_false
 *                                     "clear_table_monitor_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::clear_table_monitor_false
 *                             "clear_table_monitor_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ClearTableMonitorResponse "Response" object containing
 *         the result of the operation.
 */
ClearTableMonitorResponse clearTableMonitor( const std::string& topicId,
                                             const std::map<std::string, std::string>& options ) const;

/**
 * Deactivates a table monitor previously created with @ref
 * createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 * "createTableMonitor".
 *
 * @param[in] topicId  The topic ID returned by @ref
 *                     createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 *                     "createTableMonitor".
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::clear_table_monitor_keep_autogenerated_sink
 *                             "clear_table_monitor_keep_autogenerated_sink":
 *                             If @ref gpudb::clear_table_monitor_true "true",
 *                             the auto-generated <a
 *                             href="../../../concepts/data_sinks/"
 *                             target="_top">datasink</a> associated with this
 *                             monitor, if there is one, will be retained for
 *                             further use. If @ref
 *                             gpudb::clear_table_monitor_false "false", then
 *                             the auto-generated sink will be dropped if there
 *                             are no other monitors referencing it.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::clear_table_monitor_true
 *                                     "clear_table_monitor_true"
 *                                 <li>@ref gpudb::clear_table_monitor_false
 *                                     "clear_table_monitor_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::clear_table_monitor_false
 *                             "clear_table_monitor_false".
 *                         <li>@ref
 *                             gpudb::clear_table_monitor_clear_all_references
 *                             "clear_table_monitor_clear_all_references": If
 *                             @ref gpudb::clear_table_monitor_true "true", all
 *                             references that share the same @a topicId will
 *                             be cleared.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::clear_table_monitor_true
 *                                     "clear_table_monitor_true"
 *                                 <li>@ref gpudb::clear_table_monitor_false
 *                                     "clear_table_monitor_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::clear_table_monitor_false
 *                             "clear_table_monitor_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ClearTableMonitorResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ClearTableMonitorResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ClearTableMonitorResponse& clearTableMonitor( const std::string& topicId,
                                              const std::map<std::string, std::string>& options,
                                              ClearTableMonitorResponse& response_ ) const;

/**
 * Clears or cancels the trigger identified by the specified handle. The output
 * returns the handle of the trigger cleared as well as indicating success or
 * failure of the trigger deactivation.
 *
 * @param[in] request_  @ref gpudb::ClearTriggerRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ClearTriggerResponse "Response" object containing the
 *         result of the operation.
 */
ClearTriggerResponse clearTrigger( const ClearTriggerRequest& request_ ) const;

/**
 * Clears or cancels the trigger identified by the specified handle. The output
 * returns the handle of the trigger cleared as well as indicating success or
 * failure of the trigger deactivation.
 *
 * @param[in] request_  @ref gpudb::ClearTriggerRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ClearTriggerResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ClearTriggerResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ClearTriggerResponse& clearTrigger( const ClearTriggerRequest& request_,
                                    ClearTriggerResponse& response_ ) const;

/**
 * Clears or cancels the trigger identified by the specified handle. The output
 * returns the handle of the trigger cleared as well as indicating success or
 * failure of the trigger deactivation.
 *
 * @param[in] triggerId  ID for the trigger to be deactivated.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::ClearTriggerResponse "Response" object containing the
 *         result of the operation.
 */
ClearTriggerResponse clearTrigger( const std::string& triggerId,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Clears or cancels the trigger identified by the specified handle. The output
 * returns the handle of the trigger cleared as well as indicating success or
 * failure of the trigger deactivation.
 *
 * @param[in] triggerId  ID for the trigger to be deactivated.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::ClearTriggerResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ClearTriggerResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ClearTriggerResponse& clearTrigger( const std::string& triggerId,
                                    const std::map<std::string, std::string>& options,
                                    ClearTriggerResponse& response_ ) const;

/**
 * Collect statistics for a column(s) in a specified table.
 *
 * @param[in] request_  @ref gpudb::CollectStatisticsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CollectStatisticsResponse "Response" object containing
 *         the result of the operation.
 */
CollectStatisticsResponse collectStatistics( const CollectStatisticsRequest& request_ ) const;

/**
 * Collect statistics for a column(s) in a specified table.
 *
 * @param[in] request_  @ref gpudb::CollectStatisticsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CollectStatisticsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CollectStatisticsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CollectStatisticsResponse& collectStatistics( const CollectStatisticsRequest& request_,
                                              CollectStatisticsResponse& response_ ) const;

/**
 * Collect statistics for a column(s) in a specified table.
 *
 * @param[in] tableName  Name of a table, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] columnNames  List of one or more column names in @a tableName for
 *                         which to collect statistics (cardinality, mean
 *                         value, etc.).
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::CollectStatisticsResponse "Response" object containing
 *         the result of the operation.
 */
CollectStatisticsResponse collectStatistics( const std::string& tableName,
                                             const std::vector<std::string>& columnNames,
                                             const std::map<std::string, std::string>& options ) const;

/**
 * Collect statistics for a column(s) in a specified table.
 *
 * @param[in] tableName  Name of a table, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] columnNames  List of one or more column names in @a tableName for
 *                         which to collect statistics (cardinality, mean
 *                         value, etc.).
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::CollectStatisticsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CollectStatisticsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CollectStatisticsResponse& collectStatistics( const std::string& tableName,
                                              const std::vector<std::string>& columnNames,
                                              const std::map<std::string, std::string>& options,
                                              CollectStatisticsResponse& response_ ) const;

/** @private */
CreateContainerRegistryResponse createContainerRegistry( const CreateContainerRegistryRequest& request_ ) const;

/** @private */
CreateContainerRegistryResponse& createContainerRegistry( const CreateContainerRegistryRequest& request_,
                                                          CreateContainerRegistryResponse& response_ ) const;

/** @private */
CreateContainerRegistryResponse createContainerRegistry( const std::string& registryName,
                                                         const std::string& uri,
                                                         const std::string& credential,
                                                         const std::map<std::string, std::string>& options ) const;

/** @private */
CreateContainerRegistryResponse& createContainerRegistry( const std::string& registryName,
                                                          const std::string& uri,
                                                          const std::string& credential,
                                                          const std::map<std::string, std::string>& options,
                                                          CreateContainerRegistryResponse& response_ ) const;

/**
 * Create a new <a href="../../../concepts/credentials/"
 * target="_top">credential</a>.
 *
 * @param[in] request_  @ref gpudb::CreateCredentialRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateCredentialResponse "Response" object containing
 *         the result of the operation.
 */
CreateCredentialResponse createCredential( const CreateCredentialRequest& request_ ) const;

/**
 * Create a new <a href="../../../concepts/credentials/"
 * target="_top">credential</a>.
 *
 * @param[in] request_  @ref gpudb::CreateCredentialRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateCredentialResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateCredentialResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateCredentialResponse& createCredential( const CreateCredentialRequest& request_,
                                            CreateCredentialResponse& response_ ) const;

/**
 * Create a new <a href="../../../concepts/credentials/"
 * target="_top">credential</a>.
 *
 * @param[in] credentialName  Name of the credential to be created. Must
 *                            contain only letters, digits, and underscores,
 *                            and cannot begin with a digit. Must not match an
 *                            existing credential name.
 * @param[in] type  Type of the credential to be created.
 *                  Supported values:
 *                  <ul>
 *                      <li>@ref gpudb::create_credential_aws_access_key
 *                          "create_credential_aws_access_key"
 *                      <li>@ref gpudb::create_credential_aws_iam_role
 *                          "create_credential_aws_iam_role"
 *                      <li>@ref gpudb::create_credential_azure_ad
 *                          "create_credential_azure_ad"
 *                      <li>@ref gpudb::create_credential_azure_oauth
 *                          "create_credential_azure_oauth"
 *                      <li>@ref gpudb::create_credential_azure_sas
 *                          "create_credential_azure_sas"
 *                      <li>@ref gpudb::create_credential_azure_storage_key
 *                          "create_credential_azure_storage_key"
 *                      <li>@ref gpudb::create_credential_confluent
 *                          "create_credential_confluent"
 *                      <li>@ref gpudb::create_credential_docker
 *                          "create_credential_docker"
 *                      <li>@ref
 *                          gpudb::create_credential_gcs_service_account_id
 *                          "create_credential_gcs_service_account_id"
 *                      <li>@ref
 *                          gpudb::create_credential_gcs_service_account_keys
 *                          "create_credential_gcs_service_account_keys"
 *                      <li>@ref gpudb::create_credential_hdfs
 *                          "create_credential_hdfs"
 *                      <li>@ref gpudb::create_credential_jdbc
 *                          "create_credential_jdbc"
 *                      <li>@ref gpudb::create_credential_kafka
 *                          "create_credential_kafka"
 *                      <li>@ref gpudb::create_credential_nvidia_api_key
 *                          "create_credential_nvidia_api_key"
 *                      <li>@ref gpudb::create_credential_openai_api_key
 *                          "create_credential_openai_api_key"
 *                  </ul>
 * @param[in] identity  User of the credential to be created.
 * @param[in] secret  Password of the credential to be created.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::CreateCredentialResponse "Response" object containing
 *         the result of the operation.
 */
CreateCredentialResponse createCredential( const std::string& credentialName,
                                           const std::string& type,
                                           const std::string& identity,
                                           const std::string& secret,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Create a new <a href="../../../concepts/credentials/"
 * target="_top">credential</a>.
 *
 * @param[in] credentialName  Name of the credential to be created. Must
 *                            contain only letters, digits, and underscores,
 *                            and cannot begin with a digit. Must not match an
 *                            existing credential name.
 * @param[in] type  Type of the credential to be created.
 *                  Supported values:
 *                  <ul>
 *                      <li>@ref gpudb::create_credential_aws_access_key
 *                          "create_credential_aws_access_key"
 *                      <li>@ref gpudb::create_credential_aws_iam_role
 *                          "create_credential_aws_iam_role"
 *                      <li>@ref gpudb::create_credential_azure_ad
 *                          "create_credential_azure_ad"
 *                      <li>@ref gpudb::create_credential_azure_oauth
 *                          "create_credential_azure_oauth"
 *                      <li>@ref gpudb::create_credential_azure_sas
 *                          "create_credential_azure_sas"
 *                      <li>@ref gpudb::create_credential_azure_storage_key
 *                          "create_credential_azure_storage_key"
 *                      <li>@ref gpudb::create_credential_confluent
 *                          "create_credential_confluent"
 *                      <li>@ref gpudb::create_credential_docker
 *                          "create_credential_docker"
 *                      <li>@ref
 *                          gpudb::create_credential_gcs_service_account_id
 *                          "create_credential_gcs_service_account_id"
 *                      <li>@ref
 *                          gpudb::create_credential_gcs_service_account_keys
 *                          "create_credential_gcs_service_account_keys"
 *                      <li>@ref gpudb::create_credential_hdfs
 *                          "create_credential_hdfs"
 *                      <li>@ref gpudb::create_credential_jdbc
 *                          "create_credential_jdbc"
 *                      <li>@ref gpudb::create_credential_kafka
 *                          "create_credential_kafka"
 *                      <li>@ref gpudb::create_credential_nvidia_api_key
 *                          "create_credential_nvidia_api_key"
 *                      <li>@ref gpudb::create_credential_openai_api_key
 *                          "create_credential_openai_api_key"
 *                  </ul>
 * @param[in] identity  User of the credential to be created.
 * @param[in] secret  Password of the credential to be created.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateCredentialResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateCredentialResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateCredentialResponse& createCredential( const std::string& credentialName,
                                            const std::string& type,
                                            const std::string& identity,
                                            const std::string& secret,
                                            const std::map<std::string, std::string>& options,
                                            CreateCredentialResponse& response_ ) const;

/**
 * Creates a <a href="../../../concepts/data_sinks/" target="_top">data
 * sink</a>, which contains the destination information for a data sink that is
 * external to the database.
 *
 * @param[in] request_  @ref gpudb::CreateDatasinkRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateDatasinkResponse "Response" object containing the
 *         result of the operation.
 */
CreateDatasinkResponse createDatasink( const CreateDatasinkRequest& request_ ) const;

/**
 * Creates a <a href="../../../concepts/data_sinks/" target="_top">data
 * sink</a>, which contains the destination information for a data sink that is
 * external to the database.
 *
 * @param[in] request_  @ref gpudb::CreateDatasinkRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateDatasinkResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateDatasinkResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateDatasinkResponse& createDatasink( const CreateDatasinkRequest& request_,
                                        CreateDatasinkResponse& response_ ) const;

/**
 * Creates a <a href="../../../concepts/data_sinks/" target="_top">data
 * sink</a>, which contains the destination information for a data sink that is
 * external to the database.
 *
 * @param[in] name  Name of the data sink to be created.
 * @param[in] destination  Destination for the output data in format
 *                         'storage_provider_type://path[:port]'.  Supported
 *                         storage provider types are 'azure', 'gcs', 'hdfs',
 *                         'http', 'https', 'jdbc', 'kafka' and 's3'.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_datasink_connection_timeout
 *                             "create_datasink_connection_timeout": Timeout in
 *                             seconds for connecting to this data sink
 *                         <li>@ref gpudb::create_datasink_wait_timeout
 *                             "create_datasink_wait_timeout": Timeout in
 *                             seconds for waiting for a response from this
 *                             data sink
 *                         <li>@ref gpudb::create_datasink_credential
 *                             "create_datasink_credential": Name of the <a
 *                             href="../../../concepts/credentials/"
 *                             target="_top">credential</a> object to be used
 *                             in this data sink
 *                         <li>@ref gpudb::create_datasink_s3_bucket_name
 *                             "create_datasink_s3_bucket_name": Name of the
 *                             Amazon S3 bucket to use as the data sink
 *                         <li>@ref gpudb::create_datasink_s3_region
 *                             "create_datasink_s3_region": Name of the Amazon
 *                             S3 region where the given bucket is located
 *                         <li>@ref gpudb::create_datasink_s3_verify_ssl
 *                             "create_datasink_s3_verify_ssl": Set to false
 *                             for testing purposes or when necessary to bypass
 *                             TLS errors (e.g. self-signed certificates). This
 *                             value is true by default.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_true
 *                                     "create_datasink_true"
 *                                 <li>@ref gpudb::create_datasink_false
 *                                     "create_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_true
 *                             "create_datasink_true".
 *                         <li>@ref
 *                             gpudb::create_datasink_s3_use_virtual_addressing
 *                             "create_datasink_s3_use_virtual_addressing":
 *                             When true (default), the requests URI should be
 *                             specified in virtual-hosted-style format where
 *                             the bucket name is part of the domain name in
 *                             the URL.   Otherwise set to false to use
 *                             path-style URI for requests.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_true
 *                                     "create_datasink_true"
 *                                 <li>@ref gpudb::create_datasink_false
 *                                     "create_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_true
 *                             "create_datasink_true".
 *                         <li>@ref gpudb::create_datasink_s3_aws_role_arn
 *                             "create_datasink_s3_aws_role_arn": Amazon IAM
 *                             Role ARN which has required S3 permissions that
 *                             can be assumed for the given S3 IAM user
 *                         <li>@ref
 *                             gpudb::create_datasink_s3_encryption_customer_algorithm
 *                             "create_datasink_s3_encryption_customer_algorithm":
 *                             Customer encryption algorithm used encrypting
 *                             data
 *                         <li>@ref
 *                             gpudb::create_datasink_s3_encryption_customer_key
 *                             "create_datasink_s3_encryption_customer_key":
 *                             Customer encryption key to encrypt or decrypt
 *                             data
 *                         <li>@ref gpudb::create_datasink_s3_encryption_type
 *                             "create_datasink_s3_encryption_type": Server
 *                             side encryption type
 *                         <li>@ref gpudb::create_datasink_s3_kms_key_id
 *                             "create_datasink_s3_kms_key_id": KMS key
 *                         <li>@ref gpudb::create_datasink_hdfs_kerberos_keytab
 *                             "create_datasink_hdfs_kerberos_keytab": Kerberos
 *                             keytab file location for the given HDFS user.
 *                             This may be a KIFS file.
 *                         <li>@ref
 *                             gpudb::create_datasink_hdfs_delegation_token
 *                             "create_datasink_hdfs_delegation_token":
 *                             Delegation token for the given HDFS user
 *                         <li>@ref gpudb::create_datasink_hdfs_use_kerberos
 *                             "create_datasink_hdfs_use_kerberos": Use
 *                             kerberos authentication for the given HDFS
 *                             cluster.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_true
 *                                     "create_datasink_true"
 *                                 <li>@ref gpudb::create_datasink_false
 *                                     "create_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_false
 *                             "create_datasink_false".
 *                         <li>@ref
 *                             gpudb::create_datasink_azure_storage_account_name
 *                             "create_datasink_azure_storage_account_name":
 *                             Name of the Azure storage account to use as the
 *                             data sink, this is valid only if tenant_id is
 *                             specified
 *                         <li>@ref gpudb::create_datasink_azure_container_name
 *                             "create_datasink_azure_container_name": Name of
 *                             the Azure storage container to use as the data
 *                             sink
 *                         <li>@ref gpudb::create_datasink_azure_tenant_id
 *                             "create_datasink_azure_tenant_id": Active
 *                             Directory tenant ID (or directory ID)
 *                         <li>@ref gpudb::create_datasink_azure_sas_token
 *                             "create_datasink_azure_sas_token": Shared access
 *                             signature token for Azure storage account to use
 *                             as the data sink
 *                         <li>@ref gpudb::create_datasink_azure_oauth_token
 *                             "create_datasink_azure_oauth_token": Oauth token
 *                             to access given storage container
 *                         <li>@ref gpudb::create_datasink_gcs_bucket_name
 *                             "create_datasink_gcs_bucket_name": Name of the
 *                             Google Cloud Storage bucket to use as the data
 *                             sink
 *                         <li>@ref gpudb::create_datasink_gcs_project_id
 *                             "create_datasink_gcs_project_id": Name of the
 *                             Google Cloud project to use as the data sink
 *                         <li>@ref
 *                             gpudb::create_datasink_gcs_service_account_keys
 *                             "create_datasink_gcs_service_account_keys":
 *                             Google Cloud service account keys to use for
 *                             authenticating the data sink
 *                         <li>@ref gpudb::create_datasink_jdbc_driver_jar_path
 *                             "create_datasink_jdbc_driver_jar_path": JDBC
 *                             driver jar file location
 *                         <li>@ref
 *                             gpudb::create_datasink_jdbc_driver_class_name
 *                             "create_datasink_jdbc_driver_class_name": Name
 *                             of the JDBC driver class
 *                         <li>@ref gpudb::create_datasink_kafka_topic_name
 *                             "create_datasink_kafka_topic_name": Name of the
 *                             Kafka topic to publish to if @a destination is a
 *                             Kafka broker
 *                         <li>@ref gpudb::create_datasink_max_batch_size
 *                             "create_datasink_max_batch_size": Maximum number
 *                             of records per notification message. The default
 *                             value is '1'.
 *                         <li>@ref gpudb::create_datasink_max_message_size
 *                             "create_datasink_max_message_size": Maximum size
 *                             in bytes of each notification message. The
 *                             default value is '1000000'.
 *                         <li>@ref gpudb::create_datasink_json_format
 *                             "create_datasink_json_format": The desired
 *                             format of JSON encoded notifications message.
 *                             If @ref gpudb::create_datasink_nested "nested",
 *                             records are returned as an array. Otherwise,
 *                             only a single record per messages is returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_flat
 *                                     "create_datasink_flat"
 *                                 <li>@ref gpudb::create_datasink_nested
 *                                     "create_datasink_nested"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_flat
 *                             "create_datasink_flat".
 *                         <li>@ref
 *                             gpudb::create_datasink_use_managed_credentials
 *                             "create_datasink_use_managed_credentials": When
 *                             no credentials are supplied, we use anonymous
 *                             access by default.  If this is set, we will use
 *                             cloud provider user settings.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_true
 *                                     "create_datasink_true"
 *                                 <li>@ref gpudb::create_datasink_false
 *                                     "create_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_false
 *                             "create_datasink_false".
 *                         <li>@ref gpudb::create_datasink_use_https
 *                             "create_datasink_use_https": Use https to
 *                             connect to datasink if true, otherwise use http.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_true
 *                                     "create_datasink_true"
 *                                 <li>@ref gpudb::create_datasink_false
 *                                     "create_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_true
 *                             "create_datasink_true".
 *                         <li>@ref gpudb::create_datasink_skip_validation
 *                             "create_datasink_skip_validation": Bypass
 *                             validation of connection to this data sink.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_true
 *                                     "create_datasink_true"
 *                                 <li>@ref gpudb::create_datasink_false
 *                                     "create_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_false
 *                             "create_datasink_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateDatasinkResponse "Response" object containing the
 *         result of the operation.
 */
CreateDatasinkResponse createDatasink( const std::string& name,
                                       const std::string& destination,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Creates a <a href="../../../concepts/data_sinks/" target="_top">data
 * sink</a>, which contains the destination information for a data sink that is
 * external to the database.
 *
 * @param[in] name  Name of the data sink to be created.
 * @param[in] destination  Destination for the output data in format
 *                         'storage_provider_type://path[:port]'.  Supported
 *                         storage provider types are 'azure', 'gcs', 'hdfs',
 *                         'http', 'https', 'jdbc', 'kafka' and 's3'.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_datasink_connection_timeout
 *                             "create_datasink_connection_timeout": Timeout in
 *                             seconds for connecting to this data sink
 *                         <li>@ref gpudb::create_datasink_wait_timeout
 *                             "create_datasink_wait_timeout": Timeout in
 *                             seconds for waiting for a response from this
 *                             data sink
 *                         <li>@ref gpudb::create_datasink_credential
 *                             "create_datasink_credential": Name of the <a
 *                             href="../../../concepts/credentials/"
 *                             target="_top">credential</a> object to be used
 *                             in this data sink
 *                         <li>@ref gpudb::create_datasink_s3_bucket_name
 *                             "create_datasink_s3_bucket_name": Name of the
 *                             Amazon S3 bucket to use as the data sink
 *                         <li>@ref gpudb::create_datasink_s3_region
 *                             "create_datasink_s3_region": Name of the Amazon
 *                             S3 region where the given bucket is located
 *                         <li>@ref gpudb::create_datasink_s3_verify_ssl
 *                             "create_datasink_s3_verify_ssl": Set to false
 *                             for testing purposes or when necessary to bypass
 *                             TLS errors (e.g. self-signed certificates). This
 *                             value is true by default.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_true
 *                                     "create_datasink_true"
 *                                 <li>@ref gpudb::create_datasink_false
 *                                     "create_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_true
 *                             "create_datasink_true".
 *                         <li>@ref
 *                             gpudb::create_datasink_s3_use_virtual_addressing
 *                             "create_datasink_s3_use_virtual_addressing":
 *                             When true (default), the requests URI should be
 *                             specified in virtual-hosted-style format where
 *                             the bucket name is part of the domain name in
 *                             the URL.   Otherwise set to false to use
 *                             path-style URI for requests.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_true
 *                                     "create_datasink_true"
 *                                 <li>@ref gpudb::create_datasink_false
 *                                     "create_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_true
 *                             "create_datasink_true".
 *                         <li>@ref gpudb::create_datasink_s3_aws_role_arn
 *                             "create_datasink_s3_aws_role_arn": Amazon IAM
 *                             Role ARN which has required S3 permissions that
 *                             can be assumed for the given S3 IAM user
 *                         <li>@ref
 *                             gpudb::create_datasink_s3_encryption_customer_algorithm
 *                             "create_datasink_s3_encryption_customer_algorithm":
 *                             Customer encryption algorithm used encrypting
 *                             data
 *                         <li>@ref
 *                             gpudb::create_datasink_s3_encryption_customer_key
 *                             "create_datasink_s3_encryption_customer_key":
 *                             Customer encryption key to encrypt or decrypt
 *                             data
 *                         <li>@ref gpudb::create_datasink_s3_encryption_type
 *                             "create_datasink_s3_encryption_type": Server
 *                             side encryption type
 *                         <li>@ref gpudb::create_datasink_s3_kms_key_id
 *                             "create_datasink_s3_kms_key_id": KMS key
 *                         <li>@ref gpudb::create_datasink_hdfs_kerberos_keytab
 *                             "create_datasink_hdfs_kerberos_keytab": Kerberos
 *                             keytab file location for the given HDFS user.
 *                             This may be a KIFS file.
 *                         <li>@ref
 *                             gpudb::create_datasink_hdfs_delegation_token
 *                             "create_datasink_hdfs_delegation_token":
 *                             Delegation token for the given HDFS user
 *                         <li>@ref gpudb::create_datasink_hdfs_use_kerberos
 *                             "create_datasink_hdfs_use_kerberos": Use
 *                             kerberos authentication for the given HDFS
 *                             cluster.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_true
 *                                     "create_datasink_true"
 *                                 <li>@ref gpudb::create_datasink_false
 *                                     "create_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_false
 *                             "create_datasink_false".
 *                         <li>@ref
 *                             gpudb::create_datasink_azure_storage_account_name
 *                             "create_datasink_azure_storage_account_name":
 *                             Name of the Azure storage account to use as the
 *                             data sink, this is valid only if tenant_id is
 *                             specified
 *                         <li>@ref gpudb::create_datasink_azure_container_name
 *                             "create_datasink_azure_container_name": Name of
 *                             the Azure storage container to use as the data
 *                             sink
 *                         <li>@ref gpudb::create_datasink_azure_tenant_id
 *                             "create_datasink_azure_tenant_id": Active
 *                             Directory tenant ID (or directory ID)
 *                         <li>@ref gpudb::create_datasink_azure_sas_token
 *                             "create_datasink_azure_sas_token": Shared access
 *                             signature token for Azure storage account to use
 *                             as the data sink
 *                         <li>@ref gpudb::create_datasink_azure_oauth_token
 *                             "create_datasink_azure_oauth_token": Oauth token
 *                             to access given storage container
 *                         <li>@ref gpudb::create_datasink_gcs_bucket_name
 *                             "create_datasink_gcs_bucket_name": Name of the
 *                             Google Cloud Storage bucket to use as the data
 *                             sink
 *                         <li>@ref gpudb::create_datasink_gcs_project_id
 *                             "create_datasink_gcs_project_id": Name of the
 *                             Google Cloud project to use as the data sink
 *                         <li>@ref
 *                             gpudb::create_datasink_gcs_service_account_keys
 *                             "create_datasink_gcs_service_account_keys":
 *                             Google Cloud service account keys to use for
 *                             authenticating the data sink
 *                         <li>@ref gpudb::create_datasink_jdbc_driver_jar_path
 *                             "create_datasink_jdbc_driver_jar_path": JDBC
 *                             driver jar file location
 *                         <li>@ref
 *                             gpudb::create_datasink_jdbc_driver_class_name
 *                             "create_datasink_jdbc_driver_class_name": Name
 *                             of the JDBC driver class
 *                         <li>@ref gpudb::create_datasink_kafka_topic_name
 *                             "create_datasink_kafka_topic_name": Name of the
 *                             Kafka topic to publish to if @a destination is a
 *                             Kafka broker
 *                         <li>@ref gpudb::create_datasink_max_batch_size
 *                             "create_datasink_max_batch_size": Maximum number
 *                             of records per notification message. The default
 *                             value is '1'.
 *                         <li>@ref gpudb::create_datasink_max_message_size
 *                             "create_datasink_max_message_size": Maximum size
 *                             in bytes of each notification message. The
 *                             default value is '1000000'.
 *                         <li>@ref gpudb::create_datasink_json_format
 *                             "create_datasink_json_format": The desired
 *                             format of JSON encoded notifications message.
 *                             If @ref gpudb::create_datasink_nested "nested",
 *                             records are returned as an array. Otherwise,
 *                             only a single record per messages is returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_flat
 *                                     "create_datasink_flat"
 *                                 <li>@ref gpudb::create_datasink_nested
 *                                     "create_datasink_nested"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_flat
 *                             "create_datasink_flat".
 *                         <li>@ref
 *                             gpudb::create_datasink_use_managed_credentials
 *                             "create_datasink_use_managed_credentials": When
 *                             no credentials are supplied, we use anonymous
 *                             access by default.  If this is set, we will use
 *                             cloud provider user settings.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_true
 *                                     "create_datasink_true"
 *                                 <li>@ref gpudb::create_datasink_false
 *                                     "create_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_false
 *                             "create_datasink_false".
 *                         <li>@ref gpudb::create_datasink_use_https
 *                             "create_datasink_use_https": Use https to
 *                             connect to datasink if true, otherwise use http.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_true
 *                                     "create_datasink_true"
 *                                 <li>@ref gpudb::create_datasink_false
 *                                     "create_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_true
 *                             "create_datasink_true".
 *                         <li>@ref gpudb::create_datasink_skip_validation
 *                             "create_datasink_skip_validation": Bypass
 *                             validation of connection to this data sink.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasink_true
 *                                     "create_datasink_true"
 *                                 <li>@ref gpudb::create_datasink_false
 *                                     "create_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasink_false
 *                             "create_datasink_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateDatasinkResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateDatasinkResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateDatasinkResponse& createDatasink( const std::string& name,
                                        const std::string& destination,
                                        const std::map<std::string, std::string>& options,
                                        CreateDatasinkResponse& response_ ) const;

/**
 * Creates a <a href="../../../concepts/data_sources/" target="_top">data
 * source</a>, which contains the location and connection information for a
 * data store that is external to the database.
 *
 * @param[in] request_  @ref gpudb::CreateDatasourceRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateDatasourceResponse "Response" object containing
 *         the result of the operation.
 */
CreateDatasourceResponse createDatasource( const CreateDatasourceRequest& request_ ) const;

/**
 * Creates a <a href="../../../concepts/data_sources/" target="_top">data
 * source</a>, which contains the location and connection information for a
 * data store that is external to the database.
 *
 * @param[in] request_  @ref gpudb::CreateDatasourceRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateDatasourceResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateDatasourceResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateDatasourceResponse& createDatasource( const CreateDatasourceRequest& request_,
                                            CreateDatasourceResponse& response_ ) const;

/**
 * Creates a <a href="../../../concepts/data_sources/" target="_top">data
 * source</a>, which contains the location and connection information for a
 * data store that is external to the database.
 *
 * @param[in] name  Name of the data source to be created.
 * @param[in] location  Location of the remote storage in
 *                      'storage_provider_type://[storage_path[:storage_port]]'
 *                      format.  Supported storage provider types are
 *                      'azure','gcs','hdfs','jdbc','kafka', 'confluent' and
 *                      's3'.
 * @param[in] userName  Name of the remote system user; may be an empty string
 * @param[in] password  Password for the remote system user; may be an empty
 *                      string
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_datasource_skip_validation
 *                             "create_datasource_skip_validation": Bypass
 *                             validation of connection to remote source.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_false
 *                             "create_datasource_false".
 *                         <li>@ref gpudb::create_datasource_connection_timeout
 *                             "create_datasource_connection_timeout": Timeout
 *                             in seconds for connecting to this storage
 *                             provider
 *                         <li>@ref gpudb::create_datasource_wait_timeout
 *                             "create_datasource_wait_timeout": Timeout in
 *                             seconds for reading from this storage provider
 *                         <li>@ref gpudb::create_datasource_credential
 *                             "create_datasource_credential": Name of the <a
 *                             href="../../../concepts/credentials"
 *                             target="_top">credential</a> object to be used
 *                             in data source
 *                         <li>@ref gpudb::create_datasource_s3_bucket_name
 *                             "create_datasource_s3_bucket_name": Name of the
 *                             Amazon S3 bucket to use as the data source
 *                         <li>@ref gpudb::create_datasource_s3_region
 *                             "create_datasource_s3_region": Name of the
 *                             Amazon S3 region where the given bucket is
 *                             located
 *                         <li>@ref gpudb::create_datasource_s3_verify_ssl
 *                             "create_datasource_s3_verify_ssl": Set to false
 *                             for testing purposes or when necessary to bypass
 *                             TLS errors (e.g. self-signed certificates). This
 *                             value is true by default.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_true
 *                             "create_datasource_true".
 *                         <li>@ref
 *                             gpudb::create_datasource_s3_use_virtual_addressing
 *                             "create_datasource_s3_use_virtual_addressing":
 *                             Whether to use virtual addressing when
 *                             referencing the Amazon S3 source.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true": The requests
 *                                     URI should be specified in
 *                                     virtual-hosted-style format where the
 *                                     bucket name is part of the domain name
 *                                     in the URL.
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false": Use
 *                                     path-style URI for requests.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_true
 *                             "create_datasource_true".
 *                         <li>@ref gpudb::create_datasource_s3_aws_role_arn
 *                             "create_datasource_s3_aws_role_arn": Amazon IAM
 *                             Role ARN which has required S3 permissions that
 *                             can be assumed for the given S3 IAM user
 *                         <li>@ref
 *                             gpudb::create_datasource_s3_encryption_customer_algorithm
 *                             "create_datasource_s3_encryption_customer_algorithm":
 *                             Customer encryption algorithm used encrypting
 *                             data
 *                         <li>@ref
 *                             gpudb::create_datasource_s3_encryption_customer_key
 *                             "create_datasource_s3_encryption_customer_key":
 *                             Customer encryption key to encrypt or decrypt
 *                             data
 *                         <li>@ref
 *                             gpudb::create_datasource_hdfs_kerberos_keytab
 *                             "create_datasource_hdfs_kerberos_keytab":
 *                             Kerberos keytab file location for the given HDFS
 *                             user.  This may be a KIFS file.
 *                         <li>@ref
 *                             gpudb::create_datasource_hdfs_delegation_token
 *                             "create_datasource_hdfs_delegation_token":
 *                             Delegation token for the given HDFS user
 *                         <li>@ref gpudb::create_datasource_hdfs_use_kerberos
 *                             "create_datasource_hdfs_use_kerberos": Use
 *                             kerberos authentication for the given HDFS
 *                             cluster.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_false
 *                             "create_datasource_false".
 *                         <li>@ref
 *                             gpudb::create_datasource_azure_storage_account_name
 *                             "create_datasource_azure_storage_account_name":
 *                             Name of the Azure storage account to use as the
 *                             data source, this is valid only if tenant_id is
 *                             specified
 *                         <li>@ref
 *                             gpudb::create_datasource_azure_container_name
 *                             "create_datasource_azure_container_name": Name
 *                             of the Azure storage container to use as the
 *                             data source
 *                         <li>@ref gpudb::create_datasource_azure_tenant_id
 *                             "create_datasource_azure_tenant_id": Active
 *                             Directory tenant ID (or directory ID)
 *                         <li>@ref gpudb::create_datasource_azure_sas_token
 *                             "create_datasource_azure_sas_token": Shared
 *                             access signature token for Azure storage account
 *                             to use as the data source
 *                         <li>@ref gpudb::create_datasource_azure_oauth_token
 *                             "create_datasource_azure_oauth_token": OAuth
 *                             token to access given storage container
 *                         <li>@ref gpudb::create_datasource_gcs_bucket_name
 *                             "create_datasource_gcs_bucket_name": Name of the
 *                             Google Cloud Storage bucket to use as the data
 *                             source
 *                         <li>@ref gpudb::create_datasource_gcs_project_id
 *                             "create_datasource_gcs_project_id": Name of the
 *                             Google Cloud project to use as the data source
 *                         <li>@ref
 *                             gpudb::create_datasource_gcs_service_account_keys
 *                             "create_datasource_gcs_service_account_keys":
 *                             Google Cloud service account keys to use for
 *                             authenticating the data source
 *                         <li>@ref gpudb::create_datasource_is_stream
 *                             "create_datasource_is_stream": To load from
 *                             Azure/GCS/S3 as a stream continuously.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_false
 *                             "create_datasource_false".
 *                         <li>@ref gpudb::create_datasource_kafka_topic_name
 *                             "create_datasource_kafka_topic_name": Name of
 *                             the Kafka topic to use as the data source
 *                         <li>@ref
 *                             gpudb::create_datasource_jdbc_driver_jar_path
 *                             "create_datasource_jdbc_driver_jar_path": JDBC
 *                             driver jar file location.  This may be a KIFS
 *                             file.
 *                         <li>@ref
 *                             gpudb::create_datasource_jdbc_driver_class_name
 *                             "create_datasource_jdbc_driver_class_name": Name
 *                             of the JDBC driver class
 *                         <li>@ref gpudb::create_datasource_anonymous
 *                             "create_datasource_anonymous": Use anonymous
 *                             connection to storage provider--DEPRECATED: this
 *                             is now the default.  Specify
 *                             use_managed_credentials for non-anonymous
 *                             connection.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_true
 *                             "create_datasource_true".
 *                         <li>@ref
 *                             gpudb::create_datasource_use_managed_credentials
 *                             "create_datasource_use_managed_credentials":
 *                             When no credentials are supplied, we use
 *                             anonymous access by default.  If this is set, we
 *                             will use cloud provider user settings.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_false
 *                             "create_datasource_false".
 *                         <li>@ref gpudb::create_datasource_use_https
 *                             "create_datasource_use_https": Use https to
 *                             connect to datasource if true, otherwise use
 *                             http.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_true
 *                             "create_datasource_true".
 *                         <li>@ref
 *                             gpudb::create_datasource_schema_registry_location
 *                             "create_datasource_schema_registry_location":
 *                             Location of Confluent Schema Registry in
 *                             '[storage_path[:storage_port]]' format.
 *                         <li>@ref
 *                             gpudb::create_datasource_schema_registry_credential
 *                             "create_datasource_schema_registry_credential":
 *                             Confluent Schema Registry <a
 *                             href="../../../concepts/credentials"
 *                             target="_top">credential</a> object name.
 *                         <li>@ref
 *                             gpudb::create_datasource_schema_registry_port
 *                             "create_datasource_schema_registry_port":
 *                             Confluent Schema Registry port (optional).
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateDatasourceResponse "Response" object containing
 *         the result of the operation.
 */
CreateDatasourceResponse createDatasource( const std::string& name,
                                           const std::string& location,
                                           const std::string& userName,
                                           const std::string& password,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Creates a <a href="../../../concepts/data_sources/" target="_top">data
 * source</a>, which contains the location and connection information for a
 * data store that is external to the database.
 *
 * @param[in] name  Name of the data source to be created.
 * @param[in] location  Location of the remote storage in
 *                      'storage_provider_type://[storage_path[:storage_port]]'
 *                      format.  Supported storage provider types are
 *                      'azure','gcs','hdfs','jdbc','kafka', 'confluent' and
 *                      's3'.
 * @param[in] userName  Name of the remote system user; may be an empty string
 * @param[in] password  Password for the remote system user; may be an empty
 *                      string
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_datasource_skip_validation
 *                             "create_datasource_skip_validation": Bypass
 *                             validation of connection to remote source.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_false
 *                             "create_datasource_false".
 *                         <li>@ref gpudb::create_datasource_connection_timeout
 *                             "create_datasource_connection_timeout": Timeout
 *                             in seconds for connecting to this storage
 *                             provider
 *                         <li>@ref gpudb::create_datasource_wait_timeout
 *                             "create_datasource_wait_timeout": Timeout in
 *                             seconds for reading from this storage provider
 *                         <li>@ref gpudb::create_datasource_credential
 *                             "create_datasource_credential": Name of the <a
 *                             href="../../../concepts/credentials"
 *                             target="_top">credential</a> object to be used
 *                             in data source
 *                         <li>@ref gpudb::create_datasource_s3_bucket_name
 *                             "create_datasource_s3_bucket_name": Name of the
 *                             Amazon S3 bucket to use as the data source
 *                         <li>@ref gpudb::create_datasource_s3_region
 *                             "create_datasource_s3_region": Name of the
 *                             Amazon S3 region where the given bucket is
 *                             located
 *                         <li>@ref gpudb::create_datasource_s3_verify_ssl
 *                             "create_datasource_s3_verify_ssl": Set to false
 *                             for testing purposes or when necessary to bypass
 *                             TLS errors (e.g. self-signed certificates). This
 *                             value is true by default.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_true
 *                             "create_datasource_true".
 *                         <li>@ref
 *                             gpudb::create_datasource_s3_use_virtual_addressing
 *                             "create_datasource_s3_use_virtual_addressing":
 *                             Whether to use virtual addressing when
 *                             referencing the Amazon S3 source.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true": The requests
 *                                     URI should be specified in
 *                                     virtual-hosted-style format where the
 *                                     bucket name is part of the domain name
 *                                     in the URL.
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false": Use
 *                                     path-style URI for requests.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_true
 *                             "create_datasource_true".
 *                         <li>@ref gpudb::create_datasource_s3_aws_role_arn
 *                             "create_datasource_s3_aws_role_arn": Amazon IAM
 *                             Role ARN which has required S3 permissions that
 *                             can be assumed for the given S3 IAM user
 *                         <li>@ref
 *                             gpudb::create_datasource_s3_encryption_customer_algorithm
 *                             "create_datasource_s3_encryption_customer_algorithm":
 *                             Customer encryption algorithm used encrypting
 *                             data
 *                         <li>@ref
 *                             gpudb::create_datasource_s3_encryption_customer_key
 *                             "create_datasource_s3_encryption_customer_key":
 *                             Customer encryption key to encrypt or decrypt
 *                             data
 *                         <li>@ref
 *                             gpudb::create_datasource_hdfs_kerberos_keytab
 *                             "create_datasource_hdfs_kerberos_keytab":
 *                             Kerberos keytab file location for the given HDFS
 *                             user.  This may be a KIFS file.
 *                         <li>@ref
 *                             gpudb::create_datasource_hdfs_delegation_token
 *                             "create_datasource_hdfs_delegation_token":
 *                             Delegation token for the given HDFS user
 *                         <li>@ref gpudb::create_datasource_hdfs_use_kerberos
 *                             "create_datasource_hdfs_use_kerberos": Use
 *                             kerberos authentication for the given HDFS
 *                             cluster.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_false
 *                             "create_datasource_false".
 *                         <li>@ref
 *                             gpudb::create_datasource_azure_storage_account_name
 *                             "create_datasource_azure_storage_account_name":
 *                             Name of the Azure storage account to use as the
 *                             data source, this is valid only if tenant_id is
 *                             specified
 *                         <li>@ref
 *                             gpudb::create_datasource_azure_container_name
 *                             "create_datasource_azure_container_name": Name
 *                             of the Azure storage container to use as the
 *                             data source
 *                         <li>@ref gpudb::create_datasource_azure_tenant_id
 *                             "create_datasource_azure_tenant_id": Active
 *                             Directory tenant ID (or directory ID)
 *                         <li>@ref gpudb::create_datasource_azure_sas_token
 *                             "create_datasource_azure_sas_token": Shared
 *                             access signature token for Azure storage account
 *                             to use as the data source
 *                         <li>@ref gpudb::create_datasource_azure_oauth_token
 *                             "create_datasource_azure_oauth_token": OAuth
 *                             token to access given storage container
 *                         <li>@ref gpudb::create_datasource_gcs_bucket_name
 *                             "create_datasource_gcs_bucket_name": Name of the
 *                             Google Cloud Storage bucket to use as the data
 *                             source
 *                         <li>@ref gpudb::create_datasource_gcs_project_id
 *                             "create_datasource_gcs_project_id": Name of the
 *                             Google Cloud project to use as the data source
 *                         <li>@ref
 *                             gpudb::create_datasource_gcs_service_account_keys
 *                             "create_datasource_gcs_service_account_keys":
 *                             Google Cloud service account keys to use for
 *                             authenticating the data source
 *                         <li>@ref gpudb::create_datasource_is_stream
 *                             "create_datasource_is_stream": To load from
 *                             Azure/GCS/S3 as a stream continuously.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_false
 *                             "create_datasource_false".
 *                         <li>@ref gpudb::create_datasource_kafka_topic_name
 *                             "create_datasource_kafka_topic_name": Name of
 *                             the Kafka topic to use as the data source
 *                         <li>@ref
 *                             gpudb::create_datasource_jdbc_driver_jar_path
 *                             "create_datasource_jdbc_driver_jar_path": JDBC
 *                             driver jar file location.  This may be a KIFS
 *                             file.
 *                         <li>@ref
 *                             gpudb::create_datasource_jdbc_driver_class_name
 *                             "create_datasource_jdbc_driver_class_name": Name
 *                             of the JDBC driver class
 *                         <li>@ref gpudb::create_datasource_anonymous
 *                             "create_datasource_anonymous": Use anonymous
 *                             connection to storage provider--DEPRECATED: this
 *                             is now the default.  Specify
 *                             use_managed_credentials for non-anonymous
 *                             connection.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_true
 *                             "create_datasource_true".
 *                         <li>@ref
 *                             gpudb::create_datasource_use_managed_credentials
 *                             "create_datasource_use_managed_credentials":
 *                             When no credentials are supplied, we use
 *                             anonymous access by default.  If this is set, we
 *                             will use cloud provider user settings.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_false
 *                             "create_datasource_false".
 *                         <li>@ref gpudb::create_datasource_use_https
 *                             "create_datasource_use_https": Use https to
 *                             connect to datasource if true, otherwise use
 *                             http.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_datasource_true
 *                                     "create_datasource_true"
 *                                 <li>@ref gpudb::create_datasource_false
 *                                     "create_datasource_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_datasource_true
 *                             "create_datasource_true".
 *                         <li>@ref
 *                             gpudb::create_datasource_schema_registry_location
 *                             "create_datasource_schema_registry_location":
 *                             Location of Confluent Schema Registry in
 *                             '[storage_path[:storage_port]]' format.
 *                         <li>@ref
 *                             gpudb::create_datasource_schema_registry_credential
 *                             "create_datasource_schema_registry_credential":
 *                             Confluent Schema Registry <a
 *                             href="../../../concepts/credentials"
 *                             target="_top">credential</a> object name.
 *                         <li>@ref
 *                             gpudb::create_datasource_schema_registry_port
 *                             "create_datasource_schema_registry_port":
 *                             Confluent Schema Registry port (optional).
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateDatasourceResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateDatasourceResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateDatasourceResponse& createDatasource( const std::string& name,
                                            const std::string& location,
                                            const std::string& userName,
                                            const std::string& password,
                                            const std::map<std::string, std::string>& options,
                                            CreateDatasourceResponse& response_ ) const;

/** @private */
CreateDeltaTableResponse createDeltaTable( const CreateDeltaTableRequest& request_ ) const;

/** @private */
CreateDeltaTableResponse& createDeltaTable( const CreateDeltaTableRequest& request_,
                                            CreateDeltaTableResponse& response_ ) const;

/** @private */
CreateDeltaTableResponse createDeltaTable( const std::string& deltaTableName,
                                           const std::string& tableName,
                                           const std::map<std::string, std::string>& options ) const;

/** @private */
CreateDeltaTableResponse& createDeltaTable( const std::string& deltaTableName,
                                            const std::string& tableName,
                                            const std::map<std::string, std::string>& options,
                                            CreateDeltaTableResponse& response_ ) const;

/**
 * Creates a new directory in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. The new directory serves as a location in which the
 * user can upload files using @ref
 * uploadFiles(const UploadFilesRequest&) const "uploadFiles".
 *
 * @param[in] request_  @ref gpudb::CreateDirectoryRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateDirectoryResponse "Response" object containing the
 *         result of the operation.
 */
CreateDirectoryResponse createDirectory( const CreateDirectoryRequest& request_ ) const;

/**
 * Creates a new directory in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. The new directory serves as a location in which the
 * user can upload files using @ref
 * uploadFiles(const UploadFilesRequest&) const "uploadFiles".
 *
 * @param[in] request_  @ref gpudb::CreateDirectoryRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateDirectoryResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateDirectoryResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateDirectoryResponse& createDirectory( const CreateDirectoryRequest& request_,
                                          CreateDirectoryResponse& response_ ) const;

/**
 * Creates a new directory in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. The new directory serves as a location in which the
 * user can upload files using @ref
 * uploadFiles(const std::vector<std::string>&, const std::vector<std::vector<uint8_t> >&, const std::map<std::string, std::string>&) const
 * "uploadFiles".
 *
 * @param[in] directoryName  Name of the directory in KiFS to be created.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::create_directory_create_home_directory
 *                             "create_directory_create_home_directory": When
 *                             set, a home directory is created for the user
 *                             name provided in the value. The @a directoryName
 *                             must be an empty string in this case. The user
 *                             must exist.
 *                         <li>@ref gpudb::create_directory_data_limit
 *                             "create_directory_data_limit": The maximum
 *                             capacity, in bytes, to apply to the created
 *                             directory. Set to -1 to indicate no upper limit.
 *                             If empty, the system default limit is applied.
 *                         <li>@ref gpudb::create_directory_no_error_if_exists
 *                             "create_directory_no_error_if_exists": If @ref
 *                             gpudb::create_directory_true "true", does not
 *                             return an error if the directory already exists.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_directory_true
 *                                     "create_directory_true"
 *                                 <li>@ref gpudb::create_directory_false
 *                                     "create_directory_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_directory_false
 *                             "create_directory_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateDirectoryResponse "Response" object containing the
 *         result of the operation.
 */
CreateDirectoryResponse createDirectory( const std::string& directoryName,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new directory in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. The new directory serves as a location in which the
 * user can upload files using @ref
 * uploadFiles(const std::vector<std::string>&, const std::vector<std::vector<uint8_t> >&, const std::map<std::string, std::string>&) const
 * "uploadFiles".
 *
 * @param[in] directoryName  Name of the directory in KiFS to be created.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::create_directory_create_home_directory
 *                             "create_directory_create_home_directory": When
 *                             set, a home directory is created for the user
 *                             name provided in the value. The @a directoryName
 *                             must be an empty string in this case. The user
 *                             must exist.
 *                         <li>@ref gpudb::create_directory_data_limit
 *                             "create_directory_data_limit": The maximum
 *                             capacity, in bytes, to apply to the created
 *                             directory. Set to -1 to indicate no upper limit.
 *                             If empty, the system default limit is applied.
 *                         <li>@ref gpudb::create_directory_no_error_if_exists
 *                             "create_directory_no_error_if_exists": If @ref
 *                             gpudb::create_directory_true "true", does not
 *                             return an error if the directory already exists.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_directory_true
 *                                     "create_directory_true"
 *                                 <li>@ref gpudb::create_directory_false
 *                                     "create_directory_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_directory_false
 *                             "create_directory_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateDirectoryResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateDirectoryResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateDirectoryResponse& createDirectory( const std::string& directoryName,
                                          const std::map<std::string, std::string>& options,
                                          CreateDirectoryResponse& response_ ) const;

/**
 * Creates a new environment which can be used by <a
 * href="../../../concepts/udf/" target="_top">user-defined functions</a>
 * (UDF).
 *
 * @param[in] request_  @ref gpudb::CreateEnvironmentRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateEnvironmentResponse "Response" object containing
 *         the result of the operation.
 */
CreateEnvironmentResponse createEnvironment( const CreateEnvironmentRequest& request_ ) const;

/**
 * Creates a new environment which can be used by <a
 * href="../../../concepts/udf/" target="_top">user-defined functions</a>
 * (UDF).
 *
 * @param[in] request_  @ref gpudb::CreateEnvironmentRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateEnvironmentResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateEnvironmentResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateEnvironmentResponse& createEnvironment( const CreateEnvironmentRequest& request_,
                                              CreateEnvironmentResponse& response_ ) const;

/**
 * Creates a new environment which can be used by <a
 * href="../../../concepts/udf/" target="_top">user-defined functions</a>
 * (UDF).
 *
 * @param[in] environmentName  Name of the environment to be created.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::CreateEnvironmentResponse "Response" object containing
 *         the result of the operation.
 */
CreateEnvironmentResponse createEnvironment( const std::string& environmentName,
                                             const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new environment which can be used by <a
 * href="../../../concepts/udf/" target="_top">user-defined functions</a>
 * (UDF).
 *
 * @param[in] environmentName  Name of the environment to be created.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateEnvironmentResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateEnvironmentResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateEnvironmentResponse& createEnvironment( const std::string& environmentName,
                                              const std::map<std::string, std::string>& options,
                                              CreateEnvironmentResponse& response_ ) const;

/**
 * Creates a new graph network using given nodes, edges, weights, and
 * restrictions.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph/"
 * target="_top">graph examples</a> before using this endpoint.
 *
 * @param[in] request_  @ref gpudb::CreateGraphRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateGraphResponse "Response" object containing the
 *         result of the operation.
 */
CreateGraphResponse createGraph( const CreateGraphRequest& request_ ) const;

/**
 * Creates a new graph network using given nodes, edges, weights, and
 * restrictions.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph/"
 * target="_top">graph examples</a> before using this endpoint.
 *
 * @param[in] request_  @ref gpudb::CreateGraphRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateGraphResponse& createGraph( const CreateGraphRequest& request_,
                                  CreateGraphResponse& response_ ) const;

/**
 * Creates a new graph network using given nodes, edges, weights, and
 * restrictions.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph/"
 * target="_top">graph examples</a> before using this endpoint.
 *
 * @param[in] graphName  Name of the graph resource to generate.
 * @param[in] directedGraph  If set to @ref gpudb::create_graph_true "true",
 *                           the graph will be directed. If set to @ref
 *                           gpudb::create_graph_false "false", the graph will
 *                           not be directed. Consult <a
 *                           href="../../../graph_solver/network_graph_solver/#directed-graphs"
 *                           target="_top">Directed Graphs</a> for more
 *                           details.
 *                           Supported values:
 *                           <ul>
 *                               <li>true
 *                               <li>false
 *                           </ul>
 *                           The default value is true.
 * @param[in] nodes  Nodes represent fundamental topological units of a graph.
 *                   Nodes must be specified using <a
 *                   href="../../../graph_solver/network_graph_solver/#identifiers"
 *                   target="_top">identifiers</a>; identifiers are grouped as
 *                   <a
 *                   href="../../../graph_solver/network_graph_solver/#id-combos"
 *                   target="_top">combinations</a>. Identifiers can be used
 *                   with existing column names, e.g., 'table.column AS
 *                   NODE_ID', expressions, e.g., 'ST_MAKEPOINT(column1,
 *                   column2) AS NODE_WKTPOINT', or constant values, e.g., '{9,
 *                   10, 11} AS NODE_ID'. If using constant values in an
 *                   identifier combination, the number of values specified
 *                   must match across the combination.
 * @param[in] edges  Edges represent the required fundamental topological unit
 *                   of a graph that typically connect nodes. Edges must be
 *                   specified using <a
 *                   href="../../../graph_solver/network_graph_solver/#identifiers"
 *                   target="_top">identifiers</a>; identifiers are grouped as
 *                   <a
 *                   href="../../../graph_solver/network_graph_solver/#id-combos"
 *                   target="_top">combinations</a>. Identifiers can be used
 *                   with existing column names, e.g., 'table.column AS
 *                   EDGE_ID', expressions, e.g., 'SUBSTR(column, 1, 6) AS
 *                   EDGE_NODE1_NAME', or constant values, e.g., "{'family',
 *                   'coworker'} AS EDGE_LABEL". If using constant values in an
 *                   identifier combination, the number of values specified
 *                   must match across the combination.
 * @param[in] weights  Weights represent a method of informing the graph solver
 *                     of the cost of including a given edge in a solution.
 *                     Weights must be specified using <a
 *                     href="../../../graph_solver/network_graph_solver/#identifiers"
 *                     target="_top">identifiers</a>; identifiers are grouped
 *                     as <a
 *                     href="../../../graph_solver/network_graph_solver/#id-combos"
 *                     target="_top">combinations</a>. Identifiers can be used
 *                     with existing column names, e.g., 'table.column AS
 *                     WEIGHTS_EDGE_ID', expressions, e.g., 'ST_LENGTH(wkt) AS
 *                     WEIGHTS_VALUESPECIFIED', or constant values, e.g., '{4,
 *                     15} AS WEIGHTS_VALUESPECIFIED'. If using constant values
 *                     in an identifier combination, the number of values
 *                     specified must match across the combination.
 * @param[in] restrictions  Restrictions represent a method of informing the
 *                          graph solver which edges and/or nodes should be
 *                          ignored for the solution. Restrictions must be
 *                          specified using <a
 *                          href="../../../graph_solver/network_graph_solver/#identifiers"
 *                          target="_top">identifiers</a>; identifiers are
 *                          grouped as <a
 *                          href="../../../graph_solver/network_graph_solver/#id-combos"
 *                          target="_top">combinations</a>. Identifiers can be
 *                          used with existing column names, e.g.,
 *                          'table.column AS RESTRICTIONS_EDGE_ID',
 *                          expressions, e.g., 'column/2 AS
 *                          RESTRICTIONS_VALUECOMPARED', or constant values,
 *                          e.g., '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'.
 *                          If using constant values in an identifier
 *                          combination, the number of values specified must
 *                          match across the combination.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_graph_merge_tolerance
 *                             "create_graph_merge_tolerance": If node
 *                             geospatial positions are input (e.g., WKTPOINT,
 *                             X, Y), determines the minimum separation allowed
 *                             between unique nodes. If nodes are within the
 *                             tolerance of each other, they will be merged as
 *                             a single node. The default value is '1.0E-5'.
 *                         <li>@ref gpudb::create_graph_recreate
 *                             "create_graph_recreate": If set to @ref
 *                             gpudb::create_graph_true "true" and the graph
 *                             (using @a graphName) already exists, the graph
 *                             is deleted and recreated.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_false "create_graph_false".
 *                         <li>@ref gpudb::create_graph_save_persist
 *                             "create_graph_save_persist": If set to @ref
 *                             gpudb::create_graph_true "true", the graph will
 *                             be saved in the persist directory (see the <a
 *                             href="../../../config/#config-main-persistence"
 *                             target="_top">config reference</a> for more
 *                             information). If set to @ref
 *                             gpudb::create_graph_false "false", the graph
 *                             will be removed when the graph server is
 *                             shutdown.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_false "create_graph_false".
 *                         <li>@ref gpudb::create_graph_add_table_monitor
 *                             "create_graph_add_table_monitor": Adds a table
 *                             monitor to every table used in the creation of
 *                             the graph; this table monitor will trigger the
 *                             graph to update dynamically upon inserts to the
 *                             source table(s). Note that upon database
 *                             restart, if @ref
 *                             gpudb::create_graph_save_persist "save_persist"
 *                             is also set to @ref gpudb::create_graph_true
 *                             "true", the graph will be fully reconstructed
 *                             and the table monitors will be reattached. For
 *                             more details on table monitors, see @ref
 *                             createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createTableMonitor".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_false "create_graph_false".
 *                         <li>@ref gpudb::create_graph_graph_table
 *                             "create_graph_graph_table": If specified, the
 *                             created graph is also created as a table with
 *                             the given name, in [schema_name.]table_name
 *                             format, using standard <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>.  The
 *                             table will have the following identifier
 *                             columns: 'EDGE_ID', 'EDGE_NODE1_ID',
 *                             'EDGE_NODE2_ID'. If left blank, no table is
 *                             created. The default value is ''.
 *                         <li>@ref gpudb::create_graph_add_turns
 *                             "create_graph_add_turns": Adds dummy 'pillowed'
 *                             edges around intersection nodes where there are
 *                             more than three edges so that additional weight
 *                             penalties can be imposed by the solve endpoints.
 *                             (increases the total number of edges).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_false "create_graph_false".
 *                         <li>@ref gpudb::create_graph_is_partitioned
 *                             "create_graph_is_partitioned":
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_false "create_graph_false".
 *                         <li>@ref gpudb::create_graph_server_id
 *                             "create_graph_server_id": Indicates which graph
 *                             server(s) to send the request to. Default is to
 *                             send to the server with the most available
 *                             memory.
 *                         <li>@ref gpudb::create_graph_use_rtree
 *                             "create_graph_use_rtree": Use an range tree
 *                             structure to accelerate and improve the accuracy
 *                             of snapping, especially to edges.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_true "create_graph_true".
 *                         <li>@ref gpudb::create_graph_label_delimiter
 *                             "create_graph_label_delimiter": If provided the
 *                             label string will be split according to this
 *                             delimiter and each sub-string will be applied as
 *                             a separate label onto the specified edge. The
 *                             default value is ''.
 *                         <li>@ref gpudb::create_graph_allow_multiple_edges
 *                             "create_graph_allow_multiple_edges": Multigraph
 *                             choice; allowing multiple edges with the same
 *                             node pairs if set to true, otherwise, new edges
 *                             with existing same node pairs will not be
 *                             inserted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_true "create_graph_true".
 *                         <li>@ref gpudb::create_graph_embedding_table
 *                             "create_graph_embedding_table": If table exists
 *                             (should be generated by the match/graph
 *                             match_embedding solver), the vector embeddings
 *                             for the newly inserted nodes will be appended
 *                             into this table. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateGraphResponse "Response" object containing the
 *         result of the operation.
 */
CreateGraphResponse createGraph( const std::string& graphName,
                                 const bool directedGraph,
                                 const std::vector<std::string>& nodes,
                                 const std::vector<std::string>& edges,
                                 const std::vector<std::string>& weights,
                                 const std::vector<std::string>& restrictions,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new graph network using given nodes, edges, weights, and
 * restrictions.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph/"
 * target="_top">graph examples</a> before using this endpoint.
 *
 * @param[in] graphName  Name of the graph resource to generate.
 * @param[in] directedGraph  If set to @ref gpudb::create_graph_true "true",
 *                           the graph will be directed. If set to @ref
 *                           gpudb::create_graph_false "false", the graph will
 *                           not be directed. Consult <a
 *                           href="../../../graph_solver/network_graph_solver/#directed-graphs"
 *                           target="_top">Directed Graphs</a> for more
 *                           details.
 *                           Supported values:
 *                           <ul>
 *                               <li>true
 *                               <li>false
 *                           </ul>
 *                           The default value is true.
 * @param[in] nodes  Nodes represent fundamental topological units of a graph.
 *                   Nodes must be specified using <a
 *                   href="../../../graph_solver/network_graph_solver/#identifiers"
 *                   target="_top">identifiers</a>; identifiers are grouped as
 *                   <a
 *                   href="../../../graph_solver/network_graph_solver/#id-combos"
 *                   target="_top">combinations</a>. Identifiers can be used
 *                   with existing column names, e.g., 'table.column AS
 *                   NODE_ID', expressions, e.g., 'ST_MAKEPOINT(column1,
 *                   column2) AS NODE_WKTPOINT', or constant values, e.g., '{9,
 *                   10, 11} AS NODE_ID'. If using constant values in an
 *                   identifier combination, the number of values specified
 *                   must match across the combination.
 * @param[in] edges  Edges represent the required fundamental topological unit
 *                   of a graph that typically connect nodes. Edges must be
 *                   specified using <a
 *                   href="../../../graph_solver/network_graph_solver/#identifiers"
 *                   target="_top">identifiers</a>; identifiers are grouped as
 *                   <a
 *                   href="../../../graph_solver/network_graph_solver/#id-combos"
 *                   target="_top">combinations</a>. Identifiers can be used
 *                   with existing column names, e.g., 'table.column AS
 *                   EDGE_ID', expressions, e.g., 'SUBSTR(column, 1, 6) AS
 *                   EDGE_NODE1_NAME', or constant values, e.g., "{'family',
 *                   'coworker'} AS EDGE_LABEL". If using constant values in an
 *                   identifier combination, the number of values specified
 *                   must match across the combination.
 * @param[in] weights  Weights represent a method of informing the graph solver
 *                     of the cost of including a given edge in a solution.
 *                     Weights must be specified using <a
 *                     href="../../../graph_solver/network_graph_solver/#identifiers"
 *                     target="_top">identifiers</a>; identifiers are grouped
 *                     as <a
 *                     href="../../../graph_solver/network_graph_solver/#id-combos"
 *                     target="_top">combinations</a>. Identifiers can be used
 *                     with existing column names, e.g., 'table.column AS
 *                     WEIGHTS_EDGE_ID', expressions, e.g., 'ST_LENGTH(wkt) AS
 *                     WEIGHTS_VALUESPECIFIED', or constant values, e.g., '{4,
 *                     15} AS WEIGHTS_VALUESPECIFIED'. If using constant values
 *                     in an identifier combination, the number of values
 *                     specified must match across the combination.
 * @param[in] restrictions  Restrictions represent a method of informing the
 *                          graph solver which edges and/or nodes should be
 *                          ignored for the solution. Restrictions must be
 *                          specified using <a
 *                          href="../../../graph_solver/network_graph_solver/#identifiers"
 *                          target="_top">identifiers</a>; identifiers are
 *                          grouped as <a
 *                          href="../../../graph_solver/network_graph_solver/#id-combos"
 *                          target="_top">combinations</a>. Identifiers can be
 *                          used with existing column names, e.g.,
 *                          'table.column AS RESTRICTIONS_EDGE_ID',
 *                          expressions, e.g., 'column/2 AS
 *                          RESTRICTIONS_VALUECOMPARED', or constant values,
 *                          e.g., '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'.
 *                          If using constant values in an identifier
 *                          combination, the number of values specified must
 *                          match across the combination.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_graph_merge_tolerance
 *                             "create_graph_merge_tolerance": If node
 *                             geospatial positions are input (e.g., WKTPOINT,
 *                             X, Y), determines the minimum separation allowed
 *                             between unique nodes. If nodes are within the
 *                             tolerance of each other, they will be merged as
 *                             a single node. The default value is '1.0E-5'.
 *                         <li>@ref gpudb::create_graph_recreate
 *                             "create_graph_recreate": If set to @ref
 *                             gpudb::create_graph_true "true" and the graph
 *                             (using @a graphName) already exists, the graph
 *                             is deleted and recreated.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_false "create_graph_false".
 *                         <li>@ref gpudb::create_graph_save_persist
 *                             "create_graph_save_persist": If set to @ref
 *                             gpudb::create_graph_true "true", the graph will
 *                             be saved in the persist directory (see the <a
 *                             href="../../../config/#config-main-persistence"
 *                             target="_top">config reference</a> for more
 *                             information). If set to @ref
 *                             gpudb::create_graph_false "false", the graph
 *                             will be removed when the graph server is
 *                             shutdown.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_false "create_graph_false".
 *                         <li>@ref gpudb::create_graph_add_table_monitor
 *                             "create_graph_add_table_monitor": Adds a table
 *                             monitor to every table used in the creation of
 *                             the graph; this table monitor will trigger the
 *                             graph to update dynamically upon inserts to the
 *                             source table(s). Note that upon database
 *                             restart, if @ref
 *                             gpudb::create_graph_save_persist "save_persist"
 *                             is also set to @ref gpudb::create_graph_true
 *                             "true", the graph will be fully reconstructed
 *                             and the table monitors will be reattached. For
 *                             more details on table monitors, see @ref
 *                             createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createTableMonitor".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_false "create_graph_false".
 *                         <li>@ref gpudb::create_graph_graph_table
 *                             "create_graph_graph_table": If specified, the
 *                             created graph is also created as a table with
 *                             the given name, in [schema_name.]table_name
 *                             format, using standard <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>.  The
 *                             table will have the following identifier
 *                             columns: 'EDGE_ID', 'EDGE_NODE1_ID',
 *                             'EDGE_NODE2_ID'. If left blank, no table is
 *                             created. The default value is ''.
 *                         <li>@ref gpudb::create_graph_add_turns
 *                             "create_graph_add_turns": Adds dummy 'pillowed'
 *                             edges around intersection nodes where there are
 *                             more than three edges so that additional weight
 *                             penalties can be imposed by the solve endpoints.
 *                             (increases the total number of edges).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_false "create_graph_false".
 *                         <li>@ref gpudb::create_graph_is_partitioned
 *                             "create_graph_is_partitioned":
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_false "create_graph_false".
 *                         <li>@ref gpudb::create_graph_server_id
 *                             "create_graph_server_id": Indicates which graph
 *                             server(s) to send the request to. Default is to
 *                             send to the server with the most available
 *                             memory.
 *                         <li>@ref gpudb::create_graph_use_rtree
 *                             "create_graph_use_rtree": Use an range tree
 *                             structure to accelerate and improve the accuracy
 *                             of snapping, especially to edges.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_true "create_graph_true".
 *                         <li>@ref gpudb::create_graph_label_delimiter
 *                             "create_graph_label_delimiter": If provided the
 *                             label string will be split according to this
 *                             delimiter and each sub-string will be applied as
 *                             a separate label onto the specified edge. The
 *                             default value is ''.
 *                         <li>@ref gpudb::create_graph_allow_multiple_edges
 *                             "create_graph_allow_multiple_edges": Multigraph
 *                             choice; allowing multiple edges with the same
 *                             node pairs if set to true, otherwise, new edges
 *                             with existing same node pairs will not be
 *                             inserted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_graph_true
 *                                     "create_graph_true"
 *                                 <li>@ref gpudb::create_graph_false
 *                                     "create_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_graph_true "create_graph_true".
 *                         <li>@ref gpudb::create_graph_embedding_table
 *                             "create_graph_embedding_table": If table exists
 *                             (should be generated by the match/graph
 *                             match_embedding solver), the vector embeddings
 *                             for the newly inserted nodes will be appended
 *                             into this table. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateGraphResponse& createGraph( const std::string& graphName,
                                  const bool directedGraph,
                                  const std::vector<std::string>& nodes,
                                  const std::vector<std::string>& edges,
                                  const std::vector<std::string>& weights,
                                  const std::vector<std::string>& restrictions,
                                  const std::map<std::string, std::string>& options,
                                  CreateGraphResponse& response_ ) const;

/**
 * Create a job which will run asynchronously. The response returns a job ID,
 * which can be used to query the status and result of the job. The status and
 * the result of the job upon completion can be requested by @ref
 * getJob(const GetJobRequest&) const "getJob".
 *
 * @param[in] request_  @ref gpudb::CreateJobRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateJobResponse "Response" object containing the
 *         result of the operation.
 */
CreateJobResponse createJob( const CreateJobRequest& request_ ) const;

/**
 * Create a job which will run asynchronously. The response returns a job ID,
 * which can be used to query the status and result of the job. The status and
 * the result of the job upon completion can be requested by @ref
 * getJob(const GetJobRequest&) const "getJob".
 *
 * @param[in] request_  @ref gpudb::CreateJobRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateJobResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateJobResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateJobResponse& createJob( const CreateJobRequest& request_,
                              CreateJobResponse& response_ ) const;

/**
 * Create a job which will run asynchronously. The response returns a job ID,
 * which can be used to query the status and result of the job. The status and
 * the result of the job upon completion can be requested by @ref
 * getJob(const int64_t, const std::map<std::string, std::string>&) const
 * "getJob".
 *
 * @param[in] endpoint  Indicates which endpoint to execute, e.g.
 *                      '/alter/table'.
 * @param[in] requestEncoding  The encoding of the request payload for the job.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_job_binary
 *                                     "create_job_binary"
 *                                 <li>@ref gpudb::create_job_json
 *                                     "create_job_json"
 *                                 <li>@ref gpudb::create_job_snappy
 *                                     "create_job_snappy"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_job_binary "create_job_binary".
 * @param[in] data  Binary-encoded payload for the job to be run
 *                  asynchronously.  The payload must contain the relevant
 *                  input parameters for the endpoint indicated in @a endpoint.
 *                  Please see the documentation for the appropriate endpoint
 *                  to see what values must (or can) be specified.  If this
 *                  parameter is used, then @a requestEncoding must be @ref
 *                  gpudb::create_job_binary "binary" or @ref
 *                  gpudb::create_job_snappy "snappy".
 * @param[in] dataStr  JSON-encoded payload for the job to be run
 *                     asynchronously.  The payload must contain the relevant
 *                     input parameters for the endpoint indicated in @a
 *                     endpoint.  Please see the documentation for the
 *                     appropriate endpoint to see what values must (or can) be
 *                     specified.  If this parameter is used, then @a
 *                     requestEncoding must be @ref gpudb::create_job_json
 *                     "json".
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_job_remove_job_on_complete
 *                             "create_job_remove_job_on_complete":
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_job_true
 *                                     "create_job_true"
 *                                 <li>@ref gpudb::create_job_false
 *                                     "create_job_false"
 *                             </ul>
 *                         <li>@ref gpudb::create_job_job_tag
 *                             "create_job_job_tag": Tag to use for submitted
 *                             job. The same tag could be used on backup
 *                             cluster to retrieve response for the job. Tags
 *                             can use letter, numbers, '_' and '-'
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateJobResponse "Response" object containing the
 *         result of the operation.
 */
CreateJobResponse createJob( const std::string& endpoint,
                             const std::string& requestEncoding,
                             const std::vector<uint8_t>& data,
                             const std::string& dataStr,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Create a job which will run asynchronously. The response returns a job ID,
 * which can be used to query the status and result of the job. The status and
 * the result of the job upon completion can be requested by @ref
 * getJob(const int64_t, const std::map<std::string, std::string>&) const
 * "getJob".
 *
 * @param[in] endpoint  Indicates which endpoint to execute, e.g.
 *                      '/alter/table'.
 * @param[in] requestEncoding  The encoding of the request payload for the job.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_job_binary
 *                                     "create_job_binary"
 *                                 <li>@ref gpudb::create_job_json
 *                                     "create_job_json"
 *                                 <li>@ref gpudb::create_job_snappy
 *                                     "create_job_snappy"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_job_binary "create_job_binary".
 * @param[in] data  Binary-encoded payload for the job to be run
 *                  asynchronously.  The payload must contain the relevant
 *                  input parameters for the endpoint indicated in @a endpoint.
 *                  Please see the documentation for the appropriate endpoint
 *                  to see what values must (or can) be specified.  If this
 *                  parameter is used, then @a requestEncoding must be @ref
 *                  gpudb::create_job_binary "binary" or @ref
 *                  gpudb::create_job_snappy "snappy".
 * @param[in] dataStr  JSON-encoded payload for the job to be run
 *                     asynchronously.  The payload must contain the relevant
 *                     input parameters for the endpoint indicated in @a
 *                     endpoint.  Please see the documentation for the
 *                     appropriate endpoint to see what values must (or can) be
 *                     specified.  If this parameter is used, then @a
 *                     requestEncoding must be @ref gpudb::create_job_json
 *                     "json".
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_job_remove_job_on_complete
 *                             "create_job_remove_job_on_complete":
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_job_true
 *                                     "create_job_true"
 *                                 <li>@ref gpudb::create_job_false
 *                                     "create_job_false"
 *                             </ul>
 *                         <li>@ref gpudb::create_job_job_tag
 *                             "create_job_job_tag": Tag to use for submitted
 *                             job. The same tag could be used on backup
 *                             cluster to retrieve response for the job. Tags
 *                             can use letter, numbers, '_' and '-'
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateJobResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateJobResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateJobResponse& createJob( const std::string& endpoint,
                              const std::string& requestEncoding,
                              const std::vector<uint8_t>& data,
                              const std::string& dataStr,
                              const std::map<std::string, std::string>& options,
                              CreateJobResponse& response_ ) const;

/**
 * Creates a table that is the result of a SQL JOIN.
 *
 * For join details and examples see: <a href="../../../concepts/joins/"
 * target="_top">Joins</a>.  For limitations, see <a
 * href="../../../concepts/joins/#limitations-cautions" target="_top">Join
 * Limitations and Cautions</a>.
 *
 * @param[in] request_  @ref gpudb::CreateJoinTableRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateJoinTableResponse "Response" object containing the
 *         result of the operation.
 */
CreateJoinTableResponse createJoinTable( const CreateJoinTableRequest& request_ ) const;

/**
 * Creates a table that is the result of a SQL JOIN.
 *
 * For join details and examples see: <a href="../../../concepts/joins/"
 * target="_top">Joins</a>.  For limitations, see <a
 * href="../../../concepts/joins/#limitations-cautions" target="_top">Join
 * Limitations and Cautions</a>.
 *
 * @param[in] request_  @ref gpudb::CreateJoinTableRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateJoinTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateJoinTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateJoinTableResponse& createJoinTable( const CreateJoinTableRequest& request_,
                                          CreateJoinTableResponse& response_ ) const;

/**
 * Creates a table that is the result of a SQL JOIN.
 *
 * For join details and examples see: <a href="../../../concepts/joins/"
 * target="_top">Joins</a>.  For limitations, see <a
 * href="../../../concepts/joins/#limitations-cautions" target="_top">Join
 * Limitations and Cautions</a>.
 *
 * @param[in] joinTableName  Name of the join table to be created, in
 *                           [schema_name.]table_name format, using standard <a
 *                           href="../../../concepts/tables/#table-name-resolution"
 *                           target="_top">name resolution rules</a> and
 *                           meeting <a
 *                           href="../../../concepts/tables/#table-naming-criteria"
 *                           target="_top">table naming criteria</a>.
 * @param[in] tableNames  The list of table names composing the join, each in
 *                        [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.  Corresponds
 *                        to a SQL statement FROM clause.
 * @param[in] columnNames  List of member table columns or column expressions
 *                         to be included in the join. Columns can be prefixed
 *                         with 'table_id.column_name', where 'table_id' is the
 *                         table name or alias.  Columns can be aliased via the
 *                         syntax 'column_name as alias'. Wild cards '*' can be
 *                         used to include all columns across member tables or
 *                         'table_id.*' for all of a single table's columns.
 *                         Columns and column expressions composing the join
 *                         must be uniquely named or aliased--therefore, the
 *                         '*' wild card cannot be used if column names aren't
 *                         unique across all tables.
 * @param[in] expressions  An optional list of expressions to combine and
 *                         filter the joined tables.  Corresponds to a SQL
 *                         statement WHERE clause. For details see: <a
 *                         href="../../../concepts/expressions/"
 *                         target="_top">expressions</a>. The default value is
 *                         an empty vector.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_join_table_create_temp_table
 *                             "create_join_table_create_temp_table": If @ref
 *                             gpudb::create_join_table_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             joinTableName. This is always allowed even if
 *                             the caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::create_join_table_qualified_join_table_name
 *                             "qualified_join_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_join_table_true
 *                                     "create_join_table_true"
 *                                 <li>@ref gpudb::create_join_table_false
 *                                     "create_join_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_join_table_false
 *                             "create_join_table_false".
 *                         <li>@ref gpudb::create_join_table_collection_name
 *                             "create_join_table_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the join as part of @a joinTableName
 *                             and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the join. If
 *                             the schema is non-existent, it will be
 *                             automatically created. The default value is ''.
 *                         <li>@ref
 *                             gpudb::create_join_table_max_query_dimensions
 *                             "create_join_table_max_query_dimensions": No
 *                             longer used.
 *                         <li>@ref gpudb::create_join_table_optimize_lookups
 *                             "create_join_table_optimize_lookups": Use more
 *                             memory to speed up the joining of tables.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_join_table_true
 *                                     "create_join_table_true"
 *                                 <li>@ref gpudb::create_join_table_false
 *                                     "create_join_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_join_table_false
 *                             "create_join_table_false".
 *                         <li>@ref
 *                             gpudb::create_join_table_strategy_definition
 *                             "create_join_table_strategy_definition": The <a
 *                             href="../../../rm/concepts/#tier-strategies"
 *                             target="_top">tier strategy</a> for the table
 *                             and its columns.
 *                         <li>@ref gpudb::create_join_table_ttl
 *                             "create_join_table_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the join table
 *                             specified in @a joinTableName.
 *                         <li>@ref gpudb::create_join_table_view_id
 *                             "create_join_table_view_id": view this
 *                             projection is part of. The default value is ''.
 *                         <li>@ref gpudb::create_join_table_no_count
 *                             "create_join_table_no_count": Return a count of
 *                             0 for the join table for logging and for @ref
 *                             showTable(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showTable"; optimization needed for large
 *                             overlapped equi-join stencils. The default value
 *                             is 'false'.
 *                         <li>@ref gpudb::create_join_table_chunk_size
 *                             "create_join_table_chunk_size": Maximum number
 *                             of records per joined-chunk for this table.
 *                             Defaults to the gpudb.conf file chunk size
 *                         <li>@ref
 *                             gpudb::create_join_table_enable_virtual_chunking
 *                             "create_join_table_enable_virtual_chunking":
 *                             Collect chunks with accumulated size less than
 *                             chunk_size into a single chunk. The default
 *                             value is 'false'.
 *                         <li>@ref
 *                             gpudb::create_join_table_enable_pk_equi_join
 *                             "create_join_table_enable_pk_equi_join": Use
 *                             equi-join to do primary key joins rather than
 *                             using primary-key-index
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateJoinTableResponse "Response" object containing the
 *         result of the operation.
 */
CreateJoinTableResponse createJoinTable( const std::string& joinTableName,
                                         const std::vector<std::string>& tableNames,
                                         const std::vector<std::string>& columnNames,
                                         const std::vector<std::string>& expressions,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Creates a table that is the result of a SQL JOIN.
 *
 * For join details and examples see: <a href="../../../concepts/joins/"
 * target="_top">Joins</a>.  For limitations, see <a
 * href="../../../concepts/joins/#limitations-cautions" target="_top">Join
 * Limitations and Cautions</a>.
 *
 * @param[in] joinTableName  Name of the join table to be created, in
 *                           [schema_name.]table_name format, using standard <a
 *                           href="../../../concepts/tables/#table-name-resolution"
 *                           target="_top">name resolution rules</a> and
 *                           meeting <a
 *                           href="../../../concepts/tables/#table-naming-criteria"
 *                           target="_top">table naming criteria</a>.
 * @param[in] tableNames  The list of table names composing the join, each in
 *                        [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.  Corresponds
 *                        to a SQL statement FROM clause.
 * @param[in] columnNames  List of member table columns or column expressions
 *                         to be included in the join. Columns can be prefixed
 *                         with 'table_id.column_name', where 'table_id' is the
 *                         table name or alias.  Columns can be aliased via the
 *                         syntax 'column_name as alias'. Wild cards '*' can be
 *                         used to include all columns across member tables or
 *                         'table_id.*' for all of a single table's columns.
 *                         Columns and column expressions composing the join
 *                         must be uniquely named or aliased--therefore, the
 *                         '*' wild card cannot be used if column names aren't
 *                         unique across all tables.
 * @param[in] expressions  An optional list of expressions to combine and
 *                         filter the joined tables.  Corresponds to a SQL
 *                         statement WHERE clause. For details see: <a
 *                         href="../../../concepts/expressions/"
 *                         target="_top">expressions</a>. The default value is
 *                         an empty vector.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_join_table_create_temp_table
 *                             "create_join_table_create_temp_table": If @ref
 *                             gpudb::create_join_table_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             joinTableName. This is always allowed even if
 *                             the caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::create_join_table_qualified_join_table_name
 *                             "qualified_join_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_join_table_true
 *                                     "create_join_table_true"
 *                                 <li>@ref gpudb::create_join_table_false
 *                                     "create_join_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_join_table_false
 *                             "create_join_table_false".
 *                         <li>@ref gpudb::create_join_table_collection_name
 *                             "create_join_table_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the join as part of @a joinTableName
 *                             and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the join. If
 *                             the schema is non-existent, it will be
 *                             automatically created. The default value is ''.
 *                         <li>@ref
 *                             gpudb::create_join_table_max_query_dimensions
 *                             "create_join_table_max_query_dimensions": No
 *                             longer used.
 *                         <li>@ref gpudb::create_join_table_optimize_lookups
 *                             "create_join_table_optimize_lookups": Use more
 *                             memory to speed up the joining of tables.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_join_table_true
 *                                     "create_join_table_true"
 *                                 <li>@ref gpudb::create_join_table_false
 *                                     "create_join_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_join_table_false
 *                             "create_join_table_false".
 *                         <li>@ref
 *                             gpudb::create_join_table_strategy_definition
 *                             "create_join_table_strategy_definition": The <a
 *                             href="../../../rm/concepts/#tier-strategies"
 *                             target="_top">tier strategy</a> for the table
 *                             and its columns.
 *                         <li>@ref gpudb::create_join_table_ttl
 *                             "create_join_table_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the join table
 *                             specified in @a joinTableName.
 *                         <li>@ref gpudb::create_join_table_view_id
 *                             "create_join_table_view_id": view this
 *                             projection is part of. The default value is ''.
 *                         <li>@ref gpudb::create_join_table_no_count
 *                             "create_join_table_no_count": Return a count of
 *                             0 for the join table for logging and for @ref
 *                             showTable(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showTable"; optimization needed for large
 *                             overlapped equi-join stencils. The default value
 *                             is 'false'.
 *                         <li>@ref gpudb::create_join_table_chunk_size
 *                             "create_join_table_chunk_size": Maximum number
 *                             of records per joined-chunk for this table.
 *                             Defaults to the gpudb.conf file chunk size
 *                         <li>@ref
 *                             gpudb::create_join_table_enable_virtual_chunking
 *                             "create_join_table_enable_virtual_chunking":
 *                             Collect chunks with accumulated size less than
 *                             chunk_size into a single chunk. The default
 *                             value is 'false'.
 *                         <li>@ref
 *                             gpudb::create_join_table_enable_pk_equi_join
 *                             "create_join_table_enable_pk_equi_join": Use
 *                             equi-join to do primary key joins rather than
 *                             using primary-key-index
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateJoinTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateJoinTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateJoinTableResponse& createJoinTable( const std::string& joinTableName,
                                          const std::vector<std::string>& tableNames,
                                          const std::vector<std::string>& columnNames,
                                          const std::vector<std::string>& expressions,
                                          const std::map<std::string, std::string>& options,
                                          CreateJoinTableResponse& response_ ) const;

/**
 * Initiates the process of creating a materialized view, reserving the view's
 * name to prevent other views or tables from being created with that name.
 *
 * For materialized view details and examples, see <a
 * href="../../../concepts/materialized_views/" target="_top">Materialized
 * Views</a>.
 *
 * The response contains @ref gpudb::CreateMaterializedViewResponse::viewId
 * "viewId", which is used to tag each subsequent operation (projection, union,
 * aggregation, filter, or join) that will compose the view.
 *
 * @param[in] request_  @ref gpudb::CreateMaterializedViewRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateMaterializedViewResponse "Response" object
 *         containing the result of the operation.
 */
CreateMaterializedViewResponse createMaterializedView( const CreateMaterializedViewRequest& request_ ) const;

/**
 * Initiates the process of creating a materialized view, reserving the view's
 * name to prevent other views or tables from being created with that name.
 *
 * For materialized view details and examples, see <a
 * href="../../../concepts/materialized_views/" target="_top">Materialized
 * Views</a>.
 *
 * The response contains @ref gpudb::CreateMaterializedViewResponse::viewId
 * "viewId", which is used to tag each subsequent operation (projection, union,
 * aggregation, filter, or join) that will compose the view.
 *
 * @param[in] request_  @ref gpudb::CreateMaterializedViewRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateMaterializedViewResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateMaterializedViewResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
CreateMaterializedViewResponse& createMaterializedView( const CreateMaterializedViewRequest& request_,
                                                        CreateMaterializedViewResponse& response_ ) const;

/**
 * Initiates the process of creating a materialized view, reserving the view's
 * name to prevent other views or tables from being created with that name.
 *
 * For materialized view details and examples, see <a
 * href="../../../concepts/materialized_views/" target="_top">Materialized
 * Views</a>.
 *
 * The response contains @ref gpudb::CreateMaterializedViewResponse::viewId
 * "viewId", which is used to tag each subsequent operation (projection, union,
 * aggregation, filter, or join) that will compose the view.
 *
 * @param[in] tableName  Name of the table to be created that is the top-level
 *                       table of the materialized view, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a> and meeting <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::create_materialized_view_collection_name
 *                             "create_materialized_view_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the materialized view as part of @a
 *                             tableName and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema which is to
 *                             contain the newly created view. If the schema
 *                             provided is non-existent, it will be
 *                             automatically created.
 *                         <li>@ref gpudb::create_materialized_view_execute_as
 *                             "create_materialized_view_execute_as": User name
 *                             to use to run the refresh job
 *                         <li>@ref gpudb::create_materialized_view_persist
 *                             "create_materialized_view_persist": If @ref
 *                             gpudb::create_materialized_view_true "true",
 *                             then the materialized view specified in @a
 *                             tableName will be persisted and will not expire
 *                             unless a @ref
 *                             gpudb::create_materialized_view_ttl "ttl" is
 *                             specified.   If @ref
 *                             gpudb::create_materialized_view_false "false",
 *                             then the materialized view will be an in-memory
 *                             table and will expire unless a @ref
 *                             gpudb::create_materialized_view_ttl "ttl" is
 *                             specified otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_materialized_view_true
 *                                     "create_materialized_view_true"
 *                                 <li>@ref
 *                                     gpudb::create_materialized_view_false
 *                                     "create_materialized_view_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_materialized_view_false
 *                             "create_materialized_view_false".
 *                         <li>@ref
 *                             gpudb::create_materialized_view_refresh_span
 *                             "create_materialized_view_refresh_span": Sets
 *                             the future time-offset(in seconds) at which
 *                             periodic refresh stops
 *                         <li>@ref
 *                             gpudb::create_materialized_view_refresh_stop_time
 *                             "create_materialized_view_refresh_stop_time":
 *                             When @ref
 *                             gpudb::create_materialized_view_refresh_method
 *                             "refresh_method" is @ref
 *                             gpudb::create_materialized_view_periodic
 *                             "periodic", specifies the time at which a
 *                             periodic refresh is stopped.  Value is a
 *                             datetime string with format 'YYYY-MM-DD
 *                             HH:MM:SS'.
 *                         <li>@ref
 *                             gpudb::create_materialized_view_refresh_method
 *                             "create_materialized_view_refresh_method":
 *                             Method by which the join can be refreshed when
 *                             the data in underlying member tables have
 *                             changed.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_materialized_view_manual
 *                                     "create_materialized_view_manual":
 *                                     Refresh only occurs when manually
 *                                     requested by calling @ref
 *                                     alterTable(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                     "alterTable" with an 'action' of
 *                                     'refresh'
 *                                 <li>@ref
 *                                     gpudb::create_materialized_view_on_query
 *                                     "create_materialized_view_on_query":
 *                                     Refresh any time the view is queried.
 *                                 <li>@ref
 *                                     gpudb::create_materialized_view_on_change
 *                                     "create_materialized_view_on_change": If
 *                                     possible, incrementally refresh (refresh
 *                                     just those records added) whenever an
 *                                     insert, update, delete or refresh of
 *                                     input table is done.  A full refresh is
 *                                     done if an incremental refresh is not
 *                                     possible.
 *                                 <li>@ref
 *                                     gpudb::create_materialized_view_periodic
 *                                     "create_materialized_view_periodic":
 *                                     Refresh table periodically at rate
 *                                     specified by @ref
 *                                     gpudb::create_materialized_view_refresh_period
 *                                     "refresh_period"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_materialized_view_manual
 *                             "create_materialized_view_manual".
 *                         <li>@ref
 *                             gpudb::create_materialized_view_refresh_period
 *                             "create_materialized_view_refresh_period": When
 *                             @ref
 *                             gpudb::create_materialized_view_refresh_method
 *                             "refresh_method" is @ref
 *                             gpudb::create_materialized_view_periodic
 *                             "periodic", specifies the period in seconds at
 *                             which refresh occurs
 *                         <li>@ref
 *                             gpudb::create_materialized_view_refresh_start_time
 *                             "create_materialized_view_refresh_start_time":
 *                             When @ref
 *                             gpudb::create_materialized_view_refresh_method
 *                             "refresh_method" is @ref
 *                             gpudb::create_materialized_view_periodic
 *                             "periodic", specifies the first time at which a
 *                             refresh is to be done.  Value is a datetime
 *                             string with format 'YYYY-MM-DD HH:MM:SS'.
 *                         <li>@ref gpudb::create_materialized_view_ttl
 *                             "create_materialized_view_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the table specified in
 *                             @a tableName.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateMaterializedViewResponse "Response" object
 *         containing the result of the operation.
 */
CreateMaterializedViewResponse createMaterializedView( const std::string& tableName,
                                                       const std::map<std::string, std::string>& options ) const;

/**
 * Initiates the process of creating a materialized view, reserving the view's
 * name to prevent other views or tables from being created with that name.
 *
 * For materialized view details and examples, see <a
 * href="../../../concepts/materialized_views/" target="_top">Materialized
 * Views</a>.
 *
 * The response contains @ref gpudb::CreateMaterializedViewResponse::viewId
 * "viewId", which is used to tag each subsequent operation (projection, union,
 * aggregation, filter, or join) that will compose the view.
 *
 * @param[in] tableName  Name of the table to be created that is the top-level
 *                       table of the materialized view, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a> and meeting <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::create_materialized_view_collection_name
 *                             "create_materialized_view_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the materialized view as part of @a
 *                             tableName and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema which is to
 *                             contain the newly created view. If the schema
 *                             provided is non-existent, it will be
 *                             automatically created.
 *                         <li>@ref gpudb::create_materialized_view_execute_as
 *                             "create_materialized_view_execute_as": User name
 *                             to use to run the refresh job
 *                         <li>@ref gpudb::create_materialized_view_persist
 *                             "create_materialized_view_persist": If @ref
 *                             gpudb::create_materialized_view_true "true",
 *                             then the materialized view specified in @a
 *                             tableName will be persisted and will not expire
 *                             unless a @ref
 *                             gpudb::create_materialized_view_ttl "ttl" is
 *                             specified.   If @ref
 *                             gpudb::create_materialized_view_false "false",
 *                             then the materialized view will be an in-memory
 *                             table and will expire unless a @ref
 *                             gpudb::create_materialized_view_ttl "ttl" is
 *                             specified otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_materialized_view_true
 *                                     "create_materialized_view_true"
 *                                 <li>@ref
 *                                     gpudb::create_materialized_view_false
 *                                     "create_materialized_view_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_materialized_view_false
 *                             "create_materialized_view_false".
 *                         <li>@ref
 *                             gpudb::create_materialized_view_refresh_span
 *                             "create_materialized_view_refresh_span": Sets
 *                             the future time-offset(in seconds) at which
 *                             periodic refresh stops
 *                         <li>@ref
 *                             gpudb::create_materialized_view_refresh_stop_time
 *                             "create_materialized_view_refresh_stop_time":
 *                             When @ref
 *                             gpudb::create_materialized_view_refresh_method
 *                             "refresh_method" is @ref
 *                             gpudb::create_materialized_view_periodic
 *                             "periodic", specifies the time at which a
 *                             periodic refresh is stopped.  Value is a
 *                             datetime string with format 'YYYY-MM-DD
 *                             HH:MM:SS'.
 *                         <li>@ref
 *                             gpudb::create_materialized_view_refresh_method
 *                             "create_materialized_view_refresh_method":
 *                             Method by which the join can be refreshed when
 *                             the data in underlying member tables have
 *                             changed.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_materialized_view_manual
 *                                     "create_materialized_view_manual":
 *                                     Refresh only occurs when manually
 *                                     requested by calling @ref
 *                                     alterTable(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                     "alterTable" with an 'action' of
 *                                     'refresh'
 *                                 <li>@ref
 *                                     gpudb::create_materialized_view_on_query
 *                                     "create_materialized_view_on_query":
 *                                     Refresh any time the view is queried.
 *                                 <li>@ref
 *                                     gpudb::create_materialized_view_on_change
 *                                     "create_materialized_view_on_change": If
 *                                     possible, incrementally refresh (refresh
 *                                     just those records added) whenever an
 *                                     insert, update, delete or refresh of
 *                                     input table is done.  A full refresh is
 *                                     done if an incremental refresh is not
 *                                     possible.
 *                                 <li>@ref
 *                                     gpudb::create_materialized_view_periodic
 *                                     "create_materialized_view_periodic":
 *                                     Refresh table periodically at rate
 *                                     specified by @ref
 *                                     gpudb::create_materialized_view_refresh_period
 *                                     "refresh_period"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_materialized_view_manual
 *                             "create_materialized_view_manual".
 *                         <li>@ref
 *                             gpudb::create_materialized_view_refresh_period
 *                             "create_materialized_view_refresh_period": When
 *                             @ref
 *                             gpudb::create_materialized_view_refresh_method
 *                             "refresh_method" is @ref
 *                             gpudb::create_materialized_view_periodic
 *                             "periodic", specifies the period in seconds at
 *                             which refresh occurs
 *                         <li>@ref
 *                             gpudb::create_materialized_view_refresh_start_time
 *                             "create_materialized_view_refresh_start_time":
 *                             When @ref
 *                             gpudb::create_materialized_view_refresh_method
 *                             "refresh_method" is @ref
 *                             gpudb::create_materialized_view_periodic
 *                             "periodic", specifies the first time at which a
 *                             refresh is to be done.  Value is a datetime
 *                             string with format 'YYYY-MM-DD HH:MM:SS'.
 *                         <li>@ref gpudb::create_materialized_view_ttl
 *                             "create_materialized_view_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the table specified in
 *                             @a tableName.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateMaterializedViewResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateMaterializedViewResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
CreateMaterializedViewResponse& createMaterializedView( const std::string& tableName,
                                                        const std::map<std::string, std::string>& options,
                                                        CreateMaterializedViewResponse& response_ ) const;

/**
 * Creates an instance (proc) of the <a href="../../../concepts/udf/"
 * target="_top">user-defined functions</a> (UDF) specified by the given
 * command, options, and files, and makes it available for execution.
 *
 * @param[in] request_  @ref gpudb::CreateProcRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateProcResponse "Response" object containing the
 *         result of the operation.
 */
CreateProcResponse createProc( const CreateProcRequest& request_ ) const;

/**
 * Creates an instance (proc) of the <a href="../../../concepts/udf/"
 * target="_top">user-defined functions</a> (UDF) specified by the given
 * command, options, and files, and makes it available for execution.
 *
 * @param[in] request_  @ref gpudb::CreateProcRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateProcResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateProcResponse& createProc( const CreateProcRequest& request_,
                                CreateProcResponse& response_ ) const;

/**
 * Creates an instance (proc) of the <a href="../../../concepts/udf/"
 * target="_top">user-defined functions</a> (UDF) specified by the given
 * command, options, and files, and makes it available for execution.
 *
 * @param[in] procName  Name of the proc to be created. Must not be the name of
 *                      a currently existing proc.
 * @param[in] executionMode  The execution mode of the proc.
 *                           Supported values:
 *                           <ul>
 *                               <li>@ref gpudb::create_proc_distributed
 *                                   "create_proc_distributed": Input table
 *                                   data will be divided into data segments
 *                                   that are distributed across all nodes in
 *                                   the cluster, and the proc command will be
 *                                   invoked once per data segment in parallel.
 *                                   Output table data from each invocation
 *                                   will be saved to the same node as the
 *                                   corresponding input data.
 *                               <li>@ref gpudb::create_proc_nondistributed
 *                                   "create_proc_nondistributed": The proc
 *                                   command will be invoked only once per
 *                                   execution, and will not have direct access
 *                                   to any tables named as input or output
 *                                   table parameters in the call to @ref
 *                                   executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                                   "executeProc".  It will, however, be able
 *                                   to access the database using native API
 *                                   calls.
 *                           </ul>
 *                           The default value is @ref
 *                           gpudb::create_proc_distributed
 *                           "create_proc_distributed".
 * @param[in] files  A map of the files that make up the proc. The keys of the
 *                   map are file names, and the values are the binary contents
 *                   of the files. The file names may include subdirectory
 *                   names (e.g. 'subdir/file') but must not resolve to a
 *                   directory above the root for the proc.  Files may be
 *                   loaded from existing files in KiFS. Those file names
 *                   should be prefixed with the uri kifs:// and the values in
 *                   the map should be empty. The default value is an empty
 *                   map.
 * @param[in] command  The command (excluding arguments) that will be invoked
 *                     when the proc is executed. It will be invoked from the
 *                     directory containing the proc @a files and may be any
 *                     command that can be resolved from that directory. It
 *                     need not refer to a file actually in that directory; for
 *                     example, it could be 'java' if the proc is a Java
 *                     application; however, any necessary external programs
 *                     must be preinstalled on every database node. If the
 *                     command refers to a file in that directory, it must be
 *                     preceded with './' as per Linux convention. If not
 *                     specified, and exactly one file is provided in @a files,
 *                     that file will be invoked. The default value is ''.
 * @param[in] args  An array of command-line arguments that will be passed to
 *                  @a command when the proc is executed. The default value is
 *                  an empty vector.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_proc_max_concurrency_per_node
 *                             "create_proc_max_concurrency_per_node": The
 *                             maximum number of concurrent instances of the
 *                             proc that will be executed per node. 0 allows
 *                             unlimited concurrency. The default value is '0'.
 *                         <li>@ref gpudb::create_proc_set_environment
 *                             "create_proc_set_environment": A python
 *                             environment to use when executing the proc. Must
 *                             be an existing environment, else an error will
 *                             be returned. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateProcResponse "Response" object containing the
 *         result of the operation.
 */
CreateProcResponse createProc( const std::string& procName,
                               const std::string& executionMode,
                               const std::map<std::string, std::vector<uint8_t> >& files,
                               const std::string& command,
                               const std::vector<std::string>& args,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Creates an instance (proc) of the <a href="../../../concepts/udf/"
 * target="_top">user-defined functions</a> (UDF) specified by the given
 * command, options, and files, and makes it available for execution.
 *
 * @param[in] procName  Name of the proc to be created. Must not be the name of
 *                      a currently existing proc.
 * @param[in] executionMode  The execution mode of the proc.
 *                           Supported values:
 *                           <ul>
 *                               <li>@ref gpudb::create_proc_distributed
 *                                   "create_proc_distributed": Input table
 *                                   data will be divided into data segments
 *                                   that are distributed across all nodes in
 *                                   the cluster, and the proc command will be
 *                                   invoked once per data segment in parallel.
 *                                   Output table data from each invocation
 *                                   will be saved to the same node as the
 *                                   corresponding input data.
 *                               <li>@ref gpudb::create_proc_nondistributed
 *                                   "create_proc_nondistributed": The proc
 *                                   command will be invoked only once per
 *                                   execution, and will not have direct access
 *                                   to any tables named as input or output
 *                                   table parameters in the call to @ref
 *                                   executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                                   "executeProc".  It will, however, be able
 *                                   to access the database using native API
 *                                   calls.
 *                           </ul>
 *                           The default value is @ref
 *                           gpudb::create_proc_distributed
 *                           "create_proc_distributed".
 * @param[in] files  A map of the files that make up the proc. The keys of the
 *                   map are file names, and the values are the binary contents
 *                   of the files. The file names may include subdirectory
 *                   names (e.g. 'subdir/file') but must not resolve to a
 *                   directory above the root for the proc.  Files may be
 *                   loaded from existing files in KiFS. Those file names
 *                   should be prefixed with the uri kifs:// and the values in
 *                   the map should be empty. The default value is an empty
 *                   map.
 * @param[in] command  The command (excluding arguments) that will be invoked
 *                     when the proc is executed. It will be invoked from the
 *                     directory containing the proc @a files and may be any
 *                     command that can be resolved from that directory. It
 *                     need not refer to a file actually in that directory; for
 *                     example, it could be 'java' if the proc is a Java
 *                     application; however, any necessary external programs
 *                     must be preinstalled on every database node. If the
 *                     command refers to a file in that directory, it must be
 *                     preceded with './' as per Linux convention. If not
 *                     specified, and exactly one file is provided in @a files,
 *                     that file will be invoked. The default value is ''.
 * @param[in] args  An array of command-line arguments that will be passed to
 *                  @a command when the proc is executed. The default value is
 *                  an empty vector.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_proc_max_concurrency_per_node
 *                             "create_proc_max_concurrency_per_node": The
 *                             maximum number of concurrent instances of the
 *                             proc that will be executed per node. 0 allows
 *                             unlimited concurrency. The default value is '0'.
 *                         <li>@ref gpudb::create_proc_set_environment
 *                             "create_proc_set_environment": A python
 *                             environment to use when executing the proc. Must
 *                             be an existing environment, else an error will
 *                             be returned. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateProcResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateProcResponse& createProc( const std::string& procName,
                                const std::string& executionMode,
                                const std::map<std::string, std::vector<uint8_t> >& files,
                                const std::string& command,
                                const std::vector<std::string>& args,
                                const std::map<std::string, std::string>& options,
                                CreateProcResponse& response_ ) const;

/**
 * Creates a new <a href="../../../concepts/projections/"
 * target="_top">projection</a> of an existing table. A projection represents a
 * subset of the columns (potentially including derived columns) of a table.
 *
 * For projection details and examples, see <a
 * href="../../../concepts/projections/" target="_top">Projections</a>.  For
 * limitations, see <a
 * href="../../../concepts/projections/#limitations-and-cautions"
 * target="_top">Projection Limitations and Cautions</a>.
 *
 * <a href="../../../concepts/window/" target="_top">Window functions</a>,
 * which can perform operations like moving averages, are available through
 * this endpoint as well as @ref
 * getRecordsByColumn(const GetRecordsByColumnRequest&) const
 * "getRecordsByColumn".
 *
 * A projection can be created with a different <a
 * href="../../../concepts/tables/#shard-keys" target="_top">shard key</a> than
 * the source table. By specifying @ref gpudb::create_projection_shard_key
 * "shard_key", the projection will be sharded according to the specified
 * columns, regardless of how the source table is sharded.  The source table
 * can even be unsharded or replicated.
 *
 * If @ref gpudb::CreateProjectionRequest::tableName "tableName" is empty,
 * selection is performed against a single-row virtual table.  This can be
 * useful in executing temporal (<a
 * href="../../../concepts/expressions/#date-time-functions"
 * target="_top">NOW()</a>), identity (<a
 * href="../../../concepts/expressions/#user-security-functions"
 * target="_top">USER()</a>), or constant-based functions (<a
 * href="../../../concepts/expressions/#scalar-functions"
 * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
 *
 * @param[in] request_  @ref gpudb::CreateProjectionRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateProjectionResponse "Response" object containing
 *         the result of the operation.
 */
CreateProjectionResponse createProjection( const CreateProjectionRequest& request_ ) const;

/**
 * Creates a new <a href="../../../concepts/projections/"
 * target="_top">projection</a> of an existing table. A projection represents a
 * subset of the columns (potentially including derived columns) of a table.
 *
 * For projection details and examples, see <a
 * href="../../../concepts/projections/" target="_top">Projections</a>.  For
 * limitations, see <a
 * href="../../../concepts/projections/#limitations-and-cautions"
 * target="_top">Projection Limitations and Cautions</a>.
 *
 * <a href="../../../concepts/window/" target="_top">Window functions</a>,
 * which can perform operations like moving averages, are available through
 * this endpoint as well as @ref
 * getRecordsByColumn(const GetRecordsByColumnRequest&) const
 * "getRecordsByColumn".
 *
 * A projection can be created with a different <a
 * href="../../../concepts/tables/#shard-keys" target="_top">shard key</a> than
 * the source table. By specifying @ref gpudb::create_projection_shard_key
 * "shard_key", the projection will be sharded according to the specified
 * columns, regardless of how the source table is sharded.  The source table
 * can even be unsharded or replicated.
 *
 * If @ref gpudb::CreateProjectionRequest::tableName "tableName" is empty,
 * selection is performed against a single-row virtual table.  This can be
 * useful in executing temporal (<a
 * href="../../../concepts/expressions/#date-time-functions"
 * target="_top">NOW()</a>), identity (<a
 * href="../../../concepts/expressions/#user-security-functions"
 * target="_top">USER()</a>), or constant-based functions (<a
 * href="../../../concepts/expressions/#scalar-functions"
 * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
 *
 * @param[in] request_  @ref gpudb::CreateProjectionRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateProjectionResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateProjectionResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateProjectionResponse& createProjection( const CreateProjectionRequest& request_,
                                            CreateProjectionResponse& response_ ) const;

/**
 * Creates a new <a href="../../../concepts/projections/"
 * target="_top">projection</a> of an existing table. A projection represents a
 * subset of the columns (potentially including derived columns) of a table.
 *
 * For projection details and examples, see <a
 * href="../../../concepts/projections/" target="_top">Projections</a>.  For
 * limitations, see <a
 * href="../../../concepts/projections/#limitations-and-cautions"
 * target="_top">Projection Limitations and Cautions</a>.
 *
 * <a href="../../../concepts/window/" target="_top">Window functions</a>,
 * which can perform operations like moving averages, are available through
 * this endpoint as well as @ref
 * getRecordsByColumn(const std::string&, const std::vector<std::string>&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 * "getRecordsByColumn".
 *
 * A projection can be created with a different <a
 * href="../../../concepts/tables/#shard-keys" target="_top">shard key</a> than
 * the source table. By specifying @ref gpudb::create_projection_shard_key
 * "shard_key", the projection will be sharded according to the specified
 * columns, regardless of how the source table is sharded.  The source table
 * can even be unsharded or replicated.
 *
 * If @a tableName is empty, selection is performed against a single-row
 * virtual table.  This can be useful in executing temporal (<a
 * href="../../../concepts/expressions/#date-time-functions"
 * target="_top">NOW()</a>), identity (<a
 * href="../../../concepts/expressions/#user-security-functions"
 * target="_top">USER()</a>), or constant-based functions (<a
 * href="../../../concepts/expressions/#scalar-functions"
 * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
 *
 * @param[in] tableName  Name of the existing table on which the projection is
 *                       to be applied, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  An empty
 *                       table name creates a projection from a single-row
 *                       virtual table, where columns specified should be
 *                       constants or constant expressions.
 * @param[in] projectionName  Name of the projection to be created, in
 *                            [schema_name.]table_name format, using standard
 *                            <a
 *                            href="../../../concepts/tables/#table-name-resolution"
 *                            target="_top">name resolution rules</a> and
 *                            meeting <a
 *                            href="../../../concepts/tables/#table-naming-criteria"
 *                            target="_top">table naming criteria</a>.
 * @param[in] columnNames  List of columns from @a tableName to be included in
 *                         the projection. Can include derived columns. Can be
 *                         specified as aliased via the syntax 'column_name as
 *                         alias'.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_projection_create_temp_table
 *                             "create_projection_create_temp_table": If @ref
 *                             gpudb::create_projection_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             projectionName. If @ref
 *                             gpudb::create_projection_persist "persist" is
 *                             @ref gpudb::create_projection_false "false" (or
 *                             unspecified), then this is always allowed even
 *                             if the caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::create_projection_qualified_projection_name
 *                             "qualified_projection_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_true
 *                                     "create_projection_true"
 *                                 <li>@ref gpudb::create_projection_false
 *                                     "create_projection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_projection_false
 *                             "create_projection_false".
 *                         <li>@ref gpudb::create_projection_collection_name
 *                             "create_projection_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the projection as part of @a
 *                             projectionName and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the
 *                             projection. If the schema is non-existent, it
 *                             will be automatically created. The default value
 *                             is ''.
 *                         <li>@ref gpudb::create_projection_expression
 *                             "create_projection_expression": An optional
 *                             filter <a href="../../../concepts/expressions/"
 *                             target="_top">expression</a> to be applied to
 *                             the source table prior to the projection. The
 *                             default value is ''.
 *                         <li>@ref gpudb::create_projection_is_replicated
 *                             "create_projection_is_replicated": If @ref
 *                             gpudb::create_projection_true "true" then the
 *                             projection will be replicated even if the source
 *                             table is not.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_true
 *                                     "create_projection_true"
 *                                 <li>@ref gpudb::create_projection_false
 *                                     "create_projection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_projection_false
 *                             "create_projection_false".
 *                         <li>@ref gpudb::create_projection_offset
 *                             "create_projection_offset": The number of
 *                             initial results to skip (this can be useful for
 *                             paging through the results). The default value
 *                             is '0'.
 *                         <li>@ref gpudb::create_projection_limit
 *                             "create_projection_limit": The number of records
 *                             to keep. The default value is '-9999'.
 *                         <li>@ref gpudb::create_projection_order_by
 *                             "create_projection_order_by": Comma-separated
 *                             list of the columns to be sorted by; e.g.
 *                             'timestamp asc, x desc'.  The columns specified
 *                             must be present in @a columnNames.  If any alias
 *                             is given for any column name, the alias must be
 *                             used, rather than the original column name. The
 *                             default value is ''.
 *                         <li>@ref gpudb::create_projection_chunk_size
 *                             "create_projection_chunk_size": Indicates the
 *                             number of records per chunk to be used for this
 *                             projection.
 *                         <li>@ref
 *                             gpudb::create_projection_chunk_column_max_memory
 *                             "create_projection_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for this
 *                             projection.
 *                         <li>@ref gpudb::create_projection_chunk_max_memory
 *                             "create_projection_chunk_max_memory": Indicates
 *                             the target maximum data size for all columns in
 *                             a chunk to be used for this projection.
 *                         <li>@ref gpudb::create_projection_create_indexes
 *                             "create_projection_create_indexes":
 *                             Comma-separated list of columns on which to
 *                             create indexes on the projection.  The columns
 *                             specified must be present in @a columnNames.  If
 *                             any alias is given for any column name, the
 *                             alias must be used, rather than the original
 *                             column name.
 *                         <li>@ref gpudb::create_projection_ttl
 *                             "create_projection_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the projection
 *                             specified in @a projectionName.
 *                         <li>@ref gpudb::create_projection_shard_key
 *                             "create_projection_shard_key": Comma-separated
 *                             list of the columns to be sharded on; e.g.
 *                             'column1, column2'.  The columns specified must
 *                             be present in @a columnNames.  If any alias is
 *                             given for any column name, the alias must be
 *                             used, rather than the original column name. The
 *                             default value is ''.
 *                         <li>@ref gpudb::create_projection_persist
 *                             "create_projection_persist": If @ref
 *                             gpudb::create_projection_true "true", then the
 *                             projection specified in @a projectionName will
 *                             be persisted and will not expire unless a @ref
 *                             gpudb::create_projection_ttl "ttl" is specified.
 *                             If @ref gpudb::create_projection_false "false",
 *                             then the projection will be an in-memory table
 *                             and will expire unless a @ref
 *                             gpudb::create_projection_ttl "ttl" is specified
 *                             otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_true
 *                                     "create_projection_true"
 *                                 <li>@ref gpudb::create_projection_false
 *                                     "create_projection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_projection_false
 *                             "create_projection_false".
 *                         <li>@ref
 *                             gpudb::create_projection_preserve_dict_encoding
 *                             "create_projection_preserve_dict_encoding": If
 *                             @ref gpudb::create_projection_true "true", then
 *                             columns that were dict encoded in the source
 *                             table will be dict encoded in the projection.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_true
 *                                     "create_projection_true"
 *                                 <li>@ref gpudb::create_projection_false
 *                                     "create_projection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_projection_true
 *                             "create_projection_true".
 *                         <li>@ref gpudb::create_projection_retain_partitions
 *                             "create_projection_retain_partitions":
 *                             Determines whether the created projection will
 *                             retain the partitioning scheme from the source
 *                             table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_true
 *                                     "create_projection_true"
 *                                 <li>@ref gpudb::create_projection_false
 *                                     "create_projection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_projection_false
 *                             "create_projection_false".
 *                         <li>@ref gpudb::create_projection_partition_type
 *                             "create_projection_partition_type": <a
 *                             href="../../../concepts/tables/#partitioning"
 *                             target="_top">Partitioning</a> scheme to use.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_RANGE
 *                                     "create_projection_RANGE": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-range"
 *                                     target="_top">range partitioning</a>.
 *                                 <li>@ref gpudb::create_projection_INTERVAL
 *                                     "create_projection_INTERVAL": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-interval"
 *                                     target="_top">interval partitioning</a>.
 *                                 <li>@ref gpudb::create_projection_LIST
 *                                     "create_projection_LIST": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-list"
 *                                     target="_top">list partitioning</a>.
 *                                 <li>@ref gpudb::create_projection_HASH
 *                                     "create_projection_HASH": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-hash"
 *                                     target="_top">hash partitioning</a>.
 *                                 <li>@ref gpudb::create_projection_SERIES
 *                                     "create_projection_SERIES": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-series"
 *                                     target="_top">series partitioning</a>.
 *                             </ul>
 *                         <li>@ref gpudb::create_projection_partition_keys
 *                             "create_projection_partition_keys":
 *                             Comma-separated list of partition keys, which
 *                             are the columns or column expressions by which
 *                             records will be assigned to partitions defined
 *                             by @ref
 *                             gpudb::create_projection_partition_definitions
 *                             "partition_definitions".
 *                         <li>@ref
 *                             gpudb::create_projection_partition_definitions
 *                             "create_projection_partition_definitions":
 *                             Comma-separated list of partition definitions,
 *                             whose format depends on the choice of @ref
 *                             gpudb::create_projection_partition_type
 *                             "partition_type".  See <a
 *                             href="../../../concepts/tables/#partitioning-by-range"
 *                             target="_top">range partitioning</a>, <a
 *                             href="../../../concepts/tables/#partitioning-by-interval"
 *                             target="_top">interval partitioning</a>, <a
 *                             href="../../../concepts/tables/#partitioning-by-list"
 *                             target="_top">list partitioning</a>, <a
 *                             href="../../../concepts/tables/#partitioning-by-hash"
 *                             target="_top">hash partitioning</a>, or <a
 *                             href="../../../concepts/tables/#partitioning-by-series"
 *                             target="_top">series partitioning</a> for
 *                             example formats.
 *                         <li>@ref
 *                             gpudb::create_projection_is_automatic_partition
 *                             "create_projection_is_automatic_partition": If
 *                             @ref gpudb::create_projection_true "true", a new
 *                             partition will be created for values which don't
 *                             fall into an existing partition.  Currently only
 *                             supported for <a
 *                             href="../../../concepts/tables/#partitioning-by-list"
 *                             target="_top">list partitions</a>.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_true
 *                                     "create_projection_true"
 *                                 <li>@ref gpudb::create_projection_false
 *                                     "create_projection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_projection_false
 *                             "create_projection_false".
 *                         <li>@ref gpudb::create_projection_view_id
 *                             "create_projection_view_id": ID of view of which
 *                             this projection is a member. The default value
 *                             is ''.
 *                         <li>@ref
 *                             gpudb::create_projection_strategy_definition
 *                             "create_projection_strategy_definition": The <a
 *                             href="../../../rm/concepts/#tier-strategies"
 *                             target="_top">tier strategy</a> for the table
 *                             and its columns.
 *                         <li>@ref
 *                             gpudb::create_projection_join_window_functions
 *                             "create_projection_join_window_functions": If
 *                             set, window functions which require a reshard
 *                             will be computed separately and joined back
 *                             together, if the width of the projection is
 *                             greater than the
 *                             join_window_functions_threshold. The default
 *                             value is 'true'.
 *                         <li>@ref
 *                             gpudb::create_projection_join_window_functions_threshold
 *                             "create_projection_join_window_functions_threshold":
 *                             If the projection is greater than this width (in
 *                             bytes), then window functions which require a
 *                             reshard will be computed separately and joined
 *                             back together. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateProjectionResponse "Response" object containing
 *         the result of the operation.
 */
CreateProjectionResponse createProjection( const std::string& tableName,
                                           const std::string& projectionName,
                                           const std::vector<std::string>& columnNames,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new <a href="../../../concepts/projections/"
 * target="_top">projection</a> of an existing table. A projection represents a
 * subset of the columns (potentially including derived columns) of a table.
 *
 * For projection details and examples, see <a
 * href="../../../concepts/projections/" target="_top">Projections</a>.  For
 * limitations, see <a
 * href="../../../concepts/projections/#limitations-and-cautions"
 * target="_top">Projection Limitations and Cautions</a>.
 *
 * <a href="../../../concepts/window/" target="_top">Window functions</a>,
 * which can perform operations like moving averages, are available through
 * this endpoint as well as @ref
 * getRecordsByColumn(const std::string&, const std::vector<std::string>&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 * "getRecordsByColumn".
 *
 * A projection can be created with a different <a
 * href="../../../concepts/tables/#shard-keys" target="_top">shard key</a> than
 * the source table. By specifying @ref gpudb::create_projection_shard_key
 * "shard_key", the projection will be sharded according to the specified
 * columns, regardless of how the source table is sharded.  The source table
 * can even be unsharded or replicated.
 *
 * If @a tableName is empty, selection is performed against a single-row
 * virtual table.  This can be useful in executing temporal (<a
 * href="../../../concepts/expressions/#date-time-functions"
 * target="_top">NOW()</a>), identity (<a
 * href="../../../concepts/expressions/#user-security-functions"
 * target="_top">USER()</a>), or constant-based functions (<a
 * href="../../../concepts/expressions/#scalar-functions"
 * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
 *
 * @param[in] tableName  Name of the existing table on which the projection is
 *                       to be applied, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  An empty
 *                       table name creates a projection from a single-row
 *                       virtual table, where columns specified should be
 *                       constants or constant expressions.
 * @param[in] projectionName  Name of the projection to be created, in
 *                            [schema_name.]table_name format, using standard
 *                            <a
 *                            href="../../../concepts/tables/#table-name-resolution"
 *                            target="_top">name resolution rules</a> and
 *                            meeting <a
 *                            href="../../../concepts/tables/#table-naming-criteria"
 *                            target="_top">table naming criteria</a>.
 * @param[in] columnNames  List of columns from @a tableName to be included in
 *                         the projection. Can include derived columns. Can be
 *                         specified as aliased via the syntax 'column_name as
 *                         alias'.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_projection_create_temp_table
 *                             "create_projection_create_temp_table": If @ref
 *                             gpudb::create_projection_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             projectionName. If @ref
 *                             gpudb::create_projection_persist "persist" is
 *                             @ref gpudb::create_projection_false "false" (or
 *                             unspecified), then this is always allowed even
 *                             if the caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::create_projection_qualified_projection_name
 *                             "qualified_projection_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_true
 *                                     "create_projection_true"
 *                                 <li>@ref gpudb::create_projection_false
 *                                     "create_projection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_projection_false
 *                             "create_projection_false".
 *                         <li>@ref gpudb::create_projection_collection_name
 *                             "create_projection_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the projection as part of @a
 *                             projectionName and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the
 *                             projection. If the schema is non-existent, it
 *                             will be automatically created. The default value
 *                             is ''.
 *                         <li>@ref gpudb::create_projection_expression
 *                             "create_projection_expression": An optional
 *                             filter <a href="../../../concepts/expressions/"
 *                             target="_top">expression</a> to be applied to
 *                             the source table prior to the projection. The
 *                             default value is ''.
 *                         <li>@ref gpudb::create_projection_is_replicated
 *                             "create_projection_is_replicated": If @ref
 *                             gpudb::create_projection_true "true" then the
 *                             projection will be replicated even if the source
 *                             table is not.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_true
 *                                     "create_projection_true"
 *                                 <li>@ref gpudb::create_projection_false
 *                                     "create_projection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_projection_false
 *                             "create_projection_false".
 *                         <li>@ref gpudb::create_projection_offset
 *                             "create_projection_offset": The number of
 *                             initial results to skip (this can be useful for
 *                             paging through the results). The default value
 *                             is '0'.
 *                         <li>@ref gpudb::create_projection_limit
 *                             "create_projection_limit": The number of records
 *                             to keep. The default value is '-9999'.
 *                         <li>@ref gpudb::create_projection_order_by
 *                             "create_projection_order_by": Comma-separated
 *                             list of the columns to be sorted by; e.g.
 *                             'timestamp asc, x desc'.  The columns specified
 *                             must be present in @a columnNames.  If any alias
 *                             is given for any column name, the alias must be
 *                             used, rather than the original column name. The
 *                             default value is ''.
 *                         <li>@ref gpudb::create_projection_chunk_size
 *                             "create_projection_chunk_size": Indicates the
 *                             number of records per chunk to be used for this
 *                             projection.
 *                         <li>@ref
 *                             gpudb::create_projection_chunk_column_max_memory
 *                             "create_projection_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for this
 *                             projection.
 *                         <li>@ref gpudb::create_projection_chunk_max_memory
 *                             "create_projection_chunk_max_memory": Indicates
 *                             the target maximum data size for all columns in
 *                             a chunk to be used for this projection.
 *                         <li>@ref gpudb::create_projection_create_indexes
 *                             "create_projection_create_indexes":
 *                             Comma-separated list of columns on which to
 *                             create indexes on the projection.  The columns
 *                             specified must be present in @a columnNames.  If
 *                             any alias is given for any column name, the
 *                             alias must be used, rather than the original
 *                             column name.
 *                         <li>@ref gpudb::create_projection_ttl
 *                             "create_projection_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the projection
 *                             specified in @a projectionName.
 *                         <li>@ref gpudb::create_projection_shard_key
 *                             "create_projection_shard_key": Comma-separated
 *                             list of the columns to be sharded on; e.g.
 *                             'column1, column2'.  The columns specified must
 *                             be present in @a columnNames.  If any alias is
 *                             given for any column name, the alias must be
 *                             used, rather than the original column name. The
 *                             default value is ''.
 *                         <li>@ref gpudb::create_projection_persist
 *                             "create_projection_persist": If @ref
 *                             gpudb::create_projection_true "true", then the
 *                             projection specified in @a projectionName will
 *                             be persisted and will not expire unless a @ref
 *                             gpudb::create_projection_ttl "ttl" is specified.
 *                             If @ref gpudb::create_projection_false "false",
 *                             then the projection will be an in-memory table
 *                             and will expire unless a @ref
 *                             gpudb::create_projection_ttl "ttl" is specified
 *                             otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_true
 *                                     "create_projection_true"
 *                                 <li>@ref gpudb::create_projection_false
 *                                     "create_projection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_projection_false
 *                             "create_projection_false".
 *                         <li>@ref
 *                             gpudb::create_projection_preserve_dict_encoding
 *                             "create_projection_preserve_dict_encoding": If
 *                             @ref gpudb::create_projection_true "true", then
 *                             columns that were dict encoded in the source
 *                             table will be dict encoded in the projection.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_true
 *                                     "create_projection_true"
 *                                 <li>@ref gpudb::create_projection_false
 *                                     "create_projection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_projection_true
 *                             "create_projection_true".
 *                         <li>@ref gpudb::create_projection_retain_partitions
 *                             "create_projection_retain_partitions":
 *                             Determines whether the created projection will
 *                             retain the partitioning scheme from the source
 *                             table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_true
 *                                     "create_projection_true"
 *                                 <li>@ref gpudb::create_projection_false
 *                                     "create_projection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_projection_false
 *                             "create_projection_false".
 *                         <li>@ref gpudb::create_projection_partition_type
 *                             "create_projection_partition_type": <a
 *                             href="../../../concepts/tables/#partitioning"
 *                             target="_top">Partitioning</a> scheme to use.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_RANGE
 *                                     "create_projection_RANGE": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-range"
 *                                     target="_top">range partitioning</a>.
 *                                 <li>@ref gpudb::create_projection_INTERVAL
 *                                     "create_projection_INTERVAL": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-interval"
 *                                     target="_top">interval partitioning</a>.
 *                                 <li>@ref gpudb::create_projection_LIST
 *                                     "create_projection_LIST": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-list"
 *                                     target="_top">list partitioning</a>.
 *                                 <li>@ref gpudb::create_projection_HASH
 *                                     "create_projection_HASH": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-hash"
 *                                     target="_top">hash partitioning</a>.
 *                                 <li>@ref gpudb::create_projection_SERIES
 *                                     "create_projection_SERIES": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-series"
 *                                     target="_top">series partitioning</a>.
 *                             </ul>
 *                         <li>@ref gpudb::create_projection_partition_keys
 *                             "create_projection_partition_keys":
 *                             Comma-separated list of partition keys, which
 *                             are the columns or column expressions by which
 *                             records will be assigned to partitions defined
 *                             by @ref
 *                             gpudb::create_projection_partition_definitions
 *                             "partition_definitions".
 *                         <li>@ref
 *                             gpudb::create_projection_partition_definitions
 *                             "create_projection_partition_definitions":
 *                             Comma-separated list of partition definitions,
 *                             whose format depends on the choice of @ref
 *                             gpudb::create_projection_partition_type
 *                             "partition_type".  See <a
 *                             href="../../../concepts/tables/#partitioning-by-range"
 *                             target="_top">range partitioning</a>, <a
 *                             href="../../../concepts/tables/#partitioning-by-interval"
 *                             target="_top">interval partitioning</a>, <a
 *                             href="../../../concepts/tables/#partitioning-by-list"
 *                             target="_top">list partitioning</a>, <a
 *                             href="../../../concepts/tables/#partitioning-by-hash"
 *                             target="_top">hash partitioning</a>, or <a
 *                             href="../../../concepts/tables/#partitioning-by-series"
 *                             target="_top">series partitioning</a> for
 *                             example formats.
 *                         <li>@ref
 *                             gpudb::create_projection_is_automatic_partition
 *                             "create_projection_is_automatic_partition": If
 *                             @ref gpudb::create_projection_true "true", a new
 *                             partition will be created for values which don't
 *                             fall into an existing partition.  Currently only
 *                             supported for <a
 *                             href="../../../concepts/tables/#partitioning-by-list"
 *                             target="_top">list partitions</a>.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_projection_true
 *                                     "create_projection_true"
 *                                 <li>@ref gpudb::create_projection_false
 *                                     "create_projection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_projection_false
 *                             "create_projection_false".
 *                         <li>@ref gpudb::create_projection_view_id
 *                             "create_projection_view_id": ID of view of which
 *                             this projection is a member. The default value
 *                             is ''.
 *                         <li>@ref
 *                             gpudb::create_projection_strategy_definition
 *                             "create_projection_strategy_definition": The <a
 *                             href="../../../rm/concepts/#tier-strategies"
 *                             target="_top">tier strategy</a> for the table
 *                             and its columns.
 *                         <li>@ref
 *                             gpudb::create_projection_join_window_functions
 *                             "create_projection_join_window_functions": If
 *                             set, window functions which require a reshard
 *                             will be computed separately and joined back
 *                             together, if the width of the projection is
 *                             greater than the
 *                             join_window_functions_threshold. The default
 *                             value is 'true'.
 *                         <li>@ref
 *                             gpudb::create_projection_join_window_functions_threshold
 *                             "create_projection_join_window_functions_threshold":
 *                             If the projection is greater than this width (in
 *                             bytes), then window functions which require a
 *                             reshard will be computed separately and joined
 *                             back together. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateProjectionResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateProjectionResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateProjectionResponse& createProjection( const std::string& tableName,
                                            const std::string& projectionName,
                                            const std::vector<std::string>& columnNames,
                                            const std::map<std::string, std::string>& options,
                                            CreateProjectionResponse& response_ ) const;

/**
 * Creates a new resource group to facilitate resource management.
 *
 * @param[in] request_  @ref gpudb::CreateResourceGroupRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateResourceGroupResponse "Response" object containing
 *         the result of the operation.
 */
CreateResourceGroupResponse createResourceGroup( const CreateResourceGroupRequest& request_ ) const;

/**
 * Creates a new resource group to facilitate resource management.
 *
 * @param[in] request_  @ref gpudb::CreateResourceGroupRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateResourceGroupResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateResourceGroupResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateResourceGroupResponse& createResourceGroup( const CreateResourceGroupRequest& request_,
                                                  CreateResourceGroupResponse& response_ ) const;

/**
 * Creates a new resource group to facilitate resource management.
 *
 * @param[in] name  Name of the group to be created. Must contain only letters,
 *                  digits, and underscores, and cannot begin with a digit.
 *                  Must not match existing resource group name.
 * @param[in] tierAttributes  Optional map containing tier names and their
 *                            respective attribute group limits.  The only
 *                            valid attribute limit that can be set is
 *                            max_memory (in bytes) for the VRAM & RAM tiers.
 *                            For instance, to set max VRAM capacity to 1GB and
 *                            max RAM capacity to 10GB, use:
 *                            {'VRAM':{'max_memory':'1000000000'},
 *                            'RAM':{'max_memory':'10000000000'}}.
 *                            <ul>
 *                                <li>@ref
 *                                    gpudb::create_resource_group_max_memory
 *                                    "create_resource_group_max_memory":
 *                                    Maximum amount of memory usable in the
 *                                    given tier at one time for this group.
 *                            </ul>
 *                            The default value is an empty map.
 * @param[in] ranking  Indicates the relative ranking among existing resource
 *                     groups where this new resource group will be placed.
 *                     When using @ref gpudb::create_resource_group_before
 *                     "before" or @ref gpudb::create_resource_group_after
 *                     "after", specify which resource group this one will be
 *                     inserted before or after in @a adjoiningResourceGroup.
 *                     Supported values:
 *                     <ul>
 *                         <li>@ref gpudb::create_resource_group_first
 *                             "create_resource_group_first"
 *                         <li>@ref gpudb::create_resource_group_last
 *                             "create_resource_group_last"
 *                         <li>@ref gpudb::create_resource_group_before
 *                             "create_resource_group_before"
 *                         <li>@ref gpudb::create_resource_group_after
 *                             "create_resource_group_after"
 *                     </ul>
 * @param[in] adjoiningResourceGroup  If @a ranking is @ref
 *                                    gpudb::create_resource_group_before
 *                                    "before" or @ref
 *                                    gpudb::create_resource_group_after
 *                                    "after", this field indicates the
 *                                    resource group before or after which the
 *                                    current group will be placed; otherwise,
 *                                    leave blank. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::create_resource_group_max_cpu_concurrency
 *                             "create_resource_group_max_cpu_concurrency":
 *                             Maximum number of simultaneous threads that will
 *                             be used to execute a request for this group. The
 *                             minimum allowed value is '4'.
 *                         <li>@ref gpudb::create_resource_group_max_data
 *                             "create_resource_group_max_data": Maximum amount
 *                             of cumulative ram usage regardless of tier
 *                             status for this group. The minimum allowed value
 *                             is '-1'.
 *                         <li>@ref
 *                             gpudb::create_resource_group_max_scheduling_priority
 *                             "create_resource_group_max_scheduling_priority":
 *                             Maximum priority of a scheduled task for this
 *                             group. The minimum allowed value is '1'. The
 *                             maximum allowed value is '100'.
 *                         <li>@ref
 *                             gpudb::create_resource_group_max_tier_priority
 *                             "create_resource_group_max_tier_priority":
 *                             Maximum priority of a tiered object for this
 *                             group. The minimum allowed value is '1'. The
 *                             maximum allowed value is '10'.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateResourceGroupResponse "Response" object containing
 *         the result of the operation.
 */
CreateResourceGroupResponse createResourceGroup( const std::string& name,
                                                 const std::map<std::string, std::map<std::string, std::string> >& tierAttributes,
                                                 const std::string& ranking,
                                                 const std::string& adjoiningResourceGroup,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new resource group to facilitate resource management.
 *
 * @param[in] name  Name of the group to be created. Must contain only letters,
 *                  digits, and underscores, and cannot begin with a digit.
 *                  Must not match existing resource group name.
 * @param[in] tierAttributes  Optional map containing tier names and their
 *                            respective attribute group limits.  The only
 *                            valid attribute limit that can be set is
 *                            max_memory (in bytes) for the VRAM & RAM tiers.
 *                            For instance, to set max VRAM capacity to 1GB and
 *                            max RAM capacity to 10GB, use:
 *                            {'VRAM':{'max_memory':'1000000000'},
 *                            'RAM':{'max_memory':'10000000000'}}.
 *                            <ul>
 *                                <li>@ref
 *                                    gpudb::create_resource_group_max_memory
 *                                    "create_resource_group_max_memory":
 *                                    Maximum amount of memory usable in the
 *                                    given tier at one time for this group.
 *                            </ul>
 *                            The default value is an empty map.
 * @param[in] ranking  Indicates the relative ranking among existing resource
 *                     groups where this new resource group will be placed.
 *                     When using @ref gpudb::create_resource_group_before
 *                     "before" or @ref gpudb::create_resource_group_after
 *                     "after", specify which resource group this one will be
 *                     inserted before or after in @a adjoiningResourceGroup.
 *                     Supported values:
 *                     <ul>
 *                         <li>@ref gpudb::create_resource_group_first
 *                             "create_resource_group_first"
 *                         <li>@ref gpudb::create_resource_group_last
 *                             "create_resource_group_last"
 *                         <li>@ref gpudb::create_resource_group_before
 *                             "create_resource_group_before"
 *                         <li>@ref gpudb::create_resource_group_after
 *                             "create_resource_group_after"
 *                     </ul>
 * @param[in] adjoiningResourceGroup  If @a ranking is @ref
 *                                    gpudb::create_resource_group_before
 *                                    "before" or @ref
 *                                    gpudb::create_resource_group_after
 *                                    "after", this field indicates the
 *                                    resource group before or after which the
 *                                    current group will be placed; otherwise,
 *                                    leave blank. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::create_resource_group_max_cpu_concurrency
 *                             "create_resource_group_max_cpu_concurrency":
 *                             Maximum number of simultaneous threads that will
 *                             be used to execute a request for this group. The
 *                             minimum allowed value is '4'.
 *                         <li>@ref gpudb::create_resource_group_max_data
 *                             "create_resource_group_max_data": Maximum amount
 *                             of cumulative ram usage regardless of tier
 *                             status for this group. The minimum allowed value
 *                             is '-1'.
 *                         <li>@ref
 *                             gpudb::create_resource_group_max_scheduling_priority
 *                             "create_resource_group_max_scheduling_priority":
 *                             Maximum priority of a scheduled task for this
 *                             group. The minimum allowed value is '1'. The
 *                             maximum allowed value is '100'.
 *                         <li>@ref
 *                             gpudb::create_resource_group_max_tier_priority
 *                             "create_resource_group_max_tier_priority":
 *                             Maximum priority of a tiered object for this
 *                             group. The minimum allowed value is '1'. The
 *                             maximum allowed value is '10'.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateResourceGroupResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateResourceGroupResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateResourceGroupResponse& createResourceGroup( const std::string& name,
                                                  const std::map<std::string, std::map<std::string, std::string> >& tierAttributes,
                                                  const std::string& ranking,
                                                  const std::string& adjoiningResourceGroup,
                                                  const std::map<std::string, std::string>& options,
                                                  CreateResourceGroupResponse& response_ ) const;

/**
 * Creates a new role.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::CreateRoleRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateRoleResponse "Response" object containing the
 *         result of the operation.
 */
CreateRoleResponse createRole( const CreateRoleRequest& request_ ) const;

/**
 * Creates a new role.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::CreateRoleRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateRoleResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateRoleResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateRoleResponse& createRole( const CreateRoleRequest& request_,
                                CreateRoleResponse& response_ ) const;

/**
 * Creates a new role.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] name  Name of the role to be created. Must contain only lowercase
 *                  letters, digits, and underscores, and cannot begin with a
 *                  digit. Must not be the same name as an existing user or
 *                  role.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_role_resource_group
 *                             "create_role_resource_group": Name of an
 *                             existing resource group to associate with this
 *                             user
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateRoleResponse "Response" object containing the
 *         result of the operation.
 */
CreateRoleResponse createRole( const std::string& name,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new role.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] name  Name of the role to be created. Must contain only lowercase
 *                  letters, digits, and underscores, and cannot begin with a
 *                  digit. Must not be the same name as an existing user or
 *                  role.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_role_resource_group
 *                             "create_role_resource_group": Name of an
 *                             existing resource group to associate with this
 *                             user
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateRoleResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateRoleResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateRoleResponse& createRole( const std::string& name,
                                const std::map<std::string, std::string>& options,
                                CreateRoleResponse& response_ ) const;

/**
 * Creates a SQL-style <a href="../../../concepts/schemas/"
 * target="_top">schema</a>. Schemas are containers for tables and views.
 * Multiple tables and views can be defined with the same name in different
 * schemas.
 *
 * @param[in] request_  @ref gpudb::CreateSchemaRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateSchemaResponse "Response" object containing the
 *         result of the operation.
 */
CreateSchemaResponse createSchema( const CreateSchemaRequest& request_ ) const;

/**
 * Creates a SQL-style <a href="../../../concepts/schemas/"
 * target="_top">schema</a>. Schemas are containers for tables and views.
 * Multiple tables and views can be defined with the same name in different
 * schemas.
 *
 * @param[in] request_  @ref gpudb::CreateSchemaRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateSchemaResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateSchemaResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateSchemaResponse& createSchema( const CreateSchemaRequest& request_,
                                    CreateSchemaResponse& response_ ) const;

/**
 * Creates a SQL-style <a href="../../../concepts/schemas/"
 * target="_top">schema</a>. Schemas are containers for tables and views.
 * Multiple tables and views can be defined with the same name in different
 * schemas.
 *
 * @param[in] schemaName  Name of the schema to be created.  Has the same
 *                        naming restrictions as <a
 *                        href="../../../concepts/tables/"
 *                        target="_top">tables</a>.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_schema_no_error_if_exists
 *                             "create_schema_no_error_if_exists": If @ref
 *                             gpudb::create_schema_true "true", prevents an
 *                             error from occurring if the schema already
 *                             exists.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_schema_true
 *                                     "create_schema_true"
 *                                 <li>@ref gpudb::create_schema_false
 *                                     "create_schema_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_schema_false
 *                             "create_schema_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateSchemaResponse "Response" object containing the
 *         result of the operation.
 */
CreateSchemaResponse createSchema( const std::string& schemaName,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Creates a SQL-style <a href="../../../concepts/schemas/"
 * target="_top">schema</a>. Schemas are containers for tables and views.
 * Multiple tables and views can be defined with the same name in different
 * schemas.
 *
 * @param[in] schemaName  Name of the schema to be created.  Has the same
 *                        naming restrictions as <a
 *                        href="../../../concepts/tables/"
 *                        target="_top">tables</a>.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_schema_no_error_if_exists
 *                             "create_schema_no_error_if_exists": If @ref
 *                             gpudb::create_schema_true "true", prevents an
 *                             error from occurring if the schema already
 *                             exists.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_schema_true
 *                                     "create_schema_true"
 *                                 <li>@ref gpudb::create_schema_false
 *                                     "create_schema_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_schema_false
 *                             "create_schema_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateSchemaResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateSchemaResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateSchemaResponse& createSchema( const std::string& schemaName,
                                    const std::map<std::string, std::string>& options,
                                    CreateSchemaResponse& response_ ) const;

/** @private */
CreateStateTableResponse createStateTable( const CreateStateTableRequest& request_ ) const;

/** @private */
CreateStateTableResponse& createStateTable( const CreateStateTableRequest& request_,
                                            CreateStateTableResponse& response_ ) const;

/** @private */
CreateStateTableResponse createStateTable( const std::string& tableName,
                                           const std::string& inputTableName,
                                           const std::string& initTableName,
                                           const std::map<std::string, std::string>& options ) const;

/** @private */
CreateStateTableResponse& createStateTable( const std::string& tableName,
                                            const std::string& inputTableName,
                                            const std::string& initTableName,
                                            const std::map<std::string, std::string>& options,
                                            CreateStateTableResponse& response_ ) const;

/**
 * Creates a new table. If a new table is being created, the type of the table
 * is given by @ref gpudb::CreateTableRequest::typeId "typeId", which must be
 * the ID of a currently registered type (i.e.\ one created via @ref
 * createType(const CreateTypeRequest&) const "createType").
 *
 * A table may optionally be designated to use a <a
 * href="../../../concepts/tables/#replication" target="_top">replicated</a>
 * distribution scheme, or be assigned: <a
 * href="../../../concepts/tables/#foreign-keys" target="_top">foreign keys</a>
 * to other tables, a <a href="../../../concepts/tables/#partitioning"
 * target="_top">partitioning</a> scheme, and/or a <a
 * href="../../../rm/concepts/#tier-strategies" target="_top">tier
 * strategy</a>.
 *
 * @param[in] request_  @ref gpudb::CreateTableRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateTableResponse "Response" object containing the
 *         result of the operation.
 */
CreateTableResponse createTable( const CreateTableRequest& request_ ) const;

/**
 * Creates a new table. If a new table is being created, the type of the table
 * is given by @ref gpudb::CreateTableRequest::typeId "typeId", which must be
 * the ID of a currently registered type (i.e.\ one created via @ref
 * createType(const CreateTypeRequest&) const "createType").
 *
 * A table may optionally be designated to use a <a
 * href="../../../concepts/tables/#replication" target="_top">replicated</a>
 * distribution scheme, or be assigned: <a
 * href="../../../concepts/tables/#foreign-keys" target="_top">foreign keys</a>
 * to other tables, a <a href="../../../concepts/tables/#partitioning"
 * target="_top">partitioning</a> scheme, and/or a <a
 * href="../../../rm/concepts/#tier-strategies" target="_top">tier
 * strategy</a>.
 *
 * @param[in] request_  @ref gpudb::CreateTableRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateTableResponse& createTable( const CreateTableRequest& request_,
                                  CreateTableResponse& response_ ) const;

/**
 * Creates a new table. If a new table is being created, the type of the table
 * is given by @a typeId, which must be the ID of a currently registered type
 * (i.e.\ one created via @ref
 * createType(const std::string&, const std::string&, const std::map<std::string, std::vector<std::string> >&, const std::map<std::string, std::string>&) const
 * "createType").
 *
 * A table may optionally be designated to use a <a
 * href="../../../concepts/tables/#replication" target="_top">replicated</a>
 * distribution scheme, or be assigned: <a
 * href="../../../concepts/tables/#foreign-keys" target="_top">foreign keys</a>
 * to other tables, a <a href="../../../concepts/tables/#partitioning"
 * target="_top">partitioning</a> scheme, and/or a <a
 * href="../../../rm/concepts/#tier-strategies" target="_top">tier
 * strategy</a>.
 *
 * @param[in] tableName  Name of the table to be created, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a> and meeting <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>. Error for
 *                       requests with existing table of the same name and type
 *                       ID may be suppressed by using the @ref
 *                       gpudb::create_table_no_error_if_exists
 *                       "no_error_if_exists" option.
 * @param[in] typeId  ID of a currently registered type. All objects added to
 *                    the newly created table will be of this type.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_table_no_error_if_exists
 *                             "create_table_no_error_if_exists": If @ref
 *                             gpudb::create_table_true "true", prevents an
 *                             error from occurring if the table already exists
 *                             and is of the given type.  If a table with the
 *                             same ID but a different type exists, it is still
 *                             an error.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref gpudb::create_table_create_temp_table
 *                             "create_table_create_temp_table": If @ref
 *                             gpudb::create_table_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             tableName. If @ref
 *                             gpudb::create_table_is_result_table
 *                             "is_result_table" is @ref
 *                             gpudb::create_table_true "true", then this is
 *                             always allowed even if the caller does not have
 *                             permission to create tables. The generated name
 *                             is returned in @ref
 *                             gpudb::create_table_qualified_table_name
 *                             "qualified_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref gpudb::create_table_collection_name
 *                             "create_table_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema as part of @a tableName and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema which is to
 *                             contain the newly created table. If the schema
 *                             is non-existent, it will be automatically
 *                             created.
 *                         <li>@ref gpudb::create_table_is_collection
 *                             "create_table_is_collection":
 *                             [DEPRECATED--please use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create a schema instead]
 *                             Indicates whether to create a schema instead of
 *                             a table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref
 *                             gpudb::create_table_disallow_homogeneous_tables
 *                             "create_table_disallow_homogeneous_tables": No
 *                             longer supported; value will be ignored.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref gpudb::create_table_is_replicated
 *                             "create_table_is_replicated": Affects the <a
 *                             href="../../../concepts/tables/#distribution"
 *                             target="_top">distribution scheme</a> for the
 *                             table's data.  If @ref gpudb::create_table_true
 *                             "true" and the given type has no explicit <a
 *                             href="../../../concepts/tables/#shard-key"
 *                             target="_top">shard key</a> defined, the table
 *                             will be <a
 *                             href="../../../concepts/tables/#replication"
 *                             target="_top">replicated</a>.  If @ref
 *                             gpudb::create_table_false "false", the table
 *                             will be <a
 *                             href="../../../concepts/tables/#sharding"
 *                             target="_top">sharded</a> according to the shard
 *                             key specified in the given @a typeId, or <a
 *                             href="../../../concepts/tables/#random-sharding"
 *                             target="_top">randomly sharded</a>, if no shard
 *                             key is specified.  Note that a type containing a
 *                             shard key cannot be used to create a replicated
 *                             table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref gpudb::create_table_foreign_keys
 *                             "create_table_foreign_keys": Semicolon-separated
 *                             list of <a
 *                             href="../../../concepts/tables/#foreign-keys"
 *                             target="_top">foreign keys</a>, of the format
 *                             '(source_column_name [, ...]) references
 *                             target_table_name(primary_key_column_name [,
 *                             ...]) [as foreign_key_name]'.
 *                         <li>@ref gpudb::create_table_foreign_shard_key
 *                             "create_table_foreign_shard_key": Foreign shard
 *                             key of the format 'source_column references
 *                             shard_by_column from
 *                             target_table(primary_key_column)'.
 *                         <li>@ref gpudb::create_table_partition_type
 *                             "create_table_partition_type": <a
 *                             href="../../../concepts/tables/#partitioning"
 *                             target="_top">Partitioning</a> scheme to use.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_RANGE
 *                                     "create_table_RANGE": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-range"
 *                                     target="_top">range partitioning</a>.
 *                                 <li>@ref gpudb::create_table_INTERVAL
 *                                     "create_table_INTERVAL": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-interval"
 *                                     target="_top">interval partitioning</a>.
 *                                 <li>@ref gpudb::create_table_LIST
 *                                     "create_table_LIST": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-list"
 *                                     target="_top">list partitioning</a>.
 *                                 <li>@ref gpudb::create_table_HASH
 *                                     "create_table_HASH": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-hash"
 *                                     target="_top">hash partitioning</a>.
 *                                 <li>@ref gpudb::create_table_SERIES
 *                                     "create_table_SERIES": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-series"
 *                                     target="_top">series partitioning</a>.
 *                             </ul>
 *                         <li>@ref gpudb::create_table_partition_keys
 *                             "create_table_partition_keys": Comma-separated
 *                             list of partition keys, which are the columns or
 *                             column expressions by which records will be
 *                             assigned to partitions defined by @ref
 *                             gpudb::create_table_partition_definitions
 *                             "partition_definitions".
 *                         <li>@ref gpudb::create_table_partition_definitions
 *                             "create_table_partition_definitions":
 *                             Comma-separated list of partition definitions,
 *                             whose format depends on the choice of @ref
 *                             gpudb::create_table_partition_type
 *                             "partition_type".  See <a
 *                             href="../../../concepts/tables/#partitioning-by-range"
 *                             target="_top">range partitioning</a>, <a
 *                             href="../../../concepts/tables/#partitioning-by-interval"
 *                             target="_top">interval partitioning</a>, <a
 *                             href="../../../concepts/tables/#partitioning-by-list"
 *                             target="_top">list partitioning</a>, <a
 *                             href="../../../concepts/tables/#partitioning-by-hash"
 *                             target="_top">hash partitioning</a>, or <a
 *                             href="../../../concepts/tables/#partitioning-by-series"
 *                             target="_top">series partitioning</a> for
 *                             example formats.
 *                         <li>@ref gpudb::create_table_is_automatic_partition
 *                             "create_table_is_automatic_partition": If @ref
 *                             gpudb::create_table_true "true", a new partition
 *                             will be created for values which don't fall into
 *                             an existing partition.  Currently only supported
 *                             for <a
 *                             href="../../../concepts/tables/#partitioning-by-list"
 *                             target="_top">list partitions</a>.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref gpudb::create_table_ttl "create_table_ttl":
 *                             Sets the <a href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the table specified in
 *                             @a tableName.
 *                         <li>@ref gpudb::create_table_chunk_size
 *                             "create_table_chunk_size": Indicates the number
 *                             of records per chunk to be used for this table.
 *                         <li>@ref gpudb::create_table_chunk_column_max_memory
 *                             "create_table_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for this table.
 *                         <li>@ref gpudb::create_table_chunk_max_memory
 *                             "create_table_chunk_max_memory": Indicates the
 *                             target maximum data size for all columns in a
 *                             chunk to be used for this table.
 *                         <li>@ref gpudb::create_table_is_result_table
 *                             "create_table_is_result_table": Indicates
 *                             whether the table is a <a
 *                             href="../../../concepts/tables_memory_only/"
 *                             target="_top">memory-only table</a>. A result
 *                             table cannot contain columns with store_only or
 *                             text_search <a
 *                             href="../../../concepts/types/#data-handling"
 *                             target="_top">data-handling</a> or that are <a
 *                             href="../../../concepts/types/#primitive-types"
 *                             target="_top">non-charN strings</a>, and it will
 *                             not be retained if the server is restarted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref gpudb::create_table_strategy_definition
 *                             "create_table_strategy_definition": The <a
 *                             href="../../../rm/concepts/#tier-strategies"
 *                             target="_top">tier strategy</a> for the table
 *                             and its columns.
 *                         <li>@ref gpudb::create_table_is_virtual_union
 *                             "create_table_is_virtual_union":
 *                             &lt;DEVELOPER&gt;
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateTableResponse "Response" object containing the
 *         result of the operation.
 */
CreateTableResponse createTable( const std::string& tableName,
                                 const std::string& typeId,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new table. If a new table is being created, the type of the table
 * is given by @a typeId, which must be the ID of a currently registered type
 * (i.e.\ one created via @ref
 * createType(const std::string&, const std::string&, const std::map<std::string, std::vector<std::string> >&, const std::map<std::string, std::string>&) const
 * "createType").
 *
 * A table may optionally be designated to use a <a
 * href="../../../concepts/tables/#replication" target="_top">replicated</a>
 * distribution scheme, or be assigned: <a
 * href="../../../concepts/tables/#foreign-keys" target="_top">foreign keys</a>
 * to other tables, a <a href="../../../concepts/tables/#partitioning"
 * target="_top">partitioning</a> scheme, and/or a <a
 * href="../../../rm/concepts/#tier-strategies" target="_top">tier
 * strategy</a>.
 *
 * @param[in] tableName  Name of the table to be created, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a> and meeting <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>. Error for
 *                       requests with existing table of the same name and type
 *                       ID may be suppressed by using the @ref
 *                       gpudb::create_table_no_error_if_exists
 *                       "no_error_if_exists" option.
 * @param[in] typeId  ID of a currently registered type. All objects added to
 *                    the newly created table will be of this type.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_table_no_error_if_exists
 *                             "create_table_no_error_if_exists": If @ref
 *                             gpudb::create_table_true "true", prevents an
 *                             error from occurring if the table already exists
 *                             and is of the given type.  If a table with the
 *                             same ID but a different type exists, it is still
 *                             an error.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref gpudb::create_table_create_temp_table
 *                             "create_table_create_temp_table": If @ref
 *                             gpudb::create_table_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             tableName. If @ref
 *                             gpudb::create_table_is_result_table
 *                             "is_result_table" is @ref
 *                             gpudb::create_table_true "true", then this is
 *                             always allowed even if the caller does not have
 *                             permission to create tables. The generated name
 *                             is returned in @ref
 *                             gpudb::create_table_qualified_table_name
 *                             "qualified_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref gpudb::create_table_collection_name
 *                             "create_table_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema as part of @a tableName and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema which is to
 *                             contain the newly created table. If the schema
 *                             is non-existent, it will be automatically
 *                             created.
 *                         <li>@ref gpudb::create_table_is_collection
 *                             "create_table_is_collection":
 *                             [DEPRECATED--please use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create a schema instead]
 *                             Indicates whether to create a schema instead of
 *                             a table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref
 *                             gpudb::create_table_disallow_homogeneous_tables
 *                             "create_table_disallow_homogeneous_tables": No
 *                             longer supported; value will be ignored.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref gpudb::create_table_is_replicated
 *                             "create_table_is_replicated": Affects the <a
 *                             href="../../../concepts/tables/#distribution"
 *                             target="_top">distribution scheme</a> for the
 *                             table's data.  If @ref gpudb::create_table_true
 *                             "true" and the given type has no explicit <a
 *                             href="../../../concepts/tables/#shard-key"
 *                             target="_top">shard key</a> defined, the table
 *                             will be <a
 *                             href="../../../concepts/tables/#replication"
 *                             target="_top">replicated</a>.  If @ref
 *                             gpudb::create_table_false "false", the table
 *                             will be <a
 *                             href="../../../concepts/tables/#sharding"
 *                             target="_top">sharded</a> according to the shard
 *                             key specified in the given @a typeId, or <a
 *                             href="../../../concepts/tables/#random-sharding"
 *                             target="_top">randomly sharded</a>, if no shard
 *                             key is specified.  Note that a type containing a
 *                             shard key cannot be used to create a replicated
 *                             table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref gpudb::create_table_foreign_keys
 *                             "create_table_foreign_keys": Semicolon-separated
 *                             list of <a
 *                             href="../../../concepts/tables/#foreign-keys"
 *                             target="_top">foreign keys</a>, of the format
 *                             '(source_column_name [, ...]) references
 *                             target_table_name(primary_key_column_name [,
 *                             ...]) [as foreign_key_name]'.
 *                         <li>@ref gpudb::create_table_foreign_shard_key
 *                             "create_table_foreign_shard_key": Foreign shard
 *                             key of the format 'source_column references
 *                             shard_by_column from
 *                             target_table(primary_key_column)'.
 *                         <li>@ref gpudb::create_table_partition_type
 *                             "create_table_partition_type": <a
 *                             href="../../../concepts/tables/#partitioning"
 *                             target="_top">Partitioning</a> scheme to use.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_RANGE
 *                                     "create_table_RANGE": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-range"
 *                                     target="_top">range partitioning</a>.
 *                                 <li>@ref gpudb::create_table_INTERVAL
 *                                     "create_table_INTERVAL": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-interval"
 *                                     target="_top">interval partitioning</a>.
 *                                 <li>@ref gpudb::create_table_LIST
 *                                     "create_table_LIST": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-list"
 *                                     target="_top">list partitioning</a>.
 *                                 <li>@ref gpudb::create_table_HASH
 *                                     "create_table_HASH": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-hash"
 *                                     target="_top">hash partitioning</a>.
 *                                 <li>@ref gpudb::create_table_SERIES
 *                                     "create_table_SERIES": Use <a
 *                                     href="../../../concepts/tables/#partitioning-by-series"
 *                                     target="_top">series partitioning</a>.
 *                             </ul>
 *                         <li>@ref gpudb::create_table_partition_keys
 *                             "create_table_partition_keys": Comma-separated
 *                             list of partition keys, which are the columns or
 *                             column expressions by which records will be
 *                             assigned to partitions defined by @ref
 *                             gpudb::create_table_partition_definitions
 *                             "partition_definitions".
 *                         <li>@ref gpudb::create_table_partition_definitions
 *                             "create_table_partition_definitions":
 *                             Comma-separated list of partition definitions,
 *                             whose format depends on the choice of @ref
 *                             gpudb::create_table_partition_type
 *                             "partition_type".  See <a
 *                             href="../../../concepts/tables/#partitioning-by-range"
 *                             target="_top">range partitioning</a>, <a
 *                             href="../../../concepts/tables/#partitioning-by-interval"
 *                             target="_top">interval partitioning</a>, <a
 *                             href="../../../concepts/tables/#partitioning-by-list"
 *                             target="_top">list partitioning</a>, <a
 *                             href="../../../concepts/tables/#partitioning-by-hash"
 *                             target="_top">hash partitioning</a>, or <a
 *                             href="../../../concepts/tables/#partitioning-by-series"
 *                             target="_top">series partitioning</a> for
 *                             example formats.
 *                         <li>@ref gpudb::create_table_is_automatic_partition
 *                             "create_table_is_automatic_partition": If @ref
 *                             gpudb::create_table_true "true", a new partition
 *                             will be created for values which don't fall into
 *                             an existing partition.  Currently only supported
 *                             for <a
 *                             href="../../../concepts/tables/#partitioning-by-list"
 *                             target="_top">list partitions</a>.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref gpudb::create_table_ttl "create_table_ttl":
 *                             Sets the <a href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the table specified in
 *                             @a tableName.
 *                         <li>@ref gpudb::create_table_chunk_size
 *                             "create_table_chunk_size": Indicates the number
 *                             of records per chunk to be used for this table.
 *                         <li>@ref gpudb::create_table_chunk_column_max_memory
 *                             "create_table_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for this table.
 *                         <li>@ref gpudb::create_table_chunk_max_memory
 *                             "create_table_chunk_max_memory": Indicates the
 *                             target maximum data size for all columns in a
 *                             chunk to be used for this table.
 *                         <li>@ref gpudb::create_table_is_result_table
 *                             "create_table_is_result_table": Indicates
 *                             whether the table is a <a
 *                             href="../../../concepts/tables_memory_only/"
 *                             target="_top">memory-only table</a>. A result
 *                             table cannot contain columns with store_only or
 *                             text_search <a
 *                             href="../../../concepts/types/#data-handling"
 *                             target="_top">data-handling</a> or that are <a
 *                             href="../../../concepts/types/#primitive-types"
 *                             target="_top">non-charN strings</a>, and it will
 *                             not be retained if the server is restarted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_true
 *                                     "create_table_true"
 *                                 <li>@ref gpudb::create_table_false
 *                                     "create_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_false "create_table_false".
 *                         <li>@ref gpudb::create_table_strategy_definition
 *                             "create_table_strategy_definition": The <a
 *                             href="../../../rm/concepts/#tier-strategies"
 *                             target="_top">tier strategy</a> for the table
 *                             and its columns.
 *                         <li>@ref gpudb::create_table_is_virtual_union
 *                             "create_table_is_virtual_union":
 *                             &lt;DEVELOPER&gt;
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateTableResponse& createTable( const std::string& tableName,
                                  const std::string& typeId,
                                  const std::map<std::string, std::string>& options,
                                  CreateTableResponse& response_ ) const;

/**
 * Creates a new <a href="../../../concepts/external_tables/"
 * target="_top">external table</a>, which is a local database object whose
 * source data is located externally to the database.  The source data can be
 * located either in <a href="../../../tools/kifs/" target="_top">KiFS</a>; on
 * the cluster, accessible to the database; or remotely, accessible via a
 * pre-defined external <a href="../../../concepts/data_sources/"
 * target="_top">data source</a>.
 *
 * The external table can have its structure defined explicitly, via @ref
 * gpudb::CreateTableExternalRequest::createTableOptions "createTableOptions",
 * which contains many of the options from @ref
 * createTable(const CreateTableRequest&) const "createTable"; or defined
 * implicitly, inferred from the source data.
 *
 * @param[in] request_  @ref gpudb::CreateTableExternalRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateTableExternalResponse "Response" object containing
 *         the result of the operation.
 */
CreateTableExternalResponse createTableExternal( const CreateTableExternalRequest& request_ ) const;

/**
 * Creates a new <a href="../../../concepts/external_tables/"
 * target="_top">external table</a>, which is a local database object whose
 * source data is located externally to the database.  The source data can be
 * located either in <a href="../../../tools/kifs/" target="_top">KiFS</a>; on
 * the cluster, accessible to the database; or remotely, accessible via a
 * pre-defined external <a href="../../../concepts/data_sources/"
 * target="_top">data source</a>.
 *
 * The external table can have its structure defined explicitly, via @ref
 * gpudb::CreateTableExternalRequest::createTableOptions "createTableOptions",
 * which contains many of the options from @ref
 * createTable(const CreateTableRequest&) const "createTable"; or defined
 * implicitly, inferred from the source data.
 *
 * @param[in] request_  @ref gpudb::CreateTableExternalRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateTableExternalResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateTableExternalResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateTableExternalResponse& createTableExternal( const CreateTableExternalRequest& request_,
                                                  CreateTableExternalResponse& response_ ) const;

/**
 * Creates a new <a href="../../../concepts/external_tables/"
 * target="_top">external table</a>, which is a local database object whose
 * source data is located externally to the database.  The source data can be
 * located either in <a href="../../../tools/kifs/" target="_top">KiFS</a>; on
 * the cluster, accessible to the database; or remotely, accessible via a
 * pre-defined external <a href="../../../concepts/data_sources/"
 * target="_top">data source</a>.
 *
 * The external table can have its structure defined explicitly, via @a
 * createTableOptions, which contains many of the options from @ref
 * createTable(const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 * "createTable"; or defined implicitly, inferred from the source data.
 *
 * @param[in] tableName  Name of the table to be created, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a> and meeting <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.
 * @param[in] filepaths  A list of file paths from which data will be sourced;
 *                       For paths in <a href="../../../tools/kifs/"
 *                       target="_top">KiFS</a>, use the uri prefix of kifs://
 *                       followed by the path to a file or directory. File
 *                       matching by prefix is supported, e.g. kifs://dir/file
 *                       would match dir/file_1 and dir/file_2. When prefix
 *                       matching is used, the path must start with a full,
 *                       valid KiFS directory name.  If an external data source
 *                       is specified in @ref
 *                       gpudb::create_table_external_datasource_name
 *                       "datasource_name", these file paths must resolve to
 *                       accessible files at that data source location. Prefix
 *                       matching is supported. If the data source is hdfs,
 *                       prefixes must be aligned with directories, i.e.
 *                       partial file names will not match.  If no data source
 *                       is specified, the files are assumed to be local to the
 *                       database and must all be accessible to the gpudb user,
 *                       residing on the path (or relative to the path)
 *                       specified by the external files directory in the
 *                       Kinetica <a
 *                       href="../../../config/#config-main-external-files"
 *                       target="_top">configuration file</a>. Wildcards (*)
 *                       can be used to specify a group of files.  Prefix
 *                       matching is supported, the prefixes must be aligned
 *                       with directories.  If the first path ends in .tsv, the
 *                       text delimiter will be defaulted to a tab character.
 *                       If the first path ends in .psv, the text delimiter
 *                       will be defaulted to a pipe character (|).
 * @param[in] modifyColumns  Not implemented yet. The default value is an empty
 *                           map.
 * @param[in] createTableOptions  Options from @ref
 *                                createTable(const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                "createTable", allowing the structure of the
 *                                table to be defined independently of the data
 *                                source.
 *                                <ul>
 *                                    <li>@ref
 *                                        gpudb::create_table_external_type_id
 *                                        "create_table_external_type_id": ID
 *                                        of a currently registered <a
 *                                        href="../../../concepts/types/"
 *                                        target="_top">type</a>.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_no_error_if_exists
 *                                        "create_table_external_no_error_if_exists":
 *                                        If @ref
 *                                        gpudb::create_table_external_true
 *                                        "true", prevents an error from
 *                                        occurring if the table already exists
 *                                        and is of the given type.  If a table
 *                                        with the same name but a different
 *                                        type exists, it is still an error.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::create_table_external_true
 *                                                "create_table_external_true"
 *                                            <li>@ref
 *                                                gpudb::create_table_external_false
 *                                                "create_table_external_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::create_table_external_false
 *                                        "create_table_external_false".
 *                                    <li>@ref
 *                                        gpudb::create_table_external_is_replicated
 *                                        "create_table_external_is_replicated":
 *                                        Affects the <a
 *                                        href="../../../concepts/tables/#distribution"
 *                                        target="_top">distribution scheme</a>
 *                                        for the table's data.  If @ref
 *                                        gpudb::create_table_external_true
 *                                        "true" and the given table has no
 *                                        explicit <a
 *                                        href="../../../concepts/tables/#shard-key"
 *                                        target="_top">shard key</a> defined,
 *                                        the table will be <a
 *                                        href="../../../concepts/tables/#replication"
 *                                        target="_top">replicated</a>.  If
 *                                        @ref
 *                                        gpudb::create_table_external_false
 *                                        "false", the table will be <a
 *                                        href="../../../concepts/tables/#sharding"
 *                                        target="_top">sharded</a> according
 *                                        to the shard key specified in the
 *                                        given @ref
 *                                        gpudb::create_table_external_type_id
 *                                        "type_id", or <a
 *                                        href="../../../concepts/tables/#random-sharding"
 *                                        target="_top">randomly sharded</a>,
 *                                        if no shard key is specified. Note
 *                                        that a type containing a shard key
 *                                        cannot be used to create a replicated
 *                                        table.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::create_table_external_true
 *                                                "create_table_external_true"
 *                                            <li>@ref
 *                                                gpudb::create_table_external_false
 *                                                "create_table_external_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::create_table_external_false
 *                                        "create_table_external_false".
 *                                    <li>@ref
 *                                        gpudb::create_table_external_foreign_keys
 *                                        "create_table_external_foreign_keys":
 *                                        Semicolon-separated list of <a
 *                                        href="../../../concepts/tables/#foreign-keys"
 *                                        target="_top">foreign keys</a>, of
 *                                        the format '(source_column_name [,
 *                                        ...]) references
 *                                        target_table_name(primary_key_column_name
 *                                        [, ...]) [as foreign_key_name]'.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_foreign_shard_key
 *                                        "create_table_external_foreign_shard_key":
 *                                        Foreign shard key of the format
 *                                        'source_column references
 *                                        shard_by_column from
 *                                        target_table(primary_key_column)'.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_partition_type
 *                                        "create_table_external_partition_type":
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning"
 *                                        target="_top">Partitioning</a> scheme
 *                                        to use.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::create_table_external_RANGE
 *                                                "create_table_external_RANGE":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-range"
 *                                                target="_top">range
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::create_table_external_INTERVAL
 *                                                "create_table_external_INTERVAL":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-interval"
 *                                                target="_top">interval
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::create_table_external_LIST
 *                                                "create_table_external_LIST":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-list"
 *                                                target="_top">list
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::create_table_external_HASH
 *                                                "create_table_external_HASH":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-hash"
 *                                                target="_top">hash
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::create_table_external_SERIES
 *                                                "create_table_external_SERIES":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-series"
 *                                                target="_top">series
 *                                                partitioning</a>.
 *                                        </ul>
 *                                    <li>@ref
 *                                        gpudb::create_table_external_partition_keys
 *                                        "create_table_external_partition_keys":
 *                                        Comma-separated list of partition
 *                                        keys, which are the columns or column
 *                                        expressions by which records will be
 *                                        assigned to partitions defined by
 *                                        @ref
 *                                        gpudb::create_table_external_partition_definitions
 *                                        "partition_definitions".
 *                                    <li>@ref
 *                                        gpudb::create_table_external_partition_definitions
 *                                        "create_table_external_partition_definitions":
 *                                        Comma-separated list of partition
 *                                        definitions, whose format depends on
 *                                        the choice of @ref
 *                                        gpudb::create_table_external_partition_type
 *                                        "partition_type".  See <a
 *                                        href="../../../concepts/tables/#partitioning-by-range"
 *                                        target="_top">range partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-interval"
 *                                        target="_top">interval
 *                                        partitioning</a>, <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-hash"
 *                                        target="_top">hash partitioning</a>,
 *                                        or <a
 *                                        href="../../../concepts/tables/#partitioning-by-series"
 *                                        target="_top">series partitioning</a>
 *                                        for example formats.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_is_automatic_partition
 *                                        "create_table_external_is_automatic_partition":
 *                                        If @ref
 *                                        gpudb::create_table_external_true
 *                                        "true", a new partition will be
 *                                        created for values which don't fall
 *                                        into an existing partition.
 *                                        Currently, only supported for <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitions</a>.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::create_table_external_true
 *                                                "create_table_external_true"
 *                                            <li>@ref
 *                                                gpudb::create_table_external_false
 *                                                "create_table_external_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::create_table_external_false
 *                                        "create_table_external_false".
 *                                    <li>@ref gpudb::create_table_external_ttl
 *                                        "create_table_external_ttl": Sets the
 *                                        <a href="../../../concepts/ttl/"
 *                                        target="_top">TTL</a> of the table
 *                                        specified in @a tableName.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_chunk_size
 *                                        "create_table_external_chunk_size":
 *                                        Indicates the number of records per
 *                                        chunk to be used for this table.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_chunk_column_max_memory
 *                                        "create_table_external_chunk_column_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for each column in a chunk to be
 *                                        used for this table.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_chunk_max_memory
 *                                        "create_table_external_chunk_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for all columns in a chunk to be
 *                                        used for this table.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_is_result_table
 *                                        "create_table_external_is_result_table":
 *                                        Indicates whether the table is a <a
 *                                        href="../../../concepts/tables_memory_only/"
 *                                        target="_top">memory-only table</a>.
 *                                        A result table cannot contain columns
 *                                        with text_search <a
 *                                        href="../../../concepts/types/#data-handling"
 *                                        target="_top">data-handling</a>, and
 *                                        it will not be retained if the server
 *                                        is restarted.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::create_table_external_true
 *                                                "create_table_external_true"
 *                                            <li>@ref
 *                                                gpudb::create_table_external_false
 *                                                "create_table_external_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::create_table_external_false
 *                                        "create_table_external_false".
 *                                    <li>@ref
 *                                        gpudb::create_table_external_strategy_definition
 *                                        "create_table_external_strategy_definition":
 *                                        The <a
 *                                        href="../../../rm/concepts/#tier-strategies"
 *                                        target="_top">tier strategy</a> for
 *                                        the table and its columns.
 *                                </ul>
 *                                The default value is an empty map.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::create_table_external_bad_record_table_name
 *                             "create_table_external_bad_record_table_name":
 *                             Name of a table to which records that were
 *                             rejected are written. The bad-record-table has
 *                             the following columns: line_number (long),
 *                             line_rejected (string), error_message (string).
 *                             When @ref
 *                             gpudb::create_table_external_error_handling
 *                             "error_handling" is @ref
 *                             gpudb::create_table_external_abort "abort", bad
 *                             records table is not populated.
 *                         <li>@ref
 *                             gpudb::create_table_external_bad_record_table_limit
 *                             "create_table_external_bad_record_table_limit":
 *                             A positive integer indicating the maximum number
 *                             of records that can be written to the
 *                             bad-record-table. The default value is '10000'.
 *                         <li>@ref
 *                             gpudb::create_table_external_bad_record_table_limit_per_input
 *                             "create_table_external_bad_record_table_limit_per_input":
 *                             For subscriptions, a positive integer indicating
 *                             the maximum number of records that can be
 *                             written to the bad-record-table per
 *                             file/payload. Default value will be @ref
 *                             gpudb::create_table_external_bad_record_table_limit
 *                             "bad_record_table_limit" and total size of the
 *                             table per rank is limited to @ref
 *                             gpudb::create_table_external_bad_record_table_limit
 *                             "bad_record_table_limit".
 *                         <li>@ref gpudb::create_table_external_batch_size
 *                             "create_table_external_batch_size": Number of
 *                             records to insert per batch when inserting data.
 *                             The default value is '50000'.
 *                         <li>@ref gpudb::create_table_external_column_formats
 *                             "create_table_external_column_formats": For each
 *                             target column specified, applies the
 *                             column-property-bound format to the source data
 *                             loaded into that column.  Each column format
 *                             will contain a mapping of one or more of its
 *                             column properties to an appropriate format for
 *                             each property.  Currently supported column
 *                             properties include date, time, & datetime. The
 *                             parameter value must be formatted as a JSON
 *                             string of maps of column names to maps of column
 *                             properties to their corresponding column
 *                             formats, e.g., '{ "order_date" : { "date" :
 *                             "%Y.%m.%d" }, "order_time" : { "time" :
 *                             "%H:%M:%S" } }'.  See @ref
 *                             gpudb::create_table_external_default_column_formats
 *                             "default_column_formats" for valid format
 *                             syntax.
 *                         <li>@ref
 *                             gpudb::create_table_external_columns_to_load
 *                             "create_table_external_columns_to_load":
 *                             Specifies a comma-delimited list of columns from
 *                             the source data to load.  If more than one file
 *                             is being loaded, this list applies to all files.
 *                             Column numbers can be specified discretely or as
 *                             a range.  For example, a value of '5,7,1..3'
 *                             will insert values from the fifth column in the
 *                             source data into the first column in the target
 *                             table, from the seventh column in the source
 *                             data into the second column in the target table,
 *                             and from the first through third columns in the
 *                             source data into the third through fifth columns
 *                             in the target table.  If the source data
 *                             contains a header, column names matching the
 *                             file header names may be provided instead of
 *                             column numbers.  If the target table doesn't
 *                             exist, the table will be created with the
 *                             columns in this order.  If the target table does
 *                             exist with columns in a different order than the
 *                             source data, this list can be used to match the
 *                             order of the target table.  For example, a value
 *                             of 'C, B, A' will create a three column table
 *                             with column C, followed by column B, followed by
 *                             column A; or will insert those fields in that
 *                             order into a table created with columns in that
 *                             order.  If the target table exists, the column
 *                             names must match the source data field names for
 *                             a name-mapping to be successful.  Mutually
 *                             exclusive with @ref
 *                             gpudb::create_table_external_columns_to_skip
 *                             "columns_to_skip".
 *                         <li>@ref
 *                             gpudb::create_table_external_columns_to_skip
 *                             "create_table_external_columns_to_skip":
 *                             Specifies a comma-delimited list of columns from
 *                             the source data to skip.  Mutually exclusive
 *                             with @ref
 *                             gpudb::create_table_external_columns_to_load
 *                             "columns_to_load".
 *                         <li>@ref
 *                             gpudb::create_table_external_compression_type
 *                             "create_table_external_compression_type": Source
 *                             data compression type.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_none
 *                                     "create_table_external_none": No
 *                                     compression.
 *                                 <li>@ref gpudb::create_table_external_auto
 *                                     "create_table_external_auto": Auto
 *                                     detect compression type
 *                                 <li>@ref gpudb::create_table_external_gzip
 *                                     "create_table_external_gzip": gzip file
 *                                     compression.
 *                                 <li>@ref gpudb::create_table_external_bzip2
 *                                     "create_table_external_bzip2": bzip2
 *                                     file compression.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_auto
 *                             "create_table_external_auto".
 *                         <li>@ref
 *                             gpudb::create_table_external_datasource_name
 *                             "create_table_external_datasource_name": Name of
 *                             an existing external data source from which data
 *                             file(s) specified in @a filepaths will be loaded
 *                         <li>@ref
 *                             gpudb::create_table_external_default_column_formats
 *                             "create_table_external_default_column_formats":
 *                             Specifies the default format to be applied to
 *                             source data loaded into columns with the
 *                             corresponding column property.  Currently
 *                             supported column properties include date, time,
 *                             & datetime.  This default column-property-bound
 *                             format can be overridden by specifying a column
 *                             property & format for a given target column in
 *                             @ref gpudb::create_table_external_column_formats
 *                             "column_formats". For each specified annotation,
 *                             the format will apply to all columns with that
 *                             annotation unless a custom @ref
 *                             gpudb::create_table_external_column_formats
 *                             "column_formats" for that annotation is
 *                             specified.  The parameter value must be
 *                             formatted as a JSON string that is a map of
 *                             column properties to their respective column
 *                             formats, e.g., '{ "date" : "%Y.%m.%d", "time" :
 *                             "%H:%M:%S" }'.  Column formats are specified as
 *                             a string of control characters and plain text.
 *                             The supported control characters are 'Y', 'm',
 *                             'd', 'H', 'M', 'S', and 's', which follow the
 *                             Linux 'strptime()' specification, as well as
 *                             's', which specifies seconds and fractional
 *                             seconds (though the fractional component will be
 *                             truncated past milliseconds).  Formats for the
 *                             'date' annotation must include the 'Y', 'm', and
 *                             'd' control characters. Formats for the 'time'
 *                             annotation must include the 'H', 'M', and either
 *                             'S' or 's' (but not both) control characters.
 *                             Formats for the 'datetime' annotation meet both
 *                             the 'date' and 'time' control character
 *                             requirements. For example, '{"datetime" :
 *                             "%m/%d/%Y %H:%M:%S" }' would be used to
 *                             interpret text as "05/04/2000 12:12:11"
 *                         <li>@ref gpudb::create_table_external_error_handling
 *                             "create_table_external_error_handling":
 *                             Specifies how errors should be handled upon
 *                             insertion.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_table_external_permissive
 *                                     "create_table_external_permissive":
 *                                     Records with missing columns are
 *                                     populated with nulls if possible;
 *                                     otherwise, the malformed records are
 *                                     skipped.
 *                                 <li>@ref
 *                                     gpudb::create_table_external_ignore_bad_records
 *                                     "create_table_external_ignore_bad_records":
 *                                     Malformed records are skipped.
 *                                 <li>@ref gpudb::create_table_external_abort
 *                                     "create_table_external_abort": Stops
 *                                     current insertion and aborts entire
 *                                     operation when an error is encountered.
 *                                     Primary key collisions are considered
 *                                     abortable errors in this mode.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_abort
 *                             "create_table_external_abort".
 *                         <li>@ref
 *                             gpudb::create_table_external_external_table_type
 *                             "create_table_external_external_table_type":
 *                             Specifies whether the external table holds a
 *                             local copy of the external data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_table_external_materialized
 *                                     "create_table_external_materialized":
 *                                     Loads a copy of the external data into
 *                                     the database, refreshed on demand
 *                                 <li>@ref
 *                                     gpudb::create_table_external_logical
 *                                     "create_table_external_logical":
 *                                     External data will not be loaded into
 *                                     the database; the data will be retrieved
 *                                     from the source upon servicing each
 *                                     query against the external table
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_materialized
 *                             "create_table_external_materialized".
 *                         <li>@ref gpudb::create_table_external_file_type
 *                             "create_table_external_file_type": Specifies the
 *                             type of the file(s) whose records will be
 *                             inserted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_avro
 *                                     "create_table_external_avro": Avro file
 *                                     format
 *                                 <li>@ref
 *                                     gpudb::create_table_external_delimited_text
 *                                     "create_table_external_delimited_text":
 *                                     Delimited text file format; e.g., CSV,
 *                                     TSV, PSV, etc.
 *                                 <li>@ref gpudb::create_table_external_gdb
 *                                     "create_table_external_gdb": Esri/GDB
 *                                     file format
 *                                 <li>@ref gpudb::create_table_external_json
 *                                     "create_table_external_json": Json file
 *                                     format
 *                                 <li>@ref
 *                                     gpudb::create_table_external_parquet
 *                                     "create_table_external_parquet": Apache
 *                                     Parquet file format
 *                                 <li>@ref
 *                                     gpudb::create_table_external_shapefile
 *                                     "create_table_external_shapefile":
 *                                     ShapeFile file format
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "create_table_external_delimited_text".
 *                         <li>@ref
 *                             gpudb::create_table_external_flatten_columns
 *                             "create_table_external_flatten_columns":
 *                             Specifies how to handle nested columns.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true": Break up
 *                                     nested columns to multiple columns
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false": Treat
 *                                     nested columns as json columns instead
 *                                     of flattening
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                         <li>@ref
 *                             gpudb::create_table_external_gdal_configuration_options
 *                             "create_table_external_gdal_configuration_options":
 *                             Comma separated list of gdal conf options, for
 *                             the specific requets: key=value
 *                         <li>@ref
 *                             gpudb::create_table_external_ignore_existing_pk
 *                             "create_table_external_ignore_existing_pk":
 *                             Specifies the record collision error-suppression
 *                             policy for inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             not in upsert mode (upsert mode is disabled when
 *                             @ref
 *                             gpudb::create_table_external_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::create_table_external_false "false").  If
 *                             set to @ref gpudb::create_table_external_true
 *                             "true", any record being inserted that is
 *                             rejected for having primary key values that
 *                             match those of an existing table record will be
 *                             ignored with no error generated.  If @ref
 *                             gpudb::create_table_external_false "false", the
 *                             rejection of any record for having primary key
 *                             values matching an existing record will result
 *                             in an error being reported, as determined by
 *                             @ref gpudb::create_table_external_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key or if upsert mode is in
 *                             effect (@ref
 *                             gpudb::create_table_external_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::create_table_external_true "true"), then
 *                             this option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true": Ignore new
 *                                     records whose primary key values collide
 *                                     with those of existing records
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false": Treat as
 *                                     errors any new records whose primary key
 *                                     values collide with those of existing
 *                                     records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                         <li>@ref gpudb::create_table_external_ingestion_mode
 *                             "create_table_external_ingestion_mode": Whether
 *                             to do a full load, dry run, or perform a type
 *                             inference on the source data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_full
 *                                     "create_table_external_full": Run a type
 *                                     inference on the source data (if needed)
 *                                     and ingest
 *                                 <li>@ref
 *                                     gpudb::create_table_external_dry_run
 *                                     "create_table_external_dry_run": Does
 *                                     not load data, but walks through the
 *                                     source data and determines the number of
 *                                     valid records, taking into account the
 *                                     current mode of @ref
 *                                     gpudb::create_table_external_error_handling
 *                                     "error_handling".
 *                                 <li>@ref
 *                                     gpudb::create_table_external_type_inference_only
 *                                     "create_table_external_type_inference_only":
 *                                     Infer the type of the source data and
 *                                     return, without ingesting any data.  The
 *                                     inferred type is returned in the
 *                                     response.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_full
 *                             "create_table_external_full".
 *                         <li>@ref
 *                             gpudb::create_table_external_jdbc_fetch_size
 *                             "create_table_external_jdbc_fetch_size": The
 *                             JDBC fetch size, which determines how many rows
 *                             to fetch per round trip. The default value is
 *                             '50000'.
 *                         <li>@ref
 *                             gpudb::create_table_external_kafka_consumers_per_rank
 *                             "create_table_external_kafka_consumers_per_rank":
 *                             Number of Kafka consumer threads per rank (valid
 *                             range 1-6). The default value is '1'.
 *                         <li>@ref gpudb::create_table_external_kafka_group_id
 *                             "create_table_external_kafka_group_id": The
 *                             group id to be used when consuming data from a
 *                             Kafka topic (valid only for Kafka datasource
 *                             subscriptions).
 *                         <li>@ref
 *                             gpudb::create_table_external_kafka_offset_reset_policy
 *                             "create_table_external_kafka_offset_reset_policy":
 *                             Policy to determine whether the Kafka data
 *                             consumption starts either at earliest offset or
 *                             latest offset.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_table_external_earliest
 *                                     "create_table_external_earliest"
 *                                 <li>@ref gpudb::create_table_external_latest
 *                                     "create_table_external_latest"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_earliest
 *                             "create_table_external_earliest".
 *                         <li>@ref
 *                             gpudb::create_table_external_kafka_optimistic_ingest
 *                             "create_table_external_kafka_optimistic_ingest":
 *                             Enable optimistic ingestion where Kafka topic
 *                             offsets and table data are committed
 *                             independently to achieve parallelism.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true"
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                         <li>@ref
 *                             gpudb::create_table_external_kafka_subscription_cancel_after
 *                             "create_table_external_kafka_subscription_cancel_after":
 *                             Sets the Kafka subscription lifespan (in
 *                             minutes). Expired subscription will be cancelled
 *                             automatically.
 *                         <li>@ref
 *                             gpudb::create_table_external_kafka_type_inference_fetch_timeout
 *                             "create_table_external_kafka_type_inference_fetch_timeout":
 *                             Maximum time to collect Kafka messages before
 *                             type inferencing on the set of them.
 *                         <li>@ref gpudb::create_table_external_layer
 *                             "create_table_external_layer": Geo files
 *                             layer(s) name(s): comma separated.
 *                         <li>@ref gpudb::create_table_external_loading_mode
 *                             "create_table_external_loading_mode": Scheme for
 *                             distributing the extraction and loading of data
 *                             from the source data file(s). This option
 *                             applies only when loading files that are local
 *                             to the database.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_head
 *                                     "create_table_external_head": The head
 *                                     node loads all data. All files must be
 *                                     available to the head node.
 *                                 <li>@ref
 *                                     gpudb::create_table_external_distributed_shared
 *                                     "create_table_external_distributed_shared":
 *                                     The head node coordinates loading data
 *                                     by worker processes across all nodes
 *                                     from shared files available to all
 *                                     workers.  NOTE:  Instead of existing on
 *                                     a shared source, the files can be
 *                                     duplicated on a source local to each
 *                                     host to improve performance, though the
 *                                     files must appear as the same data set
 *                                     from the perspective of all hosts
 *                                     performing the load.
 *                                 <li>@ref
 *                                     gpudb::create_table_external_distributed_local
 *                                     "create_table_external_distributed_local":
 *                                     A single worker process on each node
 *                                     loads all files that are available to
 *                                     it. This option works best when each
 *                                     worker loads files from its own file
 *                                     system, to maximize performance. In
 *                                     order to avoid data duplication, either
 *                                     each worker performing the load needs to
 *                                     have visibility to a set of files unique
 *                                     to it (no file is visible to more than
 *                                     one node) or the target table needs to
 *                                     have a primary key (which will allow the
 *                                     worker to automatically deduplicate
 *                                     data).  NOTE:  If the target table
 *                                     doesn't exist, the table structure will
 *                                     be determined by the head node. If the
 *                                     head node has no files local to it, it
 *                                     will be unable to determine the
 *                                     structure and the request will fail.  If
 *                                     the head node is configured to have no
 *                                     worker processes, no data strictly
 *                                     accessible to the head node will be
 *                                     loaded.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_head
 *                             "create_table_external_head".
 *                         <li>@ref
 *                             gpudb::create_table_external_local_time_offset
 *                             "create_table_external_local_time_offset": Apply
 *                             an offset to Avro local timestamp columns.
 *                         <li>@ref
 *                             gpudb::create_table_external_max_records_to_load
 *                             "create_table_external_max_records_to_load":
 *                             Limit the number of records to load in this
 *                             request: if this number is larger than @ref
 *                             gpudb::create_table_external_batch_size
 *                             "batch_size", then the number of records loaded
 *                             will be limited to the next whole number of @ref
 *                             gpudb::create_table_external_batch_size
 *                             "batch_size" (per working thread).
 *                         <li>@ref
 *                             gpudb::create_table_external_num_tasks_per_rank
 *                             "create_table_external_num_tasks_per_rank":
 *                             Number of tasks for reading file per rank.
 *                             Default will be system configuration parameter,
 *                             external_file_reader_num_tasks.
 *                         <li>@ref gpudb::create_table_external_poll_interval
 *                             "create_table_external_poll_interval": If @ref
 *                             gpudb::create_table_external_true "true", the
 *                             number of seconds between attempts to load
 *                             external files into the table.  If zero, polling
 *                             will be continuous as long as data is found.  If
 *                             no data is found, the interval will steadily
 *                             increase to a maximum of 60 seconds. The default
 *                             value is '0'.
 *                         <li>@ref gpudb::create_table_external_primary_keys
 *                             "create_table_external_primary_keys": Comma
 *                             separated list of column names to set as primary
 *                             keys, when not specified in the type.
 *                         <li>@ref gpudb::create_table_external_refresh_method
 *                             "create_table_external_refresh_method": Method
 *                             by which the table can be refreshed from its
 *                             source data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_manual
 *                                     "create_table_external_manual": Refresh
 *                                     only occurs when manually requested by
 *                                     invoking the refresh action of @ref
 *                                     alterTable(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                     "alterTable" on this table.
 *                                 <li>@ref
 *                                     gpudb::create_table_external_on_start
 *                                     "create_table_external_on_start":
 *                                     Refresh table on database startup and
 *                                     when manually requested by invoking the
 *                                     refresh action of @ref
 *                                     alterTable(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                     "alterTable" on this table.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_manual
 *                             "create_table_external_manual".
 *                         <li>@ref
 *                             gpudb::create_table_external_schema_registry_schema_name
 *                             "create_table_external_schema_registry_schema_name":
 *                             Name of the Avro schema in the schema registry
 *                             to use when reading Avro records.
 *                         <li>@ref gpudb::create_table_external_shard_keys
 *                             "create_table_external_shard_keys": Comma
 *                             separated list of column names to set as shard
 *                             keys, when not specified in the type.
 *                         <li>@ref gpudb::create_table_external_skip_lines
 *                             "create_table_external_skip_lines": Skip number
 *                             of lines from begining of file.
 *                         <li>@ref gpudb::create_table_external_subscribe
 *                             "create_table_external_subscribe": Continuously
 *                             poll the data source to check for new data and
 *                             load it into the table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true"
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                         <li>@ref
 *                             gpudb::create_table_external_table_insert_mode
 *                             "create_table_external_table_insert_mode":
 *                             Insertion scheme to use when inserting records
 *                             from multiple shapefiles.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_single
 *                                     "create_table_external_single": Insert
 *                                     all records into a single table.
 *                                 <li>@ref
 *                                     gpudb::create_table_external_table_per_file
 *                                     "create_table_external_table_per_file":
 *                                     Insert records from each file into a new
 *                                     table corresponding to that file.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_single
 *                             "create_table_external_single".
 *                         <li>@ref
 *                             gpudb::create_table_external_text_comment_string
 *                             "create_table_external_text_comment_string":
 *                             Specifies the character string that should be
 *                             interpreted as a comment line prefix in the
 *                             source data.  All lines in the data starting
 *                             with the provided string are ignored.  For @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only. The default value is '#'.
 *                         <li>@ref gpudb::create_table_external_text_delimiter
 *                             "create_table_external_text_delimiter":
 *                             Specifies the character delimiting field values
 *                             in the source data and field names in the header
 *                             (if present).  For @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only. The default value is ','.
 *                         <li>@ref
 *                             gpudb::create_table_external_text_escape_character
 *                             "create_table_external_text_escape_character":
 *                             Specifies the character that is used to escape
 *                             other characters in the source data.  An 'a',
 *                             'b', 'f', 'n', 'r', 't', or 'v' preceded by an
 *                             escape character will be interpreted as the
 *                             ASCII bell, backspace, form feed, line feed,
 *                             carriage return, horizontal tab, & vertical tab,
 *                             respectively.  For example, the escape character
 *                             followed by an 'n' will be interpreted as a
 *                             newline within a field value.  The escape
 *                             character can also be used to escape the quoting
 *                             character, and will be treated as an escape
 *                             character whether it is within a quoted field
 *                             value or not.  For @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only.
 *                         <li>@ref
 *                             gpudb::create_table_external_text_has_header
 *                             "create_table_external_text_has_header":
 *                             Indicates whether the source data contains a
 *                             header row.  For @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true"
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_true
 *                             "create_table_external_true".
 *                         <li>@ref
 *                             gpudb::create_table_external_text_header_property_delimiter
 *                             "create_table_external_text_header_property_delimiter":
 *                             Specifies the delimiter for <a
 *                             href="../../../concepts/types/#column-properties"
 *                             target="_top">column properties</a> in the
 *                             header row (if present).  Cannot be set to same
 *                             value as @ref
 *                             gpudb::create_table_external_text_delimiter
 *                             "text_delimiter".  For @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only. The default value is '|'.
 *                         <li>@ref
 *                             gpudb::create_table_external_text_null_string
 *                             "create_table_external_text_null_string":
 *                             Specifies the character string that should be
 *                             interpreted as a null value in the source data.
 *                             For @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only. The default value is '\\N'.
 *                         <li>@ref
 *                             gpudb::create_table_external_text_quote_character
 *                             "create_table_external_text_quote_character":
 *                             Specifies the character that should be
 *                             interpreted as a field value quoting character
 *                             in the source data.  The character must appear
 *                             at beginning and end of field value to take
 *                             effect.  Delimiters within quoted fields are
 *                             treated as literals and not delimiters.  Within
 *                             a quoted field, two consecutive quote characters
 *                             will be interpreted as a single literal quote
 *                             character, effectively escaping it.  To not have
 *                             a quote character, specify an empty string.  For
 *                             @ref gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only. The default value is '"'.
 *                         <li>@ref
 *                             gpudb::create_table_external_text_search_columns
 *                             "create_table_external_text_search_columns": Add
 *                             'text_search' property to internally inferenced
 *                             string columns. Comma seperated list of column
 *                             names or '*' for all columns. To add
 *                             'text_search' property only to string columns
 *                             greater than or equal to a minimum size, also
 *                             set the @ref
 *                             gpudb::create_table_external_text_search_min_column_length
 *                             "text_search_min_column_length"
 *                         <li>@ref
 *                             gpudb::create_table_external_text_search_min_column_length
 *                             "create_table_external_text_search_min_column_length":
 *                             Set the minimum column size for strings to apply
 *                             the 'text_search' property to. Used only when
 *                             @ref
 *                             gpudb::create_table_external_text_search_columns
 *                             "text_search_columns" has a value.
 *                         <li>@ref
 *                             gpudb::create_table_external_truncate_strings
 *                             "create_table_external_truncate_strings": If set
 *                             to @ref gpudb::create_table_external_true
 *                             "true", truncate string values that are longer
 *                             than the column's type size.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true"
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                         <li>@ref gpudb::create_table_external_truncate_table
 *                             "create_table_external_truncate_table": If set
 *                             to @ref gpudb::create_table_external_true
 *                             "true", truncates the table specified by @a
 *                             tableName prior to loading the file(s).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true"
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                         <li>@ref
 *                             gpudb::create_table_external_type_inference_mode
 *                             "create_table_external_type_inference_mode":
 *                             Optimize type inferencing for either speed or
 *                             accuracy.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_table_external_accuracy
 *                                     "create_table_external_accuracy": Scans
 *                                     data to get exactly-typed & sized
 *                                     columns for all data scanned.
 *                                 <li>@ref gpudb::create_table_external_speed
 *                                     "create_table_external_speed": Scans
 *                                     data and picks the widest possible
 *                                     column types so that 'all' values will
 *                                     fit with minimum data scanned
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_speed
 *                             "create_table_external_speed".
 *                         <li>@ref gpudb::create_table_external_remote_query
 *                             "create_table_external_remote_query": Remote SQL
 *                             query from which data will be sourced
 *                         <li>@ref
 *                             gpudb::create_table_external_remote_query_filter_column
 *                             "create_table_external_remote_query_filter_column":
 *                             Name of column to be used for splitting @ref
 *                             gpudb::create_table_external_remote_query
 *                             "remote_query" into multiple sub-queries using
 *                             the data distribution of given column
 *                         <li>@ref
 *                             gpudb::create_table_external_remote_query_increasing_column
 *                             "create_table_external_remote_query_increasing_column":
 *                             Column on subscribed remote query result that
 *                             will increase for new records (e.g., TIMESTAMP).
 *                         <li>@ref
 *                             gpudb::create_table_external_remote_query_partition_column
 *                             "create_table_external_remote_query_partition_column":
 *                             Alias name for @ref
 *                             gpudb::create_table_external_remote_query_filter_column
 *                             "remote_query_filter_column".
 *                         <li>@ref
 *                             gpudb::create_table_external_update_on_existing_pk
 *                             "create_table_external_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::create_table_external_true "true", any
 *                             existing table record with primary key values
 *                             that match those of a record being inserted will
 *                             be replaced by that new record (the new data
 *                             will be 'upserted'). If set to @ref
 *                             gpudb::create_table_external_false "false", any
 *                             existing table record with primary key values
 *                             that match those of a record being inserted will
 *                             remain unchanged, while the new record will be
 *                             rejected and the error handled as determined by
 *                             @ref
 *                             gpudb::create_table_external_ignore_existing_pk
 *                             "ignore_existing_pk" & @ref
 *                             gpudb::create_table_external_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key, then this option has no
 *                             effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true": Upsert new
 *                                     records when primary keys match existing
 *                                     records
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false": Reject
 *                                     new records when primary keys match
 *                                     existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateTableExternalResponse "Response" object containing
 *         the result of the operation.
 */
CreateTableExternalResponse createTableExternal( const std::string& tableName,
                                                 const std::vector<std::string>& filepaths,
                                                 const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                 const std::map<std::string, std::string>& createTableOptions,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new <a href="../../../concepts/external_tables/"
 * target="_top">external table</a>, which is a local database object whose
 * source data is located externally to the database.  The source data can be
 * located either in <a href="../../../tools/kifs/" target="_top">KiFS</a>; on
 * the cluster, accessible to the database; or remotely, accessible via a
 * pre-defined external <a href="../../../concepts/data_sources/"
 * target="_top">data source</a>.
 *
 * The external table can have its structure defined explicitly, via @a
 * createTableOptions, which contains many of the options from @ref
 * createTable(const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 * "createTable"; or defined implicitly, inferred from the source data.
 *
 * @param[in] tableName  Name of the table to be created, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a> and meeting <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.
 * @param[in] filepaths  A list of file paths from which data will be sourced;
 *                       For paths in <a href="../../../tools/kifs/"
 *                       target="_top">KiFS</a>, use the uri prefix of kifs://
 *                       followed by the path to a file or directory. File
 *                       matching by prefix is supported, e.g. kifs://dir/file
 *                       would match dir/file_1 and dir/file_2. When prefix
 *                       matching is used, the path must start with a full,
 *                       valid KiFS directory name.  If an external data source
 *                       is specified in @ref
 *                       gpudb::create_table_external_datasource_name
 *                       "datasource_name", these file paths must resolve to
 *                       accessible files at that data source location. Prefix
 *                       matching is supported. If the data source is hdfs,
 *                       prefixes must be aligned with directories, i.e.
 *                       partial file names will not match.  If no data source
 *                       is specified, the files are assumed to be local to the
 *                       database and must all be accessible to the gpudb user,
 *                       residing on the path (or relative to the path)
 *                       specified by the external files directory in the
 *                       Kinetica <a
 *                       href="../../../config/#config-main-external-files"
 *                       target="_top">configuration file</a>. Wildcards (*)
 *                       can be used to specify a group of files.  Prefix
 *                       matching is supported, the prefixes must be aligned
 *                       with directories.  If the first path ends in .tsv, the
 *                       text delimiter will be defaulted to a tab character.
 *                       If the first path ends in .psv, the text delimiter
 *                       will be defaulted to a pipe character (|).
 * @param[in] modifyColumns  Not implemented yet. The default value is an empty
 *                           map.
 * @param[in] createTableOptions  Options from @ref
 *                                createTable(const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                "createTable", allowing the structure of the
 *                                table to be defined independently of the data
 *                                source.
 *                                <ul>
 *                                    <li>@ref
 *                                        gpudb::create_table_external_type_id
 *                                        "create_table_external_type_id": ID
 *                                        of a currently registered <a
 *                                        href="../../../concepts/types/"
 *                                        target="_top">type</a>.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_no_error_if_exists
 *                                        "create_table_external_no_error_if_exists":
 *                                        If @ref
 *                                        gpudb::create_table_external_true
 *                                        "true", prevents an error from
 *                                        occurring if the table already exists
 *                                        and is of the given type.  If a table
 *                                        with the same name but a different
 *                                        type exists, it is still an error.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::create_table_external_true
 *                                                "create_table_external_true"
 *                                            <li>@ref
 *                                                gpudb::create_table_external_false
 *                                                "create_table_external_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::create_table_external_false
 *                                        "create_table_external_false".
 *                                    <li>@ref
 *                                        gpudb::create_table_external_is_replicated
 *                                        "create_table_external_is_replicated":
 *                                        Affects the <a
 *                                        href="../../../concepts/tables/#distribution"
 *                                        target="_top">distribution scheme</a>
 *                                        for the table's data.  If @ref
 *                                        gpudb::create_table_external_true
 *                                        "true" and the given table has no
 *                                        explicit <a
 *                                        href="../../../concepts/tables/#shard-key"
 *                                        target="_top">shard key</a> defined,
 *                                        the table will be <a
 *                                        href="../../../concepts/tables/#replication"
 *                                        target="_top">replicated</a>.  If
 *                                        @ref
 *                                        gpudb::create_table_external_false
 *                                        "false", the table will be <a
 *                                        href="../../../concepts/tables/#sharding"
 *                                        target="_top">sharded</a> according
 *                                        to the shard key specified in the
 *                                        given @ref
 *                                        gpudb::create_table_external_type_id
 *                                        "type_id", or <a
 *                                        href="../../../concepts/tables/#random-sharding"
 *                                        target="_top">randomly sharded</a>,
 *                                        if no shard key is specified. Note
 *                                        that a type containing a shard key
 *                                        cannot be used to create a replicated
 *                                        table.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::create_table_external_true
 *                                                "create_table_external_true"
 *                                            <li>@ref
 *                                                gpudb::create_table_external_false
 *                                                "create_table_external_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::create_table_external_false
 *                                        "create_table_external_false".
 *                                    <li>@ref
 *                                        gpudb::create_table_external_foreign_keys
 *                                        "create_table_external_foreign_keys":
 *                                        Semicolon-separated list of <a
 *                                        href="../../../concepts/tables/#foreign-keys"
 *                                        target="_top">foreign keys</a>, of
 *                                        the format '(source_column_name [,
 *                                        ...]) references
 *                                        target_table_name(primary_key_column_name
 *                                        [, ...]) [as foreign_key_name]'.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_foreign_shard_key
 *                                        "create_table_external_foreign_shard_key":
 *                                        Foreign shard key of the format
 *                                        'source_column references
 *                                        shard_by_column from
 *                                        target_table(primary_key_column)'.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_partition_type
 *                                        "create_table_external_partition_type":
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning"
 *                                        target="_top">Partitioning</a> scheme
 *                                        to use.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::create_table_external_RANGE
 *                                                "create_table_external_RANGE":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-range"
 *                                                target="_top">range
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::create_table_external_INTERVAL
 *                                                "create_table_external_INTERVAL":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-interval"
 *                                                target="_top">interval
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::create_table_external_LIST
 *                                                "create_table_external_LIST":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-list"
 *                                                target="_top">list
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::create_table_external_HASH
 *                                                "create_table_external_HASH":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-hash"
 *                                                target="_top">hash
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::create_table_external_SERIES
 *                                                "create_table_external_SERIES":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-series"
 *                                                target="_top">series
 *                                                partitioning</a>.
 *                                        </ul>
 *                                    <li>@ref
 *                                        gpudb::create_table_external_partition_keys
 *                                        "create_table_external_partition_keys":
 *                                        Comma-separated list of partition
 *                                        keys, which are the columns or column
 *                                        expressions by which records will be
 *                                        assigned to partitions defined by
 *                                        @ref
 *                                        gpudb::create_table_external_partition_definitions
 *                                        "partition_definitions".
 *                                    <li>@ref
 *                                        gpudb::create_table_external_partition_definitions
 *                                        "create_table_external_partition_definitions":
 *                                        Comma-separated list of partition
 *                                        definitions, whose format depends on
 *                                        the choice of @ref
 *                                        gpudb::create_table_external_partition_type
 *                                        "partition_type".  See <a
 *                                        href="../../../concepts/tables/#partitioning-by-range"
 *                                        target="_top">range partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-interval"
 *                                        target="_top">interval
 *                                        partitioning</a>, <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-hash"
 *                                        target="_top">hash partitioning</a>,
 *                                        or <a
 *                                        href="../../../concepts/tables/#partitioning-by-series"
 *                                        target="_top">series partitioning</a>
 *                                        for example formats.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_is_automatic_partition
 *                                        "create_table_external_is_automatic_partition":
 *                                        If @ref
 *                                        gpudb::create_table_external_true
 *                                        "true", a new partition will be
 *                                        created for values which don't fall
 *                                        into an existing partition.
 *                                        Currently, only supported for <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitions</a>.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::create_table_external_true
 *                                                "create_table_external_true"
 *                                            <li>@ref
 *                                                gpudb::create_table_external_false
 *                                                "create_table_external_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::create_table_external_false
 *                                        "create_table_external_false".
 *                                    <li>@ref gpudb::create_table_external_ttl
 *                                        "create_table_external_ttl": Sets the
 *                                        <a href="../../../concepts/ttl/"
 *                                        target="_top">TTL</a> of the table
 *                                        specified in @a tableName.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_chunk_size
 *                                        "create_table_external_chunk_size":
 *                                        Indicates the number of records per
 *                                        chunk to be used for this table.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_chunk_column_max_memory
 *                                        "create_table_external_chunk_column_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for each column in a chunk to be
 *                                        used for this table.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_chunk_max_memory
 *                                        "create_table_external_chunk_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for all columns in a chunk to be
 *                                        used for this table.
 *                                    <li>@ref
 *                                        gpudb::create_table_external_is_result_table
 *                                        "create_table_external_is_result_table":
 *                                        Indicates whether the table is a <a
 *                                        href="../../../concepts/tables_memory_only/"
 *                                        target="_top">memory-only table</a>.
 *                                        A result table cannot contain columns
 *                                        with text_search <a
 *                                        href="../../../concepts/types/#data-handling"
 *                                        target="_top">data-handling</a>, and
 *                                        it will not be retained if the server
 *                                        is restarted.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::create_table_external_true
 *                                                "create_table_external_true"
 *                                            <li>@ref
 *                                                gpudb::create_table_external_false
 *                                                "create_table_external_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::create_table_external_false
 *                                        "create_table_external_false".
 *                                    <li>@ref
 *                                        gpudb::create_table_external_strategy_definition
 *                                        "create_table_external_strategy_definition":
 *                                        The <a
 *                                        href="../../../rm/concepts/#tier-strategies"
 *                                        target="_top">tier strategy</a> for
 *                                        the table and its columns.
 *                                </ul>
 *                                The default value is an empty map.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::create_table_external_bad_record_table_name
 *                             "create_table_external_bad_record_table_name":
 *                             Name of a table to which records that were
 *                             rejected are written. The bad-record-table has
 *                             the following columns: line_number (long),
 *                             line_rejected (string), error_message (string).
 *                             When @ref
 *                             gpudb::create_table_external_error_handling
 *                             "error_handling" is @ref
 *                             gpudb::create_table_external_abort "abort", bad
 *                             records table is not populated.
 *                         <li>@ref
 *                             gpudb::create_table_external_bad_record_table_limit
 *                             "create_table_external_bad_record_table_limit":
 *                             A positive integer indicating the maximum number
 *                             of records that can be written to the
 *                             bad-record-table. The default value is '10000'.
 *                         <li>@ref
 *                             gpudb::create_table_external_bad_record_table_limit_per_input
 *                             "create_table_external_bad_record_table_limit_per_input":
 *                             For subscriptions, a positive integer indicating
 *                             the maximum number of records that can be
 *                             written to the bad-record-table per
 *                             file/payload. Default value will be @ref
 *                             gpudb::create_table_external_bad_record_table_limit
 *                             "bad_record_table_limit" and total size of the
 *                             table per rank is limited to @ref
 *                             gpudb::create_table_external_bad_record_table_limit
 *                             "bad_record_table_limit".
 *                         <li>@ref gpudb::create_table_external_batch_size
 *                             "create_table_external_batch_size": Number of
 *                             records to insert per batch when inserting data.
 *                             The default value is '50000'.
 *                         <li>@ref gpudb::create_table_external_column_formats
 *                             "create_table_external_column_formats": For each
 *                             target column specified, applies the
 *                             column-property-bound format to the source data
 *                             loaded into that column.  Each column format
 *                             will contain a mapping of one or more of its
 *                             column properties to an appropriate format for
 *                             each property.  Currently supported column
 *                             properties include date, time, & datetime. The
 *                             parameter value must be formatted as a JSON
 *                             string of maps of column names to maps of column
 *                             properties to their corresponding column
 *                             formats, e.g., '{ "order_date" : { "date" :
 *                             "%Y.%m.%d" }, "order_time" : { "time" :
 *                             "%H:%M:%S" } }'.  See @ref
 *                             gpudb::create_table_external_default_column_formats
 *                             "default_column_formats" for valid format
 *                             syntax.
 *                         <li>@ref
 *                             gpudb::create_table_external_columns_to_load
 *                             "create_table_external_columns_to_load":
 *                             Specifies a comma-delimited list of columns from
 *                             the source data to load.  If more than one file
 *                             is being loaded, this list applies to all files.
 *                             Column numbers can be specified discretely or as
 *                             a range.  For example, a value of '5,7,1..3'
 *                             will insert values from the fifth column in the
 *                             source data into the first column in the target
 *                             table, from the seventh column in the source
 *                             data into the second column in the target table,
 *                             and from the first through third columns in the
 *                             source data into the third through fifth columns
 *                             in the target table.  If the source data
 *                             contains a header, column names matching the
 *                             file header names may be provided instead of
 *                             column numbers.  If the target table doesn't
 *                             exist, the table will be created with the
 *                             columns in this order.  If the target table does
 *                             exist with columns in a different order than the
 *                             source data, this list can be used to match the
 *                             order of the target table.  For example, a value
 *                             of 'C, B, A' will create a three column table
 *                             with column C, followed by column B, followed by
 *                             column A; or will insert those fields in that
 *                             order into a table created with columns in that
 *                             order.  If the target table exists, the column
 *                             names must match the source data field names for
 *                             a name-mapping to be successful.  Mutually
 *                             exclusive with @ref
 *                             gpudb::create_table_external_columns_to_skip
 *                             "columns_to_skip".
 *                         <li>@ref
 *                             gpudb::create_table_external_columns_to_skip
 *                             "create_table_external_columns_to_skip":
 *                             Specifies a comma-delimited list of columns from
 *                             the source data to skip.  Mutually exclusive
 *                             with @ref
 *                             gpudb::create_table_external_columns_to_load
 *                             "columns_to_load".
 *                         <li>@ref
 *                             gpudb::create_table_external_compression_type
 *                             "create_table_external_compression_type": Source
 *                             data compression type.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_none
 *                                     "create_table_external_none": No
 *                                     compression.
 *                                 <li>@ref gpudb::create_table_external_auto
 *                                     "create_table_external_auto": Auto
 *                                     detect compression type
 *                                 <li>@ref gpudb::create_table_external_gzip
 *                                     "create_table_external_gzip": gzip file
 *                                     compression.
 *                                 <li>@ref gpudb::create_table_external_bzip2
 *                                     "create_table_external_bzip2": bzip2
 *                                     file compression.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_auto
 *                             "create_table_external_auto".
 *                         <li>@ref
 *                             gpudb::create_table_external_datasource_name
 *                             "create_table_external_datasource_name": Name of
 *                             an existing external data source from which data
 *                             file(s) specified in @a filepaths will be loaded
 *                         <li>@ref
 *                             gpudb::create_table_external_default_column_formats
 *                             "create_table_external_default_column_formats":
 *                             Specifies the default format to be applied to
 *                             source data loaded into columns with the
 *                             corresponding column property.  Currently
 *                             supported column properties include date, time,
 *                             & datetime.  This default column-property-bound
 *                             format can be overridden by specifying a column
 *                             property & format for a given target column in
 *                             @ref gpudb::create_table_external_column_formats
 *                             "column_formats". For each specified annotation,
 *                             the format will apply to all columns with that
 *                             annotation unless a custom @ref
 *                             gpudb::create_table_external_column_formats
 *                             "column_formats" for that annotation is
 *                             specified.  The parameter value must be
 *                             formatted as a JSON string that is a map of
 *                             column properties to their respective column
 *                             formats, e.g., '{ "date" : "%Y.%m.%d", "time" :
 *                             "%H:%M:%S" }'.  Column formats are specified as
 *                             a string of control characters and plain text.
 *                             The supported control characters are 'Y', 'm',
 *                             'd', 'H', 'M', 'S', and 's', which follow the
 *                             Linux 'strptime()' specification, as well as
 *                             's', which specifies seconds and fractional
 *                             seconds (though the fractional component will be
 *                             truncated past milliseconds).  Formats for the
 *                             'date' annotation must include the 'Y', 'm', and
 *                             'd' control characters. Formats for the 'time'
 *                             annotation must include the 'H', 'M', and either
 *                             'S' or 's' (but not both) control characters.
 *                             Formats for the 'datetime' annotation meet both
 *                             the 'date' and 'time' control character
 *                             requirements. For example, '{"datetime" :
 *                             "%m/%d/%Y %H:%M:%S" }' would be used to
 *                             interpret text as "05/04/2000 12:12:11"
 *                         <li>@ref gpudb::create_table_external_error_handling
 *                             "create_table_external_error_handling":
 *                             Specifies how errors should be handled upon
 *                             insertion.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_table_external_permissive
 *                                     "create_table_external_permissive":
 *                                     Records with missing columns are
 *                                     populated with nulls if possible;
 *                                     otherwise, the malformed records are
 *                                     skipped.
 *                                 <li>@ref
 *                                     gpudb::create_table_external_ignore_bad_records
 *                                     "create_table_external_ignore_bad_records":
 *                                     Malformed records are skipped.
 *                                 <li>@ref gpudb::create_table_external_abort
 *                                     "create_table_external_abort": Stops
 *                                     current insertion and aborts entire
 *                                     operation when an error is encountered.
 *                                     Primary key collisions are considered
 *                                     abortable errors in this mode.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_abort
 *                             "create_table_external_abort".
 *                         <li>@ref
 *                             gpudb::create_table_external_external_table_type
 *                             "create_table_external_external_table_type":
 *                             Specifies whether the external table holds a
 *                             local copy of the external data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_table_external_materialized
 *                                     "create_table_external_materialized":
 *                                     Loads a copy of the external data into
 *                                     the database, refreshed on demand
 *                                 <li>@ref
 *                                     gpudb::create_table_external_logical
 *                                     "create_table_external_logical":
 *                                     External data will not be loaded into
 *                                     the database; the data will be retrieved
 *                                     from the source upon servicing each
 *                                     query against the external table
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_materialized
 *                             "create_table_external_materialized".
 *                         <li>@ref gpudb::create_table_external_file_type
 *                             "create_table_external_file_type": Specifies the
 *                             type of the file(s) whose records will be
 *                             inserted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_avro
 *                                     "create_table_external_avro": Avro file
 *                                     format
 *                                 <li>@ref
 *                                     gpudb::create_table_external_delimited_text
 *                                     "create_table_external_delimited_text":
 *                                     Delimited text file format; e.g., CSV,
 *                                     TSV, PSV, etc.
 *                                 <li>@ref gpudb::create_table_external_gdb
 *                                     "create_table_external_gdb": Esri/GDB
 *                                     file format
 *                                 <li>@ref gpudb::create_table_external_json
 *                                     "create_table_external_json": Json file
 *                                     format
 *                                 <li>@ref
 *                                     gpudb::create_table_external_parquet
 *                                     "create_table_external_parquet": Apache
 *                                     Parquet file format
 *                                 <li>@ref
 *                                     gpudb::create_table_external_shapefile
 *                                     "create_table_external_shapefile":
 *                                     ShapeFile file format
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "create_table_external_delimited_text".
 *                         <li>@ref
 *                             gpudb::create_table_external_flatten_columns
 *                             "create_table_external_flatten_columns":
 *                             Specifies how to handle nested columns.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true": Break up
 *                                     nested columns to multiple columns
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false": Treat
 *                                     nested columns as json columns instead
 *                                     of flattening
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                         <li>@ref
 *                             gpudb::create_table_external_gdal_configuration_options
 *                             "create_table_external_gdal_configuration_options":
 *                             Comma separated list of gdal conf options, for
 *                             the specific requets: key=value
 *                         <li>@ref
 *                             gpudb::create_table_external_ignore_existing_pk
 *                             "create_table_external_ignore_existing_pk":
 *                             Specifies the record collision error-suppression
 *                             policy for inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             not in upsert mode (upsert mode is disabled when
 *                             @ref
 *                             gpudb::create_table_external_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::create_table_external_false "false").  If
 *                             set to @ref gpudb::create_table_external_true
 *                             "true", any record being inserted that is
 *                             rejected for having primary key values that
 *                             match those of an existing table record will be
 *                             ignored with no error generated.  If @ref
 *                             gpudb::create_table_external_false "false", the
 *                             rejection of any record for having primary key
 *                             values matching an existing record will result
 *                             in an error being reported, as determined by
 *                             @ref gpudb::create_table_external_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key or if upsert mode is in
 *                             effect (@ref
 *                             gpudb::create_table_external_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::create_table_external_true "true"), then
 *                             this option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true": Ignore new
 *                                     records whose primary key values collide
 *                                     with those of existing records
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false": Treat as
 *                                     errors any new records whose primary key
 *                                     values collide with those of existing
 *                                     records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                         <li>@ref gpudb::create_table_external_ingestion_mode
 *                             "create_table_external_ingestion_mode": Whether
 *                             to do a full load, dry run, or perform a type
 *                             inference on the source data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_full
 *                                     "create_table_external_full": Run a type
 *                                     inference on the source data (if needed)
 *                                     and ingest
 *                                 <li>@ref
 *                                     gpudb::create_table_external_dry_run
 *                                     "create_table_external_dry_run": Does
 *                                     not load data, but walks through the
 *                                     source data and determines the number of
 *                                     valid records, taking into account the
 *                                     current mode of @ref
 *                                     gpudb::create_table_external_error_handling
 *                                     "error_handling".
 *                                 <li>@ref
 *                                     gpudb::create_table_external_type_inference_only
 *                                     "create_table_external_type_inference_only":
 *                                     Infer the type of the source data and
 *                                     return, without ingesting any data.  The
 *                                     inferred type is returned in the
 *                                     response.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_full
 *                             "create_table_external_full".
 *                         <li>@ref
 *                             gpudb::create_table_external_jdbc_fetch_size
 *                             "create_table_external_jdbc_fetch_size": The
 *                             JDBC fetch size, which determines how many rows
 *                             to fetch per round trip. The default value is
 *                             '50000'.
 *                         <li>@ref
 *                             gpudb::create_table_external_kafka_consumers_per_rank
 *                             "create_table_external_kafka_consumers_per_rank":
 *                             Number of Kafka consumer threads per rank (valid
 *                             range 1-6). The default value is '1'.
 *                         <li>@ref gpudb::create_table_external_kafka_group_id
 *                             "create_table_external_kafka_group_id": The
 *                             group id to be used when consuming data from a
 *                             Kafka topic (valid only for Kafka datasource
 *                             subscriptions).
 *                         <li>@ref
 *                             gpudb::create_table_external_kafka_offset_reset_policy
 *                             "create_table_external_kafka_offset_reset_policy":
 *                             Policy to determine whether the Kafka data
 *                             consumption starts either at earliest offset or
 *                             latest offset.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_table_external_earliest
 *                                     "create_table_external_earliest"
 *                                 <li>@ref gpudb::create_table_external_latest
 *                                     "create_table_external_latest"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_earliest
 *                             "create_table_external_earliest".
 *                         <li>@ref
 *                             gpudb::create_table_external_kafka_optimistic_ingest
 *                             "create_table_external_kafka_optimistic_ingest":
 *                             Enable optimistic ingestion where Kafka topic
 *                             offsets and table data are committed
 *                             independently to achieve parallelism.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true"
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                         <li>@ref
 *                             gpudb::create_table_external_kafka_subscription_cancel_after
 *                             "create_table_external_kafka_subscription_cancel_after":
 *                             Sets the Kafka subscription lifespan (in
 *                             minutes). Expired subscription will be cancelled
 *                             automatically.
 *                         <li>@ref
 *                             gpudb::create_table_external_kafka_type_inference_fetch_timeout
 *                             "create_table_external_kafka_type_inference_fetch_timeout":
 *                             Maximum time to collect Kafka messages before
 *                             type inferencing on the set of them.
 *                         <li>@ref gpudb::create_table_external_layer
 *                             "create_table_external_layer": Geo files
 *                             layer(s) name(s): comma separated.
 *                         <li>@ref gpudb::create_table_external_loading_mode
 *                             "create_table_external_loading_mode": Scheme for
 *                             distributing the extraction and loading of data
 *                             from the source data file(s). This option
 *                             applies only when loading files that are local
 *                             to the database.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_head
 *                                     "create_table_external_head": The head
 *                                     node loads all data. All files must be
 *                                     available to the head node.
 *                                 <li>@ref
 *                                     gpudb::create_table_external_distributed_shared
 *                                     "create_table_external_distributed_shared":
 *                                     The head node coordinates loading data
 *                                     by worker processes across all nodes
 *                                     from shared files available to all
 *                                     workers.  NOTE:  Instead of existing on
 *                                     a shared source, the files can be
 *                                     duplicated on a source local to each
 *                                     host to improve performance, though the
 *                                     files must appear as the same data set
 *                                     from the perspective of all hosts
 *                                     performing the load.
 *                                 <li>@ref
 *                                     gpudb::create_table_external_distributed_local
 *                                     "create_table_external_distributed_local":
 *                                     A single worker process on each node
 *                                     loads all files that are available to
 *                                     it. This option works best when each
 *                                     worker loads files from its own file
 *                                     system, to maximize performance. In
 *                                     order to avoid data duplication, either
 *                                     each worker performing the load needs to
 *                                     have visibility to a set of files unique
 *                                     to it (no file is visible to more than
 *                                     one node) or the target table needs to
 *                                     have a primary key (which will allow the
 *                                     worker to automatically deduplicate
 *                                     data).  NOTE:  If the target table
 *                                     doesn't exist, the table structure will
 *                                     be determined by the head node. If the
 *                                     head node has no files local to it, it
 *                                     will be unable to determine the
 *                                     structure and the request will fail.  If
 *                                     the head node is configured to have no
 *                                     worker processes, no data strictly
 *                                     accessible to the head node will be
 *                                     loaded.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_head
 *                             "create_table_external_head".
 *                         <li>@ref
 *                             gpudb::create_table_external_local_time_offset
 *                             "create_table_external_local_time_offset": Apply
 *                             an offset to Avro local timestamp columns.
 *                         <li>@ref
 *                             gpudb::create_table_external_max_records_to_load
 *                             "create_table_external_max_records_to_load":
 *                             Limit the number of records to load in this
 *                             request: if this number is larger than @ref
 *                             gpudb::create_table_external_batch_size
 *                             "batch_size", then the number of records loaded
 *                             will be limited to the next whole number of @ref
 *                             gpudb::create_table_external_batch_size
 *                             "batch_size" (per working thread).
 *                         <li>@ref
 *                             gpudb::create_table_external_num_tasks_per_rank
 *                             "create_table_external_num_tasks_per_rank":
 *                             Number of tasks for reading file per rank.
 *                             Default will be system configuration parameter,
 *                             external_file_reader_num_tasks.
 *                         <li>@ref gpudb::create_table_external_poll_interval
 *                             "create_table_external_poll_interval": If @ref
 *                             gpudb::create_table_external_true "true", the
 *                             number of seconds between attempts to load
 *                             external files into the table.  If zero, polling
 *                             will be continuous as long as data is found.  If
 *                             no data is found, the interval will steadily
 *                             increase to a maximum of 60 seconds. The default
 *                             value is '0'.
 *                         <li>@ref gpudb::create_table_external_primary_keys
 *                             "create_table_external_primary_keys": Comma
 *                             separated list of column names to set as primary
 *                             keys, when not specified in the type.
 *                         <li>@ref gpudb::create_table_external_refresh_method
 *                             "create_table_external_refresh_method": Method
 *                             by which the table can be refreshed from its
 *                             source data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_manual
 *                                     "create_table_external_manual": Refresh
 *                                     only occurs when manually requested by
 *                                     invoking the refresh action of @ref
 *                                     alterTable(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                     "alterTable" on this table.
 *                                 <li>@ref
 *                                     gpudb::create_table_external_on_start
 *                                     "create_table_external_on_start":
 *                                     Refresh table on database startup and
 *                                     when manually requested by invoking the
 *                                     refresh action of @ref
 *                                     alterTable(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                     "alterTable" on this table.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_manual
 *                             "create_table_external_manual".
 *                         <li>@ref
 *                             gpudb::create_table_external_schema_registry_schema_name
 *                             "create_table_external_schema_registry_schema_name":
 *                             Name of the Avro schema in the schema registry
 *                             to use when reading Avro records.
 *                         <li>@ref gpudb::create_table_external_shard_keys
 *                             "create_table_external_shard_keys": Comma
 *                             separated list of column names to set as shard
 *                             keys, when not specified in the type.
 *                         <li>@ref gpudb::create_table_external_skip_lines
 *                             "create_table_external_skip_lines": Skip number
 *                             of lines from begining of file.
 *                         <li>@ref gpudb::create_table_external_subscribe
 *                             "create_table_external_subscribe": Continuously
 *                             poll the data source to check for new data and
 *                             load it into the table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true"
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                         <li>@ref
 *                             gpudb::create_table_external_table_insert_mode
 *                             "create_table_external_table_insert_mode":
 *                             Insertion scheme to use when inserting records
 *                             from multiple shapefiles.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_single
 *                                     "create_table_external_single": Insert
 *                                     all records into a single table.
 *                                 <li>@ref
 *                                     gpudb::create_table_external_table_per_file
 *                                     "create_table_external_table_per_file":
 *                                     Insert records from each file into a new
 *                                     table corresponding to that file.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_single
 *                             "create_table_external_single".
 *                         <li>@ref
 *                             gpudb::create_table_external_text_comment_string
 *                             "create_table_external_text_comment_string":
 *                             Specifies the character string that should be
 *                             interpreted as a comment line prefix in the
 *                             source data.  All lines in the data starting
 *                             with the provided string are ignored.  For @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only. The default value is '#'.
 *                         <li>@ref gpudb::create_table_external_text_delimiter
 *                             "create_table_external_text_delimiter":
 *                             Specifies the character delimiting field values
 *                             in the source data and field names in the header
 *                             (if present).  For @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only. The default value is ','.
 *                         <li>@ref
 *                             gpudb::create_table_external_text_escape_character
 *                             "create_table_external_text_escape_character":
 *                             Specifies the character that is used to escape
 *                             other characters in the source data.  An 'a',
 *                             'b', 'f', 'n', 'r', 't', or 'v' preceded by an
 *                             escape character will be interpreted as the
 *                             ASCII bell, backspace, form feed, line feed,
 *                             carriage return, horizontal tab, & vertical tab,
 *                             respectively.  For example, the escape character
 *                             followed by an 'n' will be interpreted as a
 *                             newline within a field value.  The escape
 *                             character can also be used to escape the quoting
 *                             character, and will be treated as an escape
 *                             character whether it is within a quoted field
 *                             value or not.  For @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only.
 *                         <li>@ref
 *                             gpudb::create_table_external_text_has_header
 *                             "create_table_external_text_has_header":
 *                             Indicates whether the source data contains a
 *                             header row.  For @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true"
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_true
 *                             "create_table_external_true".
 *                         <li>@ref
 *                             gpudb::create_table_external_text_header_property_delimiter
 *                             "create_table_external_text_header_property_delimiter":
 *                             Specifies the delimiter for <a
 *                             href="../../../concepts/types/#column-properties"
 *                             target="_top">column properties</a> in the
 *                             header row (if present).  Cannot be set to same
 *                             value as @ref
 *                             gpudb::create_table_external_text_delimiter
 *                             "text_delimiter".  For @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only. The default value is '|'.
 *                         <li>@ref
 *                             gpudb::create_table_external_text_null_string
 *                             "create_table_external_text_null_string":
 *                             Specifies the character string that should be
 *                             interpreted as a null value in the source data.
 *                             For @ref
 *                             gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only. The default value is '\\N'.
 *                         <li>@ref
 *                             gpudb::create_table_external_text_quote_character
 *                             "create_table_external_text_quote_character":
 *                             Specifies the character that should be
 *                             interpreted as a field value quoting character
 *                             in the source data.  The character must appear
 *                             at beginning and end of field value to take
 *                             effect.  Delimiters within quoted fields are
 *                             treated as literals and not delimiters.  Within
 *                             a quoted field, two consecutive quote characters
 *                             will be interpreted as a single literal quote
 *                             character, effectively escaping it.  To not have
 *                             a quote character, specify an empty string.  For
 *                             @ref gpudb::create_table_external_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::create_table_external_file_type
 *                             "file_type" only. The default value is '"'.
 *                         <li>@ref
 *                             gpudb::create_table_external_text_search_columns
 *                             "create_table_external_text_search_columns": Add
 *                             'text_search' property to internally inferenced
 *                             string columns. Comma seperated list of column
 *                             names or '*' for all columns. To add
 *                             'text_search' property only to string columns
 *                             greater than or equal to a minimum size, also
 *                             set the @ref
 *                             gpudb::create_table_external_text_search_min_column_length
 *                             "text_search_min_column_length"
 *                         <li>@ref
 *                             gpudb::create_table_external_text_search_min_column_length
 *                             "create_table_external_text_search_min_column_length":
 *                             Set the minimum column size for strings to apply
 *                             the 'text_search' property to. Used only when
 *                             @ref
 *                             gpudb::create_table_external_text_search_columns
 *                             "text_search_columns" has a value.
 *                         <li>@ref
 *                             gpudb::create_table_external_truncate_strings
 *                             "create_table_external_truncate_strings": If set
 *                             to @ref gpudb::create_table_external_true
 *                             "true", truncate string values that are longer
 *                             than the column's type size.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true"
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                         <li>@ref gpudb::create_table_external_truncate_table
 *                             "create_table_external_truncate_table": If set
 *                             to @ref gpudb::create_table_external_true
 *                             "true", truncates the table specified by @a
 *                             tableName prior to loading the file(s).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true"
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                         <li>@ref
 *                             gpudb::create_table_external_type_inference_mode
 *                             "create_table_external_type_inference_mode":
 *                             Optimize type inferencing for either speed or
 *                             accuracy.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_table_external_accuracy
 *                                     "create_table_external_accuracy": Scans
 *                                     data to get exactly-typed & sized
 *                                     columns for all data scanned.
 *                                 <li>@ref gpudb::create_table_external_speed
 *                                     "create_table_external_speed": Scans
 *                                     data and picks the widest possible
 *                                     column types so that 'all' values will
 *                                     fit with minimum data scanned
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_speed
 *                             "create_table_external_speed".
 *                         <li>@ref gpudb::create_table_external_remote_query
 *                             "create_table_external_remote_query": Remote SQL
 *                             query from which data will be sourced
 *                         <li>@ref
 *                             gpudb::create_table_external_remote_query_filter_column
 *                             "create_table_external_remote_query_filter_column":
 *                             Name of column to be used for splitting @ref
 *                             gpudb::create_table_external_remote_query
 *                             "remote_query" into multiple sub-queries using
 *                             the data distribution of given column
 *                         <li>@ref
 *                             gpudb::create_table_external_remote_query_increasing_column
 *                             "create_table_external_remote_query_increasing_column":
 *                             Column on subscribed remote query result that
 *                             will increase for new records (e.g., TIMESTAMP).
 *                         <li>@ref
 *                             gpudb::create_table_external_remote_query_partition_column
 *                             "create_table_external_remote_query_partition_column":
 *                             Alias name for @ref
 *                             gpudb::create_table_external_remote_query_filter_column
 *                             "remote_query_filter_column".
 *                         <li>@ref
 *                             gpudb::create_table_external_update_on_existing_pk
 *                             "create_table_external_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::create_table_external_true "true", any
 *                             existing table record with primary key values
 *                             that match those of a record being inserted will
 *                             be replaced by that new record (the new data
 *                             will be 'upserted'). If set to @ref
 *                             gpudb::create_table_external_false "false", any
 *                             existing table record with primary key values
 *                             that match those of a record being inserted will
 *                             remain unchanged, while the new record will be
 *                             rejected and the error handled as determined by
 *                             @ref
 *                             gpudb::create_table_external_ignore_existing_pk
 *                             "ignore_existing_pk" & @ref
 *                             gpudb::create_table_external_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key, then this option has no
 *                             effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_external_true
 *                                     "create_table_external_true": Upsert new
 *                                     records when primary keys match existing
 *                                     records
 *                                 <li>@ref gpudb::create_table_external_false
 *                                     "create_table_external_false": Reject
 *                                     new records when primary keys match
 *                                     existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_external_false
 *                             "create_table_external_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateTableExternalResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateTableExternalResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateTableExternalResponse& createTableExternal( const std::string& tableName,
                                                  const std::vector<std::string>& filepaths,
                                                  const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                  const std::map<std::string, std::string>& createTableOptions,
                                                  const std::map<std::string, std::string>& options,
                                                  CreateTableExternalResponse& response_ ) const;

/**
 * Creates a monitor that watches for a single table modification event type
 * (insert, update, or delete) on a particular table (identified by @ref
 * gpudb::CreateTableMonitorRequest::tableName "tableName") and forwards event
 * notifications to subscribers via ZMQ. After this call completes, subscribe
 * to the returned @ref gpudb::CreateTableMonitorResponse::topicId "topicId" on
 * the ZMQ table monitor port (default 9002). Each time an operation of the
 * given type on the table completes, a multipart message is published for that
 * topic; the first part contains only the topic ID, and each subsequent part
 * contains one binary-encoded Avro object that corresponds to the event and
 * can be decoded using @ref gpudb::CreateTableMonitorResponse::typeSchema
 * "typeSchema". The monitor will continue to run (regardless of whether or not
 * there are any subscribers) until deactivated with @ref
 * clearTableMonitor(const ClearTableMonitorRequest&) const
 * "clearTableMonitor".
 *
 * For more information on table monitors, see <a
 * href="../../../concepts/table_monitors/" target="_top">Table Monitors</a>.
 *
 * @param[in] request_  @ref gpudb::CreateTableMonitorRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateTableMonitorResponse "Response" object containing
 *         the result of the operation.
 */
CreateTableMonitorResponse createTableMonitor( const CreateTableMonitorRequest& request_ ) const;

/**
 * Creates a monitor that watches for a single table modification event type
 * (insert, update, or delete) on a particular table (identified by @ref
 * gpudb::CreateTableMonitorRequest::tableName "tableName") and forwards event
 * notifications to subscribers via ZMQ. After this call completes, subscribe
 * to the returned @ref gpudb::CreateTableMonitorResponse::topicId "topicId" on
 * the ZMQ table monitor port (default 9002). Each time an operation of the
 * given type on the table completes, a multipart message is published for that
 * topic; the first part contains only the topic ID, and each subsequent part
 * contains one binary-encoded Avro object that corresponds to the event and
 * can be decoded using @ref gpudb::CreateTableMonitorResponse::typeSchema
 * "typeSchema". The monitor will continue to run (regardless of whether or not
 * there are any subscribers) until deactivated with @ref
 * clearTableMonitor(const ClearTableMonitorRequest&) const
 * "clearTableMonitor".
 *
 * For more information on table monitors, see <a
 * href="../../../concepts/table_monitors/" target="_top">Table Monitors</a>.
 *
 * @param[in] request_  @ref gpudb::CreateTableMonitorRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateTableMonitorResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateTableMonitorResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateTableMonitorResponse& createTableMonitor( const CreateTableMonitorRequest& request_,
                                                CreateTableMonitorResponse& response_ ) const;

/**
 * Creates a monitor that watches for a single table modification event type
 * (insert, update, or delete) on a particular table (identified by @a
 * tableName) and forwards event notifications to subscribers via ZMQ. After
 * this call completes, subscribe to the returned @ref
 * gpudb::CreateTableMonitorResponse::topicId "topicId" on the ZMQ table
 * monitor port (default 9002). Each time an operation of the given type on the
 * table completes, a multipart message is published for that topic; the first
 * part contains only the topic ID, and each subsequent part contains one
 * binary-encoded Avro object that corresponds to the event and can be decoded
 * using @ref gpudb::CreateTableMonitorResponse::typeSchema "typeSchema". The
 * monitor will continue to run (regardless of whether or not there are any
 * subscribers) until deactivated with @ref
 * clearTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 * "clearTableMonitor".
 *
 * For more information on table monitors, see <a
 * href="../../../concepts/table_monitors/" target="_top">Table Monitors</a>.
 *
 * @param[in] tableName  Name of the table to monitor, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_table_monitor_event
 *                             "create_table_monitor_event": Type of
 *                             modification event on the target table to be
 *                             monitored by this table monitor.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_monitor_insert
 *                                     "create_table_monitor_insert": Get
 *                                     notifications of new record insertions.
 *                                     The new row images are forwarded to the
 *                                     subscribers.
 *                                 <li>@ref gpudb::create_table_monitor_update
 *                                     "create_table_monitor_update": Get
 *                                     notifications of update operations. The
 *                                     modified row count information is
 *                                     forwarded to the subscribers.
 *                                 <li>@ref gpudb::create_table_monitor_delete
 *                                     "create_table_monitor_delete": Get
 *                                     notifications of delete operations. The
 *                                     deleted row count information is
 *                                     forwarded to the subscribers.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_monitor_insert
 *                             "create_table_monitor_insert".
 *                         <li>@ref gpudb::create_table_monitor_monitor_id
 *                             "create_table_monitor_monitor_id": ID to use for
 *                             this monitor instead of a randomly generated one
 *                         <li>@ref gpudb::create_table_monitor_datasink_name
 *                             "create_table_monitor_datasink_name": Name of an
 *                             existing <a href="../../../concepts/data_sinks/"
 *                             target="_top">data sink</a> to send change data
 *                             notifications to
 *                         <li>@ref gpudb::create_table_monitor_destination
 *                             "create_table_monitor_destination": Destination
 *                             for the output data in format
 *                             'destination_type://path[:port]'. Supported
 *                             destination types are 'http', 'https' and
 *                             'kafka'.
 *                         <li>@ref
 *                             gpudb::create_table_monitor_kafka_topic_name
 *                             "create_table_monitor_kafka_topic_name": Name of
 *                             the Kafka topic to publish to if @ref
 *                             gpudb::create_table_monitor_destination
 *                             "destination" in @a options is specified and is
 *                             a Kafka broker
 *                         <li>@ref
 *                             gpudb::create_table_monitor_increasing_column
 *                             "create_table_monitor_increasing_column": Column
 *                             on subscribed table that will increase for new
 *                             records (e.g., TIMESTAMP).
 *                         <li>@ref gpudb::create_table_monitor_expression
 *                             "create_table_monitor_expression": Filter
 *                             expression to limit records for notification
 *                         <li>@ref gpudb::create_table_monitor_refresh_method
 *                             "create_table_monitor_refresh_method": Method
 *                             controlling when the table monitor reports
 *                             changes to the @a tableName.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_table_monitor_on_change
 *                                     "create_table_monitor_on_change": Report
 *                                     changes as they occur.
 *                                 <li>@ref
 *                                     gpudb::create_table_monitor_periodic
 *                                     "create_table_monitor_periodic": Report
 *                                     changes periodically at rate specified
 *                                     by @ref
 *                                     gpudb::create_table_monitor_refresh_period
 *                                     "refresh_period".
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_monitor_on_change
 *                             "create_table_monitor_on_change".
 *                         <li>@ref gpudb::create_table_monitor_refresh_period
 *                             "create_table_monitor_refresh_period": When @ref
 *                             gpudb::create_table_monitor_refresh_method
 *                             "refresh_method" is @ref
 *                             gpudb::create_table_monitor_periodic "periodic",
 *                             specifies the period in seconds at which changes
 *                             are reported.
 *                         <li>@ref
 *                             gpudb::create_table_monitor_refresh_start_time
 *                             "create_table_monitor_refresh_start_time": When
 *                             @ref gpudb::create_table_monitor_refresh_method
 *                             "refresh_method" is @ref
 *                             gpudb::create_table_monitor_periodic "periodic",
 *                             specifies the first time at which changes are
 *                             reported.  Value is a datetime string with
 *                             format 'YYYY-MM-DD HH:MM:SS'.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateTableMonitorResponse "Response" object containing
 *         the result of the operation.
 */
CreateTableMonitorResponse createTableMonitor( const std::string& tableName,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Creates a monitor that watches for a single table modification event type
 * (insert, update, or delete) on a particular table (identified by @a
 * tableName) and forwards event notifications to subscribers via ZMQ. After
 * this call completes, subscribe to the returned @ref
 * gpudb::CreateTableMonitorResponse::topicId "topicId" on the ZMQ table
 * monitor port (default 9002). Each time an operation of the given type on the
 * table completes, a multipart message is published for that topic; the first
 * part contains only the topic ID, and each subsequent part contains one
 * binary-encoded Avro object that corresponds to the event and can be decoded
 * using @ref gpudb::CreateTableMonitorResponse::typeSchema "typeSchema". The
 * monitor will continue to run (regardless of whether or not there are any
 * subscribers) until deactivated with @ref
 * clearTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 * "clearTableMonitor".
 *
 * For more information on table monitors, see <a
 * href="../../../concepts/table_monitors/" target="_top">Table Monitors</a>.
 *
 * @param[in] tableName  Name of the table to monitor, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_table_monitor_event
 *                             "create_table_monitor_event": Type of
 *                             modification event on the target table to be
 *                             monitored by this table monitor.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_table_monitor_insert
 *                                     "create_table_monitor_insert": Get
 *                                     notifications of new record insertions.
 *                                     The new row images are forwarded to the
 *                                     subscribers.
 *                                 <li>@ref gpudb::create_table_monitor_update
 *                                     "create_table_monitor_update": Get
 *                                     notifications of update operations. The
 *                                     modified row count information is
 *                                     forwarded to the subscribers.
 *                                 <li>@ref gpudb::create_table_monitor_delete
 *                                     "create_table_monitor_delete": Get
 *                                     notifications of delete operations. The
 *                                     deleted row count information is
 *                                     forwarded to the subscribers.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_monitor_insert
 *                             "create_table_monitor_insert".
 *                         <li>@ref gpudb::create_table_monitor_monitor_id
 *                             "create_table_monitor_monitor_id": ID to use for
 *                             this monitor instead of a randomly generated one
 *                         <li>@ref gpudb::create_table_monitor_datasink_name
 *                             "create_table_monitor_datasink_name": Name of an
 *                             existing <a href="../../../concepts/data_sinks/"
 *                             target="_top">data sink</a> to send change data
 *                             notifications to
 *                         <li>@ref gpudb::create_table_monitor_destination
 *                             "create_table_monitor_destination": Destination
 *                             for the output data in format
 *                             'destination_type://path[:port]'. Supported
 *                             destination types are 'http', 'https' and
 *                             'kafka'.
 *                         <li>@ref
 *                             gpudb::create_table_monitor_kafka_topic_name
 *                             "create_table_monitor_kafka_topic_name": Name of
 *                             the Kafka topic to publish to if @ref
 *                             gpudb::create_table_monitor_destination
 *                             "destination" in @a options is specified and is
 *                             a Kafka broker
 *                         <li>@ref
 *                             gpudb::create_table_monitor_increasing_column
 *                             "create_table_monitor_increasing_column": Column
 *                             on subscribed table that will increase for new
 *                             records (e.g., TIMESTAMP).
 *                         <li>@ref gpudb::create_table_monitor_expression
 *                             "create_table_monitor_expression": Filter
 *                             expression to limit records for notification
 *                         <li>@ref gpudb::create_table_monitor_refresh_method
 *                             "create_table_monitor_refresh_method": Method
 *                             controlling when the table monitor reports
 *                             changes to the @a tableName.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::create_table_monitor_on_change
 *                                     "create_table_monitor_on_change": Report
 *                                     changes as they occur.
 *                                 <li>@ref
 *                                     gpudb::create_table_monitor_periodic
 *                                     "create_table_monitor_periodic": Report
 *                                     changes periodically at rate specified
 *                                     by @ref
 *                                     gpudb::create_table_monitor_refresh_period
 *                                     "refresh_period".
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_table_monitor_on_change
 *                             "create_table_monitor_on_change".
 *                         <li>@ref gpudb::create_table_monitor_refresh_period
 *                             "create_table_monitor_refresh_period": When @ref
 *                             gpudb::create_table_monitor_refresh_method
 *                             "refresh_method" is @ref
 *                             gpudb::create_table_monitor_periodic "periodic",
 *                             specifies the period in seconds at which changes
 *                             are reported.
 *                         <li>@ref
 *                             gpudb::create_table_monitor_refresh_start_time
 *                             "create_table_monitor_refresh_start_time": When
 *                             @ref gpudb::create_table_monitor_refresh_method
 *                             "refresh_method" is @ref
 *                             gpudb::create_table_monitor_periodic "periodic",
 *                             specifies the first time at which changes are
 *                             reported.  Value is a datetime string with
 *                             format 'YYYY-MM-DD HH:MM:SS'.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateTableMonitorResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateTableMonitorResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateTableMonitorResponse& createTableMonitor( const std::string& tableName,
                                                const std::map<std::string, std::string>& options,
                                                CreateTableMonitorResponse& response_ ) const;

/**
 * Sets up an area trigger mechanism for two column_names for one or more
 * tables. (This function is essentially the two-dimensional version of @ref
 * createTriggerByRange(const CreateTriggerByRangeRequest&) const
 * "createTriggerByRange".) Once the trigger has been activated, any record
 * added to the listed tables(s) via @ref
 * insertRecords(const InsertRecordsRequest<TRequest>&) const "insertRecords"
 * with the chosen columns' values falling within the specified region will
 * trip the trigger. All such records will be queued at the trigger port (by
 * default '9001' but able to be retrieved via @ref
 * showSystemStatus(const ShowSystemStatusRequest&) const "showSystemStatus")
 * for any listening client to collect. Active triggers can be cancelled by
 * using the @ref clearTrigger(const ClearTriggerRequest&) const "clearTrigger"
 * endpoint or by clearing all relevant tables.
 *
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 *
 * @param[in] request_  @ref gpudb::CreateTriggerByAreaRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateTriggerByAreaResponse "Response" object containing
 *         the result of the operation.
 */
CreateTriggerByAreaResponse createTriggerByArea( const CreateTriggerByAreaRequest& request_ ) const;

/**
 * Sets up an area trigger mechanism for two column_names for one or more
 * tables. (This function is essentially the two-dimensional version of @ref
 * createTriggerByRange(const CreateTriggerByRangeRequest&) const
 * "createTriggerByRange".) Once the trigger has been activated, any record
 * added to the listed tables(s) via @ref
 * insertRecords(const InsertRecordsRequest<TRequest>&) const "insertRecords"
 * with the chosen columns' values falling within the specified region will
 * trip the trigger. All such records will be queued at the trigger port (by
 * default '9001' but able to be retrieved via @ref
 * showSystemStatus(const ShowSystemStatusRequest&) const "showSystemStatus")
 * for any listening client to collect. Active triggers can be cancelled by
 * using the @ref clearTrigger(const ClearTriggerRequest&) const "clearTrigger"
 * endpoint or by clearing all relevant tables.
 *
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 *
 * @param[in] request_  @ref gpudb::CreateTriggerByAreaRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateTriggerByAreaResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateTriggerByAreaResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateTriggerByAreaResponse& createTriggerByArea( const CreateTriggerByAreaRequest& request_,
                                                  CreateTriggerByAreaResponse& response_ ) const;

/**
 * Sets up an area trigger mechanism for two column_names for one or more
 * tables. (This function is essentially the two-dimensional version of @ref
 * createTriggerByRange(const std::string&, const std::vector<std::string>&, const std::string&, const double, const double, const std::map<std::string, std::string>&) const
 * "createTriggerByRange".) Once the trigger has been activated, any record
 * added to the listed tables(s) via @ref
 * insertRecords(const std::string&, const std::vector<TRequest>&, const std::map<std::string, std::string>&) const
 * "insertRecords" with the chosen columns' values falling within the specified
 * region will trip the trigger. All such records will be queued at the trigger
 * port (by default '9001' but able to be retrieved via @ref
 * showSystemStatus(const std::map<std::string, std::string>&) const
 * "showSystemStatus") for any listening client to collect. Active triggers can
 * be cancelled by using the @ref
 * clearTrigger(const std::string&, const std::map<std::string, std::string>&) const
 * "clearTrigger" endpoint or by clearing all relevant tables.
 *
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 *
 * @param[in] requestId  User-created ID for the trigger. The ID can be
 *                       alphanumeric, contain symbols, and must contain at
 *                       least one character.
 * @param[in] tableNames  Names of the tables on which the trigger will be
 *                        activated and maintained, each in
 *                        [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.
 * @param[in] xColumnName  Name of a numeric column on which the trigger is
 *                         activated. Usually 'x' for geospatial data points.
 * @param[in] xVector  The respective coordinate values for the region on which
 *                     the trigger is activated. This usually translates to the
 *                     x-coordinates of a geospatial region.
 * @param[in] yColumnName  Name of a second numeric column on which the trigger
 *                         is activated. Usually 'y' for geospatial data
 *                         points.
 * @param[in] yVector  The respective coordinate values for the region on which
 *                     the trigger is activated. This usually translates to the
 *                     y-coordinates of a geospatial region. Must be the same
 *                     length as xvals.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::CreateTriggerByAreaResponse "Response" object containing
 *         the result of the operation.
 */
CreateTriggerByAreaResponse createTriggerByArea( const std::string& requestId,
                                                 const std::vector<std::string>& tableNames,
                                                 const std::string& xColumnName,
                                                 const std::vector<double>& xVector,
                                                 const std::string& yColumnName,
                                                 const std::vector<double>& yVector,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Sets up an area trigger mechanism for two column_names for one or more
 * tables. (This function is essentially the two-dimensional version of @ref
 * createTriggerByRange(const std::string&, const std::vector<std::string>&, const std::string&, const double, const double, const std::map<std::string, std::string>&) const
 * "createTriggerByRange".) Once the trigger has been activated, any record
 * added to the listed tables(s) via @ref
 * insertRecords(const std::string&, const std::vector<TRequest>&, const std::map<std::string, std::string>&) const
 * "insertRecords" with the chosen columns' values falling within the specified
 * region will trip the trigger. All such records will be queued at the trigger
 * port (by default '9001' but able to be retrieved via @ref
 * showSystemStatus(const std::map<std::string, std::string>&) const
 * "showSystemStatus") for any listening client to collect. Active triggers can
 * be cancelled by using the @ref
 * clearTrigger(const std::string&, const std::map<std::string, std::string>&) const
 * "clearTrigger" endpoint or by clearing all relevant tables.
 *
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 *
 * @param[in] requestId  User-created ID for the trigger. The ID can be
 *                       alphanumeric, contain symbols, and must contain at
 *                       least one character.
 * @param[in] tableNames  Names of the tables on which the trigger will be
 *                        activated and maintained, each in
 *                        [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.
 * @param[in] xColumnName  Name of a numeric column on which the trigger is
 *                         activated. Usually 'x' for geospatial data points.
 * @param[in] xVector  The respective coordinate values for the region on which
 *                     the trigger is activated. This usually translates to the
 *                     x-coordinates of a geospatial region.
 * @param[in] yColumnName  Name of a second numeric column on which the trigger
 *                         is activated. Usually 'y' for geospatial data
 *                         points.
 * @param[in] yVector  The respective coordinate values for the region on which
 *                     the trigger is activated. This usually translates to the
 *                     y-coordinates of a geospatial region. Must be the same
 *                     length as xvals.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateTriggerByAreaResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateTriggerByAreaResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateTriggerByAreaResponse& createTriggerByArea( const std::string& requestId,
                                                  const std::vector<std::string>& tableNames,
                                                  const std::string& xColumnName,
                                                  const std::vector<double>& xVector,
                                                  const std::string& yColumnName,
                                                  const std::vector<double>& yVector,
                                                  const std::map<std::string, std::string>& options,
                                                  CreateTriggerByAreaResponse& response_ ) const;

/**
 * Sets up a simple range trigger for a column_name for one or more tables.
 * Once the trigger has been activated, any record added to the listed
 * tables(s) via @ref
 * insertRecords(const InsertRecordsRequest<TRequest>&) const "insertRecords"
 * with the chosen column_name's value falling within the specified range will
 * trip the trigger. All such records will be queued at the trigger port (by
 * default '9001' but able to be retrieved via @ref
 * showSystemStatus(const ShowSystemStatusRequest&) const "showSystemStatus")
 * for any listening client to collect. Active triggers can be cancelled by
 * using the @ref clearTrigger(const ClearTriggerRequest&) const "clearTrigger"
 * endpoint or by clearing all relevant tables.
 *
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 *
 * @param[in] request_  @ref gpudb::CreateTriggerByRangeRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateTriggerByRangeResponse "Response" object
 *         containing the result of the operation.
 */
CreateTriggerByRangeResponse createTriggerByRange( const CreateTriggerByRangeRequest& request_ ) const;

/**
 * Sets up a simple range trigger for a column_name for one or more tables.
 * Once the trigger has been activated, any record added to the listed
 * tables(s) via @ref
 * insertRecords(const InsertRecordsRequest<TRequest>&) const "insertRecords"
 * with the chosen column_name's value falling within the specified range will
 * trip the trigger. All such records will be queued at the trigger port (by
 * default '9001' but able to be retrieved via @ref
 * showSystemStatus(const ShowSystemStatusRequest&) const "showSystemStatus")
 * for any listening client to collect. Active triggers can be cancelled by
 * using the @ref clearTrigger(const ClearTriggerRequest&) const "clearTrigger"
 * endpoint or by clearing all relevant tables.
 *
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 *
 * @param[in] request_  @ref gpudb::CreateTriggerByRangeRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateTriggerByRangeResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateTriggerByRangeResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
CreateTriggerByRangeResponse& createTriggerByRange( const CreateTriggerByRangeRequest& request_,
                                                    CreateTriggerByRangeResponse& response_ ) const;

/**
 * Sets up a simple range trigger for a column_name for one or more tables.
 * Once the trigger has been activated, any record added to the listed
 * tables(s) via @ref
 * insertRecords(const std::string&, const std::vector<TRequest>&, const std::map<std::string, std::string>&) const
 * "insertRecords" with the chosen column_name's value falling within the
 * specified range will trip the trigger. All such records will be queued at
 * the trigger port (by default '9001' but able to be retrieved via @ref
 * showSystemStatus(const std::map<std::string, std::string>&) const
 * "showSystemStatus") for any listening client to collect. Active triggers can
 * be cancelled by using the @ref
 * clearTrigger(const std::string&, const std::map<std::string, std::string>&) const
 * "clearTrigger" endpoint or by clearing all relevant tables.
 *
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 *
 * @param[in] requestId  User-created ID for the trigger. The ID can be
 *                       alphanumeric, contain symbols, and must contain at
 *                       least one character.
 * @param[in] tableNames  Tables on which the trigger will be active, each in
 *                        [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.
 * @param[in] columnName  Name of a numeric column_name on which the trigger is
 *                        activated.
 * @param[in] min  The lower bound (inclusive) for the trigger range.
 * @param[in] max  The upper bound (inclusive) for the trigger range.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::CreateTriggerByRangeResponse "Response" object
 *         containing the result of the operation.
 */
CreateTriggerByRangeResponse createTriggerByRange( const std::string& requestId,
                                                   const std::vector<std::string>& tableNames,
                                                   const std::string& columnName,
                                                   const double min,
                                                   const double max,
                                                   const std::map<std::string, std::string>& options ) const;

/**
 * Sets up a simple range trigger for a column_name for one or more tables.
 * Once the trigger has been activated, any record added to the listed
 * tables(s) via @ref
 * insertRecords(const std::string&, const std::vector<TRequest>&, const std::map<std::string, std::string>&) const
 * "insertRecords" with the chosen column_name's value falling within the
 * specified range will trip the trigger. All such records will be queued at
 * the trigger port (by default '9001' but able to be retrieved via @ref
 * showSystemStatus(const std::map<std::string, std::string>&) const
 * "showSystemStatus") for any listening client to collect. Active triggers can
 * be cancelled by using the @ref
 * clearTrigger(const std::string&, const std::map<std::string, std::string>&) const
 * "clearTrigger" endpoint or by clearing all relevant tables.
 *
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 *
 * @param[in] requestId  User-created ID for the trigger. The ID can be
 *                       alphanumeric, contain symbols, and must contain at
 *                       least one character.
 * @param[in] tableNames  Tables on which the trigger will be active, each in
 *                        [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.
 * @param[in] columnName  Name of a numeric column_name on which the trigger is
 *                        activated.
 * @param[in] min  The lower bound (inclusive) for the trigger range.
 * @param[in] max  The upper bound (inclusive) for the trigger range.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateTriggerByRangeResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateTriggerByRangeResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
CreateTriggerByRangeResponse& createTriggerByRange( const std::string& requestId,
                                                    const std::vector<std::string>& tableNames,
                                                    const std::string& columnName,
                                                    const double min,
                                                    const double max,
                                                    const std::map<std::string, std::string>& options,
                                                    CreateTriggerByRangeResponse& response_ ) const;

/**
 * Creates a new type describing the layout of a table. The type definition is
 * a JSON string describing the fields (i.e.\ columns) of the type. Each field
 * consists of a name and a data type. Supported data types are: double, float,
 * int, long, string, and bytes. In addition, one or more properties can be
 * specified for each column which customize the memory usage and query
 * availability of that column.  Note that some properties are mutually
 * exclusive--i.e.\ they cannot be specified for any given column
 * simultaneously.  One example of mutually exclusive properties are @ref
 * gpudb::create_type_data "data" and @ref gpudb::create_type_store_only
 * "store_only".
 *
 * A single <a href="../../../concepts/tables/#primary-keys"
 * target="_top">primary key</a> and/or single <a
 * href="../../../concepts/tables/#shard-keys" target="_top">shard key</a> can
 * be set across one or more columns. If a primary key is specified, then a
 * uniqueness constraint is enforced, in that only a single object can exist
 * with a given primary key column value (or set of values for the key columns,
 * if using a composite primary key). When @ref
 * insertRecords(const InsertRecordsRequest<TRequest>&) const "inserting" data
 * into a table with a primary key, depending on the parameters in the request,
 * incoming objects with primary key values that match existing objects will
 * either overwrite (i.e.\ update) the existing object or will be skipped and
 * not added into the set.
 *
 * Example of a type definition with some of the parameters:
 * @code
 *
 *     {"type":"record",
 *     "name":"point",
 *     "fields":[{"name":"msg_id","type":"string"},
 *             {"name":"x","type":"double"},
 *             {"name":"y","type":"double"},
 *             {"name":"TIMESTAMP","type":"double"},
 *             {"name":"source","type":"string"},
 *             {"name":"group_id","type":"string"},
 *             {"name":"OBJECT_ID","type":"string"}]
 *     }
 *
 * @endcode
 * Properties:
 * @code
 *
 *     {"group_id":["store_only"],
 *     "msg_id":["store_only","text_search"]
 *     }
 * @endcode
 *
 * @param[in] request_  @ref gpudb::CreateTypeRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateTypeResponse "Response" object containing the
 *         result of the operation.
 */
CreateTypeResponse createType( const CreateTypeRequest& request_ ) const;

/**
 * Creates a new type describing the layout of a table. The type definition is
 * a JSON string describing the fields (i.e.\ columns) of the type. Each field
 * consists of a name and a data type. Supported data types are: double, float,
 * int, long, string, and bytes. In addition, one or more properties can be
 * specified for each column which customize the memory usage and query
 * availability of that column.  Note that some properties are mutually
 * exclusive--i.e.\ they cannot be specified for any given column
 * simultaneously.  One example of mutually exclusive properties are @ref
 * gpudb::create_type_data "data" and @ref gpudb::create_type_store_only
 * "store_only".
 *
 * A single <a href="../../../concepts/tables/#primary-keys"
 * target="_top">primary key</a> and/or single <a
 * href="../../../concepts/tables/#shard-keys" target="_top">shard key</a> can
 * be set across one or more columns. If a primary key is specified, then a
 * uniqueness constraint is enforced, in that only a single object can exist
 * with a given primary key column value (or set of values for the key columns,
 * if using a composite primary key). When @ref
 * insertRecords(const InsertRecordsRequest<TRequest>&) const "inserting" data
 * into a table with a primary key, depending on the parameters in the request,
 * incoming objects with primary key values that match existing objects will
 * either overwrite (i.e.\ update) the existing object or will be skipped and
 * not added into the set.
 *
 * Example of a type definition with some of the parameters:
 * @code
 *
 *     {"type":"record",
 *     "name":"point",
 *     "fields":[{"name":"msg_id","type":"string"},
 *             {"name":"x","type":"double"},
 *             {"name":"y","type":"double"},
 *             {"name":"TIMESTAMP","type":"double"},
 *             {"name":"source","type":"string"},
 *             {"name":"group_id","type":"string"},
 *             {"name":"OBJECT_ID","type":"string"}]
 *     }
 *
 * @endcode
 * Properties:
 * @code
 *
 *     {"group_id":["store_only"],
 *     "msg_id":["store_only","text_search"]
 *     }
 * @endcode
 *
 * @param[in] request_  @ref gpudb::CreateTypeRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateTypeResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateTypeResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateTypeResponse& createType( const CreateTypeRequest& request_,
                                CreateTypeResponse& response_ ) const;

/**
 * Creates a new type describing the layout of a table. The type definition is
 * a JSON string describing the fields (i.e.\ columns) of the type. Each field
 * consists of a name and a data type. Supported data types are: double, float,
 * int, long, string, and bytes. In addition, one or more properties can be
 * specified for each column which customize the memory usage and query
 * availability of that column.  Note that some properties are mutually
 * exclusive--i.e.\ they cannot be specified for any given column
 * simultaneously.  One example of mutually exclusive properties are @ref
 * gpudb::create_type_data "data" and @ref gpudb::create_type_store_only
 * "store_only".
 *
 * A single <a href="../../../concepts/tables/#primary-keys"
 * target="_top">primary key</a> and/or single <a
 * href="../../../concepts/tables/#shard-keys" target="_top">shard key</a> can
 * be set across one or more columns. If a primary key is specified, then a
 * uniqueness constraint is enforced, in that only a single object can exist
 * with a given primary key column value (or set of values for the key columns,
 * if using a composite primary key). When @ref
 * insertRecords(const std::string&, const std::vector<TRequest>&, const std::map<std::string, std::string>&) const
 * "inserting" data into a table with a primary key, depending on the
 * parameters in the request, incoming objects with primary key values that
 * match existing objects will either overwrite (i.e.\ update) the existing
 * object or will be skipped and not added into the set.
 *
 * Example of a type definition with some of the parameters:
 * @code
 *
 *     {"type":"record",
 *     "name":"point",
 *     "fields":[{"name":"msg_id","type":"string"},
 *             {"name":"x","type":"double"},
 *             {"name":"y","type":"double"},
 *             {"name":"TIMESTAMP","type":"double"},
 *             {"name":"source","type":"string"},
 *             {"name":"group_id","type":"string"},
 *             {"name":"OBJECT_ID","type":"string"}]
 *     }
 *
 * @endcode
 * Properties:
 * @code
 *
 *     {"group_id":["store_only"],
 *     "msg_id":["store_only","text_search"]
 *     }
 * @endcode
 *
 * @param[in] typeDefinition  a JSON string describing the columns of the type
 *                            to be registered.
 * @param[in] label  A user-defined description string which can be used to
 *                   differentiate between tables and types with otherwise
 *                   identical schemas.
 * @param[in] properties  Each key-value pair specifies the properties to use
 *                        for a given column where the key is the column name.
 *                        All keys used must be relevant column names for the
 *                        given table.  Specifying any property overrides the
 *                        default properties for that column (which is based on
 *                        the column's data type).
 *                        Valid values are:
 *                        <ul>
 *                            <li>@ref gpudb::create_type_data
 *                                "create_type_data": Default property for all
 *                                numeric and string type columns; makes the
 *                                column available for GPU queries.
 *                            <li>@ref gpudb::create_type_text_search
 *                                "create_type_text_search": Valid only for
 *                                select 'string' columns. Enables full text
 *                                search--see <a
 *                                href="../../../concepts/full_text_search/"
 *                                target="_top">Full Text Search</a> for
 *                                details and applicable string column types.
 *                                Can be set independently of @ref
 *                                gpudb::create_type_data "data" and @ref
 *                                gpudb::create_type_store_only "store_only".
 *                            <li>@ref gpudb::create_type_store_only
 *                                "create_type_store_only": Persist the column
 *                                value but do not make it available to queries
 *                                (e.g. @ref
 *                                filter(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                "filter")-i.e. it is mutually exclusive to
 *                                the @ref gpudb::create_type_data "data"
 *                                property. Any 'bytes' type column must have a
 *                                @ref gpudb::create_type_store_only
 *                                "store_only" property. This property reduces
 *                                system memory usage.
 *                            <li>@ref gpudb::create_type_disk_optimized
 *                                "create_type_disk_optimized": Works in
 *                                conjunction with the @ref
 *                                gpudb::create_type_data "data" property for
 *                                string columns. This property reduces system
 *                                disk usage by disabling reverse string
 *                                lookups. Queries like @ref
 *                                filter(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                "filter", @ref
 *                                filterByList(const std::string&, const std::string&, const std::map<std::string, std::vector<std::string> >&, const std::map<std::string, std::string>&) const
 *                                "filterByList", and @ref
 *                                filterByValue(const std::string&, const std::string&, const bool, const double, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                "filterByValue" work as usual but @ref
 *                                aggregateUnique(const std::string&, const std::string&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 *                                "aggregateUnique" and @ref
 *                                aggregateGroupBy(const std::string&, const std::vector<std::string>&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 *                                "aggregateGroupBy" are not allowed on columns
 *                                with this property.
 *                            <li>@ref gpudb::create_type_timestamp
 *                                "create_type_timestamp": Valid only for
 *                                'long' columns. Indicates that this field
 *                                represents a timestamp and will be provided
 *                                in milliseconds since the Unix epoch:
 *                                00:00:00 Jan 1 1970.  Dates represented by a
 *                                timestamp must fall between the year 1000 and
 *                                the year 2900.
 *                            <li>@ref gpudb::create_type_ulong
 *                                "create_type_ulong": Valid only for 'string'
 *                                columns.  It represents an unsigned long
 *                                integer data type. The string can only be
 *                                interpreted as an unsigned long data type
 *                                with minimum value of zero, and maximum value
 *                                of 18446744073709551615.
 *                            <li>@ref gpudb::create_type_uuid
 *                                "create_type_uuid": Valid only for 'string'
 *                                columns.  It represents an uuid data type.
 *                                Internally, it is stored as a 128-bit
 *                                integer.
 *                            <li>@ref gpudb::create_type_decimal
 *                                "create_type_decimal": Valid only for
 *                                'string' columns.  It represents a SQL type
 *                                NUMERIC(19, 4) data type.  There can be up to
 *                                15 digits before the decimal point and up to
 *                                four digits in the fractional part.  The
 *                                value can be positive or negative (indicated
 *                                by a minus sign at the beginning).  This
 *                                property is mutually exclusive with the @ref
 *                                gpudb::create_type_text_search "text_search"
 *                                property.
 *                            <li>@ref gpudb::create_type_date
 *                                "create_type_date": Valid only for 'string'
 *                                columns.  Indicates that this field
 *                                represents a date and will be provided in the
 *                                format 'YYYY-MM-DD'.  The allowable range is
 *                                1000-01-01 through 2900-01-01.  This property
 *                                is mutually exclusive with the @ref
 *                                gpudb::create_type_text_search "text_search"
 *                                property.
 *                            <li>@ref gpudb::create_type_time
 *                                "create_type_time": Valid only for 'string'
 *                                columns.  Indicates that this field
 *                                represents a time-of-day and will be provided
 *                                in the format 'HH:MM:SS.mmm'.  The allowable
 *                                range is 00:00:00.000 through 23:59:59.999.
 *                                This property is mutually exclusive with the
 *                                @ref gpudb::create_type_text_search
 *                                "text_search" property.
 *                            <li>@ref gpudb::create_type_datetime
 *                                "create_type_datetime": Valid only for
 *                                'string' columns.  Indicates that this field
 *                                represents a datetime and will be provided in
 *                                the format 'YYYY-MM-DD HH:MM:SS.mmm'.  The
 *                                allowable range is 1000-01-01 00:00:00.000
 *                                through 2900-01-01 23:59:59.999.  This
 *                                property is mutually exclusive with the @ref
 *                                gpudb::create_type_text_search "text_search"
 *                                property.
 *                            <li>@ref gpudb::create_type_char1
 *                                "create_type_char1": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 1 character.
 *                            <li>@ref gpudb::create_type_char2
 *                                "create_type_char2": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 2 characters.
 *                            <li>@ref gpudb::create_type_char4
 *                                "create_type_char4": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 4 characters.
 *                            <li>@ref gpudb::create_type_char8
 *                                "create_type_char8": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 8 characters.
 *                            <li>@ref gpudb::create_type_char16
 *                                "create_type_char16": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 16
 *                                characters.
 *                            <li>@ref gpudb::create_type_char32
 *                                "create_type_char32": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 32
 *                                characters.
 *                            <li>@ref gpudb::create_type_char64
 *                                "create_type_char64": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 64
 *                                characters.
 *                            <li>@ref gpudb::create_type_char128
 *                                "create_type_char128": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 128
 *                                characters.
 *                            <li>@ref gpudb::create_type_char256
 *                                "create_type_char256": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 256
 *                                characters.
 *                            <li>@ref gpudb::create_type_boolean
 *                                "create_type_boolean": This property provides
 *                                optimized memory and query performance for
 *                                int columns. Ints with this property must be
 *                                between 0 and 1(inclusive)
 *                            <li>@ref gpudb::create_type_int8
 *                                "create_type_int8": This property provides
 *                                optimized memory and query performance for
 *                                int columns. Ints with this property must be
 *                                between -128 and +127 (inclusive)
 *                            <li>@ref gpudb::create_type_int16
 *                                "create_type_int16": This property provides
 *                                optimized memory and query performance for
 *                                int columns. Ints with this property must be
 *                                between -32768 and +32767 (inclusive)
 *                            <li>@ref gpudb::create_type_ipv4
 *                                "create_type_ipv4": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns representing IPv4
 *                                addresses (i.e. 192.168.1.1). Strings with
 *                                this property must be of the form: A.B.C.D
 *                                where A, B, C and D are in the range of
 *                                0-255.
 *                            <li>@ref gpudb::create_type_array
 *                                "create_type_array": Valid only for 'string'
 *                                columns. Indicates that this field contains
 *                                an array.  The value type and (optionally)
 *                                the item count should be specified in
 *                                parenthesis; e.g., 'array(int, 10)' for a
 *                                10-integer array.  Both 'array(int)' and
 *                                'array(int, -1)' will designate an
 *                                unlimited-length integer array, though no
 *                                bounds checking is performed on arrays of any
 *                                length.
 *                            <li>@ref gpudb::create_type_json
 *                                "create_type_json": Valid only for 'string'
 *                                columns. Indicates that this field contains
 *                                values in JSON format.
 *                            <li>@ref gpudb::create_type_vector
 *                                "create_type_vector": Valid only for 'bytes'
 *                                columns. Indicates that this field contains a
 *                                vector of floats.  The length should be
 *                                specified in parenthesis, e.g.,
 *                                'vector(1000)'.
 *                            <li>@ref gpudb::create_type_wkt
 *                                "create_type_wkt": Valid only for 'string'
 *                                and 'bytes' columns. Indicates that this
 *                                field contains geospatial geometry objects in
 *                                Well-Known Text (WKT) or Well-Known Binary
 *                                (WKB) format.
 *                            <li>@ref gpudb::create_type_primary_key
 *                                "create_type_primary_key": This property
 *                                indicates that this column will be part of
 *                                (or the entire) <a
 *                                href="../../../concepts/tables/#primary-keys"
 *                                target="_top">primary key</a>.
 *                            <li>@ref gpudb::create_type_shard_key
 *                                "create_type_shard_key": This property
 *                                indicates that this column will be part of
 *                                (or the entire) <a
 *                                href="../../../concepts/tables/#shard-keys"
 *                                target="_top">shard key</a>.
 *                            <li>@ref gpudb::create_type_nullable
 *                                "create_type_nullable": This property
 *                                indicates that this column is nullable.
 *                                However, setting this property is
 *                                insufficient for making the column nullable.
 *                                The user must declare the type of the column
 *                                as a union between its regular type and
 *                                'null' in the avro schema for the record type
 *                                in @a typeDefinition.  For example, if a
 *                                column is of type integer and is nullable,
 *                                then the entry for the column in the avro
 *                                schema must be: ['int', 'null'].  The C++,
 *                                C#, Java, and Python APIs have built-in
 *                                convenience for bypassing setting the avro
 *                                schema by hand.  For those languages, one can
 *                                use this property as usual and not have to
 *                                worry about the avro schema for the record.
 *                            <li>@ref gpudb::create_type_dict
 *                                "create_type_dict": This property indicates
 *                                that this column should be <a
 *                                href="../../../concepts/dictionary_encoding/"
 *                                target="_top">dictionary encoded</a>. It can
 *                                only be used in conjunction with restricted
 *                                string (charN), int, long or date columns.
 *                                Dictionary encoding is best for columns where
 *                                the cardinality (the number of unique values)
 *                                is expected to be low. This property can save
 *                                a large amount of memory.
 *                            <li>@ref gpudb::create_type_init_with_now
 *                                "create_type_init_with_now": For 'date',
 *                                'time', 'datetime', or 'timestamp' column
 *                                types, replace empty strings and invalid
 *                                timestamps with 'NOW()' upon insert.
 *                            <li>@ref gpudb::create_type_init_with_uuid
 *                                "create_type_init_with_uuid": For 'uuid'
 *                                type, replace empty strings and invalid UUID
 *                                values with randomly-generated UUIDs upon
 *                                insert.
 *                        </ul>
 *                        The default value is an empty map.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::CreateTypeResponse "Response" object containing the
 *         result of the operation.
 */
CreateTypeResponse createType( const std::string& typeDefinition,
                               const std::string& label,
                               const std::map<std::string, std::vector<std::string> >& properties,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new type describing the layout of a table. The type definition is
 * a JSON string describing the fields (i.e.\ columns) of the type. Each field
 * consists of a name and a data type. Supported data types are: double, float,
 * int, long, string, and bytes. In addition, one or more properties can be
 * specified for each column which customize the memory usage and query
 * availability of that column.  Note that some properties are mutually
 * exclusive--i.e.\ they cannot be specified for any given column
 * simultaneously.  One example of mutually exclusive properties are @ref
 * gpudb::create_type_data "data" and @ref gpudb::create_type_store_only
 * "store_only".
 *
 * A single <a href="../../../concepts/tables/#primary-keys"
 * target="_top">primary key</a> and/or single <a
 * href="../../../concepts/tables/#shard-keys" target="_top">shard key</a> can
 * be set across one or more columns. If a primary key is specified, then a
 * uniqueness constraint is enforced, in that only a single object can exist
 * with a given primary key column value (or set of values for the key columns,
 * if using a composite primary key). When @ref
 * insertRecords(const std::string&, const std::vector<TRequest>&, const std::map<std::string, std::string>&) const
 * "inserting" data into a table with a primary key, depending on the
 * parameters in the request, incoming objects with primary key values that
 * match existing objects will either overwrite (i.e.\ update) the existing
 * object or will be skipped and not added into the set.
 *
 * Example of a type definition with some of the parameters:
 * @code
 *
 *     {"type":"record",
 *     "name":"point",
 *     "fields":[{"name":"msg_id","type":"string"},
 *             {"name":"x","type":"double"},
 *             {"name":"y","type":"double"},
 *             {"name":"TIMESTAMP","type":"double"},
 *             {"name":"source","type":"string"},
 *             {"name":"group_id","type":"string"},
 *             {"name":"OBJECT_ID","type":"string"}]
 *     }
 *
 * @endcode
 * Properties:
 * @code
 *
 *     {"group_id":["store_only"],
 *     "msg_id":["store_only","text_search"]
 *     }
 * @endcode
 *
 * @param[in] typeDefinition  a JSON string describing the columns of the type
 *                            to be registered.
 * @param[in] label  A user-defined description string which can be used to
 *                   differentiate between tables and types with otherwise
 *                   identical schemas.
 * @param[in] properties  Each key-value pair specifies the properties to use
 *                        for a given column where the key is the column name.
 *                        All keys used must be relevant column names for the
 *                        given table.  Specifying any property overrides the
 *                        default properties for that column (which is based on
 *                        the column's data type).
 *                        Valid values are:
 *                        <ul>
 *                            <li>@ref gpudb::create_type_data
 *                                "create_type_data": Default property for all
 *                                numeric and string type columns; makes the
 *                                column available for GPU queries.
 *                            <li>@ref gpudb::create_type_text_search
 *                                "create_type_text_search": Valid only for
 *                                select 'string' columns. Enables full text
 *                                search--see <a
 *                                href="../../../concepts/full_text_search/"
 *                                target="_top">Full Text Search</a> for
 *                                details and applicable string column types.
 *                                Can be set independently of @ref
 *                                gpudb::create_type_data "data" and @ref
 *                                gpudb::create_type_store_only "store_only".
 *                            <li>@ref gpudb::create_type_store_only
 *                                "create_type_store_only": Persist the column
 *                                value but do not make it available to queries
 *                                (e.g. @ref
 *                                filter(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                "filter")-i.e. it is mutually exclusive to
 *                                the @ref gpudb::create_type_data "data"
 *                                property. Any 'bytes' type column must have a
 *                                @ref gpudb::create_type_store_only
 *                                "store_only" property. This property reduces
 *                                system memory usage.
 *                            <li>@ref gpudb::create_type_disk_optimized
 *                                "create_type_disk_optimized": Works in
 *                                conjunction with the @ref
 *                                gpudb::create_type_data "data" property for
 *                                string columns. This property reduces system
 *                                disk usage by disabling reverse string
 *                                lookups. Queries like @ref
 *                                filter(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                "filter", @ref
 *                                filterByList(const std::string&, const std::string&, const std::map<std::string, std::vector<std::string> >&, const std::map<std::string, std::string>&) const
 *                                "filterByList", and @ref
 *                                filterByValue(const std::string&, const std::string&, const bool, const double, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                "filterByValue" work as usual but @ref
 *                                aggregateUnique(const std::string&, const std::string&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 *                                "aggregateUnique" and @ref
 *                                aggregateGroupBy(const std::string&, const std::vector<std::string>&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 *                                "aggregateGroupBy" are not allowed on columns
 *                                with this property.
 *                            <li>@ref gpudb::create_type_timestamp
 *                                "create_type_timestamp": Valid only for
 *                                'long' columns. Indicates that this field
 *                                represents a timestamp and will be provided
 *                                in milliseconds since the Unix epoch:
 *                                00:00:00 Jan 1 1970.  Dates represented by a
 *                                timestamp must fall between the year 1000 and
 *                                the year 2900.
 *                            <li>@ref gpudb::create_type_ulong
 *                                "create_type_ulong": Valid only for 'string'
 *                                columns.  It represents an unsigned long
 *                                integer data type. The string can only be
 *                                interpreted as an unsigned long data type
 *                                with minimum value of zero, and maximum value
 *                                of 18446744073709551615.
 *                            <li>@ref gpudb::create_type_uuid
 *                                "create_type_uuid": Valid only for 'string'
 *                                columns.  It represents an uuid data type.
 *                                Internally, it is stored as a 128-bit
 *                                integer.
 *                            <li>@ref gpudb::create_type_decimal
 *                                "create_type_decimal": Valid only for
 *                                'string' columns.  It represents a SQL type
 *                                NUMERIC(19, 4) data type.  There can be up to
 *                                15 digits before the decimal point and up to
 *                                four digits in the fractional part.  The
 *                                value can be positive or negative (indicated
 *                                by a minus sign at the beginning).  This
 *                                property is mutually exclusive with the @ref
 *                                gpudb::create_type_text_search "text_search"
 *                                property.
 *                            <li>@ref gpudb::create_type_date
 *                                "create_type_date": Valid only for 'string'
 *                                columns.  Indicates that this field
 *                                represents a date and will be provided in the
 *                                format 'YYYY-MM-DD'.  The allowable range is
 *                                1000-01-01 through 2900-01-01.  This property
 *                                is mutually exclusive with the @ref
 *                                gpudb::create_type_text_search "text_search"
 *                                property.
 *                            <li>@ref gpudb::create_type_time
 *                                "create_type_time": Valid only for 'string'
 *                                columns.  Indicates that this field
 *                                represents a time-of-day and will be provided
 *                                in the format 'HH:MM:SS.mmm'.  The allowable
 *                                range is 00:00:00.000 through 23:59:59.999.
 *                                This property is mutually exclusive with the
 *                                @ref gpudb::create_type_text_search
 *                                "text_search" property.
 *                            <li>@ref gpudb::create_type_datetime
 *                                "create_type_datetime": Valid only for
 *                                'string' columns.  Indicates that this field
 *                                represents a datetime and will be provided in
 *                                the format 'YYYY-MM-DD HH:MM:SS.mmm'.  The
 *                                allowable range is 1000-01-01 00:00:00.000
 *                                through 2900-01-01 23:59:59.999.  This
 *                                property is mutually exclusive with the @ref
 *                                gpudb::create_type_text_search "text_search"
 *                                property.
 *                            <li>@ref gpudb::create_type_char1
 *                                "create_type_char1": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 1 character.
 *                            <li>@ref gpudb::create_type_char2
 *                                "create_type_char2": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 2 characters.
 *                            <li>@ref gpudb::create_type_char4
 *                                "create_type_char4": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 4 characters.
 *                            <li>@ref gpudb::create_type_char8
 *                                "create_type_char8": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 8 characters.
 *                            <li>@ref gpudb::create_type_char16
 *                                "create_type_char16": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 16
 *                                characters.
 *                            <li>@ref gpudb::create_type_char32
 *                                "create_type_char32": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 32
 *                                characters.
 *                            <li>@ref gpudb::create_type_char64
 *                                "create_type_char64": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 64
 *                                characters.
 *                            <li>@ref gpudb::create_type_char128
 *                                "create_type_char128": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 128
 *                                characters.
 *                            <li>@ref gpudb::create_type_char256
 *                                "create_type_char256": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns. Strings with this
 *                                property must be no longer than 256
 *                                characters.
 *                            <li>@ref gpudb::create_type_boolean
 *                                "create_type_boolean": This property provides
 *                                optimized memory and query performance for
 *                                int columns. Ints with this property must be
 *                                between 0 and 1(inclusive)
 *                            <li>@ref gpudb::create_type_int8
 *                                "create_type_int8": This property provides
 *                                optimized memory and query performance for
 *                                int columns. Ints with this property must be
 *                                between -128 and +127 (inclusive)
 *                            <li>@ref gpudb::create_type_int16
 *                                "create_type_int16": This property provides
 *                                optimized memory and query performance for
 *                                int columns. Ints with this property must be
 *                                between -32768 and +32767 (inclusive)
 *                            <li>@ref gpudb::create_type_ipv4
 *                                "create_type_ipv4": This property provides
 *                                optimized memory, disk and query performance
 *                                for string columns representing IPv4
 *                                addresses (i.e. 192.168.1.1). Strings with
 *                                this property must be of the form: A.B.C.D
 *                                where A, B, C and D are in the range of
 *                                0-255.
 *                            <li>@ref gpudb::create_type_array
 *                                "create_type_array": Valid only for 'string'
 *                                columns. Indicates that this field contains
 *                                an array.  The value type and (optionally)
 *                                the item count should be specified in
 *                                parenthesis; e.g., 'array(int, 10)' for a
 *                                10-integer array.  Both 'array(int)' and
 *                                'array(int, -1)' will designate an
 *                                unlimited-length integer array, though no
 *                                bounds checking is performed on arrays of any
 *                                length.
 *                            <li>@ref gpudb::create_type_json
 *                                "create_type_json": Valid only for 'string'
 *                                columns. Indicates that this field contains
 *                                values in JSON format.
 *                            <li>@ref gpudb::create_type_vector
 *                                "create_type_vector": Valid only for 'bytes'
 *                                columns. Indicates that this field contains a
 *                                vector of floats.  The length should be
 *                                specified in parenthesis, e.g.,
 *                                'vector(1000)'.
 *                            <li>@ref gpudb::create_type_wkt
 *                                "create_type_wkt": Valid only for 'string'
 *                                and 'bytes' columns. Indicates that this
 *                                field contains geospatial geometry objects in
 *                                Well-Known Text (WKT) or Well-Known Binary
 *                                (WKB) format.
 *                            <li>@ref gpudb::create_type_primary_key
 *                                "create_type_primary_key": This property
 *                                indicates that this column will be part of
 *                                (or the entire) <a
 *                                href="../../../concepts/tables/#primary-keys"
 *                                target="_top">primary key</a>.
 *                            <li>@ref gpudb::create_type_shard_key
 *                                "create_type_shard_key": This property
 *                                indicates that this column will be part of
 *                                (or the entire) <a
 *                                href="../../../concepts/tables/#shard-keys"
 *                                target="_top">shard key</a>.
 *                            <li>@ref gpudb::create_type_nullable
 *                                "create_type_nullable": This property
 *                                indicates that this column is nullable.
 *                                However, setting this property is
 *                                insufficient for making the column nullable.
 *                                The user must declare the type of the column
 *                                as a union between its regular type and
 *                                'null' in the avro schema for the record type
 *                                in @a typeDefinition.  For example, if a
 *                                column is of type integer and is nullable,
 *                                then the entry for the column in the avro
 *                                schema must be: ['int', 'null'].  The C++,
 *                                C#, Java, and Python APIs have built-in
 *                                convenience for bypassing setting the avro
 *                                schema by hand.  For those languages, one can
 *                                use this property as usual and not have to
 *                                worry about the avro schema for the record.
 *                            <li>@ref gpudb::create_type_dict
 *                                "create_type_dict": This property indicates
 *                                that this column should be <a
 *                                href="../../../concepts/dictionary_encoding/"
 *                                target="_top">dictionary encoded</a>. It can
 *                                only be used in conjunction with restricted
 *                                string (charN), int, long or date columns.
 *                                Dictionary encoding is best for columns where
 *                                the cardinality (the number of unique values)
 *                                is expected to be low. This property can save
 *                                a large amount of memory.
 *                            <li>@ref gpudb::create_type_init_with_now
 *                                "create_type_init_with_now": For 'date',
 *                                'time', 'datetime', or 'timestamp' column
 *                                types, replace empty strings and invalid
 *                                timestamps with 'NOW()' upon insert.
 *                            <li>@ref gpudb::create_type_init_with_uuid
 *                                "create_type_init_with_uuid": For 'uuid'
 *                                type, replace empty strings and invalid UUID
 *                                values with randomly-generated UUIDs upon
 *                                insert.
 *                        </ul>
 *                        The default value is an empty map.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateTypeResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateTypeResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateTypeResponse& createType( const std::string& typeDefinition,
                                const std::string& label,
                                const std::map<std::string, std::vector<std::string> >& properties,
                                const std::map<std::string, std::string>& options,
                                CreateTypeResponse& response_ ) const;

/**
 * Merges data from one or more tables with comparable data types into a new
 * table.
 *
 * The following merges are supported:
 *
 * UNION (DISTINCT/ALL) - For data set union details and examples, see <a
 * href="../../../concepts/unions/" target="_top">Union</a>.  For limitations,
 * see <a href="../../../concepts/unions/#limitations-and-cautions"
 * target="_top">Union Limitations and Cautions</a>.
 *
 * INTERSECT (DISTINCT/ALL) - For data set intersection details and examples,
 * see <a href="../../../concepts/intersect/" target="_top">Intersect</a>.  For
 * limitations, see <a href="../../../concepts/intersect/#limitations"
 * target="_top">Intersect Limitations</a>.
 *
 * EXCEPT (DISTINCT/ALL) - For data set subtraction details and examples, see
 * <a href="../../../concepts/except/" target="_top">Except</a>.  For
 * limitations, see <a href="../../../concepts/except/#limitations"
 * target="_top">Except Limitations</a>.
 *
 * MERGE VIEWS - For a given set of <a href="../../../concepts/filtered_views/"
 * target="_top">filtered views</a> on a single table, creates a single
 * filtered view containing all of the unique records across all of the given
 * filtered data sets.
 *
 * Non-charN 'string' and 'bytes' column types cannot be merged, nor can
 * columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a>.
 *
 * @param[in] request_  @ref gpudb::CreateUnionRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateUnionResponse "Response" object containing the
 *         result of the operation.
 */
CreateUnionResponse createUnion( const CreateUnionRequest& request_ ) const;

/**
 * Merges data from one or more tables with comparable data types into a new
 * table.
 *
 * The following merges are supported:
 *
 * UNION (DISTINCT/ALL) - For data set union details and examples, see <a
 * href="../../../concepts/unions/" target="_top">Union</a>.  For limitations,
 * see <a href="../../../concepts/unions/#limitations-and-cautions"
 * target="_top">Union Limitations and Cautions</a>.
 *
 * INTERSECT (DISTINCT/ALL) - For data set intersection details and examples,
 * see <a href="../../../concepts/intersect/" target="_top">Intersect</a>.  For
 * limitations, see <a href="../../../concepts/intersect/#limitations"
 * target="_top">Intersect Limitations</a>.
 *
 * EXCEPT (DISTINCT/ALL) - For data set subtraction details and examples, see
 * <a href="../../../concepts/except/" target="_top">Except</a>.  For
 * limitations, see <a href="../../../concepts/except/#limitations"
 * target="_top">Except Limitations</a>.
 *
 * MERGE VIEWS - For a given set of <a href="../../../concepts/filtered_views/"
 * target="_top">filtered views</a> on a single table, creates a single
 * filtered view containing all of the unique records across all of the given
 * filtered data sets.
 *
 * Non-charN 'string' and 'bytes' column types cannot be merged, nor can
 * columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a>.
 *
 * @param[in] request_  @ref gpudb::CreateUnionRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateUnionResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateUnionResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateUnionResponse& createUnion( const CreateUnionRequest& request_,
                                  CreateUnionResponse& response_ ) const;

/**
 * Merges data from one or more tables with comparable data types into a new
 * table.
 *
 * The following merges are supported:
 *
 * UNION (DISTINCT/ALL) - For data set union details and examples, see <a
 * href="../../../concepts/unions/" target="_top">Union</a>.  For limitations,
 * see <a href="../../../concepts/unions/#limitations-and-cautions"
 * target="_top">Union Limitations and Cautions</a>.
 *
 * INTERSECT (DISTINCT/ALL) - For data set intersection details and examples,
 * see <a href="../../../concepts/intersect/" target="_top">Intersect</a>.  For
 * limitations, see <a href="../../../concepts/intersect/#limitations"
 * target="_top">Intersect Limitations</a>.
 *
 * EXCEPT (DISTINCT/ALL) - For data set subtraction details and examples, see
 * <a href="../../../concepts/except/" target="_top">Except</a>.  For
 * limitations, see <a href="../../../concepts/except/#limitations"
 * target="_top">Except Limitations</a>.
 *
 * MERGE VIEWS - For a given set of <a href="../../../concepts/filtered_views/"
 * target="_top">filtered views</a> on a single table, creates a single
 * filtered view containing all of the unique records across all of the given
 * filtered data sets.
 *
 * Non-charN 'string' and 'bytes' column types cannot be merged, nor can
 * columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a>.
 *
 * @param[in] tableName  Name of the table to be created, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a> and meeting <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.
 * @param[in] tableNames  The list of table names to merge, in
 *                        [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.  Must
 *                        contain the names of one or more existing tables.
 * @param[in] inputColumnNames  The list of columns from each of the
 *                              corresponding input tables.
 * @param[in] outputColumnNames  The list of names of the columns to be stored
 *                               in the output table.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_union_create_temp_table
 *                             "create_union_create_temp_table": If @ref
 *                             gpudb::create_union_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             tableName. If @ref gpudb::create_union_persist
 *                             "persist" is @ref gpudb::create_union_false
 *                             "false" (or unspecified), then this is always
 *                             allowed even if the caller does not have
 *                             permission to create tables. The generated name
 *                             is returned in @ref
 *                             gpudb::create_union_qualified_table_name
 *                             "qualified_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_union_true
 *                                     "create_union_true"
 *                                 <li>@ref gpudb::create_union_false
 *                                     "create_union_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_union_false "create_union_false".
 *                         <li>@ref gpudb::create_union_collection_name
 *                             "create_union_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the projection as part of @a
 *                             tableName and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of the schema for the output
 *                             table. If the schema provided is non-existent,
 *                             it will be automatically created. The default
 *                             value is ''.
 *                         <li>@ref gpudb::create_union_mode
 *                             "create_union_mode": If @ref
 *                             gpudb::create_union_merge_views "merge_views",
 *                             then this operation will merge the provided
 *                             views. All @a tableNames must be views from the
 *                             same underlying base table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_union_union_all
 *                                     "create_union_union_all": Retains all
 *                                     rows from the specified tables.
 *                                 <li>@ref gpudb::create_union_union
 *                                     "create_union_union": Retains all unique
 *                                     rows from the specified tables (synonym
 *                                     for @ref
 *                                     gpudb::create_union_union_distinct
 *                                     "union_distinct").
 *                                 <li>@ref gpudb::create_union_union_distinct
 *                                     "create_union_union_distinct": Retains
 *                                     all unique rows from the specified
 *                                     tables.
 *                                 <li>@ref gpudb::create_union_except
 *                                     "create_union_except": Retains all
 *                                     unique rows from the first table that do
 *                                     not appear in the second table (only
 *                                     works on 2 tables).
 *                                 <li>@ref gpudb::create_union_except_all
 *                                     "create_union_except_all": Retains all
 *                                     rows(including duplicates) from the
 *                                     first table that do not appear in the
 *                                     second table (only works on 2 tables).
 *                                 <li>@ref gpudb::create_union_intersect
 *                                     "create_union_intersect": Retains all
 *                                     unique rows that appear in both of the
 *                                     specified tables (only works on 2
 *                                     tables).
 *                                 <li>@ref gpudb::create_union_intersect_all
 *                                     "create_union_intersect_all": Retains
 *                                     all rows(including duplicates) that
 *                                     appear in both of the specified tables
 *                                     (only works on 2 tables).
 *                                 <li>@ref gpudb::create_union_merge_views
 *                                     "create_union_merge_views": Merge two or
 *                                     more views (or views of views) of the
 *                                     same base data set into a new view. If
 *                                     this mode is selected @a
 *                                     inputColumnNames AND @a
 *                                     outputColumnNames must be empty. The
 *                                     resulting view would match the results
 *                                     of a SQL OR operation, e.g., if filter 1
 *                                     creates a view using the expression 'x =
 *                                     20' and filter 2 creates a view using
 *                                     the expression 'x &lt;= 10', then the
 *                                     merge views operation creates a new view
 *                                     using the expression 'x = 20 OR x &lt;=
 *                                     10'.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_union_union_all
 *                             "create_union_union_all".
 *                         <li>@ref gpudb::create_union_chunk_size
 *                             "create_union_chunk_size": Indicates the number
 *                             of records per chunk to be used for this output
 *                             table.
 *                         <li>@ref gpudb::create_union_chunk_column_max_memory
 *                             "create_union_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for this output
 *                             table.
 *                         <li>@ref gpudb::create_union_chunk_max_memory
 *                             "create_union_chunk_max_memory": Indicates the
 *                             target maximum data size for all columns in a
 *                             chunk to be used for this output table.
 *                         <li>@ref gpudb::create_union_create_indexes
 *                             "create_union_create_indexes": Comma-separated
 *                             list of columns on which to create indexes on
 *                             the output table.  The columns specified must be
 *                             present in @a outputColumnNames.
 *                         <li>@ref gpudb::create_union_ttl "create_union_ttl":
 *                             Sets the <a href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the output table
 *                             specified in @a tableName.
 *                         <li>@ref gpudb::create_union_persist
 *                             "create_union_persist": If @ref
 *                             gpudb::create_union_true "true", then the output
 *                             table specified in @a tableName will be
 *                             persisted and will not expire unless a @ref
 *                             gpudb::create_union_ttl "ttl" is specified.   If
 *                             @ref gpudb::create_union_false "false", then the
 *                             output table will be an in-memory table and will
 *                             expire unless a @ref gpudb::create_union_ttl
 *                             "ttl" is specified otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_union_true
 *                                     "create_union_true"
 *                                 <li>@ref gpudb::create_union_false
 *                                     "create_union_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_union_false "create_union_false".
 *                         <li>@ref gpudb::create_union_view_id
 *                             "create_union_view_id": ID of view of which this
 *                             output table is a member. The default value is
 *                             ''.
 *                         <li>@ref gpudb::create_union_force_replicated
 *                             "create_union_force_replicated": If @ref
 *                             gpudb::create_union_true "true", then the output
 *                             table specified in @a tableName will be
 *                             replicated even if the source tables are not.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_union_true
 *                                     "create_union_true"
 *                                 <li>@ref gpudb::create_union_false
 *                                     "create_union_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_union_false "create_union_false".
 *                         <li>@ref gpudb::create_union_strategy_definition
 *                             "create_union_strategy_definition": The <a
 *                             href="../../../rm/concepts/#tier-strategies"
 *                             target="_top">tier strategy</a> for the table
 *                             and its columns.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateUnionResponse "Response" object containing the
 *         result of the operation.
 */
CreateUnionResponse createUnion( const std::string& tableName,
                                 const std::vector<std::string>& tableNames,
                                 const std::vector<std::vector<std::string> >& inputColumnNames,
                                 const std::vector<std::string>& outputColumnNames,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Merges data from one or more tables with comparable data types into a new
 * table.
 *
 * The following merges are supported:
 *
 * UNION (DISTINCT/ALL) - For data set union details and examples, see <a
 * href="../../../concepts/unions/" target="_top">Union</a>.  For limitations,
 * see <a href="../../../concepts/unions/#limitations-and-cautions"
 * target="_top">Union Limitations and Cautions</a>.
 *
 * INTERSECT (DISTINCT/ALL) - For data set intersection details and examples,
 * see <a href="../../../concepts/intersect/" target="_top">Intersect</a>.  For
 * limitations, see <a href="../../../concepts/intersect/#limitations"
 * target="_top">Intersect Limitations</a>.
 *
 * EXCEPT (DISTINCT/ALL) - For data set subtraction details and examples, see
 * <a href="../../../concepts/except/" target="_top">Except</a>.  For
 * limitations, see <a href="../../../concepts/except/#limitations"
 * target="_top">Except Limitations</a>.
 *
 * MERGE VIEWS - For a given set of <a href="../../../concepts/filtered_views/"
 * target="_top">filtered views</a> on a single table, creates a single
 * filtered view containing all of the unique records across all of the given
 * filtered data sets.
 *
 * Non-charN 'string' and 'bytes' column types cannot be merged, nor can
 * columns marked as <a href="../../../concepts/types/#data-handling"
 * target="_top">store-only</a>.
 *
 * @param[in] tableName  Name of the table to be created, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a> and meeting <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.
 * @param[in] tableNames  The list of table names to merge, in
 *                        [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.  Must
 *                        contain the names of one or more existing tables.
 * @param[in] inputColumnNames  The list of columns from each of the
 *                              corresponding input tables.
 * @param[in] outputColumnNames  The list of names of the columns to be stored
 *                               in the output table.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_union_create_temp_table
 *                             "create_union_create_temp_table": If @ref
 *                             gpudb::create_union_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             tableName. If @ref gpudb::create_union_persist
 *                             "persist" is @ref gpudb::create_union_false
 *                             "false" (or unspecified), then this is always
 *                             allowed even if the caller does not have
 *                             permission to create tables. The generated name
 *                             is returned in @ref
 *                             gpudb::create_union_qualified_table_name
 *                             "qualified_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_union_true
 *                                     "create_union_true"
 *                                 <li>@ref gpudb::create_union_false
 *                                     "create_union_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_union_false "create_union_false".
 *                         <li>@ref gpudb::create_union_collection_name
 *                             "create_union_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the projection as part of @a
 *                             tableName and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of the schema for the output
 *                             table. If the schema provided is non-existent,
 *                             it will be automatically created. The default
 *                             value is ''.
 *                         <li>@ref gpudb::create_union_mode
 *                             "create_union_mode": If @ref
 *                             gpudb::create_union_merge_views "merge_views",
 *                             then this operation will merge the provided
 *                             views. All @a tableNames must be views from the
 *                             same underlying base table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_union_union_all
 *                                     "create_union_union_all": Retains all
 *                                     rows from the specified tables.
 *                                 <li>@ref gpudb::create_union_union
 *                                     "create_union_union": Retains all unique
 *                                     rows from the specified tables (synonym
 *                                     for @ref
 *                                     gpudb::create_union_union_distinct
 *                                     "union_distinct").
 *                                 <li>@ref gpudb::create_union_union_distinct
 *                                     "create_union_union_distinct": Retains
 *                                     all unique rows from the specified
 *                                     tables.
 *                                 <li>@ref gpudb::create_union_except
 *                                     "create_union_except": Retains all
 *                                     unique rows from the first table that do
 *                                     not appear in the second table (only
 *                                     works on 2 tables).
 *                                 <li>@ref gpudb::create_union_except_all
 *                                     "create_union_except_all": Retains all
 *                                     rows(including duplicates) from the
 *                                     first table that do not appear in the
 *                                     second table (only works on 2 tables).
 *                                 <li>@ref gpudb::create_union_intersect
 *                                     "create_union_intersect": Retains all
 *                                     unique rows that appear in both of the
 *                                     specified tables (only works on 2
 *                                     tables).
 *                                 <li>@ref gpudb::create_union_intersect_all
 *                                     "create_union_intersect_all": Retains
 *                                     all rows(including duplicates) that
 *                                     appear in both of the specified tables
 *                                     (only works on 2 tables).
 *                                 <li>@ref gpudb::create_union_merge_views
 *                                     "create_union_merge_views": Merge two or
 *                                     more views (or views of views) of the
 *                                     same base data set into a new view. If
 *                                     this mode is selected @a
 *                                     inputColumnNames AND @a
 *                                     outputColumnNames must be empty. The
 *                                     resulting view would match the results
 *                                     of a SQL OR operation, e.g., if filter 1
 *                                     creates a view using the expression 'x =
 *                                     20' and filter 2 creates a view using
 *                                     the expression 'x &lt;= 10', then the
 *                                     merge views operation creates a new view
 *                                     using the expression 'x = 20 OR x &lt;=
 *                                     10'.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_union_union_all
 *                             "create_union_union_all".
 *                         <li>@ref gpudb::create_union_chunk_size
 *                             "create_union_chunk_size": Indicates the number
 *                             of records per chunk to be used for this output
 *                             table.
 *                         <li>@ref gpudb::create_union_chunk_column_max_memory
 *                             "create_union_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for this output
 *                             table.
 *                         <li>@ref gpudb::create_union_chunk_max_memory
 *                             "create_union_chunk_max_memory": Indicates the
 *                             target maximum data size for all columns in a
 *                             chunk to be used for this output table.
 *                         <li>@ref gpudb::create_union_create_indexes
 *                             "create_union_create_indexes": Comma-separated
 *                             list of columns on which to create indexes on
 *                             the output table.  The columns specified must be
 *                             present in @a outputColumnNames.
 *                         <li>@ref gpudb::create_union_ttl "create_union_ttl":
 *                             Sets the <a href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the output table
 *                             specified in @a tableName.
 *                         <li>@ref gpudb::create_union_persist
 *                             "create_union_persist": If @ref
 *                             gpudb::create_union_true "true", then the output
 *                             table specified in @a tableName will be
 *                             persisted and will not expire unless a @ref
 *                             gpudb::create_union_ttl "ttl" is specified.   If
 *                             @ref gpudb::create_union_false "false", then the
 *                             output table will be an in-memory table and will
 *                             expire unless a @ref gpudb::create_union_ttl
 *                             "ttl" is specified otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_union_true
 *                                     "create_union_true"
 *                                 <li>@ref gpudb::create_union_false
 *                                     "create_union_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_union_false "create_union_false".
 *                         <li>@ref gpudb::create_union_view_id
 *                             "create_union_view_id": ID of view of which this
 *                             output table is a member. The default value is
 *                             ''.
 *                         <li>@ref gpudb::create_union_force_replicated
 *                             "create_union_force_replicated": If @ref
 *                             gpudb::create_union_true "true", then the output
 *                             table specified in @a tableName will be
 *                             replicated even if the source tables are not.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_union_true
 *                                     "create_union_true"
 *                                 <li>@ref gpudb::create_union_false
 *                                     "create_union_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_union_false "create_union_false".
 *                         <li>@ref gpudb::create_union_strategy_definition
 *                             "create_union_strategy_definition": The <a
 *                             href="../../../rm/concepts/#tier-strategies"
 *                             target="_top">tier strategy</a> for the table
 *                             and its columns.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateUnionResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateUnionResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateUnionResponse& createUnion( const std::string& tableName,
                                  const std::vector<std::string>& tableNames,
                                  const std::vector<std::vector<std::string> >& inputColumnNames,
                                  const std::vector<std::string>& outputColumnNames,
                                  const std::map<std::string, std::string>& options,
                                  CreateUnionResponse& response_ ) const;

/**
 * Creates a new external user (a user whose credentials are managed by an
 * external LDAP).
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::CreateUserExternalRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateUserExternalResponse "Response" object containing
 *         the result of the operation.
 */
CreateUserExternalResponse createUserExternal( const CreateUserExternalRequest& request_ ) const;

/**
 * Creates a new external user (a user whose credentials are managed by an
 * external LDAP).
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::CreateUserExternalRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateUserExternalResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateUserExternalResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateUserExternalResponse& createUserExternal( const CreateUserExternalRequest& request_,
                                                CreateUserExternalResponse& response_ ) const;

/**
 * Creates a new external user (a user whose credentials are managed by an
 * external LDAP).
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] name  Name of the user to be created. Must exactly match the
 *                  user's name in the external LDAP, prefixed with a @. Must
 *                  not be the same name as an existing user.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_user_external_resource_group
 *                             "create_user_external_resource_group": Name of
 *                             an existing resource group to associate with
 *                             this user
 *                         <li>@ref gpudb::create_user_external_default_schema
 *                             "create_user_external_default_schema": Default
 *                             schema to associate with this user
 *                         <li>@ref
 *                             gpudb::create_user_external_create_home_directory
 *                             "create_user_external_create_home_directory":
 *                             When @ref gpudb::create_user_external_true
 *                             "true", a home directory in KiFS is created for
 *                             this user.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_user_external_true
 *                                     "create_user_external_true"
 *                                 <li>@ref gpudb::create_user_external_false
 *                                     "create_user_external_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_user_external_true
 *                             "create_user_external_true".
 *                         <li>@ref
 *                             gpudb::create_user_external_directory_data_limit
 *                             "create_user_external_directory_data_limit": The
 *                             maximum capacity to apply to the created
 *                             directory if @ref
 *                             gpudb::create_user_external_create_home_directory
 *                             "create_home_directory" is @ref
 *                             gpudb::create_user_external_true "true". Set to
 *                             -1 to indicate no upper limit. If empty, the
 *                             system default limit is applied.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateUserExternalResponse "Response" object containing
 *         the result of the operation.
 */
CreateUserExternalResponse createUserExternal( const std::string& name,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new external user (a user whose credentials are managed by an
 * external LDAP).
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] name  Name of the user to be created. Must exactly match the
 *                  user's name in the external LDAP, prefixed with a @. Must
 *                  not be the same name as an existing user.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_user_external_resource_group
 *                             "create_user_external_resource_group": Name of
 *                             an existing resource group to associate with
 *                             this user
 *                         <li>@ref gpudb::create_user_external_default_schema
 *                             "create_user_external_default_schema": Default
 *                             schema to associate with this user
 *                         <li>@ref
 *                             gpudb::create_user_external_create_home_directory
 *                             "create_user_external_create_home_directory":
 *                             When @ref gpudb::create_user_external_true
 *                             "true", a home directory in KiFS is created for
 *                             this user.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_user_external_true
 *                                     "create_user_external_true"
 *                                 <li>@ref gpudb::create_user_external_false
 *                                     "create_user_external_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_user_external_true
 *                             "create_user_external_true".
 *                         <li>@ref
 *                             gpudb::create_user_external_directory_data_limit
 *                             "create_user_external_directory_data_limit": The
 *                             maximum capacity to apply to the created
 *                             directory if @ref
 *                             gpudb::create_user_external_create_home_directory
 *                             "create_home_directory" is @ref
 *                             gpudb::create_user_external_true "true". Set to
 *                             -1 to indicate no upper limit. If empty, the
 *                             system default limit is applied.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateUserExternalResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateUserExternalResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateUserExternalResponse& createUserExternal( const std::string& name,
                                                const std::map<std::string, std::string>& options,
                                                CreateUserExternalResponse& response_ ) const;

/**
 * Creates a new internal user (a user whose credentials are managed by the
 * database system).
 *
 * @param[in] request_  @ref gpudb::CreateUserInternalRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateUserInternalResponse "Response" object containing
 *         the result of the operation.
 */
CreateUserInternalResponse createUserInternal( const CreateUserInternalRequest& request_ ) const;

/**
 * Creates a new internal user (a user whose credentials are managed by the
 * database system).
 *
 * @param[in] request_  @ref gpudb::CreateUserInternalRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateUserInternalResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateUserInternalResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateUserInternalResponse& createUserInternal( const CreateUserInternalRequest& request_,
                                                CreateUserInternalResponse& response_ ) const;

/**
 * Creates a new internal user (a user whose credentials are managed by the
 * database system).
 *
 * @param[in] name  Name of the user to be created. Must contain only lowercase
 *                  letters, digits, and underscores, and cannot begin with a
 *                  digit. Must not be the same name as an existing user or
 *                  role.
 * @param[in] password  Initial password of the user to be created. May be an
 *                      empty string for no password.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_user_internal_resource_group
 *                             "create_user_internal_resource_group": Name of
 *                             an existing resource group to associate with
 *                             this user
 *                         <li>@ref gpudb::create_user_internal_default_schema
 *                             "create_user_internal_default_schema": Default
 *                             schema to associate with this user
 *                         <li>@ref
 *                             gpudb::create_user_internal_create_home_directory
 *                             "create_user_internal_create_home_directory":
 *                             When @ref gpudb::create_user_internal_true
 *                             "true", a home directory in KiFS is created for
 *                             this user.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_user_internal_true
 *                                     "create_user_internal_true"
 *                                 <li>@ref gpudb::create_user_internal_false
 *                                     "create_user_internal_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_user_internal_true
 *                             "create_user_internal_true".
 *                         <li>@ref
 *                             gpudb::create_user_internal_directory_data_limit
 *                             "create_user_internal_directory_data_limit": The
 *                             maximum capacity to apply to the created
 *                             directory if @ref
 *                             gpudb::create_user_internal_create_home_directory
 *                             "create_home_directory" is @ref
 *                             gpudb::create_user_internal_true "true". Set to
 *                             -1 to indicate no upper limit. If empty, the
 *                             system default limit is applied.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateUserInternalResponse "Response" object containing
 *         the result of the operation.
 */
CreateUserInternalResponse createUserInternal( const std::string& name,
                                               const std::string& password,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new internal user (a user whose credentials are managed by the
 * database system).
 *
 * @param[in] name  Name of the user to be created. Must contain only lowercase
 *                  letters, digits, and underscores, and cannot begin with a
 *                  digit. Must not be the same name as an existing user or
 *                  role.
 * @param[in] password  Initial password of the user to be created. May be an
 *                      empty string for no password.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_user_internal_resource_group
 *                             "create_user_internal_resource_group": Name of
 *                             an existing resource group to associate with
 *                             this user
 *                         <li>@ref gpudb::create_user_internal_default_schema
 *                             "create_user_internal_default_schema": Default
 *                             schema to associate with this user
 *                         <li>@ref
 *                             gpudb::create_user_internal_create_home_directory
 *                             "create_user_internal_create_home_directory":
 *                             When @ref gpudb::create_user_internal_true
 *                             "true", a home directory in KiFS is created for
 *                             this user.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_user_internal_true
 *                                     "create_user_internal_true"
 *                                 <li>@ref gpudb::create_user_internal_false
 *                                     "create_user_internal_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_user_internal_true
 *                             "create_user_internal_true".
 *                         <li>@ref
 *                             gpudb::create_user_internal_directory_data_limit
 *                             "create_user_internal_directory_data_limit": The
 *                             maximum capacity to apply to the created
 *                             directory if @ref
 *                             gpudb::create_user_internal_create_home_directory
 *                             "create_home_directory" is @ref
 *                             gpudb::create_user_internal_true "true". Set to
 *                             -1 to indicate no upper limit. If empty, the
 *                             system default limit is applied.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateUserInternalResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::CreateUserInternalResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
CreateUserInternalResponse& createUserInternal( const std::string& name,
                                                const std::string& password,
                                                const std::map<std::string, std::string>& options,
                                                CreateUserInternalResponse& response_ ) const;

/**
 * Creates a job to generate a sequence of raster images that visualize data
 * over a specified time.
 *
 * @param[in] request_  @ref gpudb::CreateVideoRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::CreateVideoResponse "Response" object containing the
 *         result of the operation.
 */
CreateVideoResponse createVideo( const CreateVideoRequest& request_ ) const;

/**
 * Creates a job to generate a sequence of raster images that visualize data
 * over a specified time.
 *
 * @param[in] request_  @ref gpudb::CreateVideoRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::CreateVideoResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateVideoResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateVideoResponse& createVideo( const CreateVideoRequest& request_,
                                  CreateVideoResponse& response_ ) const;

/**
 * Creates a job to generate a sequence of raster images that visualize data
 * over a specified time.
 *
 * @param[in] attribute  The animated attribute to map to the video's frames.
 *                       Must be present in the LAYERS specified for the
 *                       visualization. This is often a time-related field but
 *                       may be any numeric type.
 * @param[in] begin  The start point for the video. Accepts an expression
 *                   evaluable over the @a attribute.
 * @param[in] durationSeconds  Seconds of video to produce
 * @param[in] end  The end point for the video. Accepts an expression evaluable
 *                 over the @a attribute.
 * @param[in] framesPerSecond  The presentation frame rate of the encoded video
 *                             in frames per second.
 * @param[in] style  The name of the visualize mode; should correspond to the
 *                   schema used for the @a styleParameters field.
 *                   Supported values:
 *                   <ul>
 *                       <li>@ref gpudb::create_video_chart
 *                           "create_video_chart"
 *                       <li>@ref gpudb::create_video_raster
 *                           "create_video_raster"
 *                       <li>@ref gpudb::create_video_classbreak
 *                           "create_video_classbreak"
 *                       <li>@ref gpudb::create_video_contour
 *                           "create_video_contour"
 *                       <li>@ref gpudb::create_video_heatmap
 *                           "create_video_heatmap"
 *                       <li>@ref gpudb::create_video_labels
 *                           "create_video_labels"
 *                   </ul>
 * @param[in] path  Fully-qualified <a href="../../../tools/kifs/"
 *                  target="_top">KiFS</a> path.  Write access is required. A
 *                  file must not exist at that path, unless @ref
 *                  gpudb::create_video_replace_if_exists "replace_if_exists"
 *                  is @ref gpudb::create_video_true "true".
 * @param[in] styleParameters  A string containing the JSON-encoded visualize
 *                             request.  Must correspond to the visualize mode
 *                             specified in the @a style field.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_video_ttl "create_video_ttl":
 *                             Sets the <a href="../../../concepts/ttl"
 *                             target="_top">TTL</a> of the video.
 *                         <li>@ref gpudb::create_video_window
 *                             "create_video_window": Specified using the
 *                             data-type corresponding to the @a attribute. For
 *                             a window of size W, a video frame rendered for
 *                             time t will visualize data in the interval
 *                             [t-W,t]. The minimum window size is the interval
 *                             between successive frames.  The minimum value is
 *                             the default.  If a value less than the minimum
 *                             value is specified, it is replaced with the
 *                             minimum window size.  Larger values will make
 *                             changes throughout the video appear more smooth
 *                             while smaller values will capture fast
 *                             variations in the data.
 *                         <li>@ref gpudb::create_video_no_error_if_exists
 *                             "create_video_no_error_if_exists": If @ref
 *                             gpudb::create_video_true "true", does not return
 *                             an error if the video already exists.  Ignored
 *                             if @ref gpudb::create_video_replace_if_exists
 *                             "replace_if_exists" is @ref
 *                             gpudb::create_video_true "true".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_video_false
 *                                     "create_video_false"
 *                                 <li>@ref gpudb::create_video_true
 *                                     "create_video_true"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_video_false "create_video_false".
 *                         <li>@ref gpudb::create_video_replace_if_exists
 *                             "create_video_replace_if_exists": If @ref
 *                             gpudb::create_video_true "true", deletes any
 *                             existing video with the same path before
 *                             creating a new video.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_video_false
 *                                     "create_video_false"
 *                                 <li>@ref gpudb::create_video_true
 *                                     "create_video_true"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_video_false "create_video_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::CreateVideoResponse "Response" object containing the
 *         result of the operation.
 */
CreateVideoResponse createVideo( const std::string& attribute,
                                 const std::string& begin,
                                 const double durationSeconds,
                                 const std::string& end,
                                 const double framesPerSecond,
                                 const std::string& style,
                                 const std::string& path,
                                 const std::string& styleParameters,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Creates a job to generate a sequence of raster images that visualize data
 * over a specified time.
 *
 * @param[in] attribute  The animated attribute to map to the video's frames.
 *                       Must be present in the LAYERS specified for the
 *                       visualization. This is often a time-related field but
 *                       may be any numeric type.
 * @param[in] begin  The start point for the video. Accepts an expression
 *                   evaluable over the @a attribute.
 * @param[in] durationSeconds  Seconds of video to produce
 * @param[in] end  The end point for the video. Accepts an expression evaluable
 *                 over the @a attribute.
 * @param[in] framesPerSecond  The presentation frame rate of the encoded video
 *                             in frames per second.
 * @param[in] style  The name of the visualize mode; should correspond to the
 *                   schema used for the @a styleParameters field.
 *                   Supported values:
 *                   <ul>
 *                       <li>@ref gpudb::create_video_chart
 *                           "create_video_chart"
 *                       <li>@ref gpudb::create_video_raster
 *                           "create_video_raster"
 *                       <li>@ref gpudb::create_video_classbreak
 *                           "create_video_classbreak"
 *                       <li>@ref gpudb::create_video_contour
 *                           "create_video_contour"
 *                       <li>@ref gpudb::create_video_heatmap
 *                           "create_video_heatmap"
 *                       <li>@ref gpudb::create_video_labels
 *                           "create_video_labels"
 *                   </ul>
 * @param[in] path  Fully-qualified <a href="../../../tools/kifs/"
 *                  target="_top">KiFS</a> path.  Write access is required. A
 *                  file must not exist at that path, unless @ref
 *                  gpudb::create_video_replace_if_exists "replace_if_exists"
 *                  is @ref gpudb::create_video_true "true".
 * @param[in] styleParameters  A string containing the JSON-encoded visualize
 *                             request.  Must correspond to the visualize mode
 *                             specified in the @a style field.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::create_video_ttl "create_video_ttl":
 *                             Sets the <a href="../../../concepts/ttl"
 *                             target="_top">TTL</a> of the video.
 *                         <li>@ref gpudb::create_video_window
 *                             "create_video_window": Specified using the
 *                             data-type corresponding to the @a attribute. For
 *                             a window of size W, a video frame rendered for
 *                             time t will visualize data in the interval
 *                             [t-W,t]. The minimum window size is the interval
 *                             between successive frames.  The minimum value is
 *                             the default.  If a value less than the minimum
 *                             value is specified, it is replaced with the
 *                             minimum window size.  Larger values will make
 *                             changes throughout the video appear more smooth
 *                             while smaller values will capture fast
 *                             variations in the data.
 *                         <li>@ref gpudb::create_video_no_error_if_exists
 *                             "create_video_no_error_if_exists": If @ref
 *                             gpudb::create_video_true "true", does not return
 *                             an error if the video already exists.  Ignored
 *                             if @ref gpudb::create_video_replace_if_exists
 *                             "replace_if_exists" is @ref
 *                             gpudb::create_video_true "true".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_video_false
 *                                     "create_video_false"
 *                                 <li>@ref gpudb::create_video_true
 *                                     "create_video_true"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_video_false "create_video_false".
 *                         <li>@ref gpudb::create_video_replace_if_exists
 *                             "create_video_replace_if_exists": If @ref
 *                             gpudb::create_video_true "true", deletes any
 *                             existing video with the same path before
 *                             creating a new video.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::create_video_false
 *                                     "create_video_false"
 *                                 <li>@ref gpudb::create_video_true
 *                                     "create_video_true"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::create_video_false "create_video_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::CreateVideoResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::CreateVideoResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
CreateVideoResponse& createVideo( const std::string& attribute,
                                  const std::string& begin,
                                  const double durationSeconds,
                                  const std::string& end,
                                  const double framesPerSecond,
                                  const std::string& style,
                                  const std::string& path,
                                  const std::string& styleParameters,
                                  const std::map<std::string, std::string>& options,
                                  CreateVideoResponse& response_ ) const;

/**
 * Deletes a directory from <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] request_  @ref gpudb::DeleteDirectoryRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DeleteDirectoryResponse "Response" object containing the
 *         result of the operation.
 */
DeleteDirectoryResponse deleteDirectory( const DeleteDirectoryRequest& request_ ) const;

/**
 * Deletes a directory from <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] request_  @ref gpudb::DeleteDirectoryRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DeleteDirectoryResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteDirectoryResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteDirectoryResponse& deleteDirectory( const DeleteDirectoryRequest& request_,
                                          DeleteDirectoryResponse& response_ ) const;

/**
 * Deletes a directory from <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] directoryName  Name of the directory in KiFS to be deleted. The
 *                           directory must contain no files, unless @ref
 *                           gpudb::delete_directory_recursive "recursive" is
 *                           @ref gpudb::delete_directory_true "true"
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::delete_directory_recursive
 *                             "delete_directory_recursive": If @ref
 *                             gpudb::delete_directory_true "true", will delete
 *                             directory and all files residing in it. If
 *                             false, directory must be empty for deletion.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::delete_directory_true
 *                                     "delete_directory_true"
 *                                 <li>@ref gpudb::delete_directory_false
 *                                     "delete_directory_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::delete_directory_false
 *                             "delete_directory_false".
 *                         <li>@ref
 *                             gpudb::delete_directory_no_error_if_not_exists
 *                             "delete_directory_no_error_if_not_exists": If
 *                             @ref gpudb::delete_directory_true "true", no
 *                             error is returned if specified directory does
 *                             not exist.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::delete_directory_true
 *                                     "delete_directory_true"
 *                                 <li>@ref gpudb::delete_directory_false
 *                                     "delete_directory_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::delete_directory_false
 *                             "delete_directory_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::DeleteDirectoryResponse "Response" object containing the
 *         result of the operation.
 */
DeleteDirectoryResponse deleteDirectory( const std::string& directoryName,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Deletes a directory from <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] directoryName  Name of the directory in KiFS to be deleted. The
 *                           directory must contain no files, unless @ref
 *                           gpudb::delete_directory_recursive "recursive" is
 *                           @ref gpudb::delete_directory_true "true"
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::delete_directory_recursive
 *                             "delete_directory_recursive": If @ref
 *                             gpudb::delete_directory_true "true", will delete
 *                             directory and all files residing in it. If
 *                             false, directory must be empty for deletion.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::delete_directory_true
 *                                     "delete_directory_true"
 *                                 <li>@ref gpudb::delete_directory_false
 *                                     "delete_directory_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::delete_directory_false
 *                             "delete_directory_false".
 *                         <li>@ref
 *                             gpudb::delete_directory_no_error_if_not_exists
 *                             "delete_directory_no_error_if_not_exists": If
 *                             @ref gpudb::delete_directory_true "true", no
 *                             error is returned if specified directory does
 *                             not exist.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::delete_directory_true
 *                                     "delete_directory_true"
 *                                 <li>@ref gpudb::delete_directory_false
 *                                     "delete_directory_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::delete_directory_false
 *                             "delete_directory_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::DeleteDirectoryResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteDirectoryResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteDirectoryResponse& deleteDirectory( const std::string& directoryName,
                                          const std::map<std::string, std::string>& options,
                                          DeleteDirectoryResponse& response_ ) const;

/**
 * Deletes one or more files from <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] request_  @ref gpudb::DeleteFilesRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DeleteFilesResponse "Response" object containing the
 *         result of the operation.
 */
DeleteFilesResponse deleteFiles( const DeleteFilesRequest& request_ ) const;

/**
 * Deletes one or more files from <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] request_  @ref gpudb::DeleteFilesRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DeleteFilesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteFilesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteFilesResponse& deleteFiles( const DeleteFilesRequest& request_,
                                  DeleteFilesResponse& response_ ) const;

/**
 * Deletes one or more files from <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] fileNames  An array of names of files to be deleted. File paths
 *                       may contain wildcard characters after the KiFS
 *                       directory delimeter.  Accepted wildcard characters are
 *                       asterisk (*) to represent any string of zero or more
 *                       characters, and question mark (?) to indicate a single
 *                       character.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::delete_files_no_error_if_not_exists
 *                             "delete_files_no_error_if_not_exists": If @ref
 *                             gpudb::delete_files_true "true", no error is
 *                             returned if a specified file does not exist.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::delete_files_true
 *                                     "delete_files_true"
 *                                 <li>@ref gpudb::delete_files_false
 *                                     "delete_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::delete_files_false "delete_files_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::DeleteFilesResponse "Response" object containing the
 *         result of the operation.
 */
DeleteFilesResponse deleteFiles( const std::vector<std::string>& fileNames,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Deletes one or more files from <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] fileNames  An array of names of files to be deleted. File paths
 *                       may contain wildcard characters after the KiFS
 *                       directory delimeter.  Accepted wildcard characters are
 *                       asterisk (*) to represent any string of zero or more
 *                       characters, and question mark (?) to indicate a single
 *                       character.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::delete_files_no_error_if_not_exists
 *                             "delete_files_no_error_if_not_exists": If @ref
 *                             gpudb::delete_files_true "true", no error is
 *                             returned if a specified file does not exist.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::delete_files_true
 *                                     "delete_files_true"
 *                                 <li>@ref gpudb::delete_files_false
 *                                     "delete_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::delete_files_false "delete_files_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::DeleteFilesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteFilesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteFilesResponse& deleteFiles( const std::vector<std::string>& fileNames,
                                  const std::map<std::string, std::string>& options,
                                  DeleteFilesResponse& response_ ) const;

/**
 * Deletes an existing graph from the graph server and/or persist.
 *
 * @param[in] request_  @ref gpudb::DeleteGraphRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DeleteGraphResponse "Response" object containing the
 *         result of the operation.
 */
DeleteGraphResponse deleteGraph( const DeleteGraphRequest& request_ ) const;

/**
 * Deletes an existing graph from the graph server and/or persist.
 *
 * @param[in] request_  @ref gpudb::DeleteGraphRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DeleteGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteGraphResponse& deleteGraph( const DeleteGraphRequest& request_,
                                  DeleteGraphResponse& response_ ) const;

/**
 * Deletes an existing graph from the graph server and/or persist.
 *
 * @param[in] graphName  Name of the graph to be deleted.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::delete_graph_delete_persist
 *                             "delete_graph_delete_persist": If set to @ref
 *                             gpudb::delete_graph_true "true", the graph is
 *                             removed from the server and persist. If set to
 *                             @ref gpudb::delete_graph_false "false", the
 *                             graph is removed from the server but is left in
 *                             persist. The graph can be reloaded from persist
 *                             if it is recreated with the same 'graph_name'.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::delete_graph_true
 *                                     "delete_graph_true"
 *                                 <li>@ref gpudb::delete_graph_false
 *                                     "delete_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::delete_graph_true "delete_graph_true".
 *                         <li>@ref gpudb::delete_graph_server_id
 *                             "delete_graph_server_id": Indicates which graph
 *                             server(s) to send the request to. Default is to
 *                             send to get information about all the servers.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::DeleteGraphResponse "Response" object containing the
 *         result of the operation.
 */
DeleteGraphResponse deleteGraph( const std::string& graphName,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Deletes an existing graph from the graph server and/or persist.
 *
 * @param[in] graphName  Name of the graph to be deleted.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::delete_graph_delete_persist
 *                             "delete_graph_delete_persist": If set to @ref
 *                             gpudb::delete_graph_true "true", the graph is
 *                             removed from the server and persist. If set to
 *                             @ref gpudb::delete_graph_false "false", the
 *                             graph is removed from the server but is left in
 *                             persist. The graph can be reloaded from persist
 *                             if it is recreated with the same 'graph_name'.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::delete_graph_true
 *                                     "delete_graph_true"
 *                                 <li>@ref gpudb::delete_graph_false
 *                                     "delete_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::delete_graph_true "delete_graph_true".
 *                         <li>@ref gpudb::delete_graph_server_id
 *                             "delete_graph_server_id": Indicates which graph
 *                             server(s) to send the request to. Default is to
 *                             send to get information about all the servers.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::DeleteGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteGraphResponse& deleteGraph( const std::string& graphName,
                                  const std::map<std::string, std::string>& options,
                                  DeleteGraphResponse& response_ ) const;

/**
 * Deletes a proc. Any currently running instances of the proc will be killed.
 *
 * @param[in] request_  @ref gpudb::DeleteProcRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DeleteProcResponse "Response" object containing the
 *         result of the operation.
 */
DeleteProcResponse deleteProc( const DeleteProcRequest& request_ ) const;

/**
 * Deletes a proc. Any currently running instances of the proc will be killed.
 *
 * @param[in] request_  @ref gpudb::DeleteProcRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DeleteProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteProcResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteProcResponse& deleteProc( const DeleteProcRequest& request_,
                                DeleteProcResponse& response_ ) const;

/**
 * Deletes a proc. Any currently running instances of the proc will be killed.
 *
 * @param[in] procName  Name of the proc to be deleted. Must be the name of a
 *                      currently existing proc.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::DeleteProcResponse "Response" object containing the
 *         result of the operation.
 */
DeleteProcResponse deleteProc( const std::string& procName,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Deletes a proc. Any currently running instances of the proc will be killed.
 *
 * @param[in] procName  Name of the proc to be deleted. Must be the name of a
 *                      currently existing proc.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::DeleteProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteProcResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteProcResponse& deleteProc( const std::string& procName,
                                const std::map<std::string, std::string>& options,
                                DeleteProcResponse& response_ ) const;

/**
 * Deletes record(s) matching the provided criteria from the given table. The
 * record selection criteria can either be one or more  @ref
 * gpudb::DeleteRecordsRequest::expressions "expressions" (matching multiple
 * records), a single record identified by @ref gpudb::delete_records_record_id
 * "record_id" options, or all records when using @ref
 * gpudb::delete_records_delete_all_records "delete_all_records".  Note that
 * the three selection criteria are mutually exclusive.  This operation cannot
 * be run on a view.  The operation is synchronous meaning that a response will
 * not be available until the request is completely processed and all the
 * matching records are deleted.
 *
 * @param[in] request_  @ref gpudb::DeleteRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DeleteRecordsResponse "Response" object containing the
 *         result of the operation.
 */
DeleteRecordsResponse deleteRecords( const DeleteRecordsRequest& request_ ) const;

/**
 * Deletes record(s) matching the provided criteria from the given table. The
 * record selection criteria can either be one or more  @ref
 * gpudb::DeleteRecordsRequest::expressions "expressions" (matching multiple
 * records), a single record identified by @ref gpudb::delete_records_record_id
 * "record_id" options, or all records when using @ref
 * gpudb::delete_records_delete_all_records "delete_all_records".  Note that
 * the three selection criteria are mutually exclusive.  This operation cannot
 * be run on a view.  The operation is synchronous meaning that a response will
 * not be available until the request is completely processed and all the
 * matching records are deleted.
 *
 * @param[in] request_  @ref gpudb::DeleteRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DeleteRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteRecordsResponse& deleteRecords( const DeleteRecordsRequest& request_,
                                      DeleteRecordsResponse& response_ ) const;

/**
 * Deletes record(s) matching the provided criteria from the given table. The
 * record selection criteria can either be one or more  @a expressions
 * (matching multiple records), a single record identified by @ref
 * gpudb::delete_records_record_id "record_id" options, or all records when
 * using @ref gpudb::delete_records_delete_all_records "delete_all_records".
 * Note that the three selection criteria are mutually exclusive.  This
 * operation cannot be run on a view.  The operation is synchronous meaning
 * that a response will not be available until the request is completely
 * processed and all the matching records are deleted.
 *
 * @param[in] tableName  Name of the table from which to delete records, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. Must contain
 *                       the name of an existing table; not applicable to
 *                       views.
 * @param[in] expressions  A list of the actual predicates, one for each
 *                         select; format should follow the guidelines provided
 *                         <a href="../../../concepts/expressions/"
 *                         target="_top">here</a>. Specifying one or more @a
 *                         expressions is mutually exclusive to specifying @ref
 *                         gpudb::delete_records_record_id "record_id" in the
 *                         @a options.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::delete_records_global_expression
 *                             "delete_records_global_expression": An optional
 *                             global expression to reduce the search space of
 *                             the @a expressions. The default value is ''.
 *                         <li>@ref gpudb::delete_records_record_id
 *                             "delete_records_record_id": A record ID
 *                             identifying a single record, obtained at the
 *                             time of @ref
 *                             insertRecords(const std::string&, const std::vector<TRequest>&, const std::map<std::string, std::string>&) const
 *                             "insertion of the record" or by calling @ref
 *                             getRecordsFromCollection(const std::string&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 *                             "getRecordsFromCollection" with the
 *                             *return_record_ids* option. This option cannot
 *                             be used to delete records from <a
 *                             href="../../../concepts/tables/#replication"
 *                             target="_top">replicated</a> tables.
 *                         <li>@ref gpudb::delete_records_delete_all_records
 *                             "delete_records_delete_all_records": If set to
 *                             @ref gpudb::delete_records_true "true", all
 *                             records in the table will be deleted. If set to
 *                             @ref gpudb::delete_records_false "false", then
 *                             the option is effectively ignored.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::delete_records_true
 *                                     "delete_records_true"
 *                                 <li>@ref gpudb::delete_records_false
 *                                     "delete_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::delete_records_false
 *                             "delete_records_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::DeleteRecordsResponse "Response" object containing the
 *         result of the operation.
 */
DeleteRecordsResponse deleteRecords( const std::string& tableName,
                                     const std::vector<std::string>& expressions,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Deletes record(s) matching the provided criteria from the given table. The
 * record selection criteria can either be one or more  @a expressions
 * (matching multiple records), a single record identified by @ref
 * gpudb::delete_records_record_id "record_id" options, or all records when
 * using @ref gpudb::delete_records_delete_all_records "delete_all_records".
 * Note that the three selection criteria are mutually exclusive.  This
 * operation cannot be run on a view.  The operation is synchronous meaning
 * that a response will not be available until the request is completely
 * processed and all the matching records are deleted.
 *
 * @param[in] tableName  Name of the table from which to delete records, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. Must contain
 *                       the name of an existing table; not applicable to
 *                       views.
 * @param[in] expressions  A list of the actual predicates, one for each
 *                         select; format should follow the guidelines provided
 *                         <a href="../../../concepts/expressions/"
 *                         target="_top">here</a>. Specifying one or more @a
 *                         expressions is mutually exclusive to specifying @ref
 *                         gpudb::delete_records_record_id "record_id" in the
 *                         @a options.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::delete_records_global_expression
 *                             "delete_records_global_expression": An optional
 *                             global expression to reduce the search space of
 *                             the @a expressions. The default value is ''.
 *                         <li>@ref gpudb::delete_records_record_id
 *                             "delete_records_record_id": A record ID
 *                             identifying a single record, obtained at the
 *                             time of @ref
 *                             insertRecords(const std::string&, const std::vector<TRequest>&, const std::map<std::string, std::string>&) const
 *                             "insertion of the record" or by calling @ref
 *                             getRecordsFromCollection(const std::string&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 *                             "getRecordsFromCollection" with the
 *                             *return_record_ids* option. This option cannot
 *                             be used to delete records from <a
 *                             href="../../../concepts/tables/#replication"
 *                             target="_top">replicated</a> tables.
 *                         <li>@ref gpudb::delete_records_delete_all_records
 *                             "delete_records_delete_all_records": If set to
 *                             @ref gpudb::delete_records_true "true", all
 *                             records in the table will be deleted. If set to
 *                             @ref gpudb::delete_records_false "false", then
 *                             the option is effectively ignored.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::delete_records_true
 *                                     "delete_records_true"
 *                                 <li>@ref gpudb::delete_records_false
 *                                     "delete_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::delete_records_false
 *                             "delete_records_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::DeleteRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteRecordsResponse& deleteRecords( const std::string& tableName,
                                      const std::vector<std::string>& expressions,
                                      const std::map<std::string, std::string>& options,
                                      DeleteRecordsResponse& response_ ) const;

/**
 * Deletes a resource group.
 *
 * @param[in] request_  @ref gpudb::DeleteResourceGroupRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DeleteResourceGroupResponse "Response" object containing
 *         the result of the operation.
 */
DeleteResourceGroupResponse deleteResourceGroup( const DeleteResourceGroupRequest& request_ ) const;

/**
 * Deletes a resource group.
 *
 * @param[in] request_  @ref gpudb::DeleteResourceGroupRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DeleteResourceGroupResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::DeleteResourceGroupResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
DeleteResourceGroupResponse& deleteResourceGroup( const DeleteResourceGroupRequest& request_,
                                                  DeleteResourceGroupResponse& response_ ) const;

/**
 * Deletes a resource group.
 *
 * @param[in] name  Name of the resource group to be deleted.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::delete_resource_group_cascade_delete
 *                             "delete_resource_group_cascade_delete": If @ref
 *                             gpudb::delete_resource_group_true "true", delete
 *                             any existing entities owned by this group.
 *                             Otherwise this request will return an error of
 *                             any such entities exist.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::delete_resource_group_true
 *                                     "delete_resource_group_true"
 *                                 <li>@ref gpudb::delete_resource_group_false
 *                                     "delete_resource_group_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::delete_resource_group_false
 *                             "delete_resource_group_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::DeleteResourceGroupResponse "Response" object containing
 *         the result of the operation.
 */
DeleteResourceGroupResponse deleteResourceGroup( const std::string& name,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Deletes a resource group.
 *
 * @param[in] name  Name of the resource group to be deleted.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::delete_resource_group_cascade_delete
 *                             "delete_resource_group_cascade_delete": If @ref
 *                             gpudb::delete_resource_group_true "true", delete
 *                             any existing entities owned by this group.
 *                             Otherwise this request will return an error of
 *                             any such entities exist.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::delete_resource_group_true
 *                                     "delete_resource_group_true"
 *                                 <li>@ref gpudb::delete_resource_group_false
 *                                     "delete_resource_group_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::delete_resource_group_false
 *                             "delete_resource_group_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::DeleteResourceGroupResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::DeleteResourceGroupResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
DeleteResourceGroupResponse& deleteResourceGroup( const std::string& name,
                                                  const std::map<std::string, std::string>& options,
                                                  DeleteResourceGroupResponse& response_ ) const;

/**
 * Deletes an existing role.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::DeleteRoleRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DeleteRoleResponse "Response" object containing the
 *         result of the operation.
 */
DeleteRoleResponse deleteRole( const DeleteRoleRequest& request_ ) const;

/**
 * Deletes an existing role.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::DeleteRoleRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DeleteRoleResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteRoleResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteRoleResponse& deleteRole( const DeleteRoleRequest& request_,
                                DeleteRoleResponse& response_ ) const;

/**
 * Deletes an existing role.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] name  Name of the role to be deleted. Must be an existing role.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::DeleteRoleResponse "Response" object containing the
 *         result of the operation.
 */
DeleteRoleResponse deleteRole( const std::string& name,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Deletes an existing role.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] name  Name of the role to be deleted. Must be an existing role.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::DeleteRoleResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteRoleResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteRoleResponse& deleteRole( const std::string& name,
                                const std::map<std::string, std::string>& options,
                                DeleteRoleResponse& response_ ) const;

/**
 * Deletes an existing user.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::DeleteUserRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DeleteUserResponse "Response" object containing the
 *         result of the operation.
 */
DeleteUserResponse deleteUser( const DeleteUserRequest& request_ ) const;

/**
 * Deletes an existing user.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] request_  @ref gpudb::DeleteUserRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DeleteUserResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteUserResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteUserResponse& deleteUser( const DeleteUserRequest& request_,
                                DeleteUserResponse& response_ ) const;

/**
 * Deletes an existing user.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] name  Name of the user to be deleted. Must be an existing user.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::DeleteUserResponse "Response" object containing the
 *         result of the operation.
 */
DeleteUserResponse deleteUser( const std::string& name,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Deletes an existing user.
 *
 * @attention This method should be used for on-premise deployments only.
 *
 * @param[in] name  Name of the user to be deleted. Must be an existing user.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::DeleteUserResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DeleteUserResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DeleteUserResponse& deleteUser( const std::string& name,
                                const std::map<std::string, std::string>& options,
                                DeleteUserResponse& response_ ) const;

/**
 * Downloads one or more files from <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] request_  @ref gpudb::DownloadFilesRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DownloadFilesResponse "Response" object containing the
 *         result of the operation.
 */
DownloadFilesResponse downloadFiles( const DownloadFilesRequest& request_ ) const;

/**
 * Downloads one or more files from <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] request_  @ref gpudb::DownloadFilesRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DownloadFilesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DownloadFilesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DownloadFilesResponse& downloadFiles( const DownloadFilesRequest& request_,
                                      DownloadFilesResponse& response_ ) const;

/**
 * Downloads one or more files from <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] fileNames  An array of the file names to download from KiFS. File
 *                       paths may contain wildcard characters after the KiFS
 *                       directory delimeter.  Accepted wildcard characters are
 *                       asterisk (*) to represent any string of zero or more
 *                       characters, and question mark (?) to indicate a single
 *                       character.
 * @param[in] readOffsets  An array of starting byte offsets from which to read
 *                         each respective file in @a fileNames. Must either be
 *                         empty or the same length as @a fileNames. If empty,
 *                         files are downloaded in their entirety. If not
 *                         empty, @a readLengths must also not be empty.
 * @param[in] readLengths  Array of number of bytes to read from each
 *                         respective file in @a fileNames. Must either be
 *                         empty or the same length as @a fileNames. If empty,
 *                         files are downloaded in their entirety. If not
 *                         empty, @a readOffsets must also not be empty.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::download_files_file_encoding
 *                             "download_files_file_encoding": Encoding to be
 *                             applied to the output file data. When using JSON
 *                             serialization it is recommended to specify this
 *                             as @ref gpudb::download_files_base64 "base64".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::download_files_base64
 *                                     "download_files_base64": Apply base64
 *                                     encoding to the output file data.
 *                                 <li>@ref gpudb::download_files_none
 *                                     "download_files_none": Do not apply any
 *                                     encoding to the output file data.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::download_files_none
 *                             "download_files_none".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::DownloadFilesResponse "Response" object containing the
 *         result of the operation.
 */
DownloadFilesResponse downloadFiles( const std::vector<std::string>& fileNames,
                                     const std::vector<int64_t>& readOffsets,
                                     const std::vector<int64_t>& readLengths,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Downloads one or more files from <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * @param[in] fileNames  An array of the file names to download from KiFS. File
 *                       paths may contain wildcard characters after the KiFS
 *                       directory delimeter.  Accepted wildcard characters are
 *                       asterisk (*) to represent any string of zero or more
 *                       characters, and question mark (?) to indicate a single
 *                       character.
 * @param[in] readOffsets  An array of starting byte offsets from which to read
 *                         each respective file in @a fileNames. Must either be
 *                         empty or the same length as @a fileNames. If empty,
 *                         files are downloaded in their entirety. If not
 *                         empty, @a readLengths must also not be empty.
 * @param[in] readLengths  Array of number of bytes to read from each
 *                         respective file in @a fileNames. Must either be
 *                         empty or the same length as @a fileNames. If empty,
 *                         files are downloaded in their entirety. If not
 *                         empty, @a readOffsets must also not be empty.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::download_files_file_encoding
 *                             "download_files_file_encoding": Encoding to be
 *                             applied to the output file data. When using JSON
 *                             serialization it is recommended to specify this
 *                             as @ref gpudb::download_files_base64 "base64".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::download_files_base64
 *                                     "download_files_base64": Apply base64
 *                                     encoding to the output file data.
 *                                 <li>@ref gpudb::download_files_none
 *                                     "download_files_none": Do not apply any
 *                                     encoding to the output file data.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::download_files_none
 *                             "download_files_none".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::DownloadFilesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DownloadFilesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DownloadFilesResponse& downloadFiles( const std::vector<std::string>& fileNames,
                                      const std::vector<int64_t>& readOffsets,
                                      const std::vector<int64_t>& readLengths,
                                      const std::map<std::string, std::string>& options,
                                      DownloadFilesResponse& response_ ) const;

/** @private */
DropContainerRegistryResponse dropContainerRegistry( const DropContainerRegistryRequest& request_ ) const;

/** @private */
DropContainerRegistryResponse& dropContainerRegistry( const DropContainerRegistryRequest& request_,
                                                      DropContainerRegistryResponse& response_ ) const;

/** @private */
DropContainerRegistryResponse dropContainerRegistry( const std::string& registryName,
                                                     const std::map<std::string, std::string>& options ) const;

/** @private */
DropContainerRegistryResponse& dropContainerRegistry( const std::string& registryName,
                                                      const std::map<std::string, std::string>& options,
                                                      DropContainerRegistryResponse& response_ ) const;

/**
 * Drop an existing <a href="../../../concepts/credentials/"
 * target="_top">credential</a>.
 *
 * @param[in] request_  @ref gpudb::DropCredentialRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DropCredentialResponse "Response" object containing the
 *         result of the operation.
 */
DropCredentialResponse dropCredential( const DropCredentialRequest& request_ ) const;

/**
 * Drop an existing <a href="../../../concepts/credentials/"
 * target="_top">credential</a>.
 *
 * @param[in] request_  @ref gpudb::DropCredentialRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DropCredentialResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DropCredentialResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DropCredentialResponse& dropCredential( const DropCredentialRequest& request_,
                                        DropCredentialResponse& response_ ) const;

/**
 * Drop an existing <a href="../../../concepts/credentials/"
 * target="_top">credential</a>.
 *
 * @param[in] credentialName  Name of the credential to be dropped. Must be an
 *                            existing credential.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::DropCredentialResponse "Response" object containing the
 *         result of the operation.
 */
DropCredentialResponse dropCredential( const std::string& credentialName,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Drop an existing <a href="../../../concepts/credentials/"
 * target="_top">credential</a>.
 *
 * @param[in] credentialName  Name of the credential to be dropped. Must be an
 *                            existing credential.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::DropCredentialResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DropCredentialResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DropCredentialResponse& dropCredential( const std::string& credentialName,
                                        const std::map<std::string, std::string>& options,
                                        DropCredentialResponse& response_ ) const;

/**
 * Drops an existing <a href="../../../concepts/data_sinks/" target="_top">data
 * sink</a>.
 *
 * By default, if any <a href="../../../concepts/table_monitors"
 * target="_top">table monitors</a> use this sink as a destination, the request
 * will be blocked unless option @ref gpudb::drop_datasink_clear_table_monitors
 * "clear_table_monitors" is @ref gpudb::drop_datasink_true "true".
 *
 * @param[in] request_  @ref gpudb::DropDatasinkRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DropDatasinkResponse "Response" object containing the
 *         result of the operation.
 */
DropDatasinkResponse dropDatasink( const DropDatasinkRequest& request_ ) const;

/**
 * Drops an existing <a href="../../../concepts/data_sinks/" target="_top">data
 * sink</a>.
 *
 * By default, if any <a href="../../../concepts/table_monitors"
 * target="_top">table monitors</a> use this sink as a destination, the request
 * will be blocked unless option @ref gpudb::drop_datasink_clear_table_monitors
 * "clear_table_monitors" is @ref gpudb::drop_datasink_true "true".
 *
 * @param[in] request_  @ref gpudb::DropDatasinkRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DropDatasinkResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DropDatasinkResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DropDatasinkResponse& dropDatasink( const DropDatasinkRequest& request_,
                                    DropDatasinkResponse& response_ ) const;

/**
 * Drops an existing <a href="../../../concepts/data_sinks/" target="_top">data
 * sink</a>.
 *
 * By default, if any <a href="../../../concepts/table_monitors"
 * target="_top">table monitors</a> use this sink as a destination, the request
 * will be blocked unless option @ref gpudb::drop_datasink_clear_table_monitors
 * "clear_table_monitors" is @ref gpudb::drop_datasink_true "true".
 *
 * @param[in] name  Name of the data sink to be dropped. Must be an existing
 *                  data sink.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::drop_datasink_clear_table_monitors
 *                             "drop_datasink_clear_table_monitors": If @ref
 *                             gpudb::drop_datasink_true "true", any <a
 *                             href="../../../concepts/table_monitors/"
 *                             target="_top">table monitors</a> that use this
 *                             data sink will be cleared.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::drop_datasink_true
 *                                     "drop_datasink_true"
 *                                 <li>@ref gpudb::drop_datasink_false
 *                                     "drop_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::drop_datasink_false
 *                             "drop_datasink_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::DropDatasinkResponse "Response" object containing the
 *         result of the operation.
 */
DropDatasinkResponse dropDatasink( const std::string& name,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Drops an existing <a href="../../../concepts/data_sinks/" target="_top">data
 * sink</a>.
 *
 * By default, if any <a href="../../../concepts/table_monitors"
 * target="_top">table monitors</a> use this sink as a destination, the request
 * will be blocked unless option @ref gpudb::drop_datasink_clear_table_monitors
 * "clear_table_monitors" is @ref gpudb::drop_datasink_true "true".
 *
 * @param[in] name  Name of the data sink to be dropped. Must be an existing
 *                  data sink.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::drop_datasink_clear_table_monitors
 *                             "drop_datasink_clear_table_monitors": If @ref
 *                             gpudb::drop_datasink_true "true", any <a
 *                             href="../../../concepts/table_monitors/"
 *                             target="_top">table monitors</a> that use this
 *                             data sink will be cleared.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::drop_datasink_true
 *                                     "drop_datasink_true"
 *                                 <li>@ref gpudb::drop_datasink_false
 *                                     "drop_datasink_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::drop_datasink_false
 *                             "drop_datasink_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::DropDatasinkResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DropDatasinkResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DropDatasinkResponse& dropDatasink( const std::string& name,
                                    const std::map<std::string, std::string>& options,
                                    DropDatasinkResponse& response_ ) const;

/**
 * Drops an existing <a href="../../../concepts/data_sources/"
 * target="_top">data source</a>.  Any external tables that depend on the data
 * source must be dropped before it can be dropped.
 *
 * @param[in] request_  @ref gpudb::DropDatasourceRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DropDatasourceResponse "Response" object containing the
 *         result of the operation.
 */
DropDatasourceResponse dropDatasource( const DropDatasourceRequest& request_ ) const;

/**
 * Drops an existing <a href="../../../concepts/data_sources/"
 * target="_top">data source</a>.  Any external tables that depend on the data
 * source must be dropped before it can be dropped.
 *
 * @param[in] request_  @ref gpudb::DropDatasourceRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DropDatasourceResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DropDatasourceResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DropDatasourceResponse& dropDatasource( const DropDatasourceRequest& request_,
                                        DropDatasourceResponse& response_ ) const;

/**
 * Drops an existing <a href="../../../concepts/data_sources/"
 * target="_top">data source</a>.  Any external tables that depend on the data
 * source must be dropped before it can be dropped.
 *
 * @param[in] name  Name of the data source to be dropped. Must be an existing
 *                  data source.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::DropDatasourceResponse "Response" object containing the
 *         result of the operation.
 */
DropDatasourceResponse dropDatasource( const std::string& name,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Drops an existing <a href="../../../concepts/data_sources/"
 * target="_top">data source</a>.  Any external tables that depend on the data
 * source must be dropped before it can be dropped.
 *
 * @param[in] name  Name of the data source to be dropped. Must be an existing
 *                  data source.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::DropDatasourceResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DropDatasourceResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DropDatasourceResponse& dropDatasource( const std::string& name,
                                        const std::map<std::string, std::string>& options,
                                        DropDatasourceResponse& response_ ) const;

/**
 * Drop an existing <a href="../../../concepts/udf/" target="_top">user-defined
 * function</a> (UDF) environment.
 *
 * @param[in] request_  @ref gpudb::DropEnvironmentRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DropEnvironmentResponse "Response" object containing the
 *         result of the operation.
 */
DropEnvironmentResponse dropEnvironment( const DropEnvironmentRequest& request_ ) const;

/**
 * Drop an existing <a href="../../../concepts/udf/" target="_top">user-defined
 * function</a> (UDF) environment.
 *
 * @param[in] request_  @ref gpudb::DropEnvironmentRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DropEnvironmentResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DropEnvironmentResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DropEnvironmentResponse& dropEnvironment( const DropEnvironmentRequest& request_,
                                          DropEnvironmentResponse& response_ ) const;

/**
 * Drop an existing <a href="../../../concepts/udf/" target="_top">user-defined
 * function</a> (UDF) environment.
 *
 * @param[in] environmentName  Name of the environment to be dropped. Must be
 *                             an existing environment.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::drop_environment_no_error_if_not_exists
 *                             "drop_environment_no_error_if_not_exists": If
 *                             @ref gpudb::drop_environment_true "true" and if
 *                             the environment specified in @a environmentName
 *                             does not exist, no error is returned. If @ref
 *                             gpudb::drop_environment_false "false" and if the
 *                             environment specified in @a environmentName does
 *                             not exist, then an error is returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::drop_environment_true
 *                                     "drop_environment_true"
 *                                 <li>@ref gpudb::drop_environment_false
 *                                     "drop_environment_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::drop_environment_false
 *                             "drop_environment_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::DropEnvironmentResponse "Response" object containing the
 *         result of the operation.
 */
DropEnvironmentResponse dropEnvironment( const std::string& environmentName,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Drop an existing <a href="../../../concepts/udf/" target="_top">user-defined
 * function</a> (UDF) environment.
 *
 * @param[in] environmentName  Name of the environment to be dropped. Must be
 *                             an existing environment.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::drop_environment_no_error_if_not_exists
 *                             "drop_environment_no_error_if_not_exists": If
 *                             @ref gpudb::drop_environment_true "true" and if
 *                             the environment specified in @a environmentName
 *                             does not exist, no error is returned. If @ref
 *                             gpudb::drop_environment_false "false" and if the
 *                             environment specified in @a environmentName does
 *                             not exist, then an error is returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::drop_environment_true
 *                                     "drop_environment_true"
 *                                 <li>@ref gpudb::drop_environment_false
 *                                     "drop_environment_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::drop_environment_false
 *                             "drop_environment_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::DropEnvironmentResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DropEnvironmentResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DropEnvironmentResponse& dropEnvironment( const std::string& environmentName,
                                          const std::map<std::string, std::string>& options,
                                          DropEnvironmentResponse& response_ ) const;

/** @private */
DropModelResponse dropModel( const DropModelRequest& request_ ) const;

/** @private */
DropModelResponse& dropModel( const DropModelRequest& request_,
                              DropModelResponse& response_ ) const;

/** @private */
DropModelResponse dropModel( const std::string& modelName,
                             const std::map<std::string, std::string>& options ) const;

/** @private */
DropModelResponse& dropModel( const std::string& modelName,
                              const std::map<std::string, std::string>& options,
                              DropModelResponse& response_ ) const;

/**
 * Drops an existing SQL-style <a href="../../../concepts/schemas/"
 * target="_top">schema</a>, specified in @ref
 * gpudb::DropSchemaRequest::schemaName "schemaName".
 *
 * @param[in] request_  @ref gpudb::DropSchemaRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::DropSchemaResponse "Response" object containing the
 *         result of the operation.
 */
DropSchemaResponse dropSchema( const DropSchemaRequest& request_ ) const;

/**
 * Drops an existing SQL-style <a href="../../../concepts/schemas/"
 * target="_top">schema</a>, specified in @ref
 * gpudb::DropSchemaRequest::schemaName "schemaName".
 *
 * @param[in] request_  @ref gpudb::DropSchemaRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::DropSchemaResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DropSchemaResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DropSchemaResponse& dropSchema( const DropSchemaRequest& request_,
                                DropSchemaResponse& response_ ) const;

/**
 * Drops an existing SQL-style <a href="../../../concepts/schemas/"
 * target="_top">schema</a>, specified in @a schemaName.
 *
 * @param[in] schemaName  Name of the schema to be dropped. Must be an existing
 *                        schema.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::drop_schema_no_error_if_not_exists
 *                             "drop_schema_no_error_if_not_exists": If @ref
 *                             gpudb::drop_schema_true "true" and if the schema
 *                             specified in @a schemaName does not exist, no
 *                             error is returned. If @ref
 *                             gpudb::drop_schema_false "false" and if the
 *                             schema specified in @a schemaName does not
 *                             exist, then an error is returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::drop_schema_true
 *                                     "drop_schema_true"
 *                                 <li>@ref gpudb::drop_schema_false
 *                                     "drop_schema_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::drop_schema_false "drop_schema_false".
 *                         <li>@ref gpudb::drop_schema_cascade
 *                             "drop_schema_cascade": If @ref
 *                             gpudb::drop_schema_true "true", all tables
 *                             within the schema will be dropped. If @ref
 *                             gpudb::drop_schema_false "false", the schema
 *                             will be dropped only if empty.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::drop_schema_true
 *                                     "drop_schema_true"
 *                                 <li>@ref gpudb::drop_schema_false
 *                                     "drop_schema_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::drop_schema_false "drop_schema_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::DropSchemaResponse "Response" object containing the
 *         result of the operation.
 */
DropSchemaResponse dropSchema( const std::string& schemaName,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Drops an existing SQL-style <a href="../../../concepts/schemas/"
 * target="_top">schema</a>, specified in @a schemaName.
 *
 * @param[in] schemaName  Name of the schema to be dropped. Must be an existing
 *                        schema.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::drop_schema_no_error_if_not_exists
 *                             "drop_schema_no_error_if_not_exists": If @ref
 *                             gpudb::drop_schema_true "true" and if the schema
 *                             specified in @a schemaName does not exist, no
 *                             error is returned. If @ref
 *                             gpudb::drop_schema_false "false" and if the
 *                             schema specified in @a schemaName does not
 *                             exist, then an error is returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::drop_schema_true
 *                                     "drop_schema_true"
 *                                 <li>@ref gpudb::drop_schema_false
 *                                     "drop_schema_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::drop_schema_false "drop_schema_false".
 *                         <li>@ref gpudb::drop_schema_cascade
 *                             "drop_schema_cascade": If @ref
 *                             gpudb::drop_schema_true "true", all tables
 *                             within the schema will be dropped. If @ref
 *                             gpudb::drop_schema_false "false", the schema
 *                             will be dropped only if empty.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::drop_schema_true
 *                                     "drop_schema_true"
 *                                 <li>@ref gpudb::drop_schema_false
 *                                     "drop_schema_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::drop_schema_false "drop_schema_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::DropSchemaResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::DropSchemaResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
DropSchemaResponse& dropSchema( const std::string& schemaName,
                                const std::map<std::string, std::string>& options,
                                DropSchemaResponse& response_ ) const;

/** @private */
EvaluateModelResponse evaluateModel( const EvaluateModelRequest& request_ ) const;

/** @private */
EvaluateModelResponse& evaluateModel( const EvaluateModelRequest& request_,
                                      EvaluateModelResponse& response_ ) const;

/** @private */
EvaluateModelResponse evaluateModel( const std::string& modelName,
                                     const int32_t replicas,
                                     const std::string& deploymentMode,
                                     const std::string& sourceTable,
                                     const std::string& destinationTable,
                                     const std::map<std::string, std::string>& options ) const;

/** @private */
EvaluateModelResponse& evaluateModel( const std::string& modelName,
                                      const int32_t replicas,
                                      const std::string& deploymentMode,
                                      const std::string& sourceTable,
                                      const std::string& destinationTable,
                                      const std::map<std::string, std::string>& options,
                                      EvaluateModelResponse& response_ ) const;

/**
 * Executes a proc. This endpoint is asynchronous and does not wait for the
 * proc to complete before returning.
 *
 * If the proc being executed is distributed, @ref
 * gpudb::ExecuteProcRequest::inputTableNames "inputTableNames" & @ref
 * gpudb::ExecuteProcRequest::inputColumnNames "inputColumnNames" may be passed
 * to the proc to use for reading data, and @ref
 * gpudb::ExecuteProcRequest::outputTableNames "outputTableNames" may be passed
 * to the proc to use for writing data.
 *
 * If the proc being executed is non-distributed, these table parameters will
 * be ignored.
 *
 * @param[in] request_  @ref gpudb::ExecuteProcRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ExecuteProcResponse "Response" object containing the
 *         result of the operation.
 */
ExecuteProcResponse executeProc( const ExecuteProcRequest& request_ ) const;

/**
 * Executes a proc. This endpoint is asynchronous and does not wait for the
 * proc to complete before returning.
 *
 * If the proc being executed is distributed, @ref
 * gpudb::ExecuteProcRequest::inputTableNames "inputTableNames" & @ref
 * gpudb::ExecuteProcRequest::inputColumnNames "inputColumnNames" may be passed
 * to the proc to use for reading data, and @ref
 * gpudb::ExecuteProcRequest::outputTableNames "outputTableNames" may be passed
 * to the proc to use for writing data.
 *
 * If the proc being executed is non-distributed, these table parameters will
 * be ignored.
 *
 * @param[in] request_  @ref gpudb::ExecuteProcRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ExecuteProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ExecuteProcResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ExecuteProcResponse& executeProc( const ExecuteProcRequest& request_,
                                  ExecuteProcResponse& response_ ) const;

/**
 * Executes a proc. This endpoint is asynchronous and does not wait for the
 * proc to complete before returning.
 *
 * If the proc being executed is distributed, @a inputTableNames & @a
 * inputColumnNames may be passed to the proc to use for reading data, and @a
 * outputTableNames may be passed to the proc to use for writing data.
 *
 * If the proc being executed is non-distributed, these table parameters will
 * be ignored.
 *
 * @param[in] procName  Name of the proc to execute. Must be the name of a
 *                      currently existing proc.
 * @param[in] params  A map containing named parameters to pass to the proc.
 *                    Each key/value pair specifies the name of a parameter and
 *                    its value. The default value is an empty map.
 * @param[in] binParams  A map containing named binary parameters to pass to
 *                       the proc. Each key/value pair specifies the name of a
 *                       parameter and its value. The default value is an empty
 *                       map.
 * @param[in] inputTableNames  Names of the tables containing data to be passed
 *                             to the proc. Each name specified must be the
 *                             name of a currently existing table, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a>. If no
 *                             table names are specified, no data will be
 *                             passed to the proc.  This parameter is ignored
 *                             if the proc has a non-distributed execution
 *                             mode. The default value is an empty vector.
 * @param[in] inputColumnNames  Map of table names from @a inputTableNames to
 *                              lists of names of columns from those tables
 *                              that will be passed to the proc. Each column
 *                              name specified must be the name of an existing
 *                              column in the corresponding table. If a table
 *                              name from @a inputTableNames is not included,
 *                              all columns from that table will be passed to
 *                              the proc.  This parameter is ignored if the
 *                              proc has a non-distributed execution mode. The
 *                              default value is an empty map.
 * @param[in] outputTableNames  Names of the tables to which output data from
 *                              the proc will be written, each in
 *                              [schema_name.]table_name format, using standard
 *                              <a
 *                              href="../../../concepts/tables/#table-name-resolution"
 *                              target="_top">name resolution rules</a> and
 *                              meeting <a
 *                              href="../../../concepts/tables/#table-naming-criteria"
 *                              target="_top">table naming criteria</a>. If a
 *                              specified table does not exist, it will
 *                              automatically be created with the same schema
 *                              as the corresponding table (by order) from @a
 *                              inputTableNames, excluding any primary and
 *                              shard keys. If a specified table is a
 *                              non-persistent result table, it must not have
 *                              primary or shard keys. If no table names are
 *                              specified, no output data can be returned from
 *                              the proc. This parameter is ignored if the proc
 *                              has a non-distributed execution mode. The
 *                              default value is an empty vector.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::execute_proc_cache_input
 *                             "execute_proc_cache_input": A comma-delimited
 *                             list of table names from @a inputTableNames from
 *                             which input data will be cached for use in
 *                             subsequent calls to @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc" with the @ref
 *                             gpudb::execute_proc_use_cached_input
 *                             "use_cached_input" option. Cached input data
 *                             will be retained until the proc status is
 *                             cleared with the @ref
 *                             showProcStatus(const std::string&, const std::map<std::string, std::string>&) const
 *                             "clear_complete" option of @ref
 *                             showProcStatus(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showProcStatus" and all proc instances using
 *                             the cached data have completed. The default
 *                             value is ''.
 *                         <li>@ref gpudb::execute_proc_use_cached_input
 *                             "execute_proc_use_cached_input": A
 *                             comma-delimited list of run IDs (as returned
 *                             from prior calls to @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc") of running or completed proc
 *                             instances from which input data cached using the
 *                             @ref gpudb::execute_proc_cache_input
 *                             "cache_input" option will be used. Cached input
 *                             data will not be used for any tables specified
 *                             in @a inputTableNames, but data from all other
 *                             tables cached for the specified run IDs will be
 *                             passed to the proc. If the same table was cached
 *                             for multiple specified run IDs, the cached data
 *                             from the first run ID specified in the list that
 *                             includes that table will be used. The default
 *                             value is ''.
 *                         <li>@ref gpudb::execute_proc_run_tag
 *                             "execute_proc_run_tag": A string that, if not
 *                             empty, can be used in subsequent calls to @ref
 *                             showProcStatus(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showProcStatus" or @ref
 *                             killProc(const std::string&, const std::map<std::string, std::string>&) const
 *                             "killProc" to identify the proc instance. The
 *                             default value is ''.
 *                         <li>@ref gpudb::execute_proc_max_output_lines
 *                             "execute_proc_max_output_lines": The maximum
 *                             number of lines of output from stdout and stderr
 *                             to return via @ref
 *                             showProcStatus(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showProcStatus". If the number of lines output
 *                             exceeds the maximum, earlier lines are
 *                             discarded. The default value is '100'.
 *                         <li>@ref gpudb::execute_proc_execute_at_startup
 *                             "execute_proc_execute_at_startup": If @ref
 *                             gpudb::execute_proc_true "true", an instance of
 *                             the proc will run when the database is started
 *                             instead of running immediately. The @ref
 *                             gpudb::ExecuteProcResponse::runId "runId" can be
 *                             retrieved using @ref
 *                             showProc(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showProc" and used in @ref
 *                             showProcStatus(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showProcStatus".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_proc_true
 *                                     "execute_proc_true"
 *                                 <li>@ref gpudb::execute_proc_false
 *                                     "execute_proc_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_proc_false "execute_proc_false".
 *                         <li>@ref gpudb::execute_proc_execute_at_startup_as
 *                             "execute_proc_execute_at_startup_as": Sets the
 *                             alternate user name to execute this proc
 *                             instance as when @ref
 *                             gpudb::execute_proc_execute_at_startup
 *                             "execute_at_startup" is @ref
 *                             gpudb::execute_proc_true "true". The default
 *                             value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ExecuteProcResponse "Response" object containing the
 *         result of the operation.
 */
ExecuteProcResponse executeProc( const std::string& procName,
                                 const std::map<std::string, std::string>& params,
                                 const std::map<std::string, std::vector<uint8_t> >& binParams,
                                 const std::vector<std::string>& inputTableNames,
                                 const std::map<std::string, std::vector<std::string> >& inputColumnNames,
                                 const std::vector<std::string>& outputTableNames,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Executes a proc. This endpoint is asynchronous and does not wait for the
 * proc to complete before returning.
 *
 * If the proc being executed is distributed, @a inputTableNames & @a
 * inputColumnNames may be passed to the proc to use for reading data, and @a
 * outputTableNames may be passed to the proc to use for writing data.
 *
 * If the proc being executed is non-distributed, these table parameters will
 * be ignored.
 *
 * @param[in] procName  Name of the proc to execute. Must be the name of a
 *                      currently existing proc.
 * @param[in] params  A map containing named parameters to pass to the proc.
 *                    Each key/value pair specifies the name of a parameter and
 *                    its value. The default value is an empty map.
 * @param[in] binParams  A map containing named binary parameters to pass to
 *                       the proc. Each key/value pair specifies the name of a
 *                       parameter and its value. The default value is an empty
 *                       map.
 * @param[in] inputTableNames  Names of the tables containing data to be passed
 *                             to the proc. Each name specified must be the
 *                             name of a currently existing table, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a>. If no
 *                             table names are specified, no data will be
 *                             passed to the proc.  This parameter is ignored
 *                             if the proc has a non-distributed execution
 *                             mode. The default value is an empty vector.
 * @param[in] inputColumnNames  Map of table names from @a inputTableNames to
 *                              lists of names of columns from those tables
 *                              that will be passed to the proc. Each column
 *                              name specified must be the name of an existing
 *                              column in the corresponding table. If a table
 *                              name from @a inputTableNames is not included,
 *                              all columns from that table will be passed to
 *                              the proc.  This parameter is ignored if the
 *                              proc has a non-distributed execution mode. The
 *                              default value is an empty map.
 * @param[in] outputTableNames  Names of the tables to which output data from
 *                              the proc will be written, each in
 *                              [schema_name.]table_name format, using standard
 *                              <a
 *                              href="../../../concepts/tables/#table-name-resolution"
 *                              target="_top">name resolution rules</a> and
 *                              meeting <a
 *                              href="../../../concepts/tables/#table-naming-criteria"
 *                              target="_top">table naming criteria</a>. If a
 *                              specified table does not exist, it will
 *                              automatically be created with the same schema
 *                              as the corresponding table (by order) from @a
 *                              inputTableNames, excluding any primary and
 *                              shard keys. If a specified table is a
 *                              non-persistent result table, it must not have
 *                              primary or shard keys. If no table names are
 *                              specified, no output data can be returned from
 *                              the proc. This parameter is ignored if the proc
 *                              has a non-distributed execution mode. The
 *                              default value is an empty vector.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::execute_proc_cache_input
 *                             "execute_proc_cache_input": A comma-delimited
 *                             list of table names from @a inputTableNames from
 *                             which input data will be cached for use in
 *                             subsequent calls to @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc" with the @ref
 *                             gpudb::execute_proc_use_cached_input
 *                             "use_cached_input" option. Cached input data
 *                             will be retained until the proc status is
 *                             cleared with the @ref
 *                             showProcStatus(const std::string&, const std::map<std::string, std::string>&) const
 *                             "clear_complete" option of @ref
 *                             showProcStatus(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showProcStatus" and all proc instances using
 *                             the cached data have completed. The default
 *                             value is ''.
 *                         <li>@ref gpudb::execute_proc_use_cached_input
 *                             "execute_proc_use_cached_input": A
 *                             comma-delimited list of run IDs (as returned
 *                             from prior calls to @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc") of running or completed proc
 *                             instances from which input data cached using the
 *                             @ref gpudb::execute_proc_cache_input
 *                             "cache_input" option will be used. Cached input
 *                             data will not be used for any tables specified
 *                             in @a inputTableNames, but data from all other
 *                             tables cached for the specified run IDs will be
 *                             passed to the proc. If the same table was cached
 *                             for multiple specified run IDs, the cached data
 *                             from the first run ID specified in the list that
 *                             includes that table will be used. The default
 *                             value is ''.
 *                         <li>@ref gpudb::execute_proc_run_tag
 *                             "execute_proc_run_tag": A string that, if not
 *                             empty, can be used in subsequent calls to @ref
 *                             showProcStatus(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showProcStatus" or @ref
 *                             killProc(const std::string&, const std::map<std::string, std::string>&) const
 *                             "killProc" to identify the proc instance. The
 *                             default value is ''.
 *                         <li>@ref gpudb::execute_proc_max_output_lines
 *                             "execute_proc_max_output_lines": The maximum
 *                             number of lines of output from stdout and stderr
 *                             to return via @ref
 *                             showProcStatus(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showProcStatus". If the number of lines output
 *                             exceeds the maximum, earlier lines are
 *                             discarded. The default value is '100'.
 *                         <li>@ref gpudb::execute_proc_execute_at_startup
 *                             "execute_proc_execute_at_startup": If @ref
 *                             gpudb::execute_proc_true "true", an instance of
 *                             the proc will run when the database is started
 *                             instead of running immediately. The @ref
 *                             gpudb::ExecuteProcResponse::runId "runId" can be
 *                             retrieved using @ref
 *                             showProc(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showProc" and used in @ref
 *                             showProcStatus(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showProcStatus".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_proc_true
 *                                     "execute_proc_true"
 *                                 <li>@ref gpudb::execute_proc_false
 *                                     "execute_proc_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_proc_false "execute_proc_false".
 *                         <li>@ref gpudb::execute_proc_execute_at_startup_as
 *                             "execute_proc_execute_at_startup_as": Sets the
 *                             alternate user name to execute this proc
 *                             instance as when @ref
 *                             gpudb::execute_proc_execute_at_startup
 *                             "execute_at_startup" is @ref
 *                             gpudb::execute_proc_true "true". The default
 *                             value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ExecuteProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ExecuteProcResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ExecuteProcResponse& executeProc( const std::string& procName,
                                  const std::map<std::string, std::string>& params,
                                  const std::map<std::string, std::vector<uint8_t> >& binParams,
                                  const std::vector<std::string>& inputTableNames,
                                  const std::map<std::string, std::vector<std::string> >& inputColumnNames,
                                  const std::vector<std::string>& outputTableNames,
                                  const std::map<std::string, std::string>& options,
                                  ExecuteProcResponse& response_ ) const;

/**
 * Execute a SQL statement (query, DML, or DDL).
 *
 * See <a href="../../../sql/" target="_top">SQL Support</a> for the complete
 * set of supported SQL commands.
 *
 * @param[in] request_  @ref gpudb::ExecuteSqlRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::RawExecuteSqlResponse "Response" object containing the
 *         result of the operation.
 */
RawExecuteSqlResponse executeSqlRaw( const ExecuteSqlRequest& request_ ) const;

/**
 * Execute a SQL statement (query, DML, or DDL).
 *
 * See <a href="../../../sql/" target="_top">SQL Support</a> for the complete
 * set of supported SQL commands.
 *
 * @param[in] request_  @ref gpudb::ExecuteSqlRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RawExecuteSqlResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::RawExecuteSqlResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
RawExecuteSqlResponse& executeSqlRaw( const ExecuteSqlRequest& request_,
                                      RawExecuteSqlResponse& response_ ) const;

/**
 * Execute a SQL statement (query, DML, or DDL).
 *
 * See <a href="../../../sql/" target="_top">SQL Support</a> for the complete
 * set of supported SQL commands.
 *
 * @param[in] request_  @ref gpudb::ExecuteSqlRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ExecuteSqlResponse "Response" object containing the
 *         result of the operation.
 */
ExecuteSqlResponse executeSql( const ExecuteSqlRequest& request_ ) const;

/**
 * Execute a SQL statement (query, DML, or DDL).
 *
 * See <a href="../../../sql/" target="_top">SQL Support</a> for the complete
 * set of supported SQL commands.
 *
 * @param[in] request_  @ref gpudb::ExecuteSqlRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ExecuteSqlResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ExecuteSqlResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ExecuteSqlResponse& executeSql( const ExecuteSqlRequest& request_,
                                ExecuteSqlResponse& response_ ) const;

/**
 * Execute a SQL statement (query, DML, or DDL).
 *
 * See <a href="../../../sql/" target="_top">SQL Support</a> for the complete
 * set of supported SQL commands.
 *
 * @param[in] statement  SQL statement (query, DML, or DDL) to be executed
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawExecuteSqlResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] requestSchemaStr  Avro schema of @a data. The default value is
 *                              ''.
 * @param[in] data  An array of binary-encoded data for the records to be
 *                  binded to the SQL query.  Or use @ref
 *                  gpudb::execute_sql_query_parameters "query_parameters" to
 *                  pass the data in JSON format. The default value is an empty
 *                  vector.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::execute_sql_cost_based_optimization
 *                             "execute_sql_cost_based_optimization": If @ref
 *                             gpudb::execute_sql_false "false", disables the
 *                             cost-based optimization of the given query.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_distributed_joins
 *                             "execute_sql_distributed_joins": If @ref
 *                             gpudb::execute_sql_true "true", enables the use
 *                             of distributed joins in servicing the given
 *                             query.  Any query requiring a distributed join
 *                             will succeed, though hints can be used in the
 *                             query to change the distribution of the source
 *                             data to allow the query to succeed.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_distributed_operations
 *                             "execute_sql_distributed_operations": If @ref
 *                             gpudb::execute_sql_true "true", enables the use
 *                             of distributed operations in servicing the given
 *                             query.  Any query requiring a distributed join
 *                             will succeed, though hints can be used in the
 *                             query to change the distribution of the source
 *                             data to allow the query to succeed.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_ignore_existing_pk
 *                             "execute_sql_ignore_existing_pk": Specifies the
 *                             record collision error-suppression policy for
 *                             inserting into or updating a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             primary key record collisions are rejected (@ref
 *                             gpudb::execute_sql_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::execute_sql_false "false").  If set to
 *                             @ref gpudb::execute_sql_true "true", any record
 *                             insert/update that is rejected for resulting in
 *                             a primary key collision with an existing table
 *                             record will be ignored with no error generated.
 *                             If @ref gpudb::execute_sql_false "false", the
 *                             rejection of any insert/update for resulting in
 *                             a primary key collision will cause an error to
 *                             be reported.  If the specified table does not
 *                             have a primary key or if @ref
 *                             gpudb::execute_sql_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::execute_sql_true "true", then this option
 *                             has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true": Ignore
 *                                     inserts/updates that result in primary
 *                                     key collisions with existing records
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false": Treat as errors any
 *                                     inserts/updates that result in primary
 *                                     key collisions with existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_late_materialization
 *                             "execute_sql_late_materialization": If @ref
 *                             gpudb::execute_sql_true "true", Joins/Filters
 *                             results  will always be materialized ( saved to
 *                             result tables format).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_paging_table
 *                             "execute_sql_paging_table": When empty or the
 *                             specified paging table not exists, the system
 *                             will create a paging table and return when query
 *                             output has more records than the user asked. If
 *                             the paging table exists in the system, the
 *                             records from the paging table are returned
 *                             without evaluating the query.
 *                         <li>@ref gpudb::execute_sql_paging_table_ttl
 *                             "execute_sql_paging_table_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the paging table.
 *                         <li>@ref gpudb::execute_sql_parallel_execution
 *                             "execute_sql_parallel_execution": If @ref
 *                             gpudb::execute_sql_false "false", disables the
 *                             parallel step execution of the given query.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_plan_cache
 *                             "execute_sql_plan_cache": If @ref
 *                             gpudb::execute_sql_false "false", disables plan
 *                             caching for the given query.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_prepare_mode
 *                             "execute_sql_prepare_mode": If @ref
 *                             gpudb::execute_sql_true "true", compiles a query
 *                             into an execution plan and saves it in query
 *                             cache. Query execution is not performed and an
 *                             empty response will be returned to user.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_preserve_dict_encoding
 *                             "execute_sql_preserve_dict_encoding": If @ref
 *                             gpudb::execute_sql_true "true", then columns
 *                             that were dict encoded in the source table will
 *                             be dict encoded in the projection table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_query_parameters
 *                             "execute_sql_query_parameters": Query parameters
 *                             in JSON array or arrays (for inserting multiple
 *                             rows).  This can be used instead of @a data and
 *                             @a requestSchemaStr.
 *                         <li>@ref gpudb::execute_sql_results_caching
 *                             "execute_sql_results_caching": If @ref
 *                             gpudb::execute_sql_false "false", disables
 *                             caching of the results of the given query.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_rule_based_optimization
 *                             "execute_sql_rule_based_optimization": If @ref
 *                             gpudb::execute_sql_false "false", disables
 *                             rule-based rewrite optimizations for the given
 *                             query.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_ssq_optimization
 *                             "execute_sql_ssq_optimization": If @ref
 *                             gpudb::execute_sql_false "false", scalar
 *                             subqueries will be translated into joins.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_ttl "execute_sql_ttl":
 *                             Sets the <a href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the intermediate result
 *                             tables used in query execution.
 *                         <li>@ref gpudb::execute_sql_update_on_existing_pk
 *                             "execute_sql_update_on_existing_pk": Specifies
 *                             the record collision policy for inserting into
 *                             or updating a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::execute_sql_true "true", any existing
 *                             table record with primary key values that match
 *                             those of a record being inserted or updated will
 *                             be replaced by that record. If set to @ref
 *                             gpudb::execute_sql_false "false", any such
 *                             primary key collision will result in the
 *                             insert/update being rejected and the error
 *                             handled as determined by @ref
 *                             gpudb::execute_sql_ignore_existing_pk
 *                             "ignore_existing_pk".  If the specified table
 *                             does not have a primary key, then this option
 *                             has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true": Replace the
 *                                     collided-into record with the record
 *                                     inserted or updated when a new/modified
 *                                     record causes a primary key collision
 *                                     with an existing record
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false": Reject the insert
 *                                     or update when it results in a primary
 *                                     key collision with an existing record
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_validate_change_column
 *                             "execute_sql_validate_change_column": When
 *                             changing a column using alter table, validate
 *                             the change before applying it. If @ref
 *                             gpudb::execute_sql_true "true", then validate
 *                             all values. A value too large (or too long) for
 *                             the new type will prevent any change. If @ref
 *                             gpudb::execute_sql_false "false", then when a
 *                             value is too large or long, it will be
 *                             truncated.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_current_schema
 *                             "execute_sql_current_schema": Use the supplied
 *                             value as the <a
 *                             href="../../../concepts/schemas/#default-schema"
 *                             target="_top">default schema</a> when processing
 *                             this SQL command.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ExecuteSqlResponse "Response" object containing the
 *         result of the operation.
 */
ExecuteSqlResponse executeSql( const std::string& statement,
                               const int64_t offset,
                               const int64_t limit,
                               const std::string& requestSchemaStr,
                               const std::vector<std::vector<uint8_t> >& data,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Execute a SQL statement (query, DML, or DDL).
 *
 * See <a href="../../../sql/" target="_top">SQL Support</a> for the complete
 * set of supported SQL commands.
 *
 * @param[in] statement  SQL statement (query, DML, or DDL) to be executed
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawExecuteSqlResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] requestSchemaStr  Avro schema of @a data. The default value is
 *                              ''.
 * @param[in] data  An array of binary-encoded data for the records to be
 *                  binded to the SQL query.  Or use @ref
 *                  gpudb::execute_sql_query_parameters "query_parameters" to
 *                  pass the data in JSON format. The default value is an empty
 *                  vector.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::execute_sql_cost_based_optimization
 *                             "execute_sql_cost_based_optimization": If @ref
 *                             gpudb::execute_sql_false "false", disables the
 *                             cost-based optimization of the given query.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_distributed_joins
 *                             "execute_sql_distributed_joins": If @ref
 *                             gpudb::execute_sql_true "true", enables the use
 *                             of distributed joins in servicing the given
 *                             query.  Any query requiring a distributed join
 *                             will succeed, though hints can be used in the
 *                             query to change the distribution of the source
 *                             data to allow the query to succeed.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_distributed_operations
 *                             "execute_sql_distributed_operations": If @ref
 *                             gpudb::execute_sql_true "true", enables the use
 *                             of distributed operations in servicing the given
 *                             query.  Any query requiring a distributed join
 *                             will succeed, though hints can be used in the
 *                             query to change the distribution of the source
 *                             data to allow the query to succeed.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_ignore_existing_pk
 *                             "execute_sql_ignore_existing_pk": Specifies the
 *                             record collision error-suppression policy for
 *                             inserting into or updating a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             primary key record collisions are rejected (@ref
 *                             gpudb::execute_sql_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::execute_sql_false "false").  If set to
 *                             @ref gpudb::execute_sql_true "true", any record
 *                             insert/update that is rejected for resulting in
 *                             a primary key collision with an existing table
 *                             record will be ignored with no error generated.
 *                             If @ref gpudb::execute_sql_false "false", the
 *                             rejection of any insert/update for resulting in
 *                             a primary key collision will cause an error to
 *                             be reported.  If the specified table does not
 *                             have a primary key or if @ref
 *                             gpudb::execute_sql_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::execute_sql_true "true", then this option
 *                             has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true": Ignore
 *                                     inserts/updates that result in primary
 *                                     key collisions with existing records
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false": Treat as errors any
 *                                     inserts/updates that result in primary
 *                                     key collisions with existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_late_materialization
 *                             "execute_sql_late_materialization": If @ref
 *                             gpudb::execute_sql_true "true", Joins/Filters
 *                             results  will always be materialized ( saved to
 *                             result tables format).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_paging_table
 *                             "execute_sql_paging_table": When empty or the
 *                             specified paging table not exists, the system
 *                             will create a paging table and return when query
 *                             output has more records than the user asked. If
 *                             the paging table exists in the system, the
 *                             records from the paging table are returned
 *                             without evaluating the query.
 *                         <li>@ref gpudb::execute_sql_paging_table_ttl
 *                             "execute_sql_paging_table_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the paging table.
 *                         <li>@ref gpudb::execute_sql_parallel_execution
 *                             "execute_sql_parallel_execution": If @ref
 *                             gpudb::execute_sql_false "false", disables the
 *                             parallel step execution of the given query.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_plan_cache
 *                             "execute_sql_plan_cache": If @ref
 *                             gpudb::execute_sql_false "false", disables plan
 *                             caching for the given query.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_prepare_mode
 *                             "execute_sql_prepare_mode": If @ref
 *                             gpudb::execute_sql_true "true", compiles a query
 *                             into an execution plan and saves it in query
 *                             cache. Query execution is not performed and an
 *                             empty response will be returned to user.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_preserve_dict_encoding
 *                             "execute_sql_preserve_dict_encoding": If @ref
 *                             gpudb::execute_sql_true "true", then columns
 *                             that were dict encoded in the source table will
 *                             be dict encoded in the projection table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_query_parameters
 *                             "execute_sql_query_parameters": Query parameters
 *                             in JSON array or arrays (for inserting multiple
 *                             rows).  This can be used instead of @a data and
 *                             @a requestSchemaStr.
 *                         <li>@ref gpudb::execute_sql_results_caching
 *                             "execute_sql_results_caching": If @ref
 *                             gpudb::execute_sql_false "false", disables
 *                             caching of the results of the given query.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_rule_based_optimization
 *                             "execute_sql_rule_based_optimization": If @ref
 *                             gpudb::execute_sql_false "false", disables
 *                             rule-based rewrite optimizations for the given
 *                             query.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_ssq_optimization
 *                             "execute_sql_ssq_optimization": If @ref
 *                             gpudb::execute_sql_false "false", scalar
 *                             subqueries will be translated into joins.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_ttl "execute_sql_ttl":
 *                             Sets the <a href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the intermediate result
 *                             tables used in query execution.
 *                         <li>@ref gpudb::execute_sql_update_on_existing_pk
 *                             "execute_sql_update_on_existing_pk": Specifies
 *                             the record collision policy for inserting into
 *                             or updating a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::execute_sql_true "true", any existing
 *                             table record with primary key values that match
 *                             those of a record being inserted or updated will
 *                             be replaced by that record. If set to @ref
 *                             gpudb::execute_sql_false "false", any such
 *                             primary key collision will result in the
 *                             insert/update being rejected and the error
 *                             handled as determined by @ref
 *                             gpudb::execute_sql_ignore_existing_pk
 *                             "ignore_existing_pk".  If the specified table
 *                             does not have a primary key, then this option
 *                             has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true": Replace the
 *                                     collided-into record with the record
 *                                     inserted or updated when a new/modified
 *                                     record causes a primary key collision
 *                                     with an existing record
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false": Reject the insert
 *                                     or update when it results in a primary
 *                                     key collision with an existing record
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_false "execute_sql_false".
 *                         <li>@ref gpudb::execute_sql_validate_change_column
 *                             "execute_sql_validate_change_column": When
 *                             changing a column using alter table, validate
 *                             the change before applying it. If @ref
 *                             gpudb::execute_sql_true "true", then validate
 *                             all values. A value too large (or too long) for
 *                             the new type will prevent any change. If @ref
 *                             gpudb::execute_sql_false "false", then when a
 *                             value is too large or long, it will be
 *                             truncated.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::execute_sql_true
 *                                     "execute_sql_true"
 *                                 <li>@ref gpudb::execute_sql_false
 *                                     "execute_sql_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::execute_sql_true "execute_sql_true".
 *                         <li>@ref gpudb::execute_sql_current_schema
 *                             "execute_sql_current_schema": Use the supplied
 *                             value as the <a
 *                             href="../../../concepts/schemas/#default-schema"
 *                             target="_top">default schema</a> when processing
 *                             this SQL command.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ExecuteSqlResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ExecuteSqlResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ExecuteSqlResponse& executeSql( const std::string& statement,
                                const int64_t offset,
                                const int64_t limit,
                                const std::string& requestSchemaStr,
                                const std::vector<std::vector<uint8_t> >& data,
                                const std::map<std::string, std::string>& options,
                                ExecuteSqlResponse& response_ ) const;

/**
 * Export query metrics to a given destination.
 * Returns query metrics.
 *
 * @param[in] request_  @ref gpudb::ExportQueryMetricsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ExportQueryMetricsResponse "Response" object containing
 *         the result of the operation.
 */
ExportQueryMetricsResponse exportQueryMetrics( const ExportQueryMetricsRequest& request_ ) const;

/**
 * Export query metrics to a given destination.
 * Returns query metrics.
 *
 * @param[in] request_  @ref gpudb::ExportQueryMetricsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ExportQueryMetricsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ExportQueryMetricsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ExportQueryMetricsResponse& exportQueryMetrics( const ExportQueryMetricsRequest& request_,
                                                ExportQueryMetricsResponse& response_ ) const;

/**
 * Export query metrics to a given destination.
 * Returns query metrics.
 *
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::export_query_metrics_expression
 *                             "export_query_metrics_expression": Filter for
 *                             multi query export
 *                         <li>@ref gpudb::export_query_metrics_filepath
 *                             "export_query_metrics_filepath": Path to export
 *                             target specified as a filename or existing
 *                             directory.
 *                         <li>@ref gpudb::export_query_metrics_format
 *                             "export_query_metrics_format": Specifies which
 *                             format to export the metrics.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::export_query_metrics_json
 *                                     "export_query_metrics_json": Generic
 *                                     json output
 *                                 <li>@ref
 *                                     gpudb::export_query_metrics_json_trace_event
 *                                     "export_query_metrics_json_trace_event":
 *                                     Chromium/Perfetto trace event format
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_query_metrics_json
 *                             "export_query_metrics_json".
 *                         <li>@ref gpudb::export_query_metrics_job_id
 *                             "export_query_metrics_job_id": Export query
 *                             metrics for the currently running job
 *                         <li>@ref gpudb::export_query_metrics_limit
 *                             "export_query_metrics_limit": Record limit per
 *                             file for multi query export
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ExportQueryMetricsResponse "Response" object containing
 *         the result of the operation.
 */
ExportQueryMetricsResponse exportQueryMetrics( const std::map<std::string, std::string>& options ) const;

/**
 * Export query metrics to a given destination.
 * Returns query metrics.
 *
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::export_query_metrics_expression
 *                             "export_query_metrics_expression": Filter for
 *                             multi query export
 *                         <li>@ref gpudb::export_query_metrics_filepath
 *                             "export_query_metrics_filepath": Path to export
 *                             target specified as a filename or existing
 *                             directory.
 *                         <li>@ref gpudb::export_query_metrics_format
 *                             "export_query_metrics_format": Specifies which
 *                             format to export the metrics.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::export_query_metrics_json
 *                                     "export_query_metrics_json": Generic
 *                                     json output
 *                                 <li>@ref
 *                                     gpudb::export_query_metrics_json_trace_event
 *                                     "export_query_metrics_json_trace_event":
 *                                     Chromium/Perfetto trace event format
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_query_metrics_json
 *                             "export_query_metrics_json".
 *                         <li>@ref gpudb::export_query_metrics_job_id
 *                             "export_query_metrics_job_id": Export query
 *                             metrics for the currently running job
 *                         <li>@ref gpudb::export_query_metrics_limit
 *                             "export_query_metrics_limit": Record limit per
 *                             file for multi query export
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ExportQueryMetricsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ExportQueryMetricsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ExportQueryMetricsResponse& exportQueryMetrics( const std::map<std::string, std::string>& options,
                                                ExportQueryMetricsResponse& response_ ) const;

/**
 * Export records from a table to files. All tables can be exported, in full or
 * partial (see @ref gpudb::export_records_to_files_columns_to_export
 * "columns_to_export" and @ref gpudb::export_records_to_files_columns_to_skip
 * "columns_to_skip"). Additional filtering can be applied when using export
 * table with expression through SQL. Default destination is KIFS, though other
 * storage types (Azure, S3, GCS, and HDFS) are supported through @ref
 * gpudb::export_records_to_files_datasink_name "datasink_name"; see @ref
 * createDatasink(const CreateDatasinkRequest&) const "createDatasink".
 *
 * Server's local file system is not supported.  Default file format is
 * delimited text. See options for different file types and different options
 * for each file type.  Table is saved to a single file if within max file size
 * limits (may vary depending on datasink type).  If not, then table is split
 * into multiple files; these may be smaller than the max size limit.
 *
 * All filenames created are returned in the response.
 *
 * @param[in] request_  @ref gpudb::ExportRecordsToFilesRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::ExportRecordsToFilesResponse "Response" object
 *         containing the result of the operation.
 */
ExportRecordsToFilesResponse exportRecordsToFiles( const ExportRecordsToFilesRequest& request_ ) const;

/**
 * Export records from a table to files. All tables can be exported, in full or
 * partial (see @ref gpudb::export_records_to_files_columns_to_export
 * "columns_to_export" and @ref gpudb::export_records_to_files_columns_to_skip
 * "columns_to_skip"). Additional filtering can be applied when using export
 * table with expression through SQL. Default destination is KIFS, though other
 * storage types (Azure, S3, GCS, and HDFS) are supported through @ref
 * gpudb::export_records_to_files_datasink_name "datasink_name"; see @ref
 * createDatasink(const CreateDatasinkRequest&) const "createDatasink".
 *
 * Server's local file system is not supported.  Default file format is
 * delimited text. See options for different file types and different options
 * for each file type.  Table is saved to a single file if within max file size
 * limits (may vary depending on datasink type).  If not, then table is split
 * into multiple files; these may be smaller than the max size limit.
 *
 * All filenames created are returned in the response.
 *
 * @param[in] request_  @ref gpudb::ExportRecordsToFilesRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ExportRecordsToFilesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ExportRecordsToFilesResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
ExportRecordsToFilesResponse& exportRecordsToFiles( const ExportRecordsToFilesRequest& request_,
                                                    ExportRecordsToFilesResponse& response_ ) const;

/**
 * Export records from a table to files. All tables can be exported, in full or
 * partial (see @ref gpudb::export_records_to_files_columns_to_export
 * "columns_to_export" and @ref gpudb::export_records_to_files_columns_to_skip
 * "columns_to_skip"). Additional filtering can be applied when using export
 * table with expression through SQL. Default destination is KIFS, though other
 * storage types (Azure, S3, GCS, and HDFS) are supported through @ref
 * gpudb::export_records_to_files_datasink_name "datasink_name"; see @ref
 * createDatasink(const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 * "createDatasink".
 *
 * Server's local file system is not supported.  Default file format is
 * delimited text. See options for different file types and different options
 * for each file type.  Table is saved to a single file if within max file size
 * limits (may vary depending on datasink type).  If not, then table is split
 * into multiple files; these may be smaller than the max size limit.
 *
 * All filenames created are returned in the response.
 *
 * @param[in] tableName
 * @param[in] filepath  Path to data export target.  If @a filepath has a file
 *                      extension, it is read as the name of a file. If @a
 *                      filepath is a directory, then the source table name
 *                      with a random UUID appended will be used as the name of
 *                      each exported file, all written to that directory. If
 *                      filepath is a filename, then all exported files will
 *                      have a random UUID appended to the given name.  In
 *                      either case, the target directory specified or implied
 *                      must exist.  The names of all exported files are
 *                      returned in the response.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::export_records_to_files_batch_size
 *                             "export_records_to_files_batch_size": Number of
 *                             records to be exported as a batch. The default
 *                             value is '1000000'.
 *                         <li>@ref
 *                             gpudb::export_records_to_files_column_formats
 *                             "export_records_to_files_column_formats": For
 *                             each source column specified, applies the
 *                             column-property-bound format.  Currently
 *                             supported column properties include date, time,
 *                             & datetime. The parameter value must be
 *                             formatted as a JSON string of maps of column
 *                             names to maps of column properties to their
 *                             corresponding column formats, e.g., '{
 *                             "order_date" : { "date" : "%Y.%m.%d" },
 *                             "order_time" : { "time" : "%H:%M:%S" } }'.  See
 *                             @ref
 *                             gpudb::export_records_to_files_default_column_formats
 *                             "default_column_formats" for valid format
 *                             syntax.
 *                         <li>@ref
 *                             gpudb::export_records_to_files_columns_to_export
 *                             "export_records_to_files_columns_to_export":
 *                             Specifies a comma-delimited list of columns from
 *                             the source table to export, written to the
 *                             output file in the order they are given.  Column
 *                             names can be provided, in which case the target
 *                             file will use those names as the column headers
 *                             as well.  Alternatively, column numbers can be
 *                             specified--discretely or as a range.  For
 *                             example, a value of '5,7,1..3' will write values
 *                             from the fifth column in the source table into
 *                             the first column in the target file, from the
 *                             seventh column in the source table into the
 *                             second column in the target file, and from the
 *                             first through third columns in the source table
 *                             into the third through fifth columns in the
 *                             target file.  Mutually exclusive with @ref
 *                             gpudb::export_records_to_files_columns_to_skip
 *                             "columns_to_skip".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_columns_to_skip
 *                             "export_records_to_files_columns_to_skip":
 *                             Comma-separated list of column names or column
 *                             numbers to not export.  All columns in the
 *                             source table not specified will be written to
 *                             the target file in the order they appear in the
 *                             table definition.  Mutually exclusive with @ref
 *                             gpudb::export_records_to_files_columns_to_export
 *                             "columns_to_export".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_datasink_name
 *                             "export_records_to_files_datasink_name":
 *                             Datasink name, created using @ref
 *                             createDatasink(const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                             "createDatasink".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_default_column_formats
 *                             "export_records_to_files_default_column_formats":
 *                             Specifies the default format to use to write
 *                             data.  Currently supported column properties
 *                             include date, time, & datetime.  This default
 *                             column-property-bound format can be overridden
 *                             by specifying a column property & format for a
 *                             given source column in @ref
 *                             gpudb::export_records_to_files_column_formats
 *                             "column_formats". For each specified annotation,
 *                             the format will apply to all columns with that
 *                             annotation unless custom @ref
 *                             gpudb::export_records_to_files_column_formats
 *                             "column_formats" for that annotation are
 *                             specified.  The parameter value must be
 *                             formatted as a JSON string that is a map of
 *                             column properties to their respective column
 *                             formats, e.g., '{ "date" : "%Y.%m.%d", "time" :
 *                             "%H:%M:%S" }'.  Column formats are specified as
 *                             a string of control characters and plain text.
 *                             The supported control characters are 'Y', 'm',
 *                             'd', 'H', 'M', 'S', and 's', which follow the
 *                             Linux 'strptime()' specification, as well as
 *                             's', which specifies seconds and fractional
 *                             seconds (though the fractional component will be
 *                             truncated past milliseconds).  Formats for the
 *                             'date' annotation must include the 'Y', 'm', and
 *                             'd' control characters. Formats for the 'time'
 *                             annotation must include the 'H', 'M', and either
 *                             'S' or 's' (but not both) control characters.
 *                             Formats for the 'datetime' annotation meet both
 *                             the 'date' and 'time' control character
 *                             requirements. For example, '{"datetime" :
 *                             "%m/%d/%Y %H:%M:%S" }' would be used to write
 *                             text as "05/04/2000 12:12:11"
 *                         <li>@ref gpudb::export_records_to_files_export_ddl
 *                             "export_records_to_files_export_ddl": Save DDL
 *                             to a separate file. The default value is
 *                             'false'.
 *                         <li>@ref
 *                             gpudb::export_records_to_files_file_extension
 *                             "export_records_to_files_file_extension":
 *                             Extension to give the export file. The default
 *                             value is '.csv'.
 *                         <li>@ref gpudb::export_records_to_files_file_type
 *                             "export_records_to_files_file_type": Specifies
 *                             the file format to use when exporting data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_delimited_text
 *                                     "export_records_to_files_delimited_text":
 *                                     Delimited text file format; e.g., CSV,
 *                                     TSV, PSV, etc.
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_parquet
 *                                     "export_records_to_files_parquet"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_records_to_files_delimited_text
 *                             "export_records_to_files_delimited_text".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_kinetica_header
 *                             "export_records_to_files_kinetica_header":
 *                             Whether to include a Kinetica proprietary
 *                             header. Will not be written if @ref
 *                             gpudb::export_records_to_files_text_has_header
 *                             "text_has_header" is @ref
 *                             gpudb::export_records_to_files_false "false".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::export_records_to_files_true
 *                                     "export_records_to_files_true"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_false
 *                                     "export_records_to_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_records_to_files_false
 *                             "export_records_to_files_false".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_kinetica_header_delimiter
 *                             "export_records_to_files_kinetica_header_delimiter":
 *                             If a Kinetica proprietary header is included,
 *                             then specify a property separator. Different
 *                             from column delimiter. The default value is '|'.
 *                         <li>@ref
 *                             gpudb::export_records_to_files_compression_type
 *                             "export_records_to_files_compression_type": File
 *                             compression type. GZip can be applied to text
 *                             and Parquet files.  Snappy can only be applied
 *                             to Parquet files, and is the default compression
 *                             for them.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_uncompressed
 *                                     "export_records_to_files_uncompressed"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_snappy
 *                                     "export_records_to_files_snappy"
 *                                 <li>@ref gpudb::export_records_to_files_gzip
 *                                     "export_records_to_files_gzip"
 *                             </ul>
 *                         <li>@ref gpudb::export_records_to_files_single_file
 *                             "export_records_to_files_single_file": Save
 *                             records to a single file. This option may be
 *                             ignored if file size exceeds internal file size
 *                             limits (this limit will differ on different
 *                             targets).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::export_records_to_files_true
 *                                     "export_records_to_files_true"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_false
 *                                     "export_records_to_files_false"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_overwrite
 *                                     "export_records_to_files_overwrite"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_records_to_files_true
 *                             "export_records_to_files_true".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_single_file_max_size
 *                             "export_records_to_files_single_file_max_size":
 *                             Max file size (in MB) to allow saving to a
 *                             single file. May be overridden by target
 *                             limitations. The default value is ''.
 *                         <li>@ref
 *                             gpudb::export_records_to_files_text_delimiter
 *                             "export_records_to_files_text_delimiter":
 *                             Specifies the character to write out to delimit
 *                             field values and field names in the header (if
 *                             present).  For @ref
 *                             gpudb::export_records_to_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::export_records_to_files_file_type
 *                             "file_type" only. The default value is ','.
 *                         <li>@ref
 *                             gpudb::export_records_to_files_text_has_header
 *                             "export_records_to_files_text_has_header":
 *                             Indicates whether to write out a header row.
 *                             For @ref
 *                             gpudb::export_records_to_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::export_records_to_files_file_type
 *                             "file_type" only.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::export_records_to_files_true
 *                                     "export_records_to_files_true"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_false
 *                                     "export_records_to_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_records_to_files_true
 *                             "export_records_to_files_true".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_text_null_string
 *                             "export_records_to_files_text_null_string":
 *                             Specifies the character string that should be
 *                             written out for the null value in the data.  For
 *                             @ref
 *                             gpudb::export_records_to_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::export_records_to_files_file_type
 *                             "file_type" only. The default value is '\\N'.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ExportRecordsToFilesResponse "Response" object
 *         containing the result of the operation.
 */
ExportRecordsToFilesResponse exportRecordsToFiles( const std::string& tableName,
                                                   const std::string& filepath,
                                                   const std::map<std::string, std::string>& options ) const;

/**
 * Export records from a table to files. All tables can be exported, in full or
 * partial (see @ref gpudb::export_records_to_files_columns_to_export
 * "columns_to_export" and @ref gpudb::export_records_to_files_columns_to_skip
 * "columns_to_skip"). Additional filtering can be applied when using export
 * table with expression through SQL. Default destination is KIFS, though other
 * storage types (Azure, S3, GCS, and HDFS) are supported through @ref
 * gpudb::export_records_to_files_datasink_name "datasink_name"; see @ref
 * createDatasink(const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 * "createDatasink".
 *
 * Server's local file system is not supported.  Default file format is
 * delimited text. See options for different file types and different options
 * for each file type.  Table is saved to a single file if within max file size
 * limits (may vary depending on datasink type).  If not, then table is split
 * into multiple files; these may be smaller than the max size limit.
 *
 * All filenames created are returned in the response.
 *
 * @param[in] tableName
 * @param[in] filepath  Path to data export target.  If @a filepath has a file
 *                      extension, it is read as the name of a file. If @a
 *                      filepath is a directory, then the source table name
 *                      with a random UUID appended will be used as the name of
 *                      each exported file, all written to that directory. If
 *                      filepath is a filename, then all exported files will
 *                      have a random UUID appended to the given name.  In
 *                      either case, the target directory specified or implied
 *                      must exist.  The names of all exported files are
 *                      returned in the response.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::export_records_to_files_batch_size
 *                             "export_records_to_files_batch_size": Number of
 *                             records to be exported as a batch. The default
 *                             value is '1000000'.
 *                         <li>@ref
 *                             gpudb::export_records_to_files_column_formats
 *                             "export_records_to_files_column_formats": For
 *                             each source column specified, applies the
 *                             column-property-bound format.  Currently
 *                             supported column properties include date, time,
 *                             & datetime. The parameter value must be
 *                             formatted as a JSON string of maps of column
 *                             names to maps of column properties to their
 *                             corresponding column formats, e.g., '{
 *                             "order_date" : { "date" : "%Y.%m.%d" },
 *                             "order_time" : { "time" : "%H:%M:%S" } }'.  See
 *                             @ref
 *                             gpudb::export_records_to_files_default_column_formats
 *                             "default_column_formats" for valid format
 *                             syntax.
 *                         <li>@ref
 *                             gpudb::export_records_to_files_columns_to_export
 *                             "export_records_to_files_columns_to_export":
 *                             Specifies a comma-delimited list of columns from
 *                             the source table to export, written to the
 *                             output file in the order they are given.  Column
 *                             names can be provided, in which case the target
 *                             file will use those names as the column headers
 *                             as well.  Alternatively, column numbers can be
 *                             specified--discretely or as a range.  For
 *                             example, a value of '5,7,1..3' will write values
 *                             from the fifth column in the source table into
 *                             the first column in the target file, from the
 *                             seventh column in the source table into the
 *                             second column in the target file, and from the
 *                             first through third columns in the source table
 *                             into the third through fifth columns in the
 *                             target file.  Mutually exclusive with @ref
 *                             gpudb::export_records_to_files_columns_to_skip
 *                             "columns_to_skip".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_columns_to_skip
 *                             "export_records_to_files_columns_to_skip":
 *                             Comma-separated list of column names or column
 *                             numbers to not export.  All columns in the
 *                             source table not specified will be written to
 *                             the target file in the order they appear in the
 *                             table definition.  Mutually exclusive with @ref
 *                             gpudb::export_records_to_files_columns_to_export
 *                             "columns_to_export".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_datasink_name
 *                             "export_records_to_files_datasink_name":
 *                             Datasink name, created using @ref
 *                             createDatasink(const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                             "createDatasink".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_default_column_formats
 *                             "export_records_to_files_default_column_formats":
 *                             Specifies the default format to use to write
 *                             data.  Currently supported column properties
 *                             include date, time, & datetime.  This default
 *                             column-property-bound format can be overridden
 *                             by specifying a column property & format for a
 *                             given source column in @ref
 *                             gpudb::export_records_to_files_column_formats
 *                             "column_formats". For each specified annotation,
 *                             the format will apply to all columns with that
 *                             annotation unless custom @ref
 *                             gpudb::export_records_to_files_column_formats
 *                             "column_formats" for that annotation are
 *                             specified.  The parameter value must be
 *                             formatted as a JSON string that is a map of
 *                             column properties to their respective column
 *                             formats, e.g., '{ "date" : "%Y.%m.%d", "time" :
 *                             "%H:%M:%S" }'.  Column formats are specified as
 *                             a string of control characters and plain text.
 *                             The supported control characters are 'Y', 'm',
 *                             'd', 'H', 'M', 'S', and 's', which follow the
 *                             Linux 'strptime()' specification, as well as
 *                             's', which specifies seconds and fractional
 *                             seconds (though the fractional component will be
 *                             truncated past milliseconds).  Formats for the
 *                             'date' annotation must include the 'Y', 'm', and
 *                             'd' control characters. Formats for the 'time'
 *                             annotation must include the 'H', 'M', and either
 *                             'S' or 's' (but not both) control characters.
 *                             Formats for the 'datetime' annotation meet both
 *                             the 'date' and 'time' control character
 *                             requirements. For example, '{"datetime" :
 *                             "%m/%d/%Y %H:%M:%S" }' would be used to write
 *                             text as "05/04/2000 12:12:11"
 *                         <li>@ref gpudb::export_records_to_files_export_ddl
 *                             "export_records_to_files_export_ddl": Save DDL
 *                             to a separate file. The default value is
 *                             'false'.
 *                         <li>@ref
 *                             gpudb::export_records_to_files_file_extension
 *                             "export_records_to_files_file_extension":
 *                             Extension to give the export file. The default
 *                             value is '.csv'.
 *                         <li>@ref gpudb::export_records_to_files_file_type
 *                             "export_records_to_files_file_type": Specifies
 *                             the file format to use when exporting data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_delimited_text
 *                                     "export_records_to_files_delimited_text":
 *                                     Delimited text file format; e.g., CSV,
 *                                     TSV, PSV, etc.
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_parquet
 *                                     "export_records_to_files_parquet"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_records_to_files_delimited_text
 *                             "export_records_to_files_delimited_text".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_kinetica_header
 *                             "export_records_to_files_kinetica_header":
 *                             Whether to include a Kinetica proprietary
 *                             header. Will not be written if @ref
 *                             gpudb::export_records_to_files_text_has_header
 *                             "text_has_header" is @ref
 *                             gpudb::export_records_to_files_false "false".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::export_records_to_files_true
 *                                     "export_records_to_files_true"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_false
 *                                     "export_records_to_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_records_to_files_false
 *                             "export_records_to_files_false".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_kinetica_header_delimiter
 *                             "export_records_to_files_kinetica_header_delimiter":
 *                             If a Kinetica proprietary header is included,
 *                             then specify a property separator. Different
 *                             from column delimiter. The default value is '|'.
 *                         <li>@ref
 *                             gpudb::export_records_to_files_compression_type
 *                             "export_records_to_files_compression_type": File
 *                             compression type. GZip can be applied to text
 *                             and Parquet files.  Snappy can only be applied
 *                             to Parquet files, and is the default compression
 *                             for them.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_uncompressed
 *                                     "export_records_to_files_uncompressed"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_snappy
 *                                     "export_records_to_files_snappy"
 *                                 <li>@ref gpudb::export_records_to_files_gzip
 *                                     "export_records_to_files_gzip"
 *                             </ul>
 *                         <li>@ref gpudb::export_records_to_files_single_file
 *                             "export_records_to_files_single_file": Save
 *                             records to a single file. This option may be
 *                             ignored if file size exceeds internal file size
 *                             limits (this limit will differ on different
 *                             targets).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::export_records_to_files_true
 *                                     "export_records_to_files_true"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_false
 *                                     "export_records_to_files_false"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_overwrite
 *                                     "export_records_to_files_overwrite"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_records_to_files_true
 *                             "export_records_to_files_true".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_single_file_max_size
 *                             "export_records_to_files_single_file_max_size":
 *                             Max file size (in MB) to allow saving to a
 *                             single file. May be overridden by target
 *                             limitations. The default value is ''.
 *                         <li>@ref
 *                             gpudb::export_records_to_files_text_delimiter
 *                             "export_records_to_files_text_delimiter":
 *                             Specifies the character to write out to delimit
 *                             field values and field names in the header (if
 *                             present).  For @ref
 *                             gpudb::export_records_to_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::export_records_to_files_file_type
 *                             "file_type" only. The default value is ','.
 *                         <li>@ref
 *                             gpudb::export_records_to_files_text_has_header
 *                             "export_records_to_files_text_has_header":
 *                             Indicates whether to write out a header row.
 *                             For @ref
 *                             gpudb::export_records_to_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::export_records_to_files_file_type
 *                             "file_type" only.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::export_records_to_files_true
 *                                     "export_records_to_files_true"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_files_false
 *                                     "export_records_to_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_records_to_files_true
 *                             "export_records_to_files_true".
 *                         <li>@ref
 *                             gpudb::export_records_to_files_text_null_string
 *                             "export_records_to_files_text_null_string":
 *                             Specifies the character string that should be
 *                             written out for the null value in the data.  For
 *                             @ref
 *                             gpudb::export_records_to_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::export_records_to_files_file_type
 *                             "file_type" only. The default value is '\\N'.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ExportRecordsToFilesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ExportRecordsToFilesResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
ExportRecordsToFilesResponse& exportRecordsToFiles( const std::string& tableName,
                                                    const std::string& filepath,
                                                    const std::map<std::string, std::string>& options,
                                                    ExportRecordsToFilesResponse& response_ ) const;

/**
 * Exports records from source table to the specified target table in an
 * external database
 *
 * @param[in] request_  @ref gpudb::ExportRecordsToTableRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::ExportRecordsToTableResponse "Response" object
 *         containing the result of the operation.
 */
ExportRecordsToTableResponse exportRecordsToTable( const ExportRecordsToTableRequest& request_ ) const;

/**
 * Exports records from source table to the specified target table in an
 * external database
 *
 * @param[in] request_  @ref gpudb::ExportRecordsToTableRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ExportRecordsToTableResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ExportRecordsToTableResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
ExportRecordsToTableResponse& exportRecordsToTable( const ExportRecordsToTableRequest& request_,
                                                    ExportRecordsToTableResponse& response_ ) const;

/**
 * Exports records from source table to the specified target table in an
 * external database
 *
 * @param[in] tableName  Name of the table from which the data will be exported
 *                       to remote database, in [schema_name.]table_name
 *                       format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] remoteQuery  Parameterized insert query to export gpudb table
 *                         data into remote database. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::export_records_to_table_batch_size
 *                             "export_records_to_table_batch_size": Batch
 *                             size, which determines how many rows to export
 *                             per round trip. The default value is '200000'.
 *                         <li>@ref
 *                             gpudb::export_records_to_table_datasink_name
 *                             "export_records_to_table_datasink_name": Name of
 *                             an existing external data sink to which table
 *                             name specified in @a tableName will be exported
 *                         <li>@ref
 *                             gpudb::export_records_to_table_jdbc_session_init_statement
 *                             "export_records_to_table_jdbc_session_init_statement":
 *                             Executes the statement per each jdbc session
 *                             before doing actual load. The default value is
 *                             ''.
 *                         <li>@ref
 *                             gpudb::export_records_to_table_jdbc_connection_init_statement
 *                             "export_records_to_table_jdbc_connection_init_statement":
 *                             Executes the statement once before doing actual
 *                             load. The default value is ''.
 *                         <li>@ref gpudb::export_records_to_table_remote_table
 *                             "export_records_to_table_remote_table": Name of
 *                             the target table to which source table is
 *                             exported. When this option is specified
 *                             remote_query cannot be specified. The default
 *                             value is ''.
 *                         <li>@ref
 *                             gpudb::export_records_to_table_use_st_geomfrom_casts
 *                             "export_records_to_table_use_st_geomfrom_casts":
 *                             Wraps parametrized variables with
 *                             st_geomfromtext or st_geomfromwkb based on
 *                             source column type.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::export_records_to_table_true
 *                                     "export_records_to_table_true"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_table_false
 *                                     "export_records_to_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_records_to_table_false
 *                             "export_records_to_table_false".
 *                         <li>@ref
 *                             gpudb::export_records_to_table_use_indexed_parameters
 *                             "export_records_to_table_use_indexed_parameters":
 *                             Uses $n style syntax when generating insert
 *                             query for remote_table option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::export_records_to_table_true
 *                                     "export_records_to_table_true"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_table_false
 *                                     "export_records_to_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_records_to_table_false
 *                             "export_records_to_table_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ExportRecordsToTableResponse "Response" object
 *         containing the result of the operation.
 */
ExportRecordsToTableResponse exportRecordsToTable( const std::string& tableName,
                                                   const std::string& remoteQuery,
                                                   const std::map<std::string, std::string>& options ) const;

/**
 * Exports records from source table to the specified target table in an
 * external database
 *
 * @param[in] tableName  Name of the table from which the data will be exported
 *                       to remote database, in [schema_name.]table_name
 *                       format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] remoteQuery  Parameterized insert query to export gpudb table
 *                         data into remote database. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::export_records_to_table_batch_size
 *                             "export_records_to_table_batch_size": Batch
 *                             size, which determines how many rows to export
 *                             per round trip. The default value is '200000'.
 *                         <li>@ref
 *                             gpudb::export_records_to_table_datasink_name
 *                             "export_records_to_table_datasink_name": Name of
 *                             an existing external data sink to which table
 *                             name specified in @a tableName will be exported
 *                         <li>@ref
 *                             gpudb::export_records_to_table_jdbc_session_init_statement
 *                             "export_records_to_table_jdbc_session_init_statement":
 *                             Executes the statement per each jdbc session
 *                             before doing actual load. The default value is
 *                             ''.
 *                         <li>@ref
 *                             gpudb::export_records_to_table_jdbc_connection_init_statement
 *                             "export_records_to_table_jdbc_connection_init_statement":
 *                             Executes the statement once before doing actual
 *                             load. The default value is ''.
 *                         <li>@ref gpudb::export_records_to_table_remote_table
 *                             "export_records_to_table_remote_table": Name of
 *                             the target table to which source table is
 *                             exported. When this option is specified
 *                             remote_query cannot be specified. The default
 *                             value is ''.
 *                         <li>@ref
 *                             gpudb::export_records_to_table_use_st_geomfrom_casts
 *                             "export_records_to_table_use_st_geomfrom_casts":
 *                             Wraps parametrized variables with
 *                             st_geomfromtext or st_geomfromwkb based on
 *                             source column type.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::export_records_to_table_true
 *                                     "export_records_to_table_true"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_table_false
 *                                     "export_records_to_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_records_to_table_false
 *                             "export_records_to_table_false".
 *                         <li>@ref
 *                             gpudb::export_records_to_table_use_indexed_parameters
 *                             "export_records_to_table_use_indexed_parameters":
 *                             Uses $n style syntax when generating insert
 *                             query for remote_table option.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::export_records_to_table_true
 *                                     "export_records_to_table_true"
 *                                 <li>@ref
 *                                     gpudb::export_records_to_table_false
 *                                     "export_records_to_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::export_records_to_table_false
 *                             "export_records_to_table_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ExportRecordsToTableResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ExportRecordsToTableResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
ExportRecordsToTableResponse& exportRecordsToTable( const std::string& tableName,
                                                    const std::string& remoteQuery,
                                                    const std::map<std::string, std::string>& options,
                                                    ExportRecordsToTableResponse& response_ ) const;

/**
 * Filters data based on the specified expression.  The results are stored in a
 * <a href="../../../concepts/filtered_views/" target="_top">result set</a>
 * with the given @ref gpudb::FilterRequest::viewName "viewName".
 *
 * For details see <a href="../../../concepts/expressions/"
 * target="_top">Expressions</a>.
 *
 * The response message contains the number of points for which the expression
 * evaluated to be true, which is equivalent to the size of the result view.
 *
 * @param[in] request_  @ref gpudb::FilterRequest "Request" object containing
 *                      the parameters for the operation.
 *
 * @return @ref gpudb::FilterResponse "Response" object containing the result
 *         of the operation.
 */
FilterResponse filter( const FilterRequest& request_ ) const;

/**
 * Filters data based on the specified expression.  The results are stored in a
 * <a href="../../../concepts/filtered_views/" target="_top">result set</a>
 * with the given @ref gpudb::FilterRequest::viewName "viewName".
 *
 * For details see <a href="../../../concepts/expressions/"
 * target="_top">Expressions</a>.
 *
 * The response message contains the number of points for which the expression
 * evaluated to be true, which is equivalent to the size of the result view.
 *
 * @param[in] request_  @ref gpudb::FilterRequest "Request" object containing
 *                      the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
FilterResponse& filter( const FilterRequest& request_,
                        FilterResponse& response_ ) const;

/**
 * Filters data based on the specified expression.  The results are stored in a
 * <a href="../../../concepts/filtered_views/" target="_top">result set</a>
 * with the given @a viewName.
 *
 * For details see <a href="../../../concepts/expressions/"
 * target="_top">Expressions</a>.
 *
 * The response message contains the number of points for which the expression
 * evaluated to be true, which is equivalent to the size of the result view.
 *
 * @param[in] tableName  Name of the table to filter, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  This may be
 *                       the name of a table or a view (when chaining queries).
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] expression  The select expression to filter the specified table.
 *                        For details see <a
 *                        href="../../../concepts/expressions/"
 *                        target="_top">Expressions</a>.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_create_temp_table
 *                             "filter_create_temp_table": If @ref
 *                             gpudb::filter_true "true", a unique temporary
 *                             table name will be generated in the sys_temp
 *                             schema and used in place of @a viewName. This is
 *                             always allowed even if the caller does not have
 *                             permission to create tables. The generated name
 *                             is returned in @ref
 *                             gpudb::filter_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_true "filter_true"
 *                                 <li>@ref gpudb::filter_false "filter_false"
 *                             </ul>
 *                             The default value is @ref gpudb::filter_false
 *                             "filter_false".
 *                         <li>@ref gpudb::filter_collection_name
 *                             "filter_collection_name": [DEPRECATED--please
 *                             specify the containing schema for the view as
 *                             part of @a viewName and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                         <li>@ref gpudb::filter_view_id "filter_view_id":
 *                             view this filtered-view is part of. The default
 *                             value is ''.
 *                         <li>@ref gpudb::filter_ttl "filter_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the view specified in
 *                             @a viewName.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterResponse "Response" object containing the result
 *         of the operation.
 */
FilterResponse filter( const std::string& tableName,
                       const std::string& viewName,
                       const std::string& expression,
                       const std::map<std::string, std::string>& options ) const;

/**
 * Filters data based on the specified expression.  The results are stored in a
 * <a href="../../../concepts/filtered_views/" target="_top">result set</a>
 * with the given @a viewName.
 *
 * For details see <a href="../../../concepts/expressions/"
 * target="_top">Expressions</a>.
 *
 * The response message contains the number of points for which the expression
 * evaluated to be true, which is equivalent to the size of the result view.
 *
 * @param[in] tableName  Name of the table to filter, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  This may be
 *                       the name of a table or a view (when chaining queries).
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] expression  The select expression to filter the specified table.
 *                        For details see <a
 *                        href="../../../concepts/expressions/"
 *                        target="_top">Expressions</a>.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_create_temp_table
 *                             "filter_create_temp_table": If @ref
 *                             gpudb::filter_true "true", a unique temporary
 *                             table name will be generated in the sys_temp
 *                             schema and used in place of @a viewName. This is
 *                             always allowed even if the caller does not have
 *                             permission to create tables. The generated name
 *                             is returned in @ref
 *                             gpudb::filter_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_true "filter_true"
 *                                 <li>@ref gpudb::filter_false "filter_false"
 *                             </ul>
 *                             The default value is @ref gpudb::filter_false
 *                             "filter_false".
 *                         <li>@ref gpudb::filter_collection_name
 *                             "filter_collection_name": [DEPRECATED--please
 *                             specify the containing schema for the view as
 *                             part of @a viewName and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                         <li>@ref gpudb::filter_view_id "filter_view_id":
 *                             view this filtered-view is part of. The default
 *                             value is ''.
 *                         <li>@ref gpudb::filter_ttl "filter_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the view specified in
 *                             @a viewName.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
FilterResponse& filter( const std::string& tableName,
                        const std::string& viewName,
                        const std::string& expression,
                        const std::map<std::string, std::string>& options,
                        FilterResponse& response_ ) const;

/**
 * Calculates which objects from a table are within a named area of interest
 * (NAI/polygon). The operation is synchronous, meaning that a response will
 * not be returned until all the matching objects are fully available. The
 * response payload provides the count of the resulting set. A new resultant
 * set (view) which satisfies the input NAI restriction specification is
 * created with the name @ref gpudb::FilterByAreaRequest::viewName "viewName"
 * passed in as part of the input.
 *
 * @param[in] request_  @ref gpudb::FilterByAreaRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::FilterByAreaResponse "Response" object containing the
 *         result of the operation.
 */
FilterByAreaResponse filterByArea( const FilterByAreaRequest& request_ ) const;

/**
 * Calculates which objects from a table are within a named area of interest
 * (NAI/polygon). The operation is synchronous, meaning that a response will
 * not be returned until all the matching objects are fully available. The
 * response payload provides the count of the resulting set. A new resultant
 * set (view) which satisfies the input NAI restriction specification is
 * created with the name @ref gpudb::FilterByAreaRequest::viewName "viewName"
 * passed in as part of the input.
 *
 * @param[in] request_  @ref gpudb::FilterByAreaRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterByAreaResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByAreaResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByAreaResponse& filterByArea( const FilterByAreaRequest& request_,
                                    FilterByAreaResponse& response_ ) const;

/**
 * Calculates which objects from a table are within a named area of interest
 * (NAI/polygon). The operation is synchronous, meaning that a response will
 * not be returned until all the matching objects are fully available. The
 * response payload provides the count of the resulting set. A new resultant
 * set (view) which satisfies the input NAI restriction specification is
 * created with the name @a viewName passed in as part of the input.
 *
 * @param[in] tableName  Name of the table to filter, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  This may be
 *                       the name of a table or a view (when chaining queries).
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] xColumnName  Name of the column containing the x values to be
 *                         filtered.
 * @param[in] xVector  List of x coordinates of the vertices of the polygon
 *                     representing the area to be filtered.
 * @param[in] yColumnName  Name of the column containing the y values to be
 *                         filtered.
 * @param[in] yVector  List of y coordinates of the vertices of the polygon
 *                     representing the area to be filtered.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_area_create_temp_table
 *                             "filter_by_area_create_temp_table": If @ref
 *                             gpudb::filter_by_area_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_area_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_area_true
 *                                     "filter_by_area_true"
 *                                 <li>@ref gpudb::filter_by_area_false
 *                                     "filter_by_area_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_area_false
 *                             "filter_by_area_false".
 *                         <li>@ref gpudb::filter_by_area_collection_name
 *                             "filter_by_area_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema provided is
 *                             non-existent, it will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterByAreaResponse "Response" object containing the
 *         result of the operation.
 */
FilterByAreaResponse filterByArea( const std::string& tableName,
                                   const std::string& viewName,
                                   const std::string& xColumnName,
                                   const std::vector<double>& xVector,
                                   const std::string& yColumnName,
                                   const std::vector<double>& yVector,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which objects from a table are within a named area of interest
 * (NAI/polygon). The operation is synchronous, meaning that a response will
 * not be returned until all the matching objects are fully available. The
 * response payload provides the count of the resulting set. A new resultant
 * set (view) which satisfies the input NAI restriction specification is
 * created with the name @a viewName passed in as part of the input.
 *
 * @param[in] tableName  Name of the table to filter, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  This may be
 *                       the name of a table or a view (when chaining queries).
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] xColumnName  Name of the column containing the x values to be
 *                         filtered.
 * @param[in] xVector  List of x coordinates of the vertices of the polygon
 *                     representing the area to be filtered.
 * @param[in] yColumnName  Name of the column containing the y values to be
 *                         filtered.
 * @param[in] yVector  List of y coordinates of the vertices of the polygon
 *                     representing the area to be filtered.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_area_create_temp_table
 *                             "filter_by_area_create_temp_table": If @ref
 *                             gpudb::filter_by_area_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_area_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_area_true
 *                                     "filter_by_area_true"
 *                                 <li>@ref gpudb::filter_by_area_false
 *                                     "filter_by_area_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_area_false
 *                             "filter_by_area_false".
 *                         <li>@ref gpudb::filter_by_area_collection_name
 *                             "filter_by_area_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema provided is
 *                             non-existent, it will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterByAreaResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByAreaResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByAreaResponse& filterByArea( const std::string& tableName,
                                    const std::string& viewName,
                                    const std::string& xColumnName,
                                    const std::vector<double>& xVector,
                                    const std::string& yColumnName,
                                    const std::vector<double>& yVector,
                                    const std::map<std::string, std::string>& options,
                                    FilterByAreaResponse& response_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a named
 * area of interest (NAI/polygon). The operation is synchronous, meaning that a
 * response will not be returned until all the matching objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input NAI restriction
 * specification is created with the name @ref
 * gpudb::FilterByAreaGeometryRequest::viewName "viewName" passed in as part of
 * the input.
 *
 * @param[in] request_  @ref gpudb::FilterByAreaGeometryRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::FilterByAreaGeometryResponse "Response" object
 *         containing the result of the operation.
 */
FilterByAreaGeometryResponse filterByAreaGeometry( const FilterByAreaGeometryRequest& request_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a named
 * area of interest (NAI/polygon). The operation is synchronous, meaning that a
 * response will not be returned until all the matching objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input NAI restriction
 * specification is created with the name @ref
 * gpudb::FilterByAreaGeometryRequest::viewName "viewName" passed in as part of
 * the input.
 *
 * @param[in] request_  @ref gpudb::FilterByAreaGeometryRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterByAreaGeometryResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::FilterByAreaGeometryResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
FilterByAreaGeometryResponse& filterByAreaGeometry( const FilterByAreaGeometryRequest& request_,
                                                    FilterByAreaGeometryResponse& response_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a named
 * area of interest (NAI/polygon). The operation is synchronous, meaning that a
 * response will not be returned until all the matching objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input NAI restriction
 * specification is created with the name @a viewName passed in as part of the
 * input.
 *
 * @param[in] tableName  Name of the table to filter, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  This may be
 *                       the name of a table or a view (when chaining queries).
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnName  Name of the geospatial geometry column to be
 *                        filtered.
 * @param[in] xVector  List of x coordinates of the vertices of the polygon
 *                     representing the area to be filtered.
 * @param[in] yVector  List of y coordinates of the vertices of the polygon
 *                     representing the area to be filtered.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::filter_by_area_geometry_create_temp_table
 *                             "filter_by_area_geometry_create_temp_table": If
 *                             @ref gpudb::filter_by_area_geometry_true "true",
 *                             a unique temporary table name will be generated
 *                             in the sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_area_geometry_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_area_geometry_true
 *                                     "filter_by_area_geometry_true"
 *                                 <li>@ref
 *                                     gpudb::filter_by_area_geometry_false
 *                                     "filter_by_area_geometry_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_area_geometry_false
 *                             "filter_by_area_geometry_false".
 *                         <li>@ref
 *                             gpudb::filter_by_area_geometry_collection_name
 *                             "filter_by_area_geometry_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  The schema for the newly created
 *                             view. If the schema is non-existent, it will be
 *                             automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterByAreaGeometryResponse "Response" object
 *         containing the result of the operation.
 */
FilterByAreaGeometryResponse filterByAreaGeometry( const std::string& tableName,
                                                   const std::string& viewName,
                                                   const std::string& columnName,
                                                   const std::vector<double>& xVector,
                                                   const std::vector<double>& yVector,
                                                   const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a named
 * area of interest (NAI/polygon). The operation is synchronous, meaning that a
 * response will not be returned until all the matching objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input NAI restriction
 * specification is created with the name @a viewName passed in as part of the
 * input.
 *
 * @param[in] tableName  Name of the table to filter, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  This may be
 *                       the name of a table or a view (when chaining queries).
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnName  Name of the geospatial geometry column to be
 *                        filtered.
 * @param[in] xVector  List of x coordinates of the vertices of the polygon
 *                     representing the area to be filtered.
 * @param[in] yVector  List of y coordinates of the vertices of the polygon
 *                     representing the area to be filtered.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::filter_by_area_geometry_create_temp_table
 *                             "filter_by_area_geometry_create_temp_table": If
 *                             @ref gpudb::filter_by_area_geometry_true "true",
 *                             a unique temporary table name will be generated
 *                             in the sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_area_geometry_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_area_geometry_true
 *                                     "filter_by_area_geometry_true"
 *                                 <li>@ref
 *                                     gpudb::filter_by_area_geometry_false
 *                                     "filter_by_area_geometry_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_area_geometry_false
 *                             "filter_by_area_geometry_false".
 *                         <li>@ref
 *                             gpudb::filter_by_area_geometry_collection_name
 *                             "filter_by_area_geometry_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  The schema for the newly created
 *                             view. If the schema is non-existent, it will be
 *                             automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterByAreaGeometryResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::FilterByAreaGeometryResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
FilterByAreaGeometryResponse& filterByAreaGeometry( const std::string& tableName,
                                                    const std::string& viewName,
                                                    const std::string& columnName,
                                                    const std::vector<double>& xVector,
                                                    const std::vector<double>& yVector,
                                                    const std::map<std::string, std::string>& options,
                                                    FilterByAreaGeometryResponse& response_ ) const;

/**
 * Calculates how many objects within the given table lie in a rectangular box.
 * The operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available. The response payload provides the
 * count of the resulting set. A new resultant set which satisfies the input
 * NAI restriction specification is also created when a @ref
 * gpudb::FilterByBoxRequest::viewName "viewName" is passed in as part of the
 * input payload.
 *
 * @param[in] request_  @ref gpudb::FilterByBoxRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::FilterByBoxResponse "Response" object containing the
 *         result of the operation.
 */
FilterByBoxResponse filterByBox( const FilterByBoxRequest& request_ ) const;

/**
 * Calculates how many objects within the given table lie in a rectangular box.
 * The operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available. The response payload provides the
 * count of the resulting set. A new resultant set which satisfies the input
 * NAI restriction specification is also created when a @ref
 * gpudb::FilterByBoxRequest::viewName "viewName" is passed in as part of the
 * input payload.
 *
 * @param[in] request_  @ref gpudb::FilterByBoxRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterByBoxResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByBoxResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByBoxResponse& filterByBox( const FilterByBoxRequest& request_,
                                  FilterByBoxResponse& response_ ) const;

/**
 * Calculates how many objects within the given table lie in a rectangular box.
 * The operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available. The response payload provides the
 * count of the resulting set. A new resultant set which satisfies the input
 * NAI restriction specification is also created when a @a viewName is passed
 * in as part of the input payload.
 *
 * @param[in] tableName  Name of the table on which the bounding box operation
 *                       will be performed, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] xColumnName  Name of the column on which to perform the bounding
 *                         box query. Must be a valid numeric column.
 * @param[in] minX  Lower bound for the column chosen by @a xColumnName.  Must
 *                  be less than or equal to @a maxX.
 * @param[in] maxX  Upper bound for @a xColumnName.  Must be greater than or
 *                  equal to @a minX.
 * @param[in] yColumnName  Name of a column on which to perform the bounding
 *                         box query. Must be a valid numeric column.
 * @param[in] minY  Lower bound for @a yColumnName. Must be less than or equal
 *                  to @a maxY.
 * @param[in] maxY  Upper bound for @a yColumnName. Must be greater than or
 *                  equal to @a minY.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_box_create_temp_table
 *                             "filter_by_box_create_temp_table": If @ref
 *                             gpudb::filter_by_box_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_box_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_box_true
 *                                     "filter_by_box_true"
 *                                 <li>@ref gpudb::filter_by_box_false
 *                                     "filter_by_box_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_box_false
 *                             "filter_by_box_false".
 *                         <li>@ref gpudb::filter_by_box_collection_name
 *                             "filter_by_box_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterByBoxResponse "Response" object containing the
 *         result of the operation.
 */
FilterByBoxResponse filterByBox( const std::string& tableName,
                                 const std::string& viewName,
                                 const std::string& xColumnName,
                                 const double minX,
                                 const double maxX,
                                 const std::string& yColumnName,
                                 const double minY,
                                 const double maxY,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Calculates how many objects within the given table lie in a rectangular box.
 * The operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available. The response payload provides the
 * count of the resulting set. A new resultant set which satisfies the input
 * NAI restriction specification is also created when a @a viewName is passed
 * in as part of the input payload.
 *
 * @param[in] tableName  Name of the table on which the bounding box operation
 *                       will be performed, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] xColumnName  Name of the column on which to perform the bounding
 *                         box query. Must be a valid numeric column.
 * @param[in] minX  Lower bound for the column chosen by @a xColumnName.  Must
 *                  be less than or equal to @a maxX.
 * @param[in] maxX  Upper bound for @a xColumnName.  Must be greater than or
 *                  equal to @a minX.
 * @param[in] yColumnName  Name of a column on which to perform the bounding
 *                         box query. Must be a valid numeric column.
 * @param[in] minY  Lower bound for @a yColumnName. Must be less than or equal
 *                  to @a maxY.
 * @param[in] maxY  Upper bound for @a yColumnName. Must be greater than or
 *                  equal to @a minY.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_box_create_temp_table
 *                             "filter_by_box_create_temp_table": If @ref
 *                             gpudb::filter_by_box_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_box_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_box_true
 *                                     "filter_by_box_true"
 *                                 <li>@ref gpudb::filter_by_box_false
 *                                     "filter_by_box_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_box_false
 *                             "filter_by_box_false".
 *                         <li>@ref gpudb::filter_by_box_collection_name
 *                             "filter_by_box_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterByBoxResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByBoxResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByBoxResponse& filterByBox( const std::string& tableName,
                                  const std::string& viewName,
                                  const std::string& xColumnName,
                                  const double minX,
                                  const double maxX,
                                  const std::string& yColumnName,
                                  const double minY,
                                  const double maxY,
                                  const std::map<std::string, std::string>& options,
                                  FilterByBoxResponse& response_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a
 * rectangular box. The operation is synchronous, meaning that a response will
 * not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set which
 * satisfies the input NAI restriction specification is also created when a
 * @ref gpudb::FilterByBoxGeometryRequest::viewName "viewName" is passed in as
 * part of the input payload.
 *
 * @param[in] request_  @ref gpudb::FilterByBoxGeometryRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::FilterByBoxGeometryResponse "Response" object containing
 *         the result of the operation.
 */
FilterByBoxGeometryResponse filterByBoxGeometry( const FilterByBoxGeometryRequest& request_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a
 * rectangular box. The operation is synchronous, meaning that a response will
 * not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set which
 * satisfies the input NAI restriction specification is also created when a
 * @ref gpudb::FilterByBoxGeometryRequest::viewName "viewName" is passed in as
 * part of the input payload.
 *
 * @param[in] request_  @ref gpudb::FilterByBoxGeometryRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterByBoxGeometryResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::FilterByBoxGeometryResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
FilterByBoxGeometryResponse& filterByBoxGeometry( const FilterByBoxGeometryRequest& request_,
                                                  FilterByBoxGeometryResponse& response_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a
 * rectangular box. The operation is synchronous, meaning that a response will
 * not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set which
 * satisfies the input NAI restriction specification is also created when a @a
 * viewName is passed in as part of the input payload.
 *
 * @param[in] tableName  Name of the table on which the bounding box operation
 *                       will be performed, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. Must be an
 *                       existing table.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnName  Name of the geospatial geometry column to be
 *                        filtered.
 * @param[in] minX  Lower bound for the x-coordinate of the rectangular box.
 *                  Must be less than or equal to @a maxX.
 * @param[in] maxX  Upper bound for the x-coordinate of the rectangular box.
 *                  Must be greater than or equal to @a minX.
 * @param[in] minY  Lower bound for the y-coordinate of the rectangular box.
 *                  Must be less than or equal to @a maxY.
 * @param[in] maxY  Upper bound for the y-coordinate of the rectangular box.
 *                  Must be greater than or equal to @a minY.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::filter_by_box_geometry_create_temp_table
 *                             "filter_by_box_geometry_create_temp_table": If
 *                             @ref gpudb::filter_by_box_geometry_true "true",
 *                             a unique temporary table name will be generated
 *                             in the sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_box_geometry_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_box_geometry_true
 *                                     "filter_by_box_geometry_true"
 *                                 <li>@ref gpudb::filter_by_box_geometry_false
 *                                     "filter_by_box_geometry_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_box_geometry_false
 *                             "filter_by_box_geometry_false".
 *                         <li>@ref
 *                             gpudb::filter_by_box_geometry_collection_name
 *                             "filter_by_box_geometry_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema provided is
 *                             non-existent, it will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterByBoxGeometryResponse "Response" object containing
 *         the result of the operation.
 */
FilterByBoxGeometryResponse filterByBoxGeometry( const std::string& tableName,
                                                 const std::string& viewName,
                                                 const std::string& columnName,
                                                 const double minX,
                                                 const double maxX,
                                                 const double minY,
                                                 const double maxY,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a
 * rectangular box. The operation is synchronous, meaning that a response will
 * not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set which
 * satisfies the input NAI restriction specification is also created when a @a
 * viewName is passed in as part of the input payload.
 *
 * @param[in] tableName  Name of the table on which the bounding box operation
 *                       will be performed, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. Must be an
 *                       existing table.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnName  Name of the geospatial geometry column to be
 *                        filtered.
 * @param[in] minX  Lower bound for the x-coordinate of the rectangular box.
 *                  Must be less than or equal to @a maxX.
 * @param[in] maxX  Upper bound for the x-coordinate of the rectangular box.
 *                  Must be greater than or equal to @a minX.
 * @param[in] minY  Lower bound for the y-coordinate of the rectangular box.
 *                  Must be less than or equal to @a maxY.
 * @param[in] maxY  Upper bound for the y-coordinate of the rectangular box.
 *                  Must be greater than or equal to @a minY.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::filter_by_box_geometry_create_temp_table
 *                             "filter_by_box_geometry_create_temp_table": If
 *                             @ref gpudb::filter_by_box_geometry_true "true",
 *                             a unique temporary table name will be generated
 *                             in the sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_box_geometry_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_box_geometry_true
 *                                     "filter_by_box_geometry_true"
 *                                 <li>@ref gpudb::filter_by_box_geometry_false
 *                                     "filter_by_box_geometry_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_box_geometry_false
 *                             "filter_by_box_geometry_false".
 *                         <li>@ref
 *                             gpudb::filter_by_box_geometry_collection_name
 *                             "filter_by_box_geometry_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema provided is
 *                             non-existent, it will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterByBoxGeometryResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::FilterByBoxGeometryResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
FilterByBoxGeometryResponse& filterByBoxGeometry( const std::string& tableName,
                                                  const std::string& viewName,
                                                  const std::string& columnName,
                                                  const double minX,
                                                  const double maxX,
                                                  const double minY,
                                                  const double maxY,
                                                  const std::map<std::string, std::string>& options,
                                                  FilterByBoxGeometryResponse& response_ ) const;

/**
 * Applies a geometry filter against a geospatial geometry column in a given
 * table or view. The filtering geometry is provided by @ref
 * gpudb::FilterByGeometryRequest::inputWkt "inputWkt".
 *
 * @param[in] request_  @ref gpudb::FilterByGeometryRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::FilterByGeometryResponse "Response" object containing
 *         the result of the operation.
 */
FilterByGeometryResponse filterByGeometry( const FilterByGeometryRequest& request_ ) const;

/**
 * Applies a geometry filter against a geospatial geometry column in a given
 * table or view. The filtering geometry is provided by @ref
 * gpudb::FilterByGeometryRequest::inputWkt "inputWkt".
 *
 * @param[in] request_  @ref gpudb::FilterByGeometryRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterByGeometryResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::FilterByGeometryResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
FilterByGeometryResponse& filterByGeometry( const FilterByGeometryRequest& request_,
                                            FilterByGeometryResponse& response_ ) const;

/**
 * Applies a geometry filter against a geospatial geometry column in a given
 * table or view. The filtering geometry is provided by @a inputWkt.
 *
 * @param[in] tableName  Name of the table on which the filter by geometry will
 *                       be performed, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table or view containing a geospatial
 *                       geometry column.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnName  Name of the column to be used in the filter. Must be
 *                        a geospatial geometry column.
 * @param[in] inputWkt  A geometry in WKT format that will be used to filter
 *                      the objects in @a tableName. The default value is ''.
 * @param[in] operation  The geometric filtering operation to perform.
 *                       Supported values:
 *                       <ul>
 *                           <li>@ref gpudb::filter_by_geometry_contains
 *                               "filter_by_geometry_contains": Matches records
 *                               that contain the given WKT in @a inputWkt,
 *                               i.e. the given WKT is within the bounds of a
 *                               record's geometry.
 *                           <li>@ref gpudb::filter_by_geometry_crosses
 *                               "filter_by_geometry_crosses": Matches records
 *                               that cross the given WKT.
 *                           <li>@ref gpudb::filter_by_geometry_disjoint
 *                               "filter_by_geometry_disjoint": Matches records
 *                               that are disjoint from the given WKT.
 *                           <li>@ref gpudb::filter_by_geometry_equals
 *                               "filter_by_geometry_equals": Matches records
 *                               that are the same as the given WKT.
 *                           <li>@ref gpudb::filter_by_geometry_intersects
 *                               "filter_by_geometry_intersects": Matches
 *                               records that intersect the given WKT.
 *                           <li>@ref gpudb::filter_by_geometry_overlaps
 *                               "filter_by_geometry_overlaps": Matches records
 *                               that overlap the given WKT.
 *                           <li>@ref gpudb::filter_by_geometry_touches
 *                               "filter_by_geometry_touches": Matches records
 *                               that touch the given WKT.
 *                           <li>@ref gpudb::filter_by_geometry_within
 *                               "filter_by_geometry_within": Matches records
 *                               that are within the given WKT.
 *                       </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_geometry_create_temp_table
 *                             "filter_by_geometry_create_temp_table": If @ref
 *                             gpudb::filter_by_geometry_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_geometry_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_geometry_true
 *                                     "filter_by_geometry_true"
 *                                 <li>@ref gpudb::filter_by_geometry_false
 *                                     "filter_by_geometry_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_geometry_false
 *                             "filter_by_geometry_false".
 *                         <li>@ref gpudb::filter_by_geometry_collection_name
 *                             "filter_by_geometry_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema provided is
 *                             non-existent, it will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterByGeometryResponse "Response" object containing
 *         the result of the operation.
 */
FilterByGeometryResponse filterByGeometry( const std::string& tableName,
                                           const std::string& viewName,
                                           const std::string& columnName,
                                           const std::string& inputWkt,
                                           const std::string& operation,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Applies a geometry filter against a geospatial geometry column in a given
 * table or view. The filtering geometry is provided by @a inputWkt.
 *
 * @param[in] tableName  Name of the table on which the filter by geometry will
 *                       be performed, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table or view containing a geospatial
 *                       geometry column.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnName  Name of the column to be used in the filter. Must be
 *                        a geospatial geometry column.
 * @param[in] inputWkt  A geometry in WKT format that will be used to filter
 *                      the objects in @a tableName. The default value is ''.
 * @param[in] operation  The geometric filtering operation to perform.
 *                       Supported values:
 *                       <ul>
 *                           <li>@ref gpudb::filter_by_geometry_contains
 *                               "filter_by_geometry_contains": Matches records
 *                               that contain the given WKT in @a inputWkt,
 *                               i.e. the given WKT is within the bounds of a
 *                               record's geometry.
 *                           <li>@ref gpudb::filter_by_geometry_crosses
 *                               "filter_by_geometry_crosses": Matches records
 *                               that cross the given WKT.
 *                           <li>@ref gpudb::filter_by_geometry_disjoint
 *                               "filter_by_geometry_disjoint": Matches records
 *                               that are disjoint from the given WKT.
 *                           <li>@ref gpudb::filter_by_geometry_equals
 *                               "filter_by_geometry_equals": Matches records
 *                               that are the same as the given WKT.
 *                           <li>@ref gpudb::filter_by_geometry_intersects
 *                               "filter_by_geometry_intersects": Matches
 *                               records that intersect the given WKT.
 *                           <li>@ref gpudb::filter_by_geometry_overlaps
 *                               "filter_by_geometry_overlaps": Matches records
 *                               that overlap the given WKT.
 *                           <li>@ref gpudb::filter_by_geometry_touches
 *                               "filter_by_geometry_touches": Matches records
 *                               that touch the given WKT.
 *                           <li>@ref gpudb::filter_by_geometry_within
 *                               "filter_by_geometry_within": Matches records
 *                               that are within the given WKT.
 *                       </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_geometry_create_temp_table
 *                             "filter_by_geometry_create_temp_table": If @ref
 *                             gpudb::filter_by_geometry_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_geometry_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_geometry_true
 *                                     "filter_by_geometry_true"
 *                                 <li>@ref gpudb::filter_by_geometry_false
 *                                     "filter_by_geometry_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_geometry_false
 *                             "filter_by_geometry_false".
 *                         <li>@ref gpudb::filter_by_geometry_collection_name
 *                             "filter_by_geometry_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema provided is
 *                             non-existent, it will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterByGeometryResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::FilterByGeometryResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
FilterByGeometryResponse& filterByGeometry( const std::string& tableName,
                                            const std::string& viewName,
                                            const std::string& columnName,
                                            const std::string& inputWkt,
                                            const std::string& operation,
                                            const std::map<std::string, std::string>& options,
                                            FilterByGeometryResponse& response_ ) const;

/**
 * Calculates which records from a table have values in the given list for the
 * corresponding column. The operation is synchronous, meaning that a response
 * will not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set (view)
 * which satisfies the input filter specification is also created if a @ref
 * gpudb::FilterByListRequest::viewName "viewName" is passed in as part of the
 * request.
 *
 * For example, if a type definition has the columns 'x' and 'y', then a filter
 * by list query with the column map {"x":["10.1", "2.3"], "y":["0.0", "-31.5",
 * "42.0"]} will return the count of all data points whose x and y values match
 * both in the respective x- and y-lists, e.g., "x = 10.1 and y = 0.0", "x =
 * 2.3 and y = -31.5", etc. However, a record with "x = 10.1 and y = -31.5" or
 * "x = 2.3 and y = 0.0" would not be returned because the values in the given
 * lists do not correspond.
 *
 * @param[in] request_  @ref gpudb::FilterByListRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::FilterByListResponse "Response" object containing the
 *         result of the operation.
 */
FilterByListResponse filterByList( const FilterByListRequest& request_ ) const;

/**
 * Calculates which records from a table have values in the given list for the
 * corresponding column. The operation is synchronous, meaning that a response
 * will not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set (view)
 * which satisfies the input filter specification is also created if a @ref
 * gpudb::FilterByListRequest::viewName "viewName" is passed in as part of the
 * request.
 *
 * For example, if a type definition has the columns 'x' and 'y', then a filter
 * by list query with the column map {"x":["10.1", "2.3"], "y":["0.0", "-31.5",
 * "42.0"]} will return the count of all data points whose x and y values match
 * both in the respective x- and y-lists, e.g., "x = 10.1 and y = 0.0", "x =
 * 2.3 and y = -31.5", etc. However, a record with "x = 10.1 and y = -31.5" or
 * "x = 2.3 and y = 0.0" would not be returned because the values in the given
 * lists do not correspond.
 *
 * @param[in] request_  @ref gpudb::FilterByListRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterByListResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByListResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByListResponse& filterByList( const FilterByListRequest& request_,
                                    FilterByListResponse& response_ ) const;

/**
 * Calculates which records from a table have values in the given list for the
 * corresponding column. The operation is synchronous, meaning that a response
 * will not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set (view)
 * which satisfies the input filter specification is also created if a @a
 * viewName is passed in as part of the request.
 *
 * For example, if a type definition has the columns 'x' and 'y', then a filter
 * by list query with the column map {"x":["10.1", "2.3"], "y":["0.0", "-31.5",
 * "42.0"]} will return the count of all data points whose x and y values match
 * both in the respective x- and y-lists, e.g., "x = 10.1 and y = 0.0", "x =
 * 2.3 and y = -31.5", etc. However, a record with "x = 10.1 and y = -31.5" or
 * "x = 2.3 and y = 0.0" would not be returned because the values in the given
 * lists do not correspond.
 *
 * @param[in] tableName  Name of the table to filter, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  This may be
 *                       the name of a table or a view (when chaining queries).
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnValuesMap  List of values for the corresponding column in
 *                             the table
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_list_create_temp_table
 *                             "filter_by_list_create_temp_table": If @ref
 *                             gpudb::filter_by_list_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_list_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_list_true
 *                                     "filter_by_list_true"
 *                                 <li>@ref gpudb::filter_by_list_false
 *                                     "filter_by_list_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_list_false
 *                             "filter_by_list_false".
 *                         <li>@ref gpudb::filter_by_list_collection_name
 *                             "filter_by_list_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema provided is
 *                             non-existent, it will be automatically created.
 *                         <li>@ref gpudb::filter_by_list_filter_mode
 *                             "filter_by_list_filter_mode": String indicating
 *                             the filter mode, either 'in_list' or
 *                             'not_in_list'.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_list_in_list
 *                                     "filter_by_list_in_list": The filter
 *                                     will match all items that are in the
 *                                     provided list(s).
 *                                 <li>@ref gpudb::filter_by_list_not_in_list
 *                                     "filter_by_list_not_in_list": The filter
 *                                     will match all items that are not in the
 *                                     provided list(s).
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_list_in_list
 *                             "filter_by_list_in_list".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterByListResponse "Response" object containing the
 *         result of the operation.
 */
FilterByListResponse filterByList( const std::string& tableName,
                                   const std::string& viewName,
                                   const std::map<std::string, std::vector<std::string> >& columnValuesMap,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which records from a table have values in the given list for the
 * corresponding column. The operation is synchronous, meaning that a response
 * will not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set (view)
 * which satisfies the input filter specification is also created if a @a
 * viewName is passed in as part of the request.
 *
 * For example, if a type definition has the columns 'x' and 'y', then a filter
 * by list query with the column map {"x":["10.1", "2.3"], "y":["0.0", "-31.5",
 * "42.0"]} will return the count of all data points whose x and y values match
 * both in the respective x- and y-lists, e.g., "x = 10.1 and y = 0.0", "x =
 * 2.3 and y = -31.5", etc. However, a record with "x = 10.1 and y = -31.5" or
 * "x = 2.3 and y = 0.0" would not be returned because the values in the given
 * lists do not correspond.
 *
 * @param[in] tableName  Name of the table to filter, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  This may be
 *                       the name of a table or a view (when chaining queries).
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnValuesMap  List of values for the corresponding column in
 *                             the table
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_list_create_temp_table
 *                             "filter_by_list_create_temp_table": If @ref
 *                             gpudb::filter_by_list_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_list_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_list_true
 *                                     "filter_by_list_true"
 *                                 <li>@ref gpudb::filter_by_list_false
 *                                     "filter_by_list_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_list_false
 *                             "filter_by_list_false".
 *                         <li>@ref gpudb::filter_by_list_collection_name
 *                             "filter_by_list_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema provided is
 *                             non-existent, it will be automatically created.
 *                         <li>@ref gpudb::filter_by_list_filter_mode
 *                             "filter_by_list_filter_mode": String indicating
 *                             the filter mode, either 'in_list' or
 *                             'not_in_list'.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_list_in_list
 *                                     "filter_by_list_in_list": The filter
 *                                     will match all items that are in the
 *                                     provided list(s).
 *                                 <li>@ref gpudb::filter_by_list_not_in_list
 *                                     "filter_by_list_not_in_list": The filter
 *                                     will match all items that are not in the
 *                                     provided list(s).
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_list_in_list
 *                             "filter_by_list_in_list".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterByListResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByListResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByListResponse& filterByList( const std::string& tableName,
                                    const std::string& viewName,
                                    const std::map<std::string, std::vector<std::string> >& columnValuesMap,
                                    const std::map<std::string, std::string>& options,
                                    FilterByListResponse& response_ ) const;

/**
 * Calculates which objects from a table lie within a circle with the given
 * radius and center point (i.e.\ circular NAI). The operation is synchronous,
 * meaning that a response will not be returned until all the objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input circular NAI restriction
 * specification is also created if a @ref
 * gpudb::FilterByRadiusRequest::viewName "viewName" is passed in as part of
 * the request.
 *
 * For track data, all track points that lie within the circle plus one point
 * on either side of the circle (if the track goes beyond the circle) will be
 * included in the result.
 *
 * @param[in] request_  @ref gpudb::FilterByRadiusRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::FilterByRadiusResponse "Response" object containing the
 *         result of the operation.
 */
FilterByRadiusResponse filterByRadius( const FilterByRadiusRequest& request_ ) const;

/**
 * Calculates which objects from a table lie within a circle with the given
 * radius and center point (i.e.\ circular NAI). The operation is synchronous,
 * meaning that a response will not be returned until all the objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input circular NAI restriction
 * specification is also created if a @ref
 * gpudb::FilterByRadiusRequest::viewName "viewName" is passed in as part of
 * the request.
 *
 * For track data, all track points that lie within the circle plus one point
 * on either side of the circle (if the track goes beyond the circle) will be
 * included in the result.
 *
 * @param[in] request_  @ref gpudb::FilterByRadiusRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterByRadiusResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByRadiusResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByRadiusResponse& filterByRadius( const FilterByRadiusRequest& request_,
                                        FilterByRadiusResponse& response_ ) const;

/**
 * Calculates which objects from a table lie within a circle with the given
 * radius and center point (i.e.\ circular NAI). The operation is synchronous,
 * meaning that a response will not be returned until all the objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input circular NAI restriction
 * specification is also created if a @a viewName is passed in as part of the
 * request.
 *
 * For track data, all track points that lie within the circle plus one point
 * on either side of the circle (if the track goes beyond the circle) will be
 * included in the result.
 *
 * @param[in] tableName  Name of the table on which the filter by radius
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] xColumnName  Name of the column to be used for the x-coordinate
 *                         (the longitude) of the center.
 * @param[in] xCenter  Value of the longitude of the center. Must be within
 *                     [-180.0, 180.0]. The minimum allowed value is -180. The
 *                     maximum allowed value is 180.
 * @param[in] yColumnName  Name of the column to be used for the
 *                         y-coordinate-the latitude-of the center.
 * @param[in] yCenter  Value of the latitude of the center. Must be within
 *                     [-90.0, 90.0]. The minimum allowed value is -90. The
 *                     maximum allowed value is 90.
 * @param[in] radius  The radius of the circle within which the search will be
 *                    performed. Must be a non-zero positive value. It is in
 *                    meters; so, for example, a value of '42000' means 42 km.
 *                    The minimum allowed value is 0. The maximum allowed value
 *                    is MAX_INT.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_radius_create_temp_table
 *                             "filter_by_radius_create_temp_table": If @ref
 *                             gpudb::filter_by_radius_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_radius_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_radius_true
 *                                     "filter_by_radius_true"
 *                                 <li>@ref gpudb::filter_by_radius_false
 *                                     "filter_by_radius_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_radius_false
 *                             "filter_by_radius_false".
 *                         <li>@ref gpudb::filter_by_radius_collection_name
 *                             "filter_by_radius_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema which is to
 *                             contain the newly created view. If the schema is
 *                             non-existent, it will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterByRadiusResponse "Response" object containing the
 *         result of the operation.
 */
FilterByRadiusResponse filterByRadius( const std::string& tableName,
                                       const std::string& viewName,
                                       const std::string& xColumnName,
                                       const double xCenter,
                                       const std::string& yColumnName,
                                       const double yCenter,
                                       const double radius,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which objects from a table lie within a circle with the given
 * radius and center point (i.e.\ circular NAI). The operation is synchronous,
 * meaning that a response will not be returned until all the objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input circular NAI restriction
 * specification is also created if a @a viewName is passed in as part of the
 * request.
 *
 * For track data, all track points that lie within the circle plus one point
 * on either side of the circle (if the track goes beyond the circle) will be
 * included in the result.
 *
 * @param[in] tableName  Name of the table on which the filter by radius
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] xColumnName  Name of the column to be used for the x-coordinate
 *                         (the longitude) of the center.
 * @param[in] xCenter  Value of the longitude of the center. Must be within
 *                     [-180.0, 180.0]. The minimum allowed value is -180. The
 *                     maximum allowed value is 180.
 * @param[in] yColumnName  Name of the column to be used for the
 *                         y-coordinate-the latitude-of the center.
 * @param[in] yCenter  Value of the latitude of the center. Must be within
 *                     [-90.0, 90.0]. The minimum allowed value is -90. The
 *                     maximum allowed value is 90.
 * @param[in] radius  The radius of the circle within which the search will be
 *                    performed. Must be a non-zero positive value. It is in
 *                    meters; so, for example, a value of '42000' means 42 km.
 *                    The minimum allowed value is 0. The maximum allowed value
 *                    is MAX_INT.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_radius_create_temp_table
 *                             "filter_by_radius_create_temp_table": If @ref
 *                             gpudb::filter_by_radius_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_radius_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_radius_true
 *                                     "filter_by_radius_true"
 *                                 <li>@ref gpudb::filter_by_radius_false
 *                                     "filter_by_radius_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_radius_false
 *                             "filter_by_radius_false".
 *                         <li>@ref gpudb::filter_by_radius_collection_name
 *                             "filter_by_radius_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema which is to
 *                             contain the newly created view. If the schema is
 *                             non-existent, it will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterByRadiusResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByRadiusResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByRadiusResponse& filterByRadius( const std::string& tableName,
                                        const std::string& viewName,
                                        const std::string& xColumnName,
                                        const double xCenter,
                                        const std::string& yColumnName,
                                        const double yCenter,
                                        const double radius,
                                        const std::map<std::string, std::string>& options,
                                        FilterByRadiusResponse& response_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a circle
 * with the given radius and center point (i.e.\ circular NAI). The operation
 * is synchronous, meaning that a response will not be returned until all the
 * objects are fully available. The response payload provides the count of the
 * resulting set. A new resultant set (view) which satisfies the input circular
 * NAI restriction specification is also created if a @ref
 * gpudb::FilterByRadiusGeometryRequest::viewName "viewName" is passed in as
 * part of the request.
 *
 * @param[in] request_  @ref gpudb::FilterByRadiusGeometryRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::FilterByRadiusGeometryResponse "Response" object
 *         containing the result of the operation.
 */
FilterByRadiusGeometryResponse filterByRadiusGeometry( const FilterByRadiusGeometryRequest& request_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a circle
 * with the given radius and center point (i.e.\ circular NAI). The operation
 * is synchronous, meaning that a response will not be returned until all the
 * objects are fully available. The response payload provides the count of the
 * resulting set. A new resultant set (view) which satisfies the input circular
 * NAI restriction specification is also created if a @ref
 * gpudb::FilterByRadiusGeometryRequest::viewName "viewName" is passed in as
 * part of the request.
 *
 * @param[in] request_  @ref gpudb::FilterByRadiusGeometryRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterByRadiusGeometryResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::FilterByRadiusGeometryResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
FilterByRadiusGeometryResponse& filterByRadiusGeometry( const FilterByRadiusGeometryRequest& request_,
                                                        FilterByRadiusGeometryResponse& response_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a circle
 * with the given radius and center point (i.e.\ circular NAI). The operation
 * is synchronous, meaning that a response will not be returned until all the
 * objects are fully available. The response payload provides the count of the
 * resulting set. A new resultant set (view) which satisfies the input circular
 * NAI restriction specification is also created if a @a viewName is passed in
 * as part of the request.
 *
 * @param[in] tableName  Name of the table on which the filter by radius
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnName  Name of the geospatial geometry column to be
 *                        filtered.
 * @param[in] xCenter  Value of the longitude of the center. Must be within
 *                     [-180.0, 180.0]. The minimum allowed value is -180. The
 *                     maximum allowed value is 180.
 * @param[in] yCenter  Value of the latitude of the center. Must be within
 *                     [-90.0, 90.0]. The minimum allowed value is -90. The
 *                     maximum allowed value is 90.
 * @param[in] radius  The radius of the circle within which the search will be
 *                    performed. Must be a non-zero positive value. It is in
 *                    meters; so, for example, a value of '42000' means 42 km.
 *                    The minimum allowed value is 0. The maximum allowed value
 *                    is MAX_INT.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::filter_by_radius_geometry_create_temp_table
 *                             "filter_by_radius_geometry_create_temp_table":
 *                             If @ref gpudb::filter_by_radius_geometry_true
 *                             "true", a unique temporary table name will be
 *                             generated in the sys_temp schema and used in
 *                             place of @a viewName. This is always allowed
 *                             even if the caller does not have permission to
 *                             create tables. The generated name is returned in
 *                             @ref
 *                             gpudb::filter_by_radius_geometry_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::filter_by_radius_geometry_true
 *                                     "filter_by_radius_geometry_true"
 *                                 <li>@ref
 *                                     gpudb::filter_by_radius_geometry_false
 *                                     "filter_by_radius_geometry_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_radius_geometry_false
 *                             "filter_by_radius_geometry_false".
 *                         <li>@ref
 *                             gpudb::filter_by_radius_geometry_collection_name
 *                             "filter_by_radius_geometry_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema provided is
 *                             non-existent, it will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterByRadiusGeometryResponse "Response" object
 *         containing the result of the operation.
 */
FilterByRadiusGeometryResponse filterByRadiusGeometry( const std::string& tableName,
                                                       const std::string& viewName,
                                                       const std::string& columnName,
                                                       const double xCenter,
                                                       const double yCenter,
                                                       const double radius,
                                                       const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a circle
 * with the given radius and center point (i.e.\ circular NAI). The operation
 * is synchronous, meaning that a response will not be returned until all the
 * objects are fully available. The response payload provides the count of the
 * resulting set. A new resultant set (view) which satisfies the input circular
 * NAI restriction specification is also created if a @a viewName is passed in
 * as part of the request.
 *
 * @param[in] tableName  Name of the table on which the filter by radius
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnName  Name of the geospatial geometry column to be
 *                        filtered.
 * @param[in] xCenter  Value of the longitude of the center. Must be within
 *                     [-180.0, 180.0]. The minimum allowed value is -180. The
 *                     maximum allowed value is 180.
 * @param[in] yCenter  Value of the latitude of the center. Must be within
 *                     [-90.0, 90.0]. The minimum allowed value is -90. The
 *                     maximum allowed value is 90.
 * @param[in] radius  The radius of the circle within which the search will be
 *                    performed. Must be a non-zero positive value. It is in
 *                    meters; so, for example, a value of '42000' means 42 km.
 *                    The minimum allowed value is 0. The maximum allowed value
 *                    is MAX_INT.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::filter_by_radius_geometry_create_temp_table
 *                             "filter_by_radius_geometry_create_temp_table":
 *                             If @ref gpudb::filter_by_radius_geometry_true
 *                             "true", a unique temporary table name will be
 *                             generated in the sys_temp schema and used in
 *                             place of @a viewName. This is always allowed
 *                             even if the caller does not have permission to
 *                             create tables. The generated name is returned in
 *                             @ref
 *                             gpudb::filter_by_radius_geometry_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::filter_by_radius_geometry_true
 *                                     "filter_by_radius_geometry_true"
 *                                 <li>@ref
 *                                     gpudb::filter_by_radius_geometry_false
 *                                     "filter_by_radius_geometry_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_radius_geometry_false
 *                             "filter_by_radius_geometry_false".
 *                         <li>@ref
 *                             gpudb::filter_by_radius_geometry_collection_name
 *                             "filter_by_radius_geometry_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema provided is
 *                             non-existent, it will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterByRadiusGeometryResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::FilterByRadiusGeometryResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
FilterByRadiusGeometryResponse& filterByRadiusGeometry( const std::string& tableName,
                                                        const std::string& viewName,
                                                        const std::string& columnName,
                                                        const double xCenter,
                                                        const double yCenter,
                                                        const double radius,
                                                        const std::map<std::string, std::string>& options,
                                                        FilterByRadiusGeometryResponse& response_ ) const;

/**
 * Calculates which objects from a table have a column that is within the given
 * bounds. An object from the table identified by @ref
 * gpudb::FilterByRangeRequest::tableName "tableName" is added to the view @ref
 * gpudb::FilterByRangeRequest::viewName "viewName" if its column is within
 * [@ref gpudb::FilterByRangeRequest::lowerBound "lowerBound", @ref
 * gpudb::FilterByRangeRequest::upperBound "upperBound"] (inclusive). The
 * operation is synchronous. The response provides a count of the number of
 * objects which passed the bound filter.  Although this functionality can also
 * be accomplished with the standard filter function, it is more efficient.
 *
 * For track objects, the count reflects how many points fall within the given
 * bounds (which may not include all the track points of any given track).
 *
 * @param[in] request_  @ref gpudb::FilterByRangeRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::FilterByRangeResponse "Response" object containing the
 *         result of the operation.
 */
FilterByRangeResponse filterByRange( const FilterByRangeRequest& request_ ) const;

/**
 * Calculates which objects from a table have a column that is within the given
 * bounds. An object from the table identified by @ref
 * gpudb::FilterByRangeRequest::tableName "tableName" is added to the view @ref
 * gpudb::FilterByRangeRequest::viewName "viewName" if its column is within
 * [@ref gpudb::FilterByRangeRequest::lowerBound "lowerBound", @ref
 * gpudb::FilterByRangeRequest::upperBound "upperBound"] (inclusive). The
 * operation is synchronous. The response provides a count of the number of
 * objects which passed the bound filter.  Although this functionality can also
 * be accomplished with the standard filter function, it is more efficient.
 *
 * For track objects, the count reflects how many points fall within the given
 * bounds (which may not include all the track points of any given track).
 *
 * @param[in] request_  @ref gpudb::FilterByRangeRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterByRangeResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByRangeResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByRangeResponse& filterByRange( const FilterByRangeRequest& request_,
                                      FilterByRangeResponse& response_ ) const;

/**
 * Calculates which objects from a table have a column that is within the given
 * bounds. An object from the table identified by @a tableName is added to the
 * view @a viewName if its column is within [@a lowerBound, @a upperBound]
 * (inclusive). The operation is synchronous. The response provides a count of
 * the number of objects which passed the bound filter.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 *
 * For track objects, the count reflects how many points fall within the given
 * bounds (which may not include all the track points of any given track).
 *
 * @param[in] tableName  Name of the table on which the filter by range
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnName  Name of a column on which the operation would be
 *                        applied.
 * @param[in] lowerBound  Value of the lower bound (inclusive).
 * @param[in] upperBound  Value of the upper bound (inclusive).
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_range_create_temp_table
 *                             "filter_by_range_create_temp_table": If @ref
 *                             gpudb::filter_by_range_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_range_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_range_true
 *                                     "filter_by_range_true"
 *                                 <li>@ref gpudb::filter_by_range_false
 *                                     "filter_by_range_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_range_false
 *                             "filter_by_range_false".
 *                         <li>@ref gpudb::filter_by_range_collection_name
 *                             "filter_by_range_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterByRangeResponse "Response" object containing the
 *         result of the operation.
 */
FilterByRangeResponse filterByRange( const std::string& tableName,
                                     const std::string& viewName,
                                     const std::string& columnName,
                                     const double lowerBound,
                                     const double upperBound,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which objects from a table have a column that is within the given
 * bounds. An object from the table identified by @a tableName is added to the
 * view @a viewName if its column is within [@a lowerBound, @a upperBound]
 * (inclusive). The operation is synchronous. The response provides a count of
 * the number of objects which passed the bound filter.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 *
 * For track objects, the count reflects how many points fall within the given
 * bounds (which may not include all the track points of any given track).
 *
 * @param[in] tableName  Name of the table on which the filter by range
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnName  Name of a column on which the operation would be
 *                        applied.
 * @param[in] lowerBound  Value of the lower bound (inclusive).
 * @param[in] upperBound  Value of the upper bound (inclusive).
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_range_create_temp_table
 *                             "filter_by_range_create_temp_table": If @ref
 *                             gpudb::filter_by_range_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_range_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_range_true
 *                                     "filter_by_range_true"
 *                                 <li>@ref gpudb::filter_by_range_false
 *                                     "filter_by_range_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_range_false
 *                             "filter_by_range_false".
 *                         <li>@ref gpudb::filter_by_range_collection_name
 *                             "filter_by_range_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterByRangeResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByRangeResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByRangeResponse& filterByRange( const std::string& tableName,
                                      const std::string& viewName,
                                      const std::string& columnName,
                                      const double lowerBound,
                                      const double upperBound,
                                      const std::map<std::string, std::string>& options,
                                      FilterByRangeResponse& response_ ) const;

/**
 * Filters objects matching all points of the given track (works only on track
 * type data).  It allows users to specify a particular track to find all other
 * points in the table that fall within specified ranges (spatial and temporal)
 * of all points of the given track. Additionally, the user can specify another
 * track to see if the two intersect (or go close to each other within the
 * specified ranges). The user also has the flexibility of using different
 * metrics for the spatial distance calculation: Euclidean (flat geometry) or
 * Great Circle (spherical geometry to approximate the Earth's surface
 * distances). The filtered points are stored in a newly created result set.
 * The return value of the function is the number of points in the resultant
 * set (view).
 *
 * This operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available.
 *
 * @param[in] request_  @ref gpudb::FilterBySeriesRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::FilterBySeriesResponse "Response" object containing the
 *         result of the operation.
 */
FilterBySeriesResponse filterBySeries( const FilterBySeriesRequest& request_ ) const;

/**
 * Filters objects matching all points of the given track (works only on track
 * type data).  It allows users to specify a particular track to find all other
 * points in the table that fall within specified ranges (spatial and temporal)
 * of all points of the given track. Additionally, the user can specify another
 * track to see if the two intersect (or go close to each other within the
 * specified ranges). The user also has the flexibility of using different
 * metrics for the spatial distance calculation: Euclidean (flat geometry) or
 * Great Circle (spherical geometry to approximate the Earth's surface
 * distances). The filtered points are stored in a newly created result set.
 * The return value of the function is the number of points in the resultant
 * set (view).
 *
 * This operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available.
 *
 * @param[in] request_  @ref gpudb::FilterBySeriesRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterBySeriesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterBySeriesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterBySeriesResponse& filterBySeries( const FilterBySeriesRequest& request_,
                                        FilterBySeriesResponse& response_ ) const;

/**
 * Filters objects matching all points of the given track (works only on track
 * type data).  It allows users to specify a particular track to find all other
 * points in the table that fall within specified ranges (spatial and temporal)
 * of all points of the given track. Additionally, the user can specify another
 * track to see if the two intersect (or go close to each other within the
 * specified ranges). The user also has the flexibility of using different
 * metrics for the spatial distance calculation: Euclidean (flat geometry) or
 * Great Circle (spherical geometry to approximate the Earth's surface
 * distances). The filtered points are stored in a newly created result set.
 * The return value of the function is the number of points in the resultant
 * set (view).
 *
 * This operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available.
 *
 * @param[in] tableName  Name of the table on which the filter by track
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. Must be a
 *                       currently existing table with a <a
 *                       href="../../../geospatial/geo_objects/"
 *                       target="_top">track</a> present.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] trackId  The ID of the track which will act as the filtering
 *                     points. Must be an existing track within the given
 *                     table.
 * @param[in] targetTrackIds  Up to one track ID to intersect with the "filter"
 *                            track. If any provided, it must be an valid track
 *                            ID within the given set.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_series_create_temp_table
 *                             "filter_by_series_create_temp_table": If @ref
 *                             gpudb::filter_by_series_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_series_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_series_true
 *                                     "filter_by_series_true"
 *                                 <li>@ref gpudb::filter_by_series_false
 *                                     "filter_by_series_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_series_false
 *                             "filter_by_series_false".
 *                         <li>@ref gpudb::filter_by_series_collection_name
 *                             "filter_by_series_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                         <li>@ref gpudb::filter_by_series_spatial_radius
 *                             "filter_by_series_spatial_radius": A positive
 *                             number passed as a string representing the
 *                             radius of the search area centered around each
 *                             track point's geospatial coordinates. The value
 *                             is interpreted in meters. Required parameter.
 *                             The minimum allowed value is '0'.
 *                         <li>@ref gpudb::filter_by_series_time_radius
 *                             "filter_by_series_time_radius": A positive
 *                             number passed as a string representing the
 *                             maximum allowable time difference between the
 *                             timestamps of a filtered object and the given
 *                             track's points. The value is interpreted in
 *                             seconds. Required parameter. The minimum allowed
 *                             value is '0'.
 *                         <li>@ref
 *                             gpudb::filter_by_series_spatial_distance_metric
 *                             "filter_by_series_spatial_distance_metric": A
 *                             string representing the coordinate system to use
 *                             for the spatial search criteria. Acceptable
 *                             values are 'euclidean' and 'great_circle'.
 *                             Optional parameter; default is 'euclidean'.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_series_euclidean
 *                                     "filter_by_series_euclidean"
 *                                 <li>@ref
 *                                     gpudb::filter_by_series_great_circle
 *                                     "filter_by_series_great_circle"
 *                             </ul>
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterBySeriesResponse "Response" object containing the
 *         result of the operation.
 */
FilterBySeriesResponse filterBySeries( const std::string& tableName,
                                       const std::string& viewName,
                                       const std::string& trackId,
                                       const std::vector<std::string>& targetTrackIds,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Filters objects matching all points of the given track (works only on track
 * type data).  It allows users to specify a particular track to find all other
 * points in the table that fall within specified ranges (spatial and temporal)
 * of all points of the given track. Additionally, the user can specify another
 * track to see if the two intersect (or go close to each other within the
 * specified ranges). The user also has the flexibility of using different
 * metrics for the spatial distance calculation: Euclidean (flat geometry) or
 * Great Circle (spherical geometry to approximate the Earth's surface
 * distances). The filtered points are stored in a newly created result set.
 * The return value of the function is the number of points in the resultant
 * set (view).
 *
 * This operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available.
 *
 * @param[in] tableName  Name of the table on which the filter by track
 *                       operation will be performed, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. Must be a
 *                       currently existing table with a <a
 *                       href="../../../geospatial/geo_objects/"
 *                       target="_top">track</a> present.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] trackId  The ID of the track which will act as the filtering
 *                     points. Must be an existing track within the given
 *                     table.
 * @param[in] targetTrackIds  Up to one track ID to intersect with the "filter"
 *                            track. If any provided, it must be an valid track
 *                            ID within the given set.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_series_create_temp_table
 *                             "filter_by_series_create_temp_table": If @ref
 *                             gpudb::filter_by_series_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_series_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_series_true
 *                                     "filter_by_series_true"
 *                                 <li>@ref gpudb::filter_by_series_false
 *                                     "filter_by_series_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_series_false
 *                             "filter_by_series_false".
 *                         <li>@ref gpudb::filter_by_series_collection_name
 *                             "filter_by_series_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                         <li>@ref gpudb::filter_by_series_spatial_radius
 *                             "filter_by_series_spatial_radius": A positive
 *                             number passed as a string representing the
 *                             radius of the search area centered around each
 *                             track point's geospatial coordinates. The value
 *                             is interpreted in meters. Required parameter.
 *                             The minimum allowed value is '0'.
 *                         <li>@ref gpudb::filter_by_series_time_radius
 *                             "filter_by_series_time_radius": A positive
 *                             number passed as a string representing the
 *                             maximum allowable time difference between the
 *                             timestamps of a filtered object and the given
 *                             track's points. The value is interpreted in
 *                             seconds. Required parameter. The minimum allowed
 *                             value is '0'.
 *                         <li>@ref
 *                             gpudb::filter_by_series_spatial_distance_metric
 *                             "filter_by_series_spatial_distance_metric": A
 *                             string representing the coordinate system to use
 *                             for the spatial search criteria. Acceptable
 *                             values are 'euclidean' and 'great_circle'.
 *                             Optional parameter; default is 'euclidean'.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_series_euclidean
 *                                     "filter_by_series_euclidean"
 *                                 <li>@ref
 *                                     gpudb::filter_by_series_great_circle
 *                                     "filter_by_series_great_circle"
 *                             </ul>
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterBySeriesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterBySeriesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterBySeriesResponse& filterBySeries( const std::string& tableName,
                                        const std::string& viewName,
                                        const std::string& trackId,
                                        const std::vector<std::string>& targetTrackIds,
                                        const std::map<std::string, std::string>& options,
                                        FilterBySeriesResponse& response_ ) const;

/**
 * Calculates which objects from a table or view match a string expression for
 * the given string columns. Setting @ref
 * gpudb::filter_by_string_case_sensitive "case_sensitive" can modify case
 * sensitivity in matching for all modes except @ref
 * gpudb::filter_by_string_search "search". For @ref
 * gpudb::filter_by_string_search "search" mode details and limitations, see <a
 * href="../../../concepts/full_text_search/" target="_top">Full Text
 * Search</a>.
 *
 * @param[in] request_  @ref gpudb::FilterByStringRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::FilterByStringResponse "Response" object containing the
 *         result of the operation.
 */
FilterByStringResponse filterByString( const FilterByStringRequest& request_ ) const;

/**
 * Calculates which objects from a table or view match a string expression for
 * the given string columns. Setting @ref
 * gpudb::filter_by_string_case_sensitive "case_sensitive" can modify case
 * sensitivity in matching for all modes except @ref
 * gpudb::filter_by_string_search "search". For @ref
 * gpudb::filter_by_string_search "search" mode details and limitations, see <a
 * href="../../../concepts/full_text_search/" target="_top">Full Text
 * Search</a>.
 *
 * @param[in] request_  @ref gpudb::FilterByStringRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterByStringResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByStringResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByStringResponse& filterByString( const FilterByStringRequest& request_,
                                        FilterByStringResponse& response_ ) const;

/**
 * Calculates which objects from a table or view match a string expression for
 * the given string columns. Setting @ref
 * gpudb::filter_by_string_case_sensitive "case_sensitive" can modify case
 * sensitivity in matching for all modes except @ref
 * gpudb::filter_by_string_search "search". For @ref
 * gpudb::filter_by_string_search "search" mode details and limitations, see <a
 * href="../../../concepts/full_text_search/" target="_top">Full Text
 * Search</a>.
 *
 * @param[in] tableName  Name of the table on which the filter operation will
 *                       be performed, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table or view.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] expression  The expression with which to filter the table.
 * @param[in] mode  The string filtering mode to apply. See below for details.
 *                  Supported values:
 *                  <ul>
 *                      <li>@ref gpudb::filter_by_string_search
 *                          "filter_by_string_search": Full text search query
 *                          with wildcards and boolean operators. Note that for
 *                          this mode, no column can be specified in @a
 *                          columnNames; all string columns of the table that
 *                          have text search enabled will be searched.
 *                      <li>@ref gpudb::filter_by_string_equals
 *                          "filter_by_string_equals": Exact whole-string match
 *                          (accelerated).
 *                      <li>@ref gpudb::filter_by_string_contains
 *                          "filter_by_string_contains": Partial substring
 *                          match (not accelerated).  If the column is a string
 *                          type (non-charN) and the number of records is too
 *                          large, it will return 0.
 *                      <li>@ref gpudb::filter_by_string_starts_with
 *                          "filter_by_string_starts_with": Strings that start
 *                          with the given expression (not accelerated). If the
 *                          column is a string type (non-charN) and the number
 *                          of records is too large, it will return 0.
 *                      <li>@ref gpudb::filter_by_string_regex
 *                          "filter_by_string_regex": Full regular expression
 *                          search (not accelerated). If the column is a string
 *                          type (non-charN) and the number of records is too
 *                          large, it will return 0.
 *                  </ul>
 * @param[in] columnNames  List of columns on which to apply the filter.
 *                         Ignored for @ref gpudb::filter_by_string_search
 *                         "search" mode.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_string_create_temp_table
 *                             "filter_by_string_create_temp_table": If @ref
 *                             gpudb::filter_by_string_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_string_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_string_true
 *                                     "filter_by_string_true"
 *                                 <li>@ref gpudb::filter_by_string_false
 *                                     "filter_by_string_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_string_false
 *                             "filter_by_string_false".
 *                         <li>@ref gpudb::filter_by_string_collection_name
 *                             "filter_by_string_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                         <li>@ref gpudb::filter_by_string_case_sensitive
 *                             "filter_by_string_case_sensitive": If @ref
 *                             gpudb::filter_by_string_false "false" then
 *                             string filtering will ignore case. Does not
 *                             apply to @ref gpudb::filter_by_string_search
 *                             "search" mode.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_string_true
 *                                     "filter_by_string_true"
 *                                 <li>@ref gpudb::filter_by_string_false
 *                                     "filter_by_string_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_string_true
 *                             "filter_by_string_true".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterByStringResponse "Response" object containing the
 *         result of the operation.
 */
FilterByStringResponse filterByString( const std::string& tableName,
                                       const std::string& viewName,
                                       const std::string& expression,
                                       const std::string& mode,
                                       const std::vector<std::string>& columnNames,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which objects from a table or view match a string expression for
 * the given string columns. Setting @ref
 * gpudb::filter_by_string_case_sensitive "case_sensitive" can modify case
 * sensitivity in matching for all modes except @ref
 * gpudb::filter_by_string_search "search". For @ref
 * gpudb::filter_by_string_search "search" mode details and limitations, see <a
 * href="../../../concepts/full_text_search/" target="_top">Full Text
 * Search</a>.
 *
 * @param[in] tableName  Name of the table on which the filter operation will
 *                       be performed, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table or view.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] expression  The expression with which to filter the table.
 * @param[in] mode  The string filtering mode to apply. See below for details.
 *                  Supported values:
 *                  <ul>
 *                      <li>@ref gpudb::filter_by_string_search
 *                          "filter_by_string_search": Full text search query
 *                          with wildcards and boolean operators. Note that for
 *                          this mode, no column can be specified in @a
 *                          columnNames; all string columns of the table that
 *                          have text search enabled will be searched.
 *                      <li>@ref gpudb::filter_by_string_equals
 *                          "filter_by_string_equals": Exact whole-string match
 *                          (accelerated).
 *                      <li>@ref gpudb::filter_by_string_contains
 *                          "filter_by_string_contains": Partial substring
 *                          match (not accelerated).  If the column is a string
 *                          type (non-charN) and the number of records is too
 *                          large, it will return 0.
 *                      <li>@ref gpudb::filter_by_string_starts_with
 *                          "filter_by_string_starts_with": Strings that start
 *                          with the given expression (not accelerated). If the
 *                          column is a string type (non-charN) and the number
 *                          of records is too large, it will return 0.
 *                      <li>@ref gpudb::filter_by_string_regex
 *                          "filter_by_string_regex": Full regular expression
 *                          search (not accelerated). If the column is a string
 *                          type (non-charN) and the number of records is too
 *                          large, it will return 0.
 *                  </ul>
 * @param[in] columnNames  List of columns on which to apply the filter.
 *                         Ignored for @ref gpudb::filter_by_string_search
 *                         "search" mode.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_string_create_temp_table
 *                             "filter_by_string_create_temp_table": If @ref
 *                             gpudb::filter_by_string_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_string_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_string_true
 *                                     "filter_by_string_true"
 *                                 <li>@ref gpudb::filter_by_string_false
 *                                     "filter_by_string_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_string_false
 *                             "filter_by_string_false".
 *                         <li>@ref gpudb::filter_by_string_collection_name
 *                             "filter_by_string_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                         <li>@ref gpudb::filter_by_string_case_sensitive
 *                             "filter_by_string_case_sensitive": If @ref
 *                             gpudb::filter_by_string_false "false" then
 *                             string filtering will ignore case. Does not
 *                             apply to @ref gpudb::filter_by_string_search
 *                             "search" mode.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_string_true
 *                                     "filter_by_string_true"
 *                                 <li>@ref gpudb::filter_by_string_false
 *                                     "filter_by_string_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_string_true
 *                             "filter_by_string_true".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterByStringResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByStringResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByStringResponse& filterByString( const std::string& tableName,
                                        const std::string& viewName,
                                        const std::string& expression,
                                        const std::string& mode,
                                        const std::vector<std::string>& columnNames,
                                        const std::map<std::string, std::string>& options,
                                        FilterByStringResponse& response_ ) const;

/**
 * Filters objects in one table based on objects in another table. The user
 * must specify matching column types from the two tables (i.e.\ the target
 * table from which objects will be filtered and the source table based on
 * which the filter will be created); the column names need not be the same. If
 * a @ref gpudb::FilterByTableRequest::viewName "viewName" is specified, then
 * the filtered objects will then be put in a newly created view. The operation
 * is synchronous, meaning that a response will not be returned until all
 * objects are fully available in the result view. The return value contains
 * the count (i.e.\ the size) of the resulting view.
 *
 * @param[in] request_  @ref gpudb::FilterByTableRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::FilterByTableResponse "Response" object containing the
 *         result of the operation.
 */
FilterByTableResponse filterByTable( const FilterByTableRequest& request_ ) const;

/**
 * Filters objects in one table based on objects in another table. The user
 * must specify matching column types from the two tables (i.e.\ the target
 * table from which objects will be filtered and the source table based on
 * which the filter will be created); the column names need not be the same. If
 * a @ref gpudb::FilterByTableRequest::viewName "viewName" is specified, then
 * the filtered objects will then be put in a newly created view. The operation
 * is synchronous, meaning that a response will not be returned until all
 * objects are fully available in the result view. The return value contains
 * the count (i.e.\ the size) of the resulting view.
 *
 * @param[in] request_  @ref gpudb::FilterByTableRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterByTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByTableResponse& filterByTable( const FilterByTableRequest& request_,
                                      FilterByTableResponse& response_ ) const;

/**
 * Filters objects in one table based on objects in another table. The user
 * must specify matching column types from the two tables (i.e.\ the target
 * table from which objects will be filtered and the source table based on
 * which the filter will be created); the column names need not be the same. If
 * a @a viewName is specified, then the filtered objects will then be put in a
 * newly created view. The operation is synchronous, meaning that a response
 * will not be returned until all objects are fully available in the result
 * view. The return value contains the count (i.e.\ the size) of the resulting
 * view.
 *
 * @param[in] tableName  Name of the table whose data will be filtered, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnName  Name of the column by whose value the data will be
 *                        filtered from the table designated by @a tableName.
 * @param[in] sourceTableName  Name of the table whose data will be compared
 *                             against in the table called @a tableName, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a>.  Must
 *                             be an existing table.
 * @param[in] sourceTableColumnName  Name of the column in the @a
 *                                   sourceTableName whose values will be used
 *                                   as the filter for table @a tableName. Must
 *                                   be a geospatial geometry column if in
 *                                   'spatial' mode; otherwise, Must match the
 *                                   type of the @a columnName.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_table_create_temp_table
 *                             "filter_by_table_create_temp_table": If @ref
 *                             gpudb::filter_by_table_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_table_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_table_true
 *                                     "filter_by_table_true"
 *                                 <li>@ref gpudb::filter_by_table_false
 *                                     "filter_by_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_table_false
 *                             "filter_by_table_false".
 *                         <li>@ref gpudb::filter_by_table_collection_name
 *                             "filter_by_table_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                         <li>@ref gpudb::filter_by_table_filter_mode
 *                             "filter_by_table_filter_mode": String indicating
 *                             the filter mode, either @ref
 *                             gpudb::filter_by_table_in_table "in_table" or
 *                             @ref gpudb::filter_by_table_not_in_table
 *                             "not_in_table".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_table_in_table
 *                                     "filter_by_table_in_table"
 *                                 <li>@ref gpudb::filter_by_table_not_in_table
 *                                     "filter_by_table_not_in_table"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_table_in_table
 *                             "filter_by_table_in_table".
 *                         <li>@ref gpudb::filter_by_table_mode
 *                             "filter_by_table_mode": Mode - should be either
 *                             @ref gpudb::filter_by_table_spatial "spatial" or
 *                             @ref gpudb::filter_by_table_normal "normal".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_table_normal
 *                                     "filter_by_table_normal"
 *                                 <li>@ref gpudb::filter_by_table_spatial
 *                                     "filter_by_table_spatial"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_table_normal
 *                             "filter_by_table_normal".
 *                         <li>@ref gpudb::filter_by_table_buffer
 *                             "filter_by_table_buffer": Buffer size, in
 *                             meters. Only relevant for @ref
 *                             gpudb::filter_by_table_spatial "spatial" mode.
 *                             The default value is '0'.
 *                         <li>@ref gpudb::filter_by_table_buffer_method
 *                             "filter_by_table_buffer_method": Method used to
 *                             buffer polygons.  Only relevant for @ref
 *                             gpudb::filter_by_table_spatial "spatial" mode.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_table_normal
 *                                     "filter_by_table_normal"
 *                                 <li>@ref gpudb::filter_by_table_geos
 *                                     "filter_by_table_geos": Use geos 1 edge
 *                                     per corner algorithm
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_table_normal
 *                             "filter_by_table_normal".
 *                         <li>@ref gpudb::filter_by_table_max_partition_size
 *                             "filter_by_table_max_partition_size": Maximum
 *                             number of points in a partition. Only relevant
 *                             for @ref gpudb::filter_by_table_spatial
 *                             "spatial" mode. The default value is '0'.
 *                         <li>@ref gpudb::filter_by_table_max_partition_score
 *                             "filter_by_table_max_partition_score": Maximum
 *                             number of points * edges in a partition. Only
 *                             relevant for @ref gpudb::filter_by_table_spatial
 *                             "spatial" mode. The default value is '8000000'.
 *                         <li>@ref gpudb::filter_by_table_x_column_name
 *                             "filter_by_table_x_column_name": Name of column
 *                             containing x value of point being filtered in
 *                             @ref gpudb::filter_by_table_spatial "spatial"
 *                             mode. The default value is 'x'.
 *                         <li>@ref gpudb::filter_by_table_y_column_name
 *                             "filter_by_table_y_column_name": Name of column
 *                             containing y value of point being filtered in
 *                             @ref gpudb::filter_by_table_spatial "spatial"
 *                             mode. The default value is 'y'.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterByTableResponse "Response" object containing the
 *         result of the operation.
 */
FilterByTableResponse filterByTable( const std::string& tableName,
                                     const std::string& viewName,
                                     const std::string& columnName,
                                     const std::string& sourceTableName,
                                     const std::string& sourceTableColumnName,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Filters objects in one table based on objects in another table. The user
 * must specify matching column types from the two tables (i.e.\ the target
 * table from which objects will be filtered and the source table based on
 * which the filter will be created); the column names need not be the same. If
 * a @a viewName is specified, then the filtered objects will then be put in a
 * newly created view. The operation is synchronous, meaning that a response
 * will not be returned until all objects are fully available in the result
 * view. The return value contains the count (i.e.\ the size) of the resulting
 * view.
 *
 * @param[in] tableName  Name of the table whose data will be filtered, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] columnName  Name of the column by whose value the data will be
 *                        filtered from the table designated by @a tableName.
 * @param[in] sourceTableName  Name of the table whose data will be compared
 *                             against in the table called @a tableName, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a>.  Must
 *                             be an existing table.
 * @param[in] sourceTableColumnName  Name of the column in the @a
 *                                   sourceTableName whose values will be used
 *                                   as the filter for table @a tableName. Must
 *                                   be a geospatial geometry column if in
 *                                   'spatial' mode; otherwise, Must match the
 *                                   type of the @a columnName.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_table_create_temp_table
 *                             "filter_by_table_create_temp_table": If @ref
 *                             gpudb::filter_by_table_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_table_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_table_true
 *                                     "filter_by_table_true"
 *                                 <li>@ref gpudb::filter_by_table_false
 *                                     "filter_by_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_table_false
 *                             "filter_by_table_false".
 *                         <li>@ref gpudb::filter_by_table_collection_name
 *                             "filter_by_table_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                         <li>@ref gpudb::filter_by_table_filter_mode
 *                             "filter_by_table_filter_mode": String indicating
 *                             the filter mode, either @ref
 *                             gpudb::filter_by_table_in_table "in_table" or
 *                             @ref gpudb::filter_by_table_not_in_table
 *                             "not_in_table".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_table_in_table
 *                                     "filter_by_table_in_table"
 *                                 <li>@ref gpudb::filter_by_table_not_in_table
 *                                     "filter_by_table_not_in_table"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_table_in_table
 *                             "filter_by_table_in_table".
 *                         <li>@ref gpudb::filter_by_table_mode
 *                             "filter_by_table_mode": Mode - should be either
 *                             @ref gpudb::filter_by_table_spatial "spatial" or
 *                             @ref gpudb::filter_by_table_normal "normal".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_table_normal
 *                                     "filter_by_table_normal"
 *                                 <li>@ref gpudb::filter_by_table_spatial
 *                                     "filter_by_table_spatial"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_table_normal
 *                             "filter_by_table_normal".
 *                         <li>@ref gpudb::filter_by_table_buffer
 *                             "filter_by_table_buffer": Buffer size, in
 *                             meters. Only relevant for @ref
 *                             gpudb::filter_by_table_spatial "spatial" mode.
 *                             The default value is '0'.
 *                         <li>@ref gpudb::filter_by_table_buffer_method
 *                             "filter_by_table_buffer_method": Method used to
 *                             buffer polygons.  Only relevant for @ref
 *                             gpudb::filter_by_table_spatial "spatial" mode.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_table_normal
 *                                     "filter_by_table_normal"
 *                                 <li>@ref gpudb::filter_by_table_geos
 *                                     "filter_by_table_geos": Use geos 1 edge
 *                                     per corner algorithm
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_table_normal
 *                             "filter_by_table_normal".
 *                         <li>@ref gpudb::filter_by_table_max_partition_size
 *                             "filter_by_table_max_partition_size": Maximum
 *                             number of points in a partition. Only relevant
 *                             for @ref gpudb::filter_by_table_spatial
 *                             "spatial" mode. The default value is '0'.
 *                         <li>@ref gpudb::filter_by_table_max_partition_score
 *                             "filter_by_table_max_partition_score": Maximum
 *                             number of points * edges in a partition. Only
 *                             relevant for @ref gpudb::filter_by_table_spatial
 *                             "spatial" mode. The default value is '8000000'.
 *                         <li>@ref gpudb::filter_by_table_x_column_name
 *                             "filter_by_table_x_column_name": Name of column
 *                             containing x value of point being filtered in
 *                             @ref gpudb::filter_by_table_spatial "spatial"
 *                             mode. The default value is 'x'.
 *                         <li>@ref gpudb::filter_by_table_y_column_name
 *                             "filter_by_table_y_column_name": Name of column
 *                             containing y value of point being filtered in
 *                             @ref gpudb::filter_by_table_spatial "spatial"
 *                             mode. The default value is 'y'.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterByTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByTableResponse& filterByTable( const std::string& tableName,
                                      const std::string& viewName,
                                      const std::string& columnName,
                                      const std::string& sourceTableName,
                                      const std::string& sourceTableColumnName,
                                      const std::map<std::string, std::string>& options,
                                      FilterByTableResponse& response_ ) const;

/**
 * Calculates which objects from a table has a particular value for a
 * particular column. The input parameters provide a way to specify either a
 * String or a Double valued column and a desired value for the column on which
 * the filter is performed. The operation is synchronous, meaning that a
 * response will not be returned until all the objects are fully available. The
 * response payload provides the count of the resulting set. A new result view
 * which satisfies the input filter restriction specification is also created
 * with a view name passed in as part of the input payload.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 *
 * @param[in] request_  @ref gpudb::FilterByValueRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::FilterByValueResponse "Response" object containing the
 *         result of the operation.
 */
FilterByValueResponse filterByValue( const FilterByValueRequest& request_ ) const;

/**
 * Calculates which objects from a table has a particular value for a
 * particular column. The input parameters provide a way to specify either a
 * String or a Double valued column and a desired value for the column on which
 * the filter is performed. The operation is synchronous, meaning that a
 * response will not be returned until all the objects are fully available. The
 * response payload provides the count of the resulting set. A new result view
 * which satisfies the input filter restriction specification is also created
 * with a view name passed in as part of the input payload.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 *
 * @param[in] request_  @ref gpudb::FilterByValueRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::FilterByValueResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByValueResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByValueResponse& filterByValue( const FilterByValueRequest& request_,
                                      FilterByValueResponse& response_ ) const;

/**
 * Calculates which objects from a table has a particular value for a
 * particular column. The input parameters provide a way to specify either a
 * String or a Double valued column and a desired value for the column on which
 * the filter is performed. The operation is synchronous, meaning that a
 * response will not be returned until all the objects are fully available. The
 * response payload provides the count of the resulting set. A new result view
 * which satisfies the input filter restriction specification is also created
 * with a view name passed in as part of the input payload.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 *
 * @param[in] tableName  Name of an existing table on which to perform the
 *                       calculation, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] isString  Indicates whether the value being searched for is
 *                      string or numeric.
 * @param[in] value  The value to search for. The default value is 0.
 * @param[in] valueStr  The string value to search for. The default value is
 *                      ''.
 * @param[in] columnName  Name of a column on which the filter by value would
 *                        be applied.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_value_create_temp_table
 *                             "filter_by_value_create_temp_table": If @ref
 *                             gpudb::filter_by_value_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_value_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_value_true
 *                                     "filter_by_value_true"
 *                                 <li>@ref gpudb::filter_by_value_false
 *                                     "filter_by_value_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_value_false
 *                             "filter_by_value_false".
 *                         <li>@ref gpudb::filter_by_value_collection_name
 *                             "filter_by_value_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::FilterByValueResponse "Response" object containing the
 *         result of the operation.
 */
FilterByValueResponse filterByValue( const std::string& tableName,
                                     const std::string& viewName,
                                     const bool isString,
                                     const double value,
                                     const std::string& valueStr,
                                     const std::string& columnName,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which objects from a table has a particular value for a
 * particular column. The input parameters provide a way to specify either a
 * String or a Double valued column and a desired value for the column on which
 * the filter is performed. The operation is synchronous, meaning that a
 * response will not be returned until all the objects are fully available. The
 * response payload provides the count of the resulting set. A new result view
 * which satisfies the input filter restriction specification is also created
 * with a view name passed in as part of the input payload.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 *
 * @param[in] tableName  Name of an existing table on which to perform the
 *                       calculation, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] viewName  If provided, then this will be the name of the view
 *                      containing the results, in [schema_name.]view_name
 *                      format, using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a> and meeting <a
 *                      href="../../../concepts/tables/#table-naming-criteria"
 *                      target="_top">table naming criteria</a>.  Must not be
 *                      an already existing table or view. The default value is
 *                      ''.
 * @param[in] isString  Indicates whether the value being searched for is
 *                      string or numeric.
 * @param[in] value  The value to search for. The default value is 0.
 * @param[in] valueStr  The string value to search for. The default value is
 *                      ''.
 * @param[in] columnName  Name of a column on which the filter by value would
 *                        be applied.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::filter_by_value_create_temp_table
 *                             "filter_by_value_create_temp_table": If @ref
 *                             gpudb::filter_by_value_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             viewName. This is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::filter_by_value_qualified_view_name
 *                             "qualified_view_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::filter_by_value_true
 *                                     "filter_by_value_true"
 *                                 <li>@ref gpudb::filter_by_value_false
 *                                     "filter_by_value_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::filter_by_value_false
 *                             "filter_by_value_false".
 *                         <li>@ref gpudb::filter_by_value_collection_name
 *                             "filter_by_value_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the view as part of @a viewName and
 *                             use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created view. If the schema is non-existent, it
 *                             will be automatically created.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::FilterByValueResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::FilterByValueResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
FilterByValueResponse& filterByValue( const std::string& tableName,
                                      const std::string& viewName,
                                      const bool isString,
                                      const double value,
                                      const std::string& valueStr,
                                      const std::string& columnName,
                                      const std::map<std::string, std::string>& options,
                                      FilterByValueResponse& response_ ) const;

/**
 * Get the status and result of asynchronously running job.  See the @ref
 * createJob(const CreateJobRequest&) const "createJob" for starting an
 * asynchronous job.  Some fields of the response are filled only after the
 * submitted job has finished execution.
 *
 * @param[in] request_  @ref gpudb::GetJobRequest "Request" object containing
 *                      the parameters for the operation.
 *
 * @return @ref gpudb::GetJobResponse "Response" object containing the result
 *         of the operation.
 */
GetJobResponse getJob( const GetJobRequest& request_ ) const;

/**
 * Get the status and result of asynchronously running job.  See the @ref
 * createJob(const CreateJobRequest&) const "createJob" for starting an
 * asynchronous job.  Some fields of the response are filled only after the
 * submitted job has finished execution.
 *
 * @param[in] request_  @ref gpudb::GetJobRequest "Request" object containing
 *                      the parameters for the operation.
 * @param[out] response_  @ref gpudb::GetJobResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::GetJobResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
GetJobResponse& getJob( const GetJobRequest& request_,
                        GetJobResponse& response_ ) const;

/**
 * Get the status and result of asynchronously running job.  See the @ref
 * createJob(const std::string&, const std::string&, const std::vector<uint8_t>&, const std::string&, const std::map<std::string, std::string>&) const
 * "createJob" for starting an asynchronous job.  Some fields of the response
 * are filled only after the submitted job has finished execution.
 *
 * @param[in] jobId  A unique identifier for the job whose status and result is
 *                   to be fetched.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::get_job_job_tag "get_job_job_tag":
 *                             Job tag returned in call to create the job
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::GetJobResponse "Response" object containing the result
 *         of the operation.
 */
GetJobResponse getJob( const int64_t jobId,
                       const std::map<std::string, std::string>& options ) const;

/**
 * Get the status and result of asynchronously running job.  See the @ref
 * createJob(const std::string&, const std::string&, const std::vector<uint8_t>&, const std::string&, const std::map<std::string, std::string>&) const
 * "createJob" for starting an asynchronous job.  Some fields of the response
 * are filled only after the submitted job has finished execution.
 *
 * @param[in] jobId  A unique identifier for the job whose status and result is
 *                   to be fetched.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::get_job_job_tag "get_job_job_tag":
 *                             Job tag returned in call to create the job
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::GetJobResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::GetJobResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
GetJobResponse& getJob( const int64_t jobId,
                        const std::map<std::string, std::string>& options,
                        GetJobResponse& response_ ) const;

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsRequest::offset "offset" and @ref
 * gpudb::GetRecordsRequest::limit "limit" parameters.  Note that when paging
 * through a table, if the table (or the underlying table in case of a view) is
 * updated (records are inserted, deleted or modified) the records retrieved
 * may differ between calls based on the updates applied.
 *
 * @param[in] request_  @ref gpudb::GetRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::RawGetRecordsResponse "Response" object containing the
 *         result of the operation.
 */
RawGetRecordsResponse getRecordsRaw( const GetRecordsRequest& request_ ) const;

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsRequest::offset "offset" and @ref
 * gpudb::GetRecordsRequest::limit "limit" parameters.  Note that when paging
 * through a table, if the table (or the underlying table in case of a view) is
 * updated (records are inserted, deleted or modified) the records retrieved
 * may differ between calls based on the updates applied.
 *
 * @param[in] request_  @ref gpudb::GetRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RawGetRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::RawGetRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
RawGetRecordsResponse& getRecordsRaw( const GetRecordsRequest& request_,
                                      RawGetRecordsResponse& response_ ) const;

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsRequest::offset "offset" and @ref
 * gpudb::GetRecordsRequest::limit "limit" parameters.  Note that when paging
 * through a table, if the table (or the underlying table in case of a view) is
 * updated (records are inserted, deleted or modified) the records retrieved
 * may differ between calls based on the updates applied.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] request_  @ref gpudb::GetRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::GetRecordsResponse "Response" object containing the
 *         result of the operation.
 */
template<typename TResponse>
GetRecordsResponse<TResponse> getRecords( const GetRecordsRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    GetRecordsResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsRequest::offset "offset" and @ref
 * gpudb::GetRecordsRequest::limit "limit" parameters.  Note that when paging
 * through a table, if the table (or the underlying table in case of a view) is
 * updated (records are inserted, deleted or modified) the records retrieved
 * may differ between calls based on the updates applied.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] request_  @ref gpudb::GetRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GetRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
template<typename TResponse>
GetRecordsResponse<TResponse>& getRecords( const GetRecordsRequest& request_,
                                           GetRecordsResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.  Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] tableName  Name of the table or view from which the records will
 *                       be fetched, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawGetRecordsResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref gpudb::get_records_expression
 *                             "get_records_expression": Optional filter
 *                             expression to apply to the table.
 *                         <li>@ref gpudb::get_records_fast_index_lookup
 *                             "get_records_fast_index_lookup": Indicates if
 *                             indexes should be used to perform the lookup for
 *                             a given expression if possible. Only applicable
 *                             if there is no sorting, the expression contains
 *                             only equivalence comparisons based on existing
 *                             tables indexes and the range of requested values
 *                             is from [0 to END_OF_SET].
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_true
 *                                     "get_records_true"
 *                                 <li>@ref gpudb::get_records_false
 *                                     "get_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_true "get_records_true".
 *                         <li>@ref gpudb::get_records_sort_by
 *                             "get_records_sort_by": Optional column that the
 *                             data should be sorted by. Empty by default (i.e.
 *                             no sorting is applied).
 *                         <li>@ref gpudb::get_records_sort_order
 *                             "get_records_sort_order": String indicating how
 *                             the returned values should be sorted - ascending
 *                             or descending. If sort_order is provided,
 *                             sort_by has to be provided.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_ascending
 *                                     "get_records_ascending"
 *                                 <li>@ref gpudb::get_records_descending
 *                                     "get_records_descending"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_ascending
 *                             "get_records_ascending".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::GetRecordsResponse "Response" object containing the
 *         result of the operation.
 */
template<typename TResponse>
GetRecordsResponse<TResponse> getRecords( const std::string& tableName,
                                          const int64_t offset,
                                          const int64_t limit,
                                          const std::map<std::string, std::string>& options ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    GetRecordsResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.  Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] tableName  Name of the table or view from which the records will
 *                       be fetched, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawGetRecordsResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref gpudb::get_records_expression
 *                             "get_records_expression": Optional filter
 *                             expression to apply to the table.
 *                         <li>@ref gpudb::get_records_fast_index_lookup
 *                             "get_records_fast_index_lookup": Indicates if
 *                             indexes should be used to perform the lookup for
 *                             a given expression if possible. Only applicable
 *                             if there is no sorting, the expression contains
 *                             only equivalence comparisons based on existing
 *                             tables indexes and the range of requested values
 *                             is from [0 to END_OF_SET].
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_true
 *                                     "get_records_true"
 *                                 <li>@ref gpudb::get_records_false
 *                                     "get_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_true "get_records_true".
 *                         <li>@ref gpudb::get_records_sort_by
 *                             "get_records_sort_by": Optional column that the
 *                             data should be sorted by. Empty by default (i.e.
 *                             no sorting is applied).
 *                         <li>@ref gpudb::get_records_sort_order
 *                             "get_records_sort_order": String indicating how
 *                             the returned values should be sorted - ascending
 *                             or descending. If sort_order is provided,
 *                             sort_by has to be provided.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_ascending
 *                                     "get_records_ascending"
 *                                 <li>@ref gpudb::get_records_descending
 *                                     "get_records_descending"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_ascending
 *                             "get_records_ascending".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::GetRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
template<typename TResponse>
GetRecordsResponse<TResponse>& getRecords( const std::string& tableName,
                                           const int64_t offset,
                                           const int64_t limit,
                                           const std::map<std::string, std::string>& options,
                                           GetRecordsResponse<TResponse>& response_ ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsRequest::offset "offset" and @ref
 * gpudb::GetRecordsRequest::limit "limit" parameters.  Note that when paging
 * through a table, if the table (or the underlying table in case of a view) is
 * updated (records are inserted, deleted or modified) the records retrieved
 * may differ between calls based on the updates applied.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] request_  @ref gpudb::GetRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::GetRecordsResponse "Response" object containing the
 *         result of the operation.
 */
template<typename TResponse>
GetRecordsResponse<TResponse> getRecords( const ::avro::ValidSchema& schema_,
                                          const GetRecordsRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    GetRecordsResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsRequest::offset "offset" and @ref
 * gpudb::GetRecordsRequest::limit "limit" parameters.  Note that when paging
 * through a table, if the table (or the underlying table in case of a view) is
 * updated (records are inserted, deleted or modified) the records retrieved
 * may differ between calls based on the updates applied.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] request_  @ref gpudb::GetRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::GetRecordsResponse "Response" object containing the
 *         result of the operation.
 */
template<typename TResponse>
GetRecordsResponse<TResponse> getRecords( const Type& type_,
                                          const GetRecordsRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    GetRecordsResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsRequest::offset "offset" and @ref
 * gpudb::GetRecordsRequest::limit "limit" parameters.  Note that when paging
 * through a table, if the table (or the underlying table in case of a view) is
 * updated (records are inserted, deleted or modified) the records retrieved
 * may differ between calls based on the updates applied.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] request_  @ref gpudb::GetRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GetRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
template<typename TResponse>
GetRecordsResponse<TResponse>& getRecords( const ::avro::ValidSchema& schema_,
                                           const GetRecordsRequest& request_,
                                           GetRecordsResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsRequest::offset "offset" and @ref
 * gpudb::GetRecordsRequest::limit "limit" parameters.  Note that when paging
 * through a table, if the table (or the underlying table in case of a view) is
 * updated (records are inserted, deleted or modified) the records retrieved
 * may differ between calls based on the updates applied.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] request_  @ref gpudb::GetRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GetRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
template<typename TResponse>
GetRecordsResponse<TResponse>& getRecords( const Type& type_,
                                           const GetRecordsRequest& request_,
                                           GetRecordsResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.  Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] tableName  Name of the table or view from which the records will
 *                       be fetched, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawGetRecordsResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref gpudb::get_records_expression
 *                             "get_records_expression": Optional filter
 *                             expression to apply to the table.
 *                         <li>@ref gpudb::get_records_fast_index_lookup
 *                             "get_records_fast_index_lookup": Indicates if
 *                             indexes should be used to perform the lookup for
 *                             a given expression if possible. Only applicable
 *                             if there is no sorting, the expression contains
 *                             only equivalence comparisons based on existing
 *                             tables indexes and the range of requested values
 *                             is from [0 to END_OF_SET].
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_true
 *                                     "get_records_true"
 *                                 <li>@ref gpudb::get_records_false
 *                                     "get_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_true "get_records_true".
 *                         <li>@ref gpudb::get_records_sort_by
 *                             "get_records_sort_by": Optional column that the
 *                             data should be sorted by. Empty by default (i.e.
 *                             no sorting is applied).
 *                         <li>@ref gpudb::get_records_sort_order
 *                             "get_records_sort_order": String indicating how
 *                             the returned values should be sorted - ascending
 *                             or descending. If sort_order is provided,
 *                             sort_by has to be provided.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_ascending
 *                                     "get_records_ascending"
 *                                 <li>@ref gpudb::get_records_descending
 *                                     "get_records_descending"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_ascending
 *                             "get_records_ascending".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::GetRecordsResponse "Response" object containing the
 *         result of the operation.
 */
template<typename TResponse>
GetRecordsResponse<TResponse> getRecords( const ::avro::ValidSchema& schema_,
                                          const std::string& tableName,
                                          const int64_t offset,
                                          const int64_t limit,
                                          const std::map<std::string, std::string>& options ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    GetRecordsResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.  Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] tableName  Name of the table or view from which the records will
 *                       be fetched, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawGetRecordsResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref gpudb::get_records_expression
 *                             "get_records_expression": Optional filter
 *                             expression to apply to the table.
 *                         <li>@ref gpudb::get_records_fast_index_lookup
 *                             "get_records_fast_index_lookup": Indicates if
 *                             indexes should be used to perform the lookup for
 *                             a given expression if possible. Only applicable
 *                             if there is no sorting, the expression contains
 *                             only equivalence comparisons based on existing
 *                             tables indexes and the range of requested values
 *                             is from [0 to END_OF_SET].
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_true
 *                                     "get_records_true"
 *                                 <li>@ref gpudb::get_records_false
 *                                     "get_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_true "get_records_true".
 *                         <li>@ref gpudb::get_records_sort_by
 *                             "get_records_sort_by": Optional column that the
 *                             data should be sorted by. Empty by default (i.e.
 *                             no sorting is applied).
 *                         <li>@ref gpudb::get_records_sort_order
 *                             "get_records_sort_order": String indicating how
 *                             the returned values should be sorted - ascending
 *                             or descending. If sort_order is provided,
 *                             sort_by has to be provided.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_ascending
 *                                     "get_records_ascending"
 *                                 <li>@ref gpudb::get_records_descending
 *                                     "get_records_descending"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_ascending
 *                             "get_records_ascending".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::GetRecordsResponse "Response" object containing the
 *         result of the operation.
 */
template<typename TResponse>
GetRecordsResponse<TResponse> getRecords( const Type& type_,
                                          const std::string& tableName,
                                          const int64_t offset,
                                          const int64_t limit,
                                          const std::map<std::string, std::string>& options ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    GetRecordsResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.  Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] tableName  Name of the table or view from which the records will
 *                       be fetched, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawGetRecordsResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref gpudb::get_records_expression
 *                             "get_records_expression": Optional filter
 *                             expression to apply to the table.
 *                         <li>@ref gpudb::get_records_fast_index_lookup
 *                             "get_records_fast_index_lookup": Indicates if
 *                             indexes should be used to perform the lookup for
 *                             a given expression if possible. Only applicable
 *                             if there is no sorting, the expression contains
 *                             only equivalence comparisons based on existing
 *                             tables indexes and the range of requested values
 *                             is from [0 to END_OF_SET].
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_true
 *                                     "get_records_true"
 *                                 <li>@ref gpudb::get_records_false
 *                                     "get_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_true "get_records_true".
 *                         <li>@ref gpudb::get_records_sort_by
 *                             "get_records_sort_by": Optional column that the
 *                             data should be sorted by. Empty by default (i.e.
 *                             no sorting is applied).
 *                         <li>@ref gpudb::get_records_sort_order
 *                             "get_records_sort_order": String indicating how
 *                             the returned values should be sorted - ascending
 *                             or descending. If sort_order is provided,
 *                             sort_by has to be provided.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_ascending
 *                                     "get_records_ascending"
 *                                 <li>@ref gpudb::get_records_descending
 *                                     "get_records_descending"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_ascending
 *                             "get_records_ascending".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::GetRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
template<typename TResponse>
GetRecordsResponse<TResponse>& getRecords( const ::avro::ValidSchema& schema_,
                                           const std::string& tableName,
                                           const int64_t offset,
                                           const int64_t limit,
                                           const std::map<std::string, std::string>& options,
                                           GetRecordsResponse<TResponse>& response_ ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables and
 * views. Records can be returned encoded as binary, json, or geojson.
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.  Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] tableName  Name of the table or view from which the records will
 *                       be fetched, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawGetRecordsResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref gpudb::get_records_expression
 *                             "get_records_expression": Optional filter
 *                             expression to apply to the table.
 *                         <li>@ref gpudb::get_records_fast_index_lookup
 *                             "get_records_fast_index_lookup": Indicates if
 *                             indexes should be used to perform the lookup for
 *                             a given expression if possible. Only applicable
 *                             if there is no sorting, the expression contains
 *                             only equivalence comparisons based on existing
 *                             tables indexes and the range of requested values
 *                             is from [0 to END_OF_SET].
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_true
 *                                     "get_records_true"
 *                                 <li>@ref gpudb::get_records_false
 *                                     "get_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_true "get_records_true".
 *                         <li>@ref gpudb::get_records_sort_by
 *                             "get_records_sort_by": Optional column that the
 *                             data should be sorted by. Empty by default (i.e.
 *                             no sorting is applied).
 *                         <li>@ref gpudb::get_records_sort_order
 *                             "get_records_sort_order": String indicating how
 *                             the returned values should be sorted - ascending
 *                             or descending. If sort_order is provided,
 *                             sort_by has to be provided.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_ascending
 *                                     "get_records_ascending"
 *                                 <li>@ref gpudb::get_records_descending
 *                                     "get_records_descending"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_ascending
 *                             "get_records_ascending".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::GetRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
template<typename TResponse>
GetRecordsResponse<TResponse>& getRecords( const Type& type_,
                                           const std::string& tableName,
                                           const int64_t offset,
                                           const int64_t limit,
                                           const std::map<std::string, std::string>& options,
                                           GetRecordsResponse<TResponse>& response_ ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * For a given table, retrieves the values from the requested column(s). Maps
 * of column name to the array of values as well as the column data type are
 * returned. This endpoint supports pagination with the @ref
 * gpudb::GetRecordsByColumnRequest::offset "offset" and @ref
 * gpudb::GetRecordsByColumnRequest::limit "limit" parameters.
 *
 * <a href="../../../concepts/window/" target="_top">Window functions</a>,
 * which can perform operations like moving averages, are available through
 * this endpoint as well as @ref
 * createProjection(const CreateProjectionRequest&) const "createProjection".
 *
 * When using pagination, if the table (or the underlying table in the case of
 * a view) is modified (records are inserted, updated, or deleted) during a
 * call to the endpoint, the records or values retrieved may differ between
 * calls based on the type of the update, e.g., the contiguity across pages
 * cannot be relied upon.
 *
 * If @ref gpudb::GetRecordsByColumnRequest::tableName "tableName" is empty,
 * selection is performed against a single-row virtual table.  This can be
 * useful in executing temporal (<a
 * href="../../../concepts/expressions/#date-time-functions"
 * target="_top">NOW()</a>), identity (<a
 * href="../../../concepts/expressions/#user-security-functions"
 * target="_top">USER()</a>), or constant-based functions (<a
 * href="../../../concepts/expressions/#scalar-functions"
 * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * @param[in] request_  @ref gpudb::GetRecordsByColumnRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::RawGetRecordsByColumnResponse "Response" object
 *         containing the result of the operation.
 */
RawGetRecordsByColumnResponse getRecordsByColumnRaw( const GetRecordsByColumnRequest& request_ ) const;

/**
 * For a given table, retrieves the values from the requested column(s). Maps
 * of column name to the array of values as well as the column data type are
 * returned. This endpoint supports pagination with the @ref
 * gpudb::GetRecordsByColumnRequest::offset "offset" and @ref
 * gpudb::GetRecordsByColumnRequest::limit "limit" parameters.
 *
 * <a href="../../../concepts/window/" target="_top">Window functions</a>,
 * which can perform operations like moving averages, are available through
 * this endpoint as well as @ref
 * createProjection(const CreateProjectionRequest&) const "createProjection".
 *
 * When using pagination, if the table (or the underlying table in the case of
 * a view) is modified (records are inserted, updated, or deleted) during a
 * call to the endpoint, the records or values retrieved may differ between
 * calls based on the type of the update, e.g., the contiguity across pages
 * cannot be relied upon.
 *
 * If @ref gpudb::GetRecordsByColumnRequest::tableName "tableName" is empty,
 * selection is performed against a single-row virtual table.  This can be
 * useful in executing temporal (<a
 * href="../../../concepts/expressions/#date-time-functions"
 * target="_top">NOW()</a>), identity (<a
 * href="../../../concepts/expressions/#user-security-functions"
 * target="_top">USER()</a>), or constant-based functions (<a
 * href="../../../concepts/expressions/#scalar-functions"
 * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * @param[in] request_  @ref gpudb::GetRecordsByColumnRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RawGetRecordsByColumnResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RawGetRecordsByColumnResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RawGetRecordsByColumnResponse& getRecordsByColumnRaw( const GetRecordsByColumnRequest& request_,
                                                      RawGetRecordsByColumnResponse& response_ ) const;

/**
 * For a given table, retrieves the values from the requested column(s). Maps
 * of column name to the array of values as well as the column data type are
 * returned. This endpoint supports pagination with the @ref
 * gpudb::GetRecordsByColumnRequest::offset "offset" and @ref
 * gpudb::GetRecordsByColumnRequest::limit "limit" parameters.
 *
 * <a href="../../../concepts/window/" target="_top">Window functions</a>,
 * which can perform operations like moving averages, are available through
 * this endpoint as well as @ref
 * createProjection(const CreateProjectionRequest&) const "createProjection".
 *
 * When using pagination, if the table (or the underlying table in the case of
 * a view) is modified (records are inserted, updated, or deleted) during a
 * call to the endpoint, the records or values retrieved may differ between
 * calls based on the type of the update, e.g., the contiguity across pages
 * cannot be relied upon.
 *
 * If @ref gpudb::GetRecordsByColumnRequest::tableName "tableName" is empty,
 * selection is performed against a single-row virtual table.  This can be
 * useful in executing temporal (<a
 * href="../../../concepts/expressions/#date-time-functions"
 * target="_top">NOW()</a>), identity (<a
 * href="../../../concepts/expressions/#user-security-functions"
 * target="_top">USER()</a>), or constant-based functions (<a
 * href="../../../concepts/expressions/#scalar-functions"
 * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * @param[in] request_  @ref gpudb::GetRecordsByColumnRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::GetRecordsByColumnResponse "Response" object containing
 *         the result of the operation.
 */
GetRecordsByColumnResponse getRecordsByColumn( const GetRecordsByColumnRequest& request_ ) const;

/**
 * For a given table, retrieves the values from the requested column(s). Maps
 * of column name to the array of values as well as the column data type are
 * returned. This endpoint supports pagination with the @ref
 * gpudb::GetRecordsByColumnRequest::offset "offset" and @ref
 * gpudb::GetRecordsByColumnRequest::limit "limit" parameters.
 *
 * <a href="../../../concepts/window/" target="_top">Window functions</a>,
 * which can perform operations like moving averages, are available through
 * this endpoint as well as @ref
 * createProjection(const CreateProjectionRequest&) const "createProjection".
 *
 * When using pagination, if the table (or the underlying table in the case of
 * a view) is modified (records are inserted, updated, or deleted) during a
 * call to the endpoint, the records or values retrieved may differ between
 * calls based on the type of the update, e.g., the contiguity across pages
 * cannot be relied upon.
 *
 * If @ref gpudb::GetRecordsByColumnRequest::tableName "tableName" is empty,
 * selection is performed against a single-row virtual table.  This can be
 * useful in executing temporal (<a
 * href="../../../concepts/expressions/#date-time-functions"
 * target="_top">NOW()</a>), identity (<a
 * href="../../../concepts/expressions/#user-security-functions"
 * target="_top">USER()</a>), or constant-based functions (<a
 * href="../../../concepts/expressions/#scalar-functions"
 * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * @param[in] request_  @ref gpudb::GetRecordsByColumnRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GetRecordsByColumnResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsByColumnResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
GetRecordsByColumnResponse& getRecordsByColumn( const GetRecordsByColumnRequest& request_,
                                                GetRecordsByColumnResponse& response_ ) const;

/**
 * For a given table, retrieves the values from the requested column(s). Maps
 * of column name to the array of values as well as the column data type are
 * returned. This endpoint supports pagination with the @a offset and @a limit
 * parameters.
 *
 * <a href="../../../concepts/window/" target="_top">Window functions</a>,
 * which can perform operations like moving averages, are available through
 * this endpoint as well as @ref
 * createProjection(const std::string&, const std::string&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "createProjection".
 *
 * When using pagination, if the table (or the underlying table in the case of
 * a view) is modified (records are inserted, updated, or deleted) during a
 * call to the endpoint, the records or values retrieved may differ between
 * calls based on the type of the update, e.g., the contiguity across pages
 * cannot be relied upon.
 *
 * If @a tableName is empty, selection is performed against a single-row
 * virtual table.  This can be useful in executing temporal (<a
 * href="../../../concepts/expressions/#date-time-functions"
 * target="_top">NOW()</a>), identity (<a
 * href="../../../concepts/expressions/#user-security-functions"
 * target="_top">USER()</a>), or constant-based functions (<a
 * href="../../../concepts/expressions/#scalar-functions"
 * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * @param[in] tableName  Name of the table or view on which this operation will
 *                       be performed, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  An empty
 *                       table name retrieves one record from a single-row
 *                       virtual table, where columns specified should be
 *                       constants or constant expressions.
 * @param[in] columnNames  The list of column values to retrieve.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawGetRecordsByColumnResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref gpudb::get_records_by_column_expression
 *                             "get_records_by_column_expression": Optional
 *                             filter expression to apply to the table.
 *                         <li>@ref gpudb::get_records_by_column_sort_by
 *                             "get_records_by_column_sort_by": Optional column
 *                             that the data should be sorted by. Used in
 *                             conjunction with @ref
 *                             gpudb::get_records_by_column_sort_order
 *                             "sort_order". The @ref
 *                             gpudb::get_records_by_column_order_by "order_by"
 *                             option can be used in lieu of @ref
 *                             gpudb::get_records_by_column_sort_by "sort_by" /
 *                             @ref gpudb::get_records_by_column_sort_order
 *                             "sort_order". The default value is ''.
 *                         <li>@ref gpudb::get_records_by_column_sort_order
 *                             "get_records_by_column_sort_order": String
 *                             indicating how the returned values should be
 *                             sorted - @ref
 *                             gpudb::get_records_by_column_ascending
 *                             "ascending" or @ref
 *                             gpudb::get_records_by_column_descending
 *                             "descending". If @ref
 *                             gpudb::get_records_by_column_sort_order
 *                             "sort_order" is provided, @ref
 *                             gpudb::get_records_by_column_sort_by "sort_by"
 *                             has to be provided.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::get_records_by_column_ascending
 *                                     "get_records_by_column_ascending"
 *                                 <li>@ref
 *                                     gpudb::get_records_by_column_descending
 *                                     "get_records_by_column_descending"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_by_column_ascending
 *                             "get_records_by_column_ascending".
 *                         <li>@ref gpudb::get_records_by_column_order_by
 *                             "get_records_by_column_order_by":
 *                             Comma-separated list of the columns to be sorted
 *                             by as well as the sort direction, e.g.,
 *                             'timestamp asc, x desc'. The default value is
 *                             ''.
 *                         <li>@ref
 *                             gpudb::get_records_by_column_convert_wkts_to_wkbs
 *                             "get_records_by_column_convert_wkts_to_wkbs": If
 *                             @ref gpudb::get_records_by_column_true "true",
 *                             then WKT string columns will be returned as WKB
 *                             bytes.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_by_column_true
 *                                     "get_records_by_column_true"
 *                                 <li>@ref gpudb::get_records_by_column_false
 *                                     "get_records_by_column_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_by_column_false
 *                             "get_records_by_column_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::GetRecordsByColumnResponse "Response" object containing
 *         the result of the operation.
 */
GetRecordsByColumnResponse getRecordsByColumn( const std::string& tableName,
                                               const std::vector<std::string>& columnNames,
                                               const int64_t offset,
                                               const int64_t limit,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * For a given table, retrieves the values from the requested column(s). Maps
 * of column name to the array of values as well as the column data type are
 * returned. This endpoint supports pagination with the @a offset and @a limit
 * parameters.
 *
 * <a href="../../../concepts/window/" target="_top">Window functions</a>,
 * which can perform operations like moving averages, are available through
 * this endpoint as well as @ref
 * createProjection(const std::string&, const std::string&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "createProjection".
 *
 * When using pagination, if the table (or the underlying table in the case of
 * a view) is modified (records are inserted, updated, or deleted) during a
 * call to the endpoint, the records or values retrieved may differ between
 * calls based on the type of the update, e.g., the contiguity across pages
 * cannot be relied upon.
 *
 * If @a tableName is empty, selection is performed against a single-row
 * virtual table.  This can be useful in executing temporal (<a
 * href="../../../concepts/expressions/#date-time-functions"
 * target="_top">NOW()</a>), identity (<a
 * href="../../../concepts/expressions/#user-security-functions"
 * target="_top">USER()</a>), or constant-based functions (<a
 * href="../../../concepts/expressions/#scalar-functions"
 * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
 *
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic schemas
 * documentation</a>.
 *
 * @param[in] tableName  Name of the table or view on which this operation will
 *                       be performed, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  An empty
 *                       table name retrieves one record from a single-row
 *                       virtual table, where columns specified should be
 *                       constants or constant expressions.
 * @param[in] columnNames  The list of column values to retrieve.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @ref
 *                   gpudb::RawGetRecordsByColumnResponse::hasMoreRecords
 *                   "hasMoreRecords" to see if more records exist in the
 *                   result to be fetched, and @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref gpudb::get_records_by_column_expression
 *                             "get_records_by_column_expression": Optional
 *                             filter expression to apply to the table.
 *                         <li>@ref gpudb::get_records_by_column_sort_by
 *                             "get_records_by_column_sort_by": Optional column
 *                             that the data should be sorted by. Used in
 *                             conjunction with @ref
 *                             gpudb::get_records_by_column_sort_order
 *                             "sort_order". The @ref
 *                             gpudb::get_records_by_column_order_by "order_by"
 *                             option can be used in lieu of @ref
 *                             gpudb::get_records_by_column_sort_by "sort_by" /
 *                             @ref gpudb::get_records_by_column_sort_order
 *                             "sort_order". The default value is ''.
 *                         <li>@ref gpudb::get_records_by_column_sort_order
 *                             "get_records_by_column_sort_order": String
 *                             indicating how the returned values should be
 *                             sorted - @ref
 *                             gpudb::get_records_by_column_ascending
 *                             "ascending" or @ref
 *                             gpudb::get_records_by_column_descending
 *                             "descending". If @ref
 *                             gpudb::get_records_by_column_sort_order
 *                             "sort_order" is provided, @ref
 *                             gpudb::get_records_by_column_sort_by "sort_by"
 *                             has to be provided.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::get_records_by_column_ascending
 *                                     "get_records_by_column_ascending"
 *                                 <li>@ref
 *                                     gpudb::get_records_by_column_descending
 *                                     "get_records_by_column_descending"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_by_column_ascending
 *                             "get_records_by_column_ascending".
 *                         <li>@ref gpudb::get_records_by_column_order_by
 *                             "get_records_by_column_order_by":
 *                             Comma-separated list of the columns to be sorted
 *                             by as well as the sort direction, e.g.,
 *                             'timestamp asc, x desc'. The default value is
 *                             ''.
 *                         <li>@ref
 *                             gpudb::get_records_by_column_convert_wkts_to_wkbs
 *                             "get_records_by_column_convert_wkts_to_wkbs": If
 *                             @ref gpudb::get_records_by_column_true "true",
 *                             then WKT string columns will be returned as WKB
 *                             bytes.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::get_records_by_column_true
 *                                     "get_records_by_column_true"
 *                                 <li>@ref gpudb::get_records_by_column_false
 *                                     "get_records_by_column_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_by_column_false
 *                             "get_records_by_column_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::GetRecordsByColumnResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsByColumnResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
GetRecordsByColumnResponse& getRecordsByColumn( const std::string& tableName,
                                                const std::vector<std::string>& columnNames,
                                                const int64_t offset,
                                                const int64_t limit,
                                                const std::map<std::string, std::string>& options,
                                                GetRecordsByColumnResponse& response_ ) const;

/**
 * Retrieves the complete series/track records from the given @ref
 * gpudb::GetRecordsBySeriesRequest::worldTableName "worldTableName" based on
 * the partial track information contained in the @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" parameters.
 *
 * In contrast to @ref getRecordsRaw(const GetRecordsRequest&) const
 * "getRecordsRaw" this returns records grouped by series/track. So if @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" is 0 and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" is 5 this operation would
 * return the first 5 series/tracks in @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName". Each series/track
 * will be returned sorted by their TIMESTAMP column.
 *
 * @param[in] request_  @ref gpudb::GetRecordsBySeriesRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::RawGetRecordsBySeriesResponse "Response" object
 *         containing the result of the operation.
 */
RawGetRecordsBySeriesResponse getRecordsBySeriesRaw( const GetRecordsBySeriesRequest& request_ ) const;

/**
 * Retrieves the complete series/track records from the given @ref
 * gpudb::GetRecordsBySeriesRequest::worldTableName "worldTableName" based on
 * the partial track information contained in the @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" parameters.
 *
 * In contrast to @ref getRecordsRaw(const GetRecordsRequest&) const
 * "getRecordsRaw" this returns records grouped by series/track. So if @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" is 0 and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" is 5 this operation would
 * return the first 5 series/tracks in @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName". Each series/track
 * will be returned sorted by their TIMESTAMP column.
 *
 * @param[in] request_  @ref gpudb::GetRecordsBySeriesRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RawGetRecordsBySeriesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RawGetRecordsBySeriesResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RawGetRecordsBySeriesResponse& getRecordsBySeriesRaw( const GetRecordsBySeriesRequest& request_,
                                                      RawGetRecordsBySeriesResponse& response_ ) const;

/**
 * Retrieves the complete series/track records from the given @ref
 * gpudb::GetRecordsBySeriesRequest::worldTableName "worldTableName" based on
 * the partial track information contained in the @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" parameters.
 *
 * In contrast to @ref getRecords(const GetRecordsRequest&) const "getRecords"
 * this returns records grouped by series/track. So if @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" is 0 and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" is 5 this operation would
 * return the first 5 series/tracks in @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName". Each series/track
 * will be returned sorted by their TIMESTAMP column.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] request_  @ref gpudb::GetRecordsBySeriesRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::GetRecordsBySeriesResponse "Response" object containing
 *         the result of the operation.
 */
template<typename TResponse>
GetRecordsBySeriesResponse<TResponse> getRecordsBySeries( const GetRecordsBySeriesRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    GetRecordsBySeriesResponse<TResponse> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse());
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves the complete series/track records from the given @ref
 * gpudb::GetRecordsBySeriesRequest::worldTableName "worldTableName" based on
 * the partial track information contained in the @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" parameters.
 *
 * In contrast to @ref getRecords(const GetRecordsRequest&) const "getRecords"
 * this returns records grouped by series/track. So if @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" is 0 and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" is 5 this operation would
 * return the first 5 series/tracks in @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName". Each series/track
 * will be returned sorted by their TIMESTAMP column.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] request_  @ref gpudb::GetRecordsBySeriesRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GetRecordsBySeriesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsBySeriesResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
template<typename TResponse>
GetRecordsBySeriesResponse<TResponse>& getRecordsBySeries( const GetRecordsBySeriesRequest& request_,
                                                           GetRecordsBySeriesResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse());
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 *
 * In contrast to @ref
 * getRecords(const std::string&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 * "getRecords" this returns records grouped by series/track. So if @a offset
 * is 0 and @a limit is 5 this operation would return the first 5 series/tracks
 * in @a tableName. Each series/track will be returned sorted by their
 * TIMESTAMP column.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] tableName  Name of the table or view for which series/tracks will
 *                       be fetched, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] worldTableName  Name of the table containing the complete
 *                            series/track information to be returned for the
 *                            tracks present in the @a tableName, in
 *                            [schema_name.]table_name format, using standard
 *                            <a
 *                            href="../../../concepts/tables/#table-name-resolution"
 *                            target="_top">name resolution rules</a>.
 *                            Typically this is used when retrieving
 *                            series/tracks from a view (which contains partial
 *                            series/tracks) but the user wants to retrieve the
 *                            entire original series/tracks. Can be blank.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    series/tracks to skip (useful for paging through the
 *                    results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   series/tracks to be returned. Or END_OF_SET (-9999) to
 *                   indicate that the max number of results should be
 *                   returned. The default value is 250.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::GetRecordsBySeriesResponse "Response" object containing
 *         the result of the operation.
 */
template<typename TResponse>
GetRecordsBySeriesResponse<TResponse> getRecordsBySeries( const std::string& tableName,
                                                          const std::string& worldTableName,
                                                          const int32_t offset,
                                                          const int32_t limit,
                                                          const std::map<std::string, std::string>& options ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    GetRecordsBySeriesResponse<TResponse> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse());
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 *
 * In contrast to @ref
 * getRecords(const std::string&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 * "getRecords" this returns records grouped by series/track. So if @a offset
 * is 0 and @a limit is 5 this operation would return the first 5 series/tracks
 * in @a tableName. Each series/track will be returned sorted by their
 * TIMESTAMP column.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] tableName  Name of the table or view for which series/tracks will
 *                       be fetched, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] worldTableName  Name of the table containing the complete
 *                            series/track information to be returned for the
 *                            tracks present in the @a tableName, in
 *                            [schema_name.]table_name format, using standard
 *                            <a
 *                            href="../../../concepts/tables/#table-name-resolution"
 *                            target="_top">name resolution rules</a>.
 *                            Typically this is used when retrieving
 *                            series/tracks from a view (which contains partial
 *                            series/tracks) but the user wants to retrieve the
 *                            entire original series/tracks. Can be blank.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    series/tracks to skip (useful for paging through the
 *                    results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   series/tracks to be returned. Or END_OF_SET (-9999) to
 *                   indicate that the max number of results should be
 *                   returned. The default value is 250.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::GetRecordsBySeriesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsBySeriesResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
template<typename TResponse>
GetRecordsBySeriesResponse<TResponse>& getRecordsBySeries( const std::string& tableName,
                                                           const std::string& worldTableName,
                                                           const int32_t offset,
                                                           const int32_t limit,
                                                           const std::map<std::string, std::string>& options,
                                                           GetRecordsBySeriesResponse<TResponse>& response_ ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse());
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves the complete series/track records from the given @ref
 * gpudb::GetRecordsBySeriesRequest::worldTableName "worldTableName" based on
 * the partial track information contained in the @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" parameters.
 *
 * In contrast to @ref
 * getRecords(const ::avro::ValidSchema&, const GetRecordsRequest&) const
 * "getRecords" this returns records grouped by series/track. So if @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" is 0 and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" is 5 this operation would
 * return the first 5 series/tracks in @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName". Each series/track
 * will be returned sorted by their TIMESTAMP column.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] request_  @ref gpudb::GetRecordsBySeriesRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::GetRecordsBySeriesResponse "Response" object containing
 *         the result of the operation.
 */
template<typename TResponse>
GetRecordsBySeriesResponse<TResponse> getRecordsBySeries( const ::avro::ValidSchema& schema_,
                                                          const GetRecordsBySeriesRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    GetRecordsBySeriesResponse<TResponse> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(schema_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves the complete series/track records from the given @ref
 * gpudb::GetRecordsBySeriesRequest::worldTableName "worldTableName" based on
 * the partial track information contained in the @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" parameters.
 *
 * In contrast to @ref getRecords(const Type&, const GetRecordsRequest&) const
 * "getRecords" this returns records grouped by series/track. So if @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" is 0 and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" is 5 this operation would
 * return the first 5 series/tracks in @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName". Each series/track
 * will be returned sorted by their TIMESTAMP column.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] request_  @ref gpudb::GetRecordsBySeriesRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::GetRecordsBySeriesResponse "Response" object containing
 *         the result of the operation.
 */
template<typename TResponse>
GetRecordsBySeriesResponse<TResponse> getRecordsBySeries( const Type& type_,
                                                          const GetRecordsBySeriesRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    GetRecordsBySeriesResponse<TResponse> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(type_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves the complete series/track records from the given @ref
 * gpudb::GetRecordsBySeriesRequest::worldTableName "worldTableName" based on
 * the partial track information contained in the @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" parameters.
 *
 * In contrast to @ref
 * getRecords(const ::avro::ValidSchema&, const GetRecordsRequest&) const
 * "getRecords" this returns records grouped by series/track. So if @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" is 0 and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" is 5 this operation would
 * return the first 5 series/tracks in @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName". Each series/track
 * will be returned sorted by their TIMESTAMP column.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] request_  @ref gpudb::GetRecordsBySeriesRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GetRecordsBySeriesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsBySeriesResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
template<typename TResponse>
GetRecordsBySeriesResponse<TResponse>& getRecordsBySeries( const ::avro::ValidSchema& schema_,
                                                           const GetRecordsBySeriesRequest& request_,
                                                           GetRecordsBySeriesResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(schema_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves the complete series/track records from the given @ref
 * gpudb::GetRecordsBySeriesRequest::worldTableName "worldTableName" based on
 * the partial track information contained in the @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" parameters.
 *
 * In contrast to @ref getRecords(const Type&, const GetRecordsRequest&) const
 * "getRecords" this returns records grouped by series/track. So if @ref
 * gpudb::GetRecordsBySeriesRequest::offset "offset" is 0 and @ref
 * gpudb::GetRecordsBySeriesRequest::limit "limit" is 5 this operation would
 * return the first 5 series/tracks in @ref
 * gpudb::GetRecordsBySeriesRequest::tableName "tableName". Each series/track
 * will be returned sorted by their TIMESTAMP column.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] request_  @ref gpudb::GetRecordsBySeriesRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GetRecordsBySeriesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsBySeriesResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
template<typename TResponse>
GetRecordsBySeriesResponse<TResponse>& getRecordsBySeries( const Type& type_,
                                                           const GetRecordsBySeriesRequest& request_,
                                                           GetRecordsBySeriesResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(type_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 *
 * In contrast to @ref
 * getRecords(const ::avro::ValidSchema&, const std::string&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 * "getRecords" this returns records grouped by series/track. So if @a offset
 * is 0 and @a limit is 5 this operation would return the first 5 series/tracks
 * in @a tableName. Each series/track will be returned sorted by their
 * TIMESTAMP column.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] tableName  Name of the table or view for which series/tracks will
 *                       be fetched, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] worldTableName  Name of the table containing the complete
 *                            series/track information to be returned for the
 *                            tracks present in the @a tableName, in
 *                            [schema_name.]table_name format, using standard
 *                            <a
 *                            href="../../../concepts/tables/#table-name-resolution"
 *                            target="_top">name resolution rules</a>.
 *                            Typically this is used when retrieving
 *                            series/tracks from a view (which contains partial
 *                            series/tracks) but the user wants to retrieve the
 *                            entire original series/tracks. Can be blank.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    series/tracks to skip (useful for paging through the
 *                    results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   series/tracks to be returned. Or END_OF_SET (-9999) to
 *                   indicate that the max number of results should be
 *                   returned. The default value is 250.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::GetRecordsBySeriesResponse "Response" object containing
 *         the result of the operation.
 */
template<typename TResponse>
GetRecordsBySeriesResponse<TResponse> getRecordsBySeries( const ::avro::ValidSchema& schema_,
                                                          const std::string& tableName,
                                                          const std::string& worldTableName,
                                                          const int32_t offset,
                                                          const int32_t limit,
                                                          const std::map<std::string, std::string>& options ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    GetRecordsBySeriesResponse<TResponse> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(schema_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 *
 * In contrast to @ref
 * getRecords(const Type&, const std::string&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 * "getRecords" this returns records grouped by series/track. So if @a offset
 * is 0 and @a limit is 5 this operation would return the first 5 series/tracks
 * in @a tableName. Each series/track will be returned sorted by their
 * TIMESTAMP column.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] tableName  Name of the table or view for which series/tracks will
 *                       be fetched, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] worldTableName  Name of the table containing the complete
 *                            series/track information to be returned for the
 *                            tracks present in the @a tableName, in
 *                            [schema_name.]table_name format, using standard
 *                            <a
 *                            href="../../../concepts/tables/#table-name-resolution"
 *                            target="_top">name resolution rules</a>.
 *                            Typically this is used when retrieving
 *                            series/tracks from a view (which contains partial
 *                            series/tracks) but the user wants to retrieve the
 *                            entire original series/tracks. Can be blank.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    series/tracks to skip (useful for paging through the
 *                    results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   series/tracks to be returned. Or END_OF_SET (-9999) to
 *                   indicate that the max number of results should be
 *                   returned. The default value is 250.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::GetRecordsBySeriesResponse "Response" object containing
 *         the result of the operation.
 */
template<typename TResponse>
GetRecordsBySeriesResponse<TResponse> getRecordsBySeries( const Type& type_,
                                                          const std::string& tableName,
                                                          const std::string& worldTableName,
                                                          const int32_t offset,
                                                          const int32_t limit,
                                                          const std::map<std::string, std::string>& options ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    GetRecordsBySeriesResponse<TResponse> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(type_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 *
 * In contrast to @ref
 * getRecords(const ::avro::ValidSchema&, const std::string&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 * "getRecords" this returns records grouped by series/track. So if @a offset
 * is 0 and @a limit is 5 this operation would return the first 5 series/tracks
 * in @a tableName. Each series/track will be returned sorted by their
 * TIMESTAMP column.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] tableName  Name of the table or view for which series/tracks will
 *                       be fetched, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] worldTableName  Name of the table containing the complete
 *                            series/track information to be returned for the
 *                            tracks present in the @a tableName, in
 *                            [schema_name.]table_name format, using standard
 *                            <a
 *                            href="../../../concepts/tables/#table-name-resolution"
 *                            target="_top">name resolution rules</a>.
 *                            Typically this is used when retrieving
 *                            series/tracks from a view (which contains partial
 *                            series/tracks) but the user wants to retrieve the
 *                            entire original series/tracks. Can be blank.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    series/tracks to skip (useful for paging through the
 *                    results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   series/tracks to be returned. Or END_OF_SET (-9999) to
 *                   indicate that the max number of results should be
 *                   returned. The default value is 250.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::GetRecordsBySeriesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsBySeriesResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
template<typename TResponse>
GetRecordsBySeriesResponse<TResponse>& getRecordsBySeries( const ::avro::ValidSchema& schema_,
                                                           const std::string& tableName,
                                                           const std::string& worldTableName,
                                                           const int32_t offset,
                                                           const int32_t limit,
                                                           const std::map<std::string, std::string>& options,
                                                           GetRecordsBySeriesResponse<TResponse>& response_ ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(schema_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 *
 * In contrast to @ref
 * getRecords(const Type&, const std::string&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 * "getRecords" this returns records grouped by series/track. So if @a offset
 * is 0 and @a limit is 5 this operation would return the first 5 series/tracks
 * in @a tableName. Each series/track will be returned sorted by their
 * TIMESTAMP column.
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] tableName  Name of the table or view for which series/tracks will
 *                       be fetched, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] worldTableName  Name of the table containing the complete
 *                            series/track information to be returned for the
 *                            tracks present in the @a tableName, in
 *                            [schema_name.]table_name format, using standard
 *                            <a
 *                            href="../../../concepts/tables/#table-name-resolution"
 *                            target="_top">name resolution rules</a>.
 *                            Typically this is used when retrieving
 *                            series/tracks from a view (which contains partial
 *                            series/tracks) but the user wants to retrieve the
 *                            entire original series/tracks. Can be blank.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    series/tracks to skip (useful for paging through the
 *                    results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   series/tracks to be returned. Or END_OF_SET (-9999) to
 *                   indicate that the max number of results should be
 *                   returned. The default value is 250.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::GetRecordsBySeriesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GetRecordsBySeriesResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
template<typename TResponse>
GetRecordsBySeriesResponse<TResponse>& getRecordsBySeries( const Type& type_,
                                                           const std::string& tableName,
                                                           const std::string& worldTableName,
                                                           const int32_t offset,
                                                           const int32_t limit,
                                                           const std::map<std::string, std::string>& options,
                                                           GetRecordsBySeriesResponse<TResponse>& response_ ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(type_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const DeleteRecordsRequest&) const "deleteRecords".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsFromCollectionRequest::offset "offset" and @ref
 * gpudb::GetRecordsFromCollectionRequest::limit "limit" parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @param[in] request_  @ref gpudb::GetRecordsFromCollectionRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::RawGetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation.
 */
RawGetRecordsFromCollectionResponse getRecordsFromCollectionRaw( const GetRecordsFromCollectionRequest& request_ ) const;

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const DeleteRecordsRequest&) const "deleteRecords".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsFromCollectionRequest::offset "offset" and @ref
 * gpudb::GetRecordsFromCollectionRequest::limit "limit" parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @param[in] request_  @ref gpudb::GetRecordsFromCollectionRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RawGetRecordsFromCollectionResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::RawGetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RawGetRecordsFromCollectionResponse& getRecordsFromCollectionRaw( const GetRecordsFromCollectionRequest& request_,
                                                                  RawGetRecordsFromCollectionResponse& response_ ) const;

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const DeleteRecordsRequest&) const "deleteRecords".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsFromCollectionRequest::offset "offset" and @ref
 * gpudb::GetRecordsFromCollectionRequest::limit "limit" parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] request_  @ref gpudb::GetRecordsFromCollectionRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::GetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation.
 */
template<typename TResponse>
GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection( const GetRecordsFromCollectionRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    GetRecordsFromCollectionResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const DeleteRecordsRequest&) const "deleteRecords".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsFromCollectionRequest::offset "offset" and @ref
 * gpudb::GetRecordsFromCollectionRequest::limit "limit" parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] request_  @ref gpudb::GetRecordsFromCollectionRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GetRecordsFromCollectionResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::GetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
template<typename TResponse>
GetRecordsFromCollectionResponse<TResponse>& getRecordsFromCollection( const GetRecordsFromCollectionRequest& request_,
                                                                       GetRecordsFromCollectionResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const std::string&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "deleteRecords".
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] tableName  Name of the collection or table from which records are
 *                       to be retrieved, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing collection or table.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref
 *                             gpudb::get_records_from_collection_return_record_ids
 *                             "get_records_from_collection_return_record_ids":
 *                             If @ref gpudb::get_records_from_collection_true
 *                             "true" then return the internal record ID along
 *                             with each returned record.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::get_records_from_collection_true
 *                                     "get_records_from_collection_true"
 *                                 <li>@ref
 *                                     gpudb::get_records_from_collection_false
 *                                     "get_records_from_collection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_from_collection_false
 *                             "get_records_from_collection_false".
 *                         <li>@ref
 *                             gpudb::get_records_from_collection_expression
 *                             "get_records_from_collection_expression":
 *                             Optional filter expression to apply to the
 *                             table. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::GetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation.
 */
template<typename TResponse>
GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection( const std::string& tableName,
                                                                      const int64_t offset,
                                                                      const int64_t limit,
                                                                      const std::map<std::string, std::string>& options ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    GetRecordsFromCollectionResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const std::string&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "deleteRecords".
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] tableName  Name of the collection or table from which records are
 *                       to be retrieved, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing collection or table.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref
 *                             gpudb::get_records_from_collection_return_record_ids
 *                             "get_records_from_collection_return_record_ids":
 *                             If @ref gpudb::get_records_from_collection_true
 *                             "true" then return the internal record ID along
 *                             with each returned record.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::get_records_from_collection_true
 *                                     "get_records_from_collection_true"
 *                                 <li>@ref
 *                                     gpudb::get_records_from_collection_false
 *                                     "get_records_from_collection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_from_collection_false
 *                             "get_records_from_collection_false".
 *                         <li>@ref
 *                             gpudb::get_records_from_collection_expression
 *                             "get_records_from_collection_expression":
 *                             Optional filter expression to apply to the
 *                             table. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::GetRecordsFromCollectionResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::GetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
template<typename TResponse>
GetRecordsFromCollectionResponse<TResponse>& getRecordsFromCollection( const std::string& tableName,
                                                                       const int64_t offset,
                                                                       const int64_t limit,
                                                                       const std::map<std::string, std::string>& options,
                                                                       GetRecordsFromCollectionResponse<TResponse>& response_ ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const std::string&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "deleteRecords".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsFromCollectionRequest::offset "offset" and @ref
 * gpudb::GetRecordsFromCollectionRequest::limit "limit" parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] request_  @ref gpudb::GetRecordsFromCollectionRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::GetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation.
 */
template<typename TResponse>
GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection( const ::avro::ValidSchema& schema_,
                                                                      const GetRecordsFromCollectionRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    GetRecordsFromCollectionResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const std::string&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "deleteRecords".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsFromCollectionRequest::offset "offset" and @ref
 * gpudb::GetRecordsFromCollectionRequest::limit "limit" parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] request_  @ref gpudb::GetRecordsFromCollectionRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::GetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation.
 */
template<typename TResponse>
GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection( const Type& type_,
                                                                      const GetRecordsFromCollectionRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    GetRecordsFromCollectionResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const std::string&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "deleteRecords".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsFromCollectionRequest::offset "offset" and @ref
 * gpudb::GetRecordsFromCollectionRequest::limit "limit" parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] request_  @ref gpudb::GetRecordsFromCollectionRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GetRecordsFromCollectionResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::GetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
template<typename TResponse>
GetRecordsFromCollectionResponse<TResponse>& getRecordsFromCollection( const ::avro::ValidSchema& schema_,
                                                                       const GetRecordsFromCollectionRequest& request_,
                                                                       GetRecordsFromCollectionResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const std::string&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "deleteRecords".
 *
 * This operation supports paging through the data via the @ref
 * gpudb::GetRecordsFromCollectionRequest::offset "offset" and @ref
 * gpudb::GetRecordsFromCollectionRequest::limit "limit" parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] request_  @ref gpudb::GetRecordsFromCollectionRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GetRecordsFromCollectionResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::GetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
template<typename TResponse>
GetRecordsFromCollectionResponse<TResponse>& getRecordsFromCollection( const Type& type_,
                                                                       const GetRecordsFromCollectionRequest& request_,
                                                                       GetRecordsFromCollectionResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const std::string&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "deleteRecords".
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] tableName  Name of the collection or table from which records are
 *                       to be retrieved, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing collection or table.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref
 *                             gpudb::get_records_from_collection_return_record_ids
 *                             "get_records_from_collection_return_record_ids":
 *                             If @ref gpudb::get_records_from_collection_true
 *                             "true" then return the internal record ID along
 *                             with each returned record.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::get_records_from_collection_true
 *                                     "get_records_from_collection_true"
 *                                 <li>@ref
 *                                     gpudb::get_records_from_collection_false
 *                                     "get_records_from_collection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_from_collection_false
 *                             "get_records_from_collection_false".
 *                         <li>@ref
 *                             gpudb::get_records_from_collection_expression
 *                             "get_records_from_collection_expression":
 *                             Optional filter expression to apply to the
 *                             table. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::GetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation.
 */
template<typename TResponse>
GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection( const ::avro::ValidSchema& schema_,
                                                                      const std::string& tableName,
                                                                      const int64_t offset,
                                                                      const int64_t limit,
                                                                      const std::map<std::string, std::string>& options ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    GetRecordsFromCollectionResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const std::string&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "deleteRecords".
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] tableName  Name of the collection or table from which records are
 *                       to be retrieved, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing collection or table.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref
 *                             gpudb::get_records_from_collection_return_record_ids
 *                             "get_records_from_collection_return_record_ids":
 *                             If @ref gpudb::get_records_from_collection_true
 *                             "true" then return the internal record ID along
 *                             with each returned record.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::get_records_from_collection_true
 *                                     "get_records_from_collection_true"
 *                                 <li>@ref
 *                                     gpudb::get_records_from_collection_false
 *                                     "get_records_from_collection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_from_collection_false
 *                             "get_records_from_collection_false".
 *                         <li>@ref
 *                             gpudb::get_records_from_collection_expression
 *                             "get_records_from_collection_expression":
 *                             Optional filter expression to apply to the
 *                             table. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::GetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation.
 */
template<typename TResponse>
GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection( const Type& type_,
                                                                      const std::string& tableName,
                                                                      const int64_t offset,
                                                                      const int64_t limit,
                                                                      const std::map<std::string, std::string>& options ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    GetRecordsFromCollectionResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const std::string&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "deleteRecords".
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] tableName  Name of the collection or table from which records are
 *                       to be retrieved, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing collection or table.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref
 *                             gpudb::get_records_from_collection_return_record_ids
 *                             "get_records_from_collection_return_record_ids":
 *                             If @ref gpudb::get_records_from_collection_true
 *                             "true" then return the internal record ID along
 *                             with each returned record.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::get_records_from_collection_true
 *                                     "get_records_from_collection_true"
 *                                 <li>@ref
 *                                     gpudb::get_records_from_collection_false
 *                                     "get_records_from_collection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_from_collection_false
 *                             "get_records_from_collection_false".
 *                         <li>@ref
 *                             gpudb::get_records_from_collection_expression
 *                             "get_records_from_collection_expression":
 *                             Optional filter expression to apply to the
 *                             table. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::GetRecordsFromCollectionResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::GetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
template<typename TResponse>
GetRecordsFromCollectionResponse<TResponse>& getRecordsFromCollection( const ::avro::ValidSchema& schema_,
                                                                       const std::string& tableName,
                                                                       const int64_t offset,
                                                                       const int64_t limit,
                                                                       const std::map<std::string, std::string>& options,
                                                                       GetRecordsFromCollectionResponse<TResponse>& response_ ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as @ref
 * deleteRecords(const std::string&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "deleteRecords".
 *
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 *
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 *
 * @tparam TResponse  The type of object being retrieved.
 *
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] tableName  Name of the collection or table from which records are
 *                       to be retrieved, in [schema_name.]table_name format,
 *                       using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing collection or table.
 * @param[in] offset  A positive integer indicating the number of initial
 *                    results to skip (this can be useful for paging through
 *                    the results). The default value is 0. The minimum allowed
 *                    value is 0. The maximum allowed value is MAX_INT.
 * @param[in] limit  A positive integer indicating the maximum number of
 *                   results to be returned, or END_OF_SET (-9999) to indicate
 *                   that the maximum number of results allowed by the server
 *                   should be returned.  The number of records returned will
 *                   never exceed the server's own limit, defined by the <a
 *                   href="../../../config/#config-main-general"
 *                   target="_top">max_get_records_size</a> parameter in the
 *                   server configuration. Use @a offset & @a limit to request
 *                   subsequent pages of results. The default value is -9999.
 * @param[in] options  <ul>
 *                         <li>@ref
 *                             gpudb::get_records_from_collection_return_record_ids
 *                             "get_records_from_collection_return_record_ids":
 *                             If @ref gpudb::get_records_from_collection_true
 *                             "true" then return the internal record ID along
 *                             with each returned record.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::get_records_from_collection_true
 *                                     "get_records_from_collection_true"
 *                                 <li>@ref
 *                                     gpudb::get_records_from_collection_false
 *                                     "get_records_from_collection_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::get_records_from_collection_false
 *                             "get_records_from_collection_false".
 *                         <li>@ref
 *                             gpudb::get_records_from_collection_expression
 *                             "get_records_from_collection_expression":
 *                             Optional filter expression to apply to the
 *                             table. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::GetRecordsFromCollectionResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::GetRecordsFromCollectionResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
template<typename TResponse>
GetRecordsFromCollectionResponse<TResponse>& getRecordsFromCollection( const Type& type_,
                                                                       const std::string& tableName,
                                                                       const int64_t offset,
                                                                       const int64_t limit,
                                                                       const std::map<std::string, std::string>& options,
                                                                       GetRecordsFromCollectionResponse<TResponse>& response_ ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

/** @private */
GetVectortileResponse getVectortile( const GetVectortileRequest& request_ ) const;

/** @private */
GetVectortileResponse& getVectortile( const GetVectortileRequest& request_,
                                      GetVectortileResponse& response_ ) const;

/** @private */
GetVectortileResponse getVectortile( const std::vector<std::string>& tableNames,
                                     const std::vector<std::string>& columnNames,
                                     const std::map<std::string, std::vector<std::string> >& layers,
                                     const int32_t tileX,
                                     const int32_t tileY,
                                     const int32_t zoom,
                                     const std::map<std::string, std::string>& options ) const;

/** @private */
GetVectortileResponse& getVectortile( const std::vector<std::string>& tableNames,
                                      const std::vector<std::string>& columnNames,
                                      const std::map<std::string, std::vector<std::string> >& layers,
                                      const int32_t tileX,
                                      const int32_t tileY,
                                      const int32_t zoom,
                                      const std::map<std::string, std::string>& options,
                                      GetVectortileResponse& response_ ) const;

/**
 * Grant user or role the specified permission on the specified object.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::GrantPermissionResponse "Response" object containing the
 *         result of the operation.
 */
GrantPermissionResponse grantPermission( const GrantPermissionRequest& request_ ) const;

/**
 * Grant user or role the specified permission on the specified object.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GrantPermissionResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::GrantPermissionResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
GrantPermissionResponse& grantPermission( const GrantPermissionRequest& request_,
                                          GrantPermissionResponse& response_ ) const;

/**
 * Grant user or role the specified permission on the specified object.
 *
 * @param[in] principal  Name of the user or role for which the permission is
 *                       being granted.  Must be an existing user or role. The
 *                       default value is ''.
 * @param[in] object  Name of object permission is being granted to.  It is
 *                    recommended to use a fully-qualified name when possible.
 * @param[in] objectType  The type of object being granted to.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::grant_permission_context
 *                                "grant_permission_context": Context
 *                            <li>@ref gpudb::grant_permission_credential
 *                                "grant_permission_credential": Credential
 *                            <li>@ref gpudb::grant_permission_datasink
 *                                "grant_permission_datasink": Data Sink
 *                            <li>@ref gpudb::grant_permission_datasource
 *                                "grant_permission_datasource": Data Source
 *                            <li>@ref gpudb::grant_permission_directory
 *                                "grant_permission_directory": KIFS File
 *                                Directory
 *                            <li>@ref gpudb::grant_permission_graph
 *                                "grant_permission_graph": A Graph object
 *                            <li>@ref gpudb::grant_permission_proc
 *                                "grant_permission_proc": UDF Procedure
 *                            <li>@ref gpudb::grant_permission_schema
 *                                "grant_permission_schema": Schema
 *                            <li>@ref gpudb::grant_permission_sql_proc
 *                                "grant_permission_sql_proc": SQL Procedure
 *                            <li>@ref gpudb::grant_permission_system
 *                                "grant_permission_system": System-level
 *                                access
 *                            <li>@ref gpudb::grant_permission_table
 *                                "grant_permission_table": Database Table
 *                            <li>@ref gpudb::grant_permission_table_monitor
 *                                "grant_permission_table_monitor": Table
 *                                monitor
 *                        </ul>
 * @param[in] permission  Permission being granted.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::grant_permission_admin
 *                                "grant_permission_admin": Full read/write and
 *                                administrative access on the object.
 *                            <li>@ref gpudb::grant_permission_connect
 *                                "grant_permission_connect": Connect access on
 *                                the given data source or data sink.
 *                            <li>@ref gpudb::grant_permission_create
 *                                "grant_permission_create": Ability to create
 *                                new objects of this type.
 *                            <li>@ref gpudb::grant_permission_delete
 *                                "grant_permission_delete": Delete rows from
 *                                tables.
 *                            <li>@ref gpudb::grant_permission_execute
 *                                "grant_permission_execute": Ability to
 *                                Execute the Procedure object.
 *                            <li>@ref gpudb::grant_permission_insert
 *                                "grant_permission_insert": Insert access to
 *                                tables.
 *                            <li>@ref gpudb::grant_permission_read
 *                                "grant_permission_read": Ability to read,
 *                                list and use the object.
 *                            <li>@ref gpudb::grant_permission_update
 *                                "grant_permission_update": Update access to
 *                                the table.
 *                            <li>@ref gpudb::grant_permission_user_admin
 *                                "grant_permission_user_admin": Access to
 *                                administer users and roles that do not have
 *                                system_admin permission.
 *                            <li>@ref gpudb::grant_permission_write
 *                                "grant_permission_write": Access to write,
 *                                change and delete objects.
 *                        </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::grant_permission_columns
 *                             "grant_permission_columns": Apply table security
 *                             to these columns, comma-separated. The default
 *                             value is ''.
 *                         <li>@ref gpudb::grant_permission_filter_expression
 *                             "grant_permission_filter_expression": Optional
 *                             filter expression to apply to this grant.  Only
 *                             rows that match the filter will be affected. The
 *                             default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::GrantPermissionResponse "Response" object containing the
 *         result of the operation.
 */
GrantPermissionResponse grantPermission( const std::string& principal,
                                         const std::string& object,
                                         const std::string& objectType,
                                         const std::string& permission,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Grant user or role the specified permission on the specified object.
 *
 * @param[in] principal  Name of the user or role for which the permission is
 *                       being granted.  Must be an existing user or role. The
 *                       default value is ''.
 * @param[in] object  Name of object permission is being granted to.  It is
 *                    recommended to use a fully-qualified name when possible.
 * @param[in] objectType  The type of object being granted to.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::grant_permission_context
 *                                "grant_permission_context": Context
 *                            <li>@ref gpudb::grant_permission_credential
 *                                "grant_permission_credential": Credential
 *                            <li>@ref gpudb::grant_permission_datasink
 *                                "grant_permission_datasink": Data Sink
 *                            <li>@ref gpudb::grant_permission_datasource
 *                                "grant_permission_datasource": Data Source
 *                            <li>@ref gpudb::grant_permission_directory
 *                                "grant_permission_directory": KIFS File
 *                                Directory
 *                            <li>@ref gpudb::grant_permission_graph
 *                                "grant_permission_graph": A Graph object
 *                            <li>@ref gpudb::grant_permission_proc
 *                                "grant_permission_proc": UDF Procedure
 *                            <li>@ref gpudb::grant_permission_schema
 *                                "grant_permission_schema": Schema
 *                            <li>@ref gpudb::grant_permission_sql_proc
 *                                "grant_permission_sql_proc": SQL Procedure
 *                            <li>@ref gpudb::grant_permission_system
 *                                "grant_permission_system": System-level
 *                                access
 *                            <li>@ref gpudb::grant_permission_table
 *                                "grant_permission_table": Database Table
 *                            <li>@ref gpudb::grant_permission_table_monitor
 *                                "grant_permission_table_monitor": Table
 *                                monitor
 *                        </ul>
 * @param[in] permission  Permission being granted.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::grant_permission_admin
 *                                "grant_permission_admin": Full read/write and
 *                                administrative access on the object.
 *                            <li>@ref gpudb::grant_permission_connect
 *                                "grant_permission_connect": Connect access on
 *                                the given data source or data sink.
 *                            <li>@ref gpudb::grant_permission_create
 *                                "grant_permission_create": Ability to create
 *                                new objects of this type.
 *                            <li>@ref gpudb::grant_permission_delete
 *                                "grant_permission_delete": Delete rows from
 *                                tables.
 *                            <li>@ref gpudb::grant_permission_execute
 *                                "grant_permission_execute": Ability to
 *                                Execute the Procedure object.
 *                            <li>@ref gpudb::grant_permission_insert
 *                                "grant_permission_insert": Insert access to
 *                                tables.
 *                            <li>@ref gpudb::grant_permission_read
 *                                "grant_permission_read": Ability to read,
 *                                list and use the object.
 *                            <li>@ref gpudb::grant_permission_update
 *                                "grant_permission_update": Update access to
 *                                the table.
 *                            <li>@ref gpudb::grant_permission_user_admin
 *                                "grant_permission_user_admin": Access to
 *                                administer users and roles that do not have
 *                                system_admin permission.
 *                            <li>@ref gpudb::grant_permission_write
 *                                "grant_permission_write": Access to write,
 *                                change and delete objects.
 *                        </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::grant_permission_columns
 *                             "grant_permission_columns": Apply table security
 *                             to these columns, comma-separated. The default
 *                             value is ''.
 *                         <li>@ref gpudb::grant_permission_filter_expression
 *                             "grant_permission_filter_expression": Optional
 *                             filter expression to apply to this grant.  Only
 *                             rows that match the filter will be affected. The
 *                             default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::GrantPermissionResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::GrantPermissionResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
GrantPermissionResponse& grantPermission( const std::string& principal,
                                          const std::string& object,
                                          const std::string& objectType,
                                          const std::string& permission,
                                          const std::map<std::string, std::string>& options,
                                          GrantPermissionResponse& response_ ) const;

/**
 * Grants a <a
 * href="../../../security/sec_concepts/#security-concepts-permissions-credential"
 * target="_top">credential-level permission</a> to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionCredentialRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::GrantPermissionCredentialResponse "Response" object
 *         containing the result of the operation.
 */
GrantPermissionCredentialResponse grantPermissionCredential( const GrantPermissionCredentialRequest& request_ ) const;

/**
 * Grants a <a
 * href="../../../security/sec_concepts/#security-concepts-permissions-credential"
 * target="_top">credential-level permission</a> to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionCredentialRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GrantPermissionCredentialResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::GrantPermissionCredentialResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
GrantPermissionCredentialResponse& grantPermissionCredential( const GrantPermissionCredentialRequest& request_,
                                                              GrantPermissionCredentialResponse& response_ ) const;

/**
 * Grants a <a
 * href="../../../security/sec_concepts/#security-concepts-permissions-credential"
 * target="_top">credential-level permission</a> to a user or role.
 *
 * @param[in] name  Name of the user or role to which the permission will be
 *                  granted. Must be an existing user or role.
 * @param[in] permission  Permission to grant to the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::grant_permission_credential_credential_admin
 *                                "grant_permission_credential_credential_admin":
 *                                Full read/write and administrative access on
 *                                the credential.
 *                            <li>@ref
 *                                gpudb::grant_permission_credential_credential_read
 *                                "grant_permission_credential_credential_read":
 *                                Ability to read and use the credential.
 *                        </ul>
 * @param[in] credentialName  Name of the credential on which the permission
 *                            will be granted. Must be an existing credential,
 *                            or an empty string to grant access on all
 *                            credentials.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::GrantPermissionCredentialResponse "Response" object
 *         containing the result of the operation.
 */
GrantPermissionCredentialResponse grantPermissionCredential( const std::string& name,
                                                             const std::string& permission,
                                                             const std::string& credentialName,
                                                             const std::map<std::string, std::string>& options ) const;

/**
 * Grants a <a
 * href="../../../security/sec_concepts/#security-concepts-permissions-credential"
 * target="_top">credential-level permission</a> to a user or role.
 *
 * @param[in] name  Name of the user or role to which the permission will be
 *                  granted. Must be an existing user or role.
 * @param[in] permission  Permission to grant to the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::grant_permission_credential_credential_admin
 *                                "grant_permission_credential_credential_admin":
 *                                Full read/write and administrative access on
 *                                the credential.
 *                            <li>@ref
 *                                gpudb::grant_permission_credential_credential_read
 *                                "grant_permission_credential_credential_read":
 *                                Ability to read and use the credential.
 *                        </ul>
 * @param[in] credentialName  Name of the credential on which the permission
 *                            will be granted. Must be an existing credential,
 *                            or an empty string to grant access on all
 *                            credentials.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::GrantPermissionCredentialResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::GrantPermissionCredentialResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
GrantPermissionCredentialResponse& grantPermissionCredential( const std::string& name,
                                                              const std::string& permission,
                                                              const std::string& credentialName,
                                                              const std::map<std::string, std::string>& options,
                                                              GrantPermissionCredentialResponse& response_ ) const;

/**
 * Grants a <a href="../../../concepts/data_sources/" target="_top">data
 * source</a> permission to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionDatasourceRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::GrantPermissionDatasourceResponse "Response" object
 *         containing the result of the operation.
 */
GrantPermissionDatasourceResponse grantPermissionDatasource( const GrantPermissionDatasourceRequest& request_ ) const;

/**
 * Grants a <a href="../../../concepts/data_sources/" target="_top">data
 * source</a> permission to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionDatasourceRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GrantPermissionDatasourceResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::GrantPermissionDatasourceResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
GrantPermissionDatasourceResponse& grantPermissionDatasource( const GrantPermissionDatasourceRequest& request_,
                                                              GrantPermissionDatasourceResponse& response_ ) const;

/**
 * Grants a <a href="../../../concepts/data_sources/" target="_top">data
 * source</a> permission to a user or role.
 *
 * @param[in] name  Name of the user or role to which the permission will be
 *                  granted. Must be an existing user or role.
 * @param[in] permission  Permission to grant to the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::grant_permission_datasource_admin
 *                                "grant_permission_datasource_admin": Admin
 *                                access on the given data source
 *                            <li>@ref
 *                                gpudb::grant_permission_datasource_connect
 *                                "grant_permission_datasource_connect":
 *                                Connect access on the given data source
 *                        </ul>
 * @param[in] datasourceName  Name of the data source on which the permission
 *                            will be granted. Must be an existing data source,
 *                            or an empty string to grant permission on all
 *                            data sources.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::GrantPermissionDatasourceResponse "Response" object
 *         containing the result of the operation.
 */
GrantPermissionDatasourceResponse grantPermissionDatasource( const std::string& name,
                                                             const std::string& permission,
                                                             const std::string& datasourceName,
                                                             const std::map<std::string, std::string>& options ) const;

/**
 * Grants a <a href="../../../concepts/data_sources/" target="_top">data
 * source</a> permission to a user or role.
 *
 * @param[in] name  Name of the user or role to which the permission will be
 *                  granted. Must be an existing user or role.
 * @param[in] permission  Permission to grant to the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::grant_permission_datasource_admin
 *                                "grant_permission_datasource_admin": Admin
 *                                access on the given data source
 *                            <li>@ref
 *                                gpudb::grant_permission_datasource_connect
 *                                "grant_permission_datasource_connect":
 *                                Connect access on the given data source
 *                        </ul>
 * @param[in] datasourceName  Name of the data source on which the permission
 *                            will be granted. Must be an existing data source,
 *                            or an empty string to grant permission on all
 *                            data sources.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::GrantPermissionDatasourceResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::GrantPermissionDatasourceResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
GrantPermissionDatasourceResponse& grantPermissionDatasource( const std::string& name,
                                                              const std::string& permission,
                                                              const std::string& datasourceName,
                                                              const std::map<std::string, std::string>& options,
                                                              GrantPermissionDatasourceResponse& response_ ) const;

/**
 * Grants a <a href="../../../tools/kifs/" target="_top">KiFS</a>
 * directory-level permission to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionDirectoryRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::GrantPermissionDirectoryResponse "Response" object
 *         containing the result of the operation.
 */
GrantPermissionDirectoryResponse grantPermissionDirectory( const GrantPermissionDirectoryRequest& request_ ) const;

/**
 * Grants a <a href="../../../tools/kifs/" target="_top">KiFS</a>
 * directory-level permission to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionDirectoryRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GrantPermissionDirectoryResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::GrantPermissionDirectoryResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
GrantPermissionDirectoryResponse& grantPermissionDirectory( const GrantPermissionDirectoryRequest& request_,
                                                            GrantPermissionDirectoryResponse& response_ ) const;

/**
 * Grants a <a href="../../../tools/kifs/" target="_top">KiFS</a>
 * directory-level permission to a user or role.
 *
 * @param[in] name  Name of the user or role to which the permission will be
 *                  granted. Must be an existing user or role.
 * @param[in] permission  Permission to grant to the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::grant_permission_directory_directory_read
 *                                "grant_permission_directory_directory_read":
 *                                For files in the directory, access to list
 *                                files, download files, or use files in server
 *                                side functions
 *                            <li>@ref
 *                                gpudb::grant_permission_directory_directory_write
 *                                "grant_permission_directory_directory_write":
 *                                Access to upload files to, or delete files
 *                                from, the directory. A user or role with
 *                                write access automatically has read access
 *                        </ul>
 * @param[in] directoryName  Name of the KiFS directory to which the permission
 *                           grants access. An empty directory name grants
 *                           access to all KiFS directories
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::GrantPermissionDirectoryResponse "Response" object
 *         containing the result of the operation.
 */
GrantPermissionDirectoryResponse grantPermissionDirectory( const std::string& name,
                                                           const std::string& permission,
                                                           const std::string& directoryName,
                                                           const std::map<std::string, std::string>& options ) const;

/**
 * Grants a <a href="../../../tools/kifs/" target="_top">KiFS</a>
 * directory-level permission to a user or role.
 *
 * @param[in] name  Name of the user or role to which the permission will be
 *                  granted. Must be an existing user or role.
 * @param[in] permission  Permission to grant to the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::grant_permission_directory_directory_read
 *                                "grant_permission_directory_directory_read":
 *                                For files in the directory, access to list
 *                                files, download files, or use files in server
 *                                side functions
 *                            <li>@ref
 *                                gpudb::grant_permission_directory_directory_write
 *                                "grant_permission_directory_directory_write":
 *                                Access to upload files to, or delete files
 *                                from, the directory. A user or role with
 *                                write access automatically has read access
 *                        </ul>
 * @param[in] directoryName  Name of the KiFS directory to which the permission
 *                           grants access. An empty directory name grants
 *                           access to all KiFS directories
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::GrantPermissionDirectoryResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::GrantPermissionDirectoryResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
GrantPermissionDirectoryResponse& grantPermissionDirectory( const std::string& name,
                                                            const std::string& permission,
                                                            const std::string& directoryName,
                                                            const std::map<std::string, std::string>& options,
                                                            GrantPermissionDirectoryResponse& response_ ) const;

/**
 * Grants a proc-level permission to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionProcRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::GrantPermissionProcResponse "Response" object containing
 *         the result of the operation.
 */
GrantPermissionProcResponse grantPermissionProc( const GrantPermissionProcRequest& request_ ) const;

/**
 * Grants a proc-level permission to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionProcRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GrantPermissionProcResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GrantPermissionProcResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
GrantPermissionProcResponse& grantPermissionProc( const GrantPermissionProcRequest& request_,
                                                  GrantPermissionProcResponse& response_ ) const;

/**
 * Grants a proc-level permission to a user or role.
 *
 * @param[in] name  Name of the user or role to which the permission will be
 *                  granted. Must be an existing user or role.
 * @param[in] permission  Permission to grant to the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::grant_permission_proc_proc_admin
 *                                "grant_permission_proc_proc_admin": Admin
 *                                access to the proc.
 *                            <li>@ref
 *                                gpudb::grant_permission_proc_proc_execute
 *                                "grant_permission_proc_proc_execute": Execute
 *                                access to the proc.
 *                        </ul>
 * @param[in] procName  Name of the proc to which the permission grants access.
 *                      Must be an existing proc, or an empty string to grant
 *                      access to all procs.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::GrantPermissionProcResponse "Response" object containing
 *         the result of the operation.
 */
GrantPermissionProcResponse grantPermissionProc( const std::string& name,
                                                 const std::string& permission,
                                                 const std::string& procName,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Grants a proc-level permission to a user or role.
 *
 * @param[in] name  Name of the user or role to which the permission will be
 *                  granted. Must be an existing user or role.
 * @param[in] permission  Permission to grant to the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::grant_permission_proc_proc_admin
 *                                "grant_permission_proc_proc_admin": Admin
 *                                access to the proc.
 *                            <li>@ref
 *                                gpudb::grant_permission_proc_proc_execute
 *                                "grant_permission_proc_proc_execute": Execute
 *                                access to the proc.
 *                        </ul>
 * @param[in] procName  Name of the proc to which the permission grants access.
 *                      Must be an existing proc, or an empty string to grant
 *                      access to all procs.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::GrantPermissionProcResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GrantPermissionProcResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
GrantPermissionProcResponse& grantPermissionProc( const std::string& name,
                                                  const std::string& permission,
                                                  const std::string& procName,
                                                  const std::map<std::string, std::string>& options,
                                                  GrantPermissionProcResponse& response_ ) const;

/**
 * Grants a system-level permission to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionSystemRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::GrantPermissionSystemResponse "Response" object
 *         containing the result of the operation.
 */
GrantPermissionSystemResponse grantPermissionSystem( const GrantPermissionSystemRequest& request_ ) const;

/**
 * Grants a system-level permission to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionSystemRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GrantPermissionSystemResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GrantPermissionSystemResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
GrantPermissionSystemResponse& grantPermissionSystem( const GrantPermissionSystemRequest& request_,
                                                      GrantPermissionSystemResponse& response_ ) const;

/**
 * Grants a system-level permission to a user or role.
 *
 * @param[in] name  Name of the user or role to which the permission will be
 *                  granted. Must be an existing user or role.
 * @param[in] permission  Permission to grant to the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::grant_permission_system_system_admin
 *                                "grant_permission_system_system_admin": Full
 *                                access to all data and system functions.
 *                            <li>@ref
 *                                gpudb::grant_permission_system_system_user_admin
 *                                "grant_permission_system_system_user_admin":
 *                                Access to administer users and roles that do
 *                                not have system_admin permission.
 *                            <li>@ref
 *                                gpudb::grant_permission_system_system_write
 *                                "grant_permission_system_system_write": Read
 *                                and write access to all tables.
 *                            <li>@ref
 *                                gpudb::grant_permission_system_system_read
 *                                "grant_permission_system_system_read":
 *                                Read-only access to all tables.
 *                        </ul>
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::GrantPermissionSystemResponse "Response" object
 *         containing the result of the operation.
 */
GrantPermissionSystemResponse grantPermissionSystem( const std::string& name,
                                                     const std::string& permission,
                                                     const std::map<std::string, std::string>& options ) const;

/**
 * Grants a system-level permission to a user or role.
 *
 * @param[in] name  Name of the user or role to which the permission will be
 *                  granted. Must be an existing user or role.
 * @param[in] permission  Permission to grant to the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::grant_permission_system_system_admin
 *                                "grant_permission_system_system_admin": Full
 *                                access to all data and system functions.
 *                            <li>@ref
 *                                gpudb::grant_permission_system_system_user_admin
 *                                "grant_permission_system_system_user_admin":
 *                                Access to administer users and roles that do
 *                                not have system_admin permission.
 *                            <li>@ref
 *                                gpudb::grant_permission_system_system_write
 *                                "grant_permission_system_system_write": Read
 *                                and write access to all tables.
 *                            <li>@ref
 *                                gpudb::grant_permission_system_system_read
 *                                "grant_permission_system_system_read":
 *                                Read-only access to all tables.
 *                        </ul>
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::GrantPermissionSystemResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GrantPermissionSystemResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
GrantPermissionSystemResponse& grantPermissionSystem( const std::string& name,
                                                      const std::string& permission,
                                                      const std::map<std::string, std::string>& options,
                                                      GrantPermissionSystemResponse& response_ ) const;

/**
 * Grants a table-level permission to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionTableRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::GrantPermissionTableResponse "Response" object
 *         containing the result of the operation.
 */
GrantPermissionTableResponse grantPermissionTable( const GrantPermissionTableRequest& request_ ) const;

/**
 * Grants a table-level permission to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantPermissionTableRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GrantPermissionTableResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GrantPermissionTableResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
GrantPermissionTableResponse& grantPermissionTable( const GrantPermissionTableRequest& request_,
                                                    GrantPermissionTableResponse& response_ ) const;

/**
 * Grants a table-level permission to a user or role.
 *
 * @param[in] name  Name of the user or role to which the permission will be
 *                  granted. Must be an existing user or role.
 * @param[in] permission  Permission to grant to the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::grant_permission_table_table_admin
 *                                "grant_permission_table_table_admin": Full
 *                                read/write and administrative access to the
 *                                table.
 *                            <li>@ref
 *                                gpudb::grant_permission_table_table_insert
 *                                "grant_permission_table_table_insert": Insert
 *                                access to the table.
 *                            <li>@ref
 *                                gpudb::grant_permission_table_table_update
 *                                "grant_permission_table_table_update": Update
 *                                access to the table.
 *                            <li>@ref
 *                                gpudb::grant_permission_table_table_delete
 *                                "grant_permission_table_table_delete": Delete
 *                                access to the table.
 *                            <li>@ref gpudb::grant_permission_table_table_read
 *                                "grant_permission_table_table_read": Read
 *                                access to the table.
 *                        </ul>
 * @param[in] tableName  Name of the table to which the permission grants
 *                       access, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table, view, or schema. If a schema, the
 *                       permission also applies to tables and views in the
 *                       schema.
 * @param[in] filterExpression  Optional filter expression to apply to this
 *                              grant.  Only rows that match the filter will be
 *                              affected. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::grant_permission_table_columns
 *                             "grant_permission_table_columns": Apply security
 *                             to these columns, comma-separated. The default
 *                             value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::GrantPermissionTableResponse "Response" object
 *         containing the result of the operation.
 */
GrantPermissionTableResponse grantPermissionTable( const std::string& name,
                                                   const std::string& permission,
                                                   const std::string& tableName,
                                                   const std::string& filterExpression,
                                                   const std::map<std::string, std::string>& options ) const;

/**
 * Grants a table-level permission to a user or role.
 *
 * @param[in] name  Name of the user or role to which the permission will be
 *                  granted. Must be an existing user or role.
 * @param[in] permission  Permission to grant to the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::grant_permission_table_table_admin
 *                                "grant_permission_table_table_admin": Full
 *                                read/write and administrative access to the
 *                                table.
 *                            <li>@ref
 *                                gpudb::grant_permission_table_table_insert
 *                                "grant_permission_table_table_insert": Insert
 *                                access to the table.
 *                            <li>@ref
 *                                gpudb::grant_permission_table_table_update
 *                                "grant_permission_table_table_update": Update
 *                                access to the table.
 *                            <li>@ref
 *                                gpudb::grant_permission_table_table_delete
 *                                "grant_permission_table_table_delete": Delete
 *                                access to the table.
 *                            <li>@ref gpudb::grant_permission_table_table_read
 *                                "grant_permission_table_table_read": Read
 *                                access to the table.
 *                        </ul>
 * @param[in] tableName  Name of the table to which the permission grants
 *                       access, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table, view, or schema. If a schema, the
 *                       permission also applies to tables and views in the
 *                       schema.
 * @param[in] filterExpression  Optional filter expression to apply to this
 *                              grant.  Only rows that match the filter will be
 *                              affected. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::grant_permission_table_columns
 *                             "grant_permission_table_columns": Apply security
 *                             to these columns, comma-separated. The default
 *                             value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::GrantPermissionTableResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::GrantPermissionTableResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
GrantPermissionTableResponse& grantPermissionTable( const std::string& name,
                                                    const std::string& permission,
                                                    const std::string& tableName,
                                                    const std::string& filterExpression,
                                                    const std::map<std::string, std::string>& options,
                                                    GrantPermissionTableResponse& response_ ) const;

/**
 * Grants membership in a role to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantRoleRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::GrantRoleResponse "Response" object containing the
 *         result of the operation.
 */
GrantRoleResponse grantRole( const GrantRoleRequest& request_ ) const;

/**
 * Grants membership in a role to a user or role.
 *
 * @param[in] request_  @ref gpudb::GrantRoleRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::GrantRoleResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::GrantRoleResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
GrantRoleResponse& grantRole( const GrantRoleRequest& request_,
                              GrantRoleResponse& response_ ) const;

/**
 * Grants membership in a role to a user or role.
 *
 * @param[in] role  Name of the role in which membership will be granted. Must
 *                  be an existing role.
 * @param[in] member  Name of the user or role that will be granted membership
 *                    in @a role. Must be an existing user or role.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::GrantRoleResponse "Response" object containing the
 *         result of the operation.
 */
GrantRoleResponse grantRole( const std::string& role,
                             const std::string& member,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Grants membership in a role to a user or role.
 *
 * @param[in] role  Name of the role in which membership will be granted. Must
 *                  be an existing role.
 * @param[in] member  Name of the user or role that will be granted membership
 *                    in @a role. Must be an existing user or role.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::GrantRoleResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::GrantRoleResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
GrantRoleResponse& grantRole( const std::string& role,
                              const std::string& member,
                              const std::map<std::string, std::string>& options,
                              GrantRoleResponse& response_ ) const;

/**
 * Checks if the specified user has the specified permission on the specified
 * object.
 *
 * @param[in] request_  @ref gpudb::HasPermissionRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::HasPermissionResponse "Response" object containing the
 *         result of the operation.
 */
HasPermissionResponse hasPermission( const HasPermissionRequest& request_ ) const;

/**
 * Checks if the specified user has the specified permission on the specified
 * object.
 *
 * @param[in] request_  @ref gpudb::HasPermissionRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::HasPermissionResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::HasPermissionResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
HasPermissionResponse& hasPermission( const HasPermissionRequest& request_,
                                      HasPermissionResponse& response_ ) const;

/**
 * Checks if the specified user has the specified permission on the specified
 * object.
 *
 * @param[in] principal  Name of the user for which the permission is being
 *                       checked. Must be an existing user. If blank, will use
 *                       the current user. The default value is ''.
 * @param[in] object  Name of object to check for the requested permission.  It
 *                    is recommended to use a fully-qualified name when
 *                    possible.
 * @param[in] objectType  The type of object being checked.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::has_permission_context
 *                                "has_permission_context": Context
 *                            <li>@ref gpudb::has_permission_credential
 *                                "has_permission_credential": Credential
 *                            <li>@ref gpudb::has_permission_datasink
 *                                "has_permission_datasink": Data Sink
 *                            <li>@ref gpudb::has_permission_datasource
 *                                "has_permission_datasource": Data Source
 *                            <li>@ref gpudb::has_permission_directory
 *                                "has_permission_directory": KiFS File
 *                                Directory
 *                            <li>@ref gpudb::has_permission_graph
 *                                "has_permission_graph": A Graph object
 *                            <li>@ref gpudb::has_permission_proc
 *                                "has_permission_proc": UDF Procedure
 *                            <li>@ref gpudb::has_permission_schema
 *                                "has_permission_schema": Schema
 *                            <li>@ref gpudb::has_permission_sql_proc
 *                                "has_permission_sql_proc": SQL Procedure
 *                            <li>@ref gpudb::has_permission_system
 *                                "has_permission_system": System-level access
 *                            <li>@ref gpudb::has_permission_table
 *                                "has_permission_table": Database Table
 *                            <li>@ref gpudb::has_permission_table_monitor
 *                                "has_permission_table_monitor": Table monitor
 *                        </ul>
 * @param[in] permission  Permission to check for.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::has_permission_admin
 *                                "has_permission_admin": Full read/write and
 *                                administrative access on the object.
 *                            <li>@ref gpudb::has_permission_connect
 *                                "has_permission_connect": Connect access on
 *                                the given data source or data sink.
 *                            <li>@ref gpudb::has_permission_create
 *                                "has_permission_create": Ability to create
 *                                new objects of this type.
 *                            <li>@ref gpudb::has_permission_delete
 *                                "has_permission_delete": Delete rows from
 *                                tables.
 *                            <li>@ref gpudb::has_permission_execute
 *                                "has_permission_execute": Ability to Execute
 *                                the Procedure object.
 *                            <li>@ref gpudb::has_permission_insert
 *                                "has_permission_insert": Insert access to
 *                                tables.
 *                            <li>@ref gpudb::has_permission_read
 *                                "has_permission_read": Ability to read, list
 *                                and use the object.
 *                            <li>@ref gpudb::has_permission_update
 *                                "has_permission_update": Update access to the
 *                                table.
 *                            <li>@ref gpudb::has_permission_user_admin
 *                                "has_permission_user_admin": Access to
 *                                administer users and roles that do not have
 *                                system_admin permission.
 *                            <li>@ref gpudb::has_permission_write
 *                                "has_permission_write": Access to write,
 *                                change and delete objects.
 *                        </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::has_permission_no_error_if_not_exists
 *                             "has_permission_no_error_if_not_exists": If @ref
 *                             gpudb::has_permission_false "false" will return
 *                             an error if the provided @a object does not
 *                             exist or is blank. If @ref
 *                             gpudb::has_permission_true "true" then it will
 *                             return @ref gpudb::has_permission_false "false"
 *                             for @ref
 *                             gpudb::HasPermissionResponse::hasPermission
 *                             "hasPermission".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::has_permission_true
 *                                     "has_permission_true"
 *                                 <li>@ref gpudb::has_permission_false
 *                                     "has_permission_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::has_permission_false
 *                             "has_permission_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::HasPermissionResponse "Response" object containing the
 *         result of the operation.
 */
HasPermissionResponse hasPermission( const std::string& principal,
                                     const std::string& object,
                                     const std::string& objectType,
                                     const std::string& permission,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Checks if the specified user has the specified permission on the specified
 * object.
 *
 * @param[in] principal  Name of the user for which the permission is being
 *                       checked. Must be an existing user. If blank, will use
 *                       the current user. The default value is ''.
 * @param[in] object  Name of object to check for the requested permission.  It
 *                    is recommended to use a fully-qualified name when
 *                    possible.
 * @param[in] objectType  The type of object being checked.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::has_permission_context
 *                                "has_permission_context": Context
 *                            <li>@ref gpudb::has_permission_credential
 *                                "has_permission_credential": Credential
 *                            <li>@ref gpudb::has_permission_datasink
 *                                "has_permission_datasink": Data Sink
 *                            <li>@ref gpudb::has_permission_datasource
 *                                "has_permission_datasource": Data Source
 *                            <li>@ref gpudb::has_permission_directory
 *                                "has_permission_directory": KiFS File
 *                                Directory
 *                            <li>@ref gpudb::has_permission_graph
 *                                "has_permission_graph": A Graph object
 *                            <li>@ref gpudb::has_permission_proc
 *                                "has_permission_proc": UDF Procedure
 *                            <li>@ref gpudb::has_permission_schema
 *                                "has_permission_schema": Schema
 *                            <li>@ref gpudb::has_permission_sql_proc
 *                                "has_permission_sql_proc": SQL Procedure
 *                            <li>@ref gpudb::has_permission_system
 *                                "has_permission_system": System-level access
 *                            <li>@ref gpudb::has_permission_table
 *                                "has_permission_table": Database Table
 *                            <li>@ref gpudb::has_permission_table_monitor
 *                                "has_permission_table_monitor": Table monitor
 *                        </ul>
 * @param[in] permission  Permission to check for.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::has_permission_admin
 *                                "has_permission_admin": Full read/write and
 *                                administrative access on the object.
 *                            <li>@ref gpudb::has_permission_connect
 *                                "has_permission_connect": Connect access on
 *                                the given data source or data sink.
 *                            <li>@ref gpudb::has_permission_create
 *                                "has_permission_create": Ability to create
 *                                new objects of this type.
 *                            <li>@ref gpudb::has_permission_delete
 *                                "has_permission_delete": Delete rows from
 *                                tables.
 *                            <li>@ref gpudb::has_permission_execute
 *                                "has_permission_execute": Ability to Execute
 *                                the Procedure object.
 *                            <li>@ref gpudb::has_permission_insert
 *                                "has_permission_insert": Insert access to
 *                                tables.
 *                            <li>@ref gpudb::has_permission_read
 *                                "has_permission_read": Ability to read, list
 *                                and use the object.
 *                            <li>@ref gpudb::has_permission_update
 *                                "has_permission_update": Update access to the
 *                                table.
 *                            <li>@ref gpudb::has_permission_user_admin
 *                                "has_permission_user_admin": Access to
 *                                administer users and roles that do not have
 *                                system_admin permission.
 *                            <li>@ref gpudb::has_permission_write
 *                                "has_permission_write": Access to write,
 *                                change and delete objects.
 *                        </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::has_permission_no_error_if_not_exists
 *                             "has_permission_no_error_if_not_exists": If @ref
 *                             gpudb::has_permission_false "false" will return
 *                             an error if the provided @a object does not
 *                             exist or is blank. If @ref
 *                             gpudb::has_permission_true "true" then it will
 *                             return @ref gpudb::has_permission_false "false"
 *                             for @ref
 *                             gpudb::HasPermissionResponse::hasPermission
 *                             "hasPermission".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::has_permission_true
 *                                     "has_permission_true"
 *                                 <li>@ref gpudb::has_permission_false
 *                                     "has_permission_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::has_permission_false
 *                             "has_permission_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::HasPermissionResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::HasPermissionResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
HasPermissionResponse& hasPermission( const std::string& principal,
                                      const std::string& object,
                                      const std::string& objectType,
                                      const std::string& permission,
                                      const std::map<std::string, std::string>& options,
                                      HasPermissionResponse& response_ ) const;

/**
 * Checks the existence of a proc with the given name.
 *
 * @param[in] request_  @ref gpudb::HasProcRequest "Request" object containing
 *                      the parameters for the operation.
 *
 * @return @ref gpudb::HasProcResponse "Response" object containing the result
 *         of the operation.
 */
HasProcResponse hasProc( const HasProcRequest& request_ ) const;

/**
 * Checks the existence of a proc with the given name.
 *
 * @param[in] request_  @ref gpudb::HasProcRequest "Request" object containing
 *                      the parameters for the operation.
 * @param[out] response_  @ref gpudb::HasProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::HasProcResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
HasProcResponse& hasProc( const HasProcRequest& request_,
                          HasProcResponse& response_ ) const;

/**
 * Checks the existence of a proc with the given name.
 *
 * @param[in] procName  Name of the proc to check for existence.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::HasProcResponse "Response" object containing the result
 *         of the operation.
 */
HasProcResponse hasProc( const std::string& procName,
                         const std::map<std::string, std::string>& options ) const;

/**
 * Checks the existence of a proc with the given name.
 *
 * @param[in] procName  Name of the proc to check for existence.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::HasProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::HasProcResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
HasProcResponse& hasProc( const std::string& procName,
                          const std::map<std::string, std::string>& options,
                          HasProcResponse& response_ ) const;

/**
 * Checks if the specified user has the specified role.
 *
 * @param[in] request_  @ref gpudb::HasRoleRequest "Request" object containing
 *                      the parameters for the operation.
 *
 * @return @ref gpudb::HasRoleResponse "Response" object containing the result
 *         of the operation.
 */
HasRoleResponse hasRole( const HasRoleRequest& request_ ) const;

/**
 * Checks if the specified user has the specified role.
 *
 * @param[in] request_  @ref gpudb::HasRoleRequest "Request" object containing
 *                      the parameters for the operation.
 * @param[out] response_  @ref gpudb::HasRoleResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::HasRoleResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
HasRoleResponse& hasRole( const HasRoleRequest& request_,
                          HasRoleResponse& response_ ) const;

/**
 * Checks if the specified user has the specified role.
 *
 * @param[in] principal  Name of the user for which role membersih is being
 *                       checked. Must be an existing user. If blank, will use
 *                       the current user. The default value is ''.
 * @param[in] role  Name of role to check for membership.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::has_role_no_error_if_not_exists
 *                             "has_role_no_error_if_not_exists": If @ref
 *                             gpudb::has_role_false "false" will return an
 *                             error if the provided @a role does not exist or
 *                             is blank. If @ref gpudb::has_role_true "true"
 *                             then it will return @ref gpudb::has_role_false
 *                             "false" for @ref gpudb::HasRoleResponse::hasRole
 *                             "hasRole".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::has_role_true
 *                                     "has_role_true"
 *                                 <li>@ref gpudb::has_role_false
 *                                     "has_role_false"
 *                             </ul>
 *                             The default value is @ref gpudb::has_role_false
 *                             "has_role_false".
 *                         <li>@ref gpudb::has_role_only_direct
 *                             "has_role_only_direct": If @ref
 *                             gpudb::has_role_false "false" will search
 *                             recursively if the @a principal is a member of
 *                             @a role.  If @ref gpudb::has_role_true "true"
 *                             then @a principal must directly be a member of
 *                             @a role.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::has_role_true
 *                                     "has_role_true"
 *                                 <li>@ref gpudb::has_role_false
 *                                     "has_role_false"
 *                             </ul>
 *                             The default value is @ref gpudb::has_role_false
 *                             "has_role_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::HasRoleResponse "Response" object containing the result
 *         of the operation.
 */
HasRoleResponse hasRole( const std::string& principal,
                         const std::string& role,
                         const std::map<std::string, std::string>& options ) const;

/**
 * Checks if the specified user has the specified role.
 *
 * @param[in] principal  Name of the user for which role membersih is being
 *                       checked. Must be an existing user. If blank, will use
 *                       the current user. The default value is ''.
 * @param[in] role  Name of role to check for membership.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::has_role_no_error_if_not_exists
 *                             "has_role_no_error_if_not_exists": If @ref
 *                             gpudb::has_role_false "false" will return an
 *                             error if the provided @a role does not exist or
 *                             is blank. If @ref gpudb::has_role_true "true"
 *                             then it will return @ref gpudb::has_role_false
 *                             "false" for @ref gpudb::HasRoleResponse::hasRole
 *                             "hasRole".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::has_role_true
 *                                     "has_role_true"
 *                                 <li>@ref gpudb::has_role_false
 *                                     "has_role_false"
 *                             </ul>
 *                             The default value is @ref gpudb::has_role_false
 *                             "has_role_false".
 *                         <li>@ref gpudb::has_role_only_direct
 *                             "has_role_only_direct": If @ref
 *                             gpudb::has_role_false "false" will search
 *                             recursively if the @a principal is a member of
 *                             @a role.  If @ref gpudb::has_role_true "true"
 *                             then @a principal must directly be a member of
 *                             @a role.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::has_role_true
 *                                     "has_role_true"
 *                                 <li>@ref gpudb::has_role_false
 *                                     "has_role_false"
 *                             </ul>
 *                             The default value is @ref gpudb::has_role_false
 *                             "has_role_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::HasRoleResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::HasRoleResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
HasRoleResponse& hasRole( const std::string& principal,
                          const std::string& role,
                          const std::map<std::string, std::string>& options,
                          HasRoleResponse& response_ ) const;

/**
 * Checks for the existence of a schema with the given name.
 *
 * @param[in] request_  @ref gpudb::HasSchemaRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::HasSchemaResponse "Response" object containing the
 *         result of the operation.
 */
HasSchemaResponse hasSchema( const HasSchemaRequest& request_ ) const;

/**
 * Checks for the existence of a schema with the given name.
 *
 * @param[in] request_  @ref gpudb::HasSchemaRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::HasSchemaResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::HasSchemaResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
HasSchemaResponse& hasSchema( const HasSchemaRequest& request_,
                              HasSchemaResponse& response_ ) const;

/**
 * Checks for the existence of a schema with the given name.
 *
 * @param[in] schemaName  Name of the schema to check for existence, in root,
 *                        using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::HasSchemaResponse "Response" object containing the
 *         result of the operation.
 */
HasSchemaResponse hasSchema( const std::string& schemaName,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Checks for the existence of a schema with the given name.
 *
 * @param[in] schemaName  Name of the schema to check for existence, in root,
 *                        using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::HasSchemaResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::HasSchemaResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
HasSchemaResponse& hasSchema( const std::string& schemaName,
                              const std::map<std::string, std::string>& options,
                              HasSchemaResponse& response_ ) const;

/**
 * Checks for the existence of a table with the given name.
 *
 * @param[in] request_  @ref gpudb::HasTableRequest "Request" object containing
 *                      the parameters for the operation.
 *
 * @return @ref gpudb::HasTableResponse "Response" object containing the result
 *         of the operation.
 */
HasTableResponse hasTable( const HasTableRequest& request_ ) const;

/**
 * Checks for the existence of a table with the given name.
 *
 * @param[in] request_  @ref gpudb::HasTableRequest "Request" object containing
 *                      the parameters for the operation.
 * @param[out] response_  @ref gpudb::HasTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::HasTableResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
HasTableResponse& hasTable( const HasTableRequest& request_,
                            HasTableResponse& response_ ) const;

/**
 * Checks for the existence of a table with the given name.
 *
 * @param[in] tableName  Name of the table to check for existence, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::HasTableResponse "Response" object containing the result
 *         of the operation.
 */
HasTableResponse hasTable( const std::string& tableName,
                           const std::map<std::string, std::string>& options ) const;

/**
 * Checks for the existence of a table with the given name.
 *
 * @param[in] tableName  Name of the table to check for existence, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::HasTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::HasTableResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
HasTableResponse& hasTable( const std::string& tableName,
                            const std::map<std::string, std::string>& options,
                            HasTableResponse& response_ ) const;

/**
 * Check for the existence of a type.
 *
 * @param[in] request_  @ref gpudb::HasTypeRequest "Request" object containing
 *                      the parameters for the operation.
 *
 * @return @ref gpudb::HasTypeResponse "Response" object containing the result
 *         of the operation.
 */
HasTypeResponse hasType( const HasTypeRequest& request_ ) const;

/**
 * Check for the existence of a type.
 *
 * @param[in] request_  @ref gpudb::HasTypeRequest "Request" object containing
 *                      the parameters for the operation.
 * @param[out] response_  @ref gpudb::HasTypeResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::HasTypeResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
HasTypeResponse& hasType( const HasTypeRequest& request_,
                          HasTypeResponse& response_ ) const;

/**
 * Check for the existence of a type.
 *
 * @param[in] typeId  Id of the type returned in response to @ref
 *                    createType(const std::string&, const std::string&, const std::map<std::string, std::vector<std::string> >&, const std::map<std::string, std::string>&) const
 *                    "createType" request.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::HasTypeResponse "Response" object containing the result
 *         of the operation.
 */
HasTypeResponse hasType( const std::string& typeId,
                         const std::map<std::string, std::string>& options ) const;

/**
 * Check for the existence of a type.
 *
 * @param[in] typeId  Id of the type returned in response to @ref
 *                    createType(const std::string&, const std::string&, const std::map<std::string, std::vector<std::string> >&, const std::map<std::string, std::string>&) const
 *                    "createType" request.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::HasTypeResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::HasTypeResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
HasTypeResponse& hasType( const std::string& typeId,
                          const std::map<std::string, std::string>& options,
                          HasTypeResponse& response_ ) const;

/** @private */
ImportModelResponse importModel( const ImportModelRequest& request_ ) const;

/** @private */
ImportModelResponse& importModel( const ImportModelRequest& request_,
                                  ImportModelResponse& response_ ) const;

/** @private */
ImportModelResponse importModel( const std::string& modelName,
                                 const std::string& registryName,
                                 const std::string& container,
                                 const std::string& runFunction,
                                 const std::string& modelType,
                                 const std::map<std::string, std::string>& options ) const;

/** @private */
ImportModelResponse& importModel( const std::string& modelName,
                                  const std::string& registryName,
                                  const std::string& container,
                                  const std::string& runFunction,
                                  const std::string& modelType,
                                  const std::map<std::string, std::string>& options,
                                  ImportModelResponse& response_ ) const;

/**
 * Adds multiple records to the specified table. The operation is synchronous,
 * meaning that a response will not be returned until all the records are fully
 * inserted and available. The response payload provides the counts of the
 * number of records actually inserted and/or updated, and can provide the
 * unique identifier of each added record.
 *
 * The @ref gpudb::RawInsertRecordsRequest::options "options" parameter can be
 * used to customize this function's behavior.
 *
 * The @ref gpudb::insert_records_update_on_existing_pk "update_on_existing_pk"
 * option specifies the record collision policy for inserting into a table with
 * a <a href="../../../concepts/tables/#primary-keys" target="_top">primary
 * key</a>, but is ignored if no primary key exists.
 *
 * The @ref gpudb::insert_records_return_record_ids "return_record_ids" option
 * indicates that the database should return the unique identifiers of inserted
 * records.
 *
 * @param[in] request_  @ref gpudb::RawInsertRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::InsertRecordsResponse "Response" object containing the
 *         result of the operation.
 */
InsertRecordsResponse insertRecordsRaw( const RawInsertRecordsRequest& request_ ) const;

/**
 * Adds multiple records to the specified table. The operation is synchronous,
 * meaning that a response will not be returned until all the records are fully
 * inserted and available. The response payload provides the counts of the
 * number of records actually inserted and/or updated, and can provide the
 * unique identifier of each added record.
 *
 * The @ref gpudb::RawInsertRecordsRequest::options "options" parameter can be
 * used to customize this function's behavior.
 *
 * The @ref gpudb::insert_records_update_on_existing_pk "update_on_existing_pk"
 * option specifies the record collision policy for inserting into a table with
 * a <a href="../../../concepts/tables/#primary-keys" target="_top">primary
 * key</a>, but is ignored if no primary key exists.
 *
 * The @ref gpudb::insert_records_return_record_ids "return_record_ids" option
 * indicates that the database should return the unique identifiers of inserted
 * records.
 *
 * @param[in] request_  @ref gpudb::RawInsertRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::InsertRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::InsertRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
InsertRecordsResponse& insertRecordsRaw( const RawInsertRecordsRequest& request_,
                                         InsertRecordsResponse& response_ ) const;

/**
 * Adds multiple records to the specified table. The operation is synchronous,
 * meaning that a response will not be returned until all the records are fully
 * inserted and available. The response payload provides the counts of the
 * number of records actually inserted and/or updated, and can provide the
 * unique identifier of each added record.
 *
 * The @ref gpudb::InsertRecordsRequest::options "options" parameter can be
 * used to customize this function's behavior.
 *
 * The @ref gpudb::insert_records_update_on_existing_pk "update_on_existing_pk"
 * option specifies the record collision policy for inserting into a table with
 * a <a href="../../../concepts/tables/#primary-keys" target="_top">primary
 * key</a>, but is ignored if no primary key exists.
 *
 * The @ref gpudb::insert_records_return_record_ids "return_record_ids" option
 * indicates that the database should return the unique identifiers of inserted
 * records.
 *
 * @tparam TRequest  The type of object being added.
 *
 * @param[in] request_  @ref gpudb::InsertRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::InsertRecordsResponse "Response" object containing the
 *         result of the operation.
 */
template<typename TRequest>
InsertRecordsResponse insertRecords( const InsertRecordsRequest<TRequest>& request_ ) const
{
    RawInsertRecordsRequest actualRequest_;
    actualRequest_.tableName = request_.tableName;
    avro::encode(actualRequest_.list, request_.data, this->m_threadCount, this->m_executor);
    actualRequest_.options = request_.options;
    InsertRecordsResponse actualResponse_;
    submitRequest("/insert/records", actualRequest_, actualResponse_, true);
    return actualResponse_;
}

/**
 * Adds multiple records to the specified table. The operation is synchronous,
 * meaning that a response will not be returned until all the records are fully
 * inserted and available. The response payload provides the counts of the
 * number of records actually inserted and/or updated, and can provide the
 * unique identifier of each added record.
 *
 * The @ref gpudb::InsertRecordsRequest::options "options" parameter can be
 * used to customize this function's behavior.
 *
 * The @ref gpudb::insert_records_update_on_existing_pk "update_on_existing_pk"
 * option specifies the record collision policy for inserting into a table with
 * a <a href="../../../concepts/tables/#primary-keys" target="_top">primary
 * key</a>, but is ignored if no primary key exists.
 *
 * The @ref gpudb::insert_records_return_record_ids "return_record_ids" option
 * indicates that the database should return the unique identifiers of inserted
 * records.
 *
 * @tparam TRequest  The type of object being added.
 *
 * @param[in] request_  @ref gpudb::InsertRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::InsertRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::InsertRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
template<typename TRequest>
InsertRecordsResponse& insertRecords( const InsertRecordsRequest<TRequest>& request_,
                                      InsertRecordsResponse& response_ ) const
{
    RawInsertRecordsRequest actualRequest_;
    actualRequest_.tableName = request_.tableName;
    avro::encode(actualRequest_.list, request_.data, this->m_threadCount, this->m_executor);
    actualRequest_.options = request_.options;
    submitRequest("/insert/records", actualRequest_, response_, true);
    return response_;
}

/**
 * Adds multiple records to the specified table. The operation is synchronous,
 * meaning that a response will not be returned until all the records are fully
 * inserted and available. The response payload provides the counts of the
 * number of records actually inserted and/or updated, and can provide the
 * unique identifier of each added record.
 *
 * The @a options parameter can be used to customize this function's behavior.
 *
 * The @ref gpudb::insert_records_update_on_existing_pk "update_on_existing_pk"
 * option specifies the record collision policy for inserting into a table with
 * a <a href="../../../concepts/tables/#primary-keys" target="_top">primary
 * key</a>, but is ignored if no primary key exists.
 *
 * The @ref gpudb::insert_records_return_record_ids "return_record_ids" option
 * indicates that the database should return the unique identifiers of inserted
 * records.
 *
 * @tparam TRequest  The type of object being added.
 *
 * @param[in] tableName  Name of table to which the records are to be added, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] data  An array of binary-encoded data for the records to be
 *                  added. All records must be of the same type as that of the
 *                  table. Empty array if @a listEncoding is @a json.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::insert_records_update_on_existing_pk
 *                             "insert_records_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::insert_records_true "true", any existing
 *                             table record with primary key values that match
 *                             those of a record being inserted will be
 *                             replaced by that new record (the new data will
 *                             be "upserted"). If set to @ref
 *                             gpudb::insert_records_false "false", any
 *                             existing table record with primary key values
 *                             that match those of a record being inserted will
 *                             remain unchanged, while the new record will be
 *                             rejected and the error handled as determined by
 *                             @ref gpudb::insert_records_ignore_existing_pk
 *                             "ignore_existing_pk", @ref
 *                             gpudb::insert_records_allow_partial_batch
 *                             "allow_partial_batch", & @ref
 *                             gpudb::insert_records_return_individual_errors
 *                             "return_individual_errors".  If the specified
 *                             table does not have a primary key, then this
 *                             option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true": Upsert new
 *                                     records when primary keys match existing
 *                                     records
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false": Reject new
 *                                     records when primary keys match existing
 *                                     records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                         <li>@ref gpudb::insert_records_ignore_existing_pk
 *                             "insert_records_ignore_existing_pk": Specifies
 *                             the record collision error-suppression policy
 *                             for inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             not in upsert mode (upsert mode is disabled when
 *                             @ref gpudb::insert_records_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_false "false").  If set to
 *                             @ref gpudb::insert_records_true "true", any
 *                             record being inserted that is rejected for
 *                             having primary key values that match those of an
 *                             existing table record will be ignored with no
 *                             error generated.  If @ref
 *                             gpudb::insert_records_false "false", the
 *                             rejection of any record for having primary key
 *                             values matching an existing record will result
 *                             in an error being reported, as determined by
 *                             @ref gpudb::insert_records_allow_partial_batch
 *                             "allow_partial_batch" & @ref
 *                             gpudb::insert_records_return_individual_errors
 *                             "return_individual_errors".  If the specified
 *                             table does not have a primary key or if upsert
 *                             mode is in effect (@ref
 *                             gpudb::insert_records_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_true "true"), then this
 *                             option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true": Ignore new
 *                                     records whose primary key values collide
 *                                     with those of existing records
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false": Treat as errors
 *                                     any new records whose primary key values
 *                                     collide with those of existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                         <li>@ref gpudb::insert_records_return_record_ids
 *                             "insert_records_return_record_ids": If @ref
 *                             gpudb::insert_records_true "true" then return
 *                             the internal record id along for each inserted
 *                             record.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true"
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                         <li>@ref gpudb::insert_records_truncate_strings
 *                             "insert_records_truncate_strings": If set to
 *                             @ref gpudb::insert_records_true "true", any
 *                             strings which are too long for their target
 *                             charN string columns will be truncated to fit.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true"
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                         <li>@ref
 *                             gpudb::insert_records_return_individual_errors
 *                             "insert_records_return_individual_errors": If
 *                             set to @ref gpudb::insert_records_true "true",
 *                             success will always be returned, and any errors
 *                             found will be included in the info map.  The
 *                             "bad_record_indices" entry is a comma-separated
 *                             list of bad records (0-based).  And if so, there
 *                             will also be an "error_N" entry for each record
 *                             with an error, where N is the index (0-based).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true"
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                         <li>@ref gpudb::insert_records_allow_partial_batch
 *                             "insert_records_allow_partial_batch": If set to
 *                             @ref gpudb::insert_records_true "true", all
 *                             correct records will be inserted and incorrect
 *                             records will be rejected and reported.
 *                             Otherwise, the entire batch will be rejected if
 *                             any records are incorrect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true"
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                         <li>@ref gpudb::insert_records_dry_run
 *                             "insert_records_dry_run": If set to @ref
 *                             gpudb::insert_records_true "true", no data will
 *                             be saved and any errors will be returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true"
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::InsertRecordsResponse "Response" object containing the
 *         result of the operation.
 */
template<typename TRequest>
InsertRecordsResponse insertRecords( const std::string& tableName,
                                     const std::vector<TRequest>& data,
                                     const std::map<std::string, std::string>& options ) const
{
    RawInsertRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    avro::encode(actualRequest_.list, data, this->m_threadCount, this->m_executor);
    actualRequest_.options = options;
    InsertRecordsResponse actualResponse_;
    submitRequest("/insert/records", actualRequest_, actualResponse_, true);
    return actualResponse_;
}

/**
 * Adds multiple records to the specified table. The operation is synchronous,
 * meaning that a response will not be returned until all the records are fully
 * inserted and available. The response payload provides the counts of the
 * number of records actually inserted and/or updated, and can provide the
 * unique identifier of each added record.
 *
 * The @a options parameter can be used to customize this function's behavior.
 *
 * The @ref gpudb::insert_records_update_on_existing_pk "update_on_existing_pk"
 * option specifies the record collision policy for inserting into a table with
 * a <a href="../../../concepts/tables/#primary-keys" target="_top">primary
 * key</a>, but is ignored if no primary key exists.
 *
 * The @ref gpudb::insert_records_return_record_ids "return_record_ids" option
 * indicates that the database should return the unique identifiers of inserted
 * records.
 *
 * @tparam TRequest  The type of object being added.
 *
 * @param[in] tableName  Name of table to which the records are to be added, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table.
 * @param[in] data  An array of binary-encoded data for the records to be
 *                  added. All records must be of the same type as that of the
 *                  table. Empty array if @a listEncoding is @a json.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::insert_records_update_on_existing_pk
 *                             "insert_records_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::insert_records_true "true", any existing
 *                             table record with primary key values that match
 *                             those of a record being inserted will be
 *                             replaced by that new record (the new data will
 *                             be "upserted"). If set to @ref
 *                             gpudb::insert_records_false "false", any
 *                             existing table record with primary key values
 *                             that match those of a record being inserted will
 *                             remain unchanged, while the new record will be
 *                             rejected and the error handled as determined by
 *                             @ref gpudb::insert_records_ignore_existing_pk
 *                             "ignore_existing_pk", @ref
 *                             gpudb::insert_records_allow_partial_batch
 *                             "allow_partial_batch", & @ref
 *                             gpudb::insert_records_return_individual_errors
 *                             "return_individual_errors".  If the specified
 *                             table does not have a primary key, then this
 *                             option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true": Upsert new
 *                                     records when primary keys match existing
 *                                     records
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false": Reject new
 *                                     records when primary keys match existing
 *                                     records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                         <li>@ref gpudb::insert_records_ignore_existing_pk
 *                             "insert_records_ignore_existing_pk": Specifies
 *                             the record collision error-suppression policy
 *                             for inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             not in upsert mode (upsert mode is disabled when
 *                             @ref gpudb::insert_records_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_false "false").  If set to
 *                             @ref gpudb::insert_records_true "true", any
 *                             record being inserted that is rejected for
 *                             having primary key values that match those of an
 *                             existing table record will be ignored with no
 *                             error generated.  If @ref
 *                             gpudb::insert_records_false "false", the
 *                             rejection of any record for having primary key
 *                             values matching an existing record will result
 *                             in an error being reported, as determined by
 *                             @ref gpudb::insert_records_allow_partial_batch
 *                             "allow_partial_batch" & @ref
 *                             gpudb::insert_records_return_individual_errors
 *                             "return_individual_errors".  If the specified
 *                             table does not have a primary key or if upsert
 *                             mode is in effect (@ref
 *                             gpudb::insert_records_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_true "true"), then this
 *                             option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true": Ignore new
 *                                     records whose primary key values collide
 *                                     with those of existing records
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false": Treat as errors
 *                                     any new records whose primary key values
 *                                     collide with those of existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                         <li>@ref gpudb::insert_records_return_record_ids
 *                             "insert_records_return_record_ids": If @ref
 *                             gpudb::insert_records_true "true" then return
 *                             the internal record id along for each inserted
 *                             record.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true"
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                         <li>@ref gpudb::insert_records_truncate_strings
 *                             "insert_records_truncate_strings": If set to
 *                             @ref gpudb::insert_records_true "true", any
 *                             strings which are too long for their target
 *                             charN string columns will be truncated to fit.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true"
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                         <li>@ref
 *                             gpudb::insert_records_return_individual_errors
 *                             "insert_records_return_individual_errors": If
 *                             set to @ref gpudb::insert_records_true "true",
 *                             success will always be returned, and any errors
 *                             found will be included in the info map.  The
 *                             "bad_record_indices" entry is a comma-separated
 *                             list of bad records (0-based).  And if so, there
 *                             will also be an "error_N" entry for each record
 *                             with an error, where N is the index (0-based).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true"
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                         <li>@ref gpudb::insert_records_allow_partial_batch
 *                             "insert_records_allow_partial_batch": If set to
 *                             @ref gpudb::insert_records_true "true", all
 *                             correct records will be inserted and incorrect
 *                             records will be rejected and reported.
 *                             Otherwise, the entire batch will be rejected if
 *                             any records are incorrect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true"
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                         <li>@ref gpudb::insert_records_dry_run
 *                             "insert_records_dry_run": If set to @ref
 *                             gpudb::insert_records_true "true", no data will
 *                             be saved and any errors will be returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_true
 *                                     "insert_records_true"
 *                                 <li>@ref gpudb::insert_records_false
 *                                     "insert_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_false
 *                             "insert_records_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::InsertRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::InsertRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
template<typename TRequest>
InsertRecordsResponse& insertRecords( const std::string& tableName,
                                      const std::vector<TRequest>& data,
                                      const std::map<std::string, std::string>& options,
                                      InsertRecordsResponse& response_ ) const
{
    RawInsertRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    avro::encode(actualRequest_.list, data, this->m_threadCount, this->m_executor);
    actualRequest_.options = options;
    submitRequest("/insert/records", actualRequest_, response_, true);
    return response_;
}

/**
 * Reads from one or more files and inserts the data into a new or existing
 * table. The source data can be located either in <a
 * href="../../../tools/kifs/" target="_top">KiFS</a>; on the cluster,
 * accessible to the database; or remotely, accessible via a pre-defined
 * external <a href="../../../concepts/data_sources/" target="_top">data
 * source</a>.
 *
 *
 * For delimited text files, there are two loading schemes: positional and
 * name-based. The name-based loading scheme is enabled when the file has a
 * header present and @ref gpudb::insert_records_from_files_text_has_header
 * "text_has_header" is set to @ref gpudb::insert_records_from_files_true
 * "true". In this scheme, the source file(s) field names must match the target
 * table's column names exactly; however, the source file can have more fields
 * than the target table has columns. If @ref
 * gpudb::insert_records_from_files_error_handling "error_handling" is set to
 * @ref gpudb::insert_records_from_files_permissive "permissive", the source
 * file can have fewer fields than the target table has columns. If the
 * name-based loading scheme is being used, names matching the file header's
 * names may be provided to @ref
 * gpudb::insert_records_from_files_columns_to_load "columns_to_load" instead
 * of numbers, but ranges are not supported.
 *
 * Note: Due to data being loaded in parallel, there is no insertion order
 * guaranteed.  For tables with primary keys, in the case of a primary key
 * collision, this means it is indeterminate which record will be inserted
 * first and remain, while the rest of the colliding key records are discarded.
 *
 * Returns once all files are processed.
 *
 * @param[in] request_  @ref gpudb::InsertRecordsFromFilesRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::InsertRecordsFromFilesResponse "Response" object
 *         containing the result of the operation.
 */
InsertRecordsFromFilesResponse insertRecordsFromFiles( const InsertRecordsFromFilesRequest& request_ ) const;

/**
 * Reads from one or more files and inserts the data into a new or existing
 * table. The source data can be located either in <a
 * href="../../../tools/kifs/" target="_top">KiFS</a>; on the cluster,
 * accessible to the database; or remotely, accessible via a pre-defined
 * external <a href="../../../concepts/data_sources/" target="_top">data
 * source</a>.
 *
 *
 * For delimited text files, there are two loading schemes: positional and
 * name-based. The name-based loading scheme is enabled when the file has a
 * header present and @ref gpudb::insert_records_from_files_text_has_header
 * "text_has_header" is set to @ref gpudb::insert_records_from_files_true
 * "true". In this scheme, the source file(s) field names must match the target
 * table's column names exactly; however, the source file can have more fields
 * than the target table has columns. If @ref
 * gpudb::insert_records_from_files_error_handling "error_handling" is set to
 * @ref gpudb::insert_records_from_files_permissive "permissive", the source
 * file can have fewer fields than the target table has columns. If the
 * name-based loading scheme is being used, names matching the file header's
 * names may be provided to @ref
 * gpudb::insert_records_from_files_columns_to_load "columns_to_load" instead
 * of numbers, but ranges are not supported.
 *
 * Note: Due to data being loaded in parallel, there is no insertion order
 * guaranteed.  For tables with primary keys, in the case of a primary key
 * collision, this means it is indeterminate which record will be inserted
 * first and remain, while the rest of the colliding key records are discarded.
 *
 * Returns once all files are processed.
 *
 * @param[in] request_  @ref gpudb::InsertRecordsFromFilesRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::InsertRecordsFromFilesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::InsertRecordsFromFilesResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
InsertRecordsFromFilesResponse& insertRecordsFromFiles( const InsertRecordsFromFilesRequest& request_,
                                                        InsertRecordsFromFilesResponse& response_ ) const;

/**
 * Reads from one or more files and inserts the data into a new or existing
 * table. The source data can be located either in <a
 * href="../../../tools/kifs/" target="_top">KiFS</a>; on the cluster,
 * accessible to the database; or remotely, accessible via a pre-defined
 * external <a href="../../../concepts/data_sources/" target="_top">data
 * source</a>.
 *
 *
 * For delimited text files, there are two loading schemes: positional and
 * name-based. The name-based loading scheme is enabled when the file has a
 * header present and @ref gpudb::insert_records_from_files_text_has_header
 * "text_has_header" is set to @ref gpudb::insert_records_from_files_true
 * "true". In this scheme, the source file(s) field names must match the target
 * table's column names exactly; however, the source file can have more fields
 * than the target table has columns. If @ref
 * gpudb::insert_records_from_files_error_handling "error_handling" is set to
 * @ref gpudb::insert_records_from_files_permissive "permissive", the source
 * file can have fewer fields than the target table has columns. If the
 * name-based loading scheme is being used, names matching the file header's
 * names may be provided to @ref
 * gpudb::insert_records_from_files_columns_to_load "columns_to_load" instead
 * of numbers, but ranges are not supported.
 *
 * Note: Due to data being loaded in parallel, there is no insertion order
 * guaranteed.  For tables with primary keys, in the case of a primary key
 * collision, this means it is indeterminate which record will be inserted
 * first and remain, while the rest of the colliding key records are discarded.
 *
 * Returns once all files are processed.
 *
 * @param[in] tableName  Name of the table into which the data will be
 *                       inserted, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. If the table
 *                       does not exist, the table will be created using either
 *                       an existing @ref
 *                       gpudb::insert_records_from_files_type_id "type_id" or
 *                       the type inferred from the file, and the new table
 *                       name will have to meet standard <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.
 * @param[in] filepaths  A list of file paths from which data will be sourced;
 *                       For paths in <a href="../../../tools/kifs/"
 *                       target="_top">KiFS</a>, use the uri prefix of kifs://
 *                       followed by the path to a file or directory. File
 *                       matching by prefix is supported, e.g. kifs://dir/file
 *                       would match dir/file_1 and dir/file_2. When prefix
 *                       matching is used, the path must start with a full,
 *                       valid KiFS directory name.  If an external data source
 *                       is specified in @ref
 *                       gpudb::insert_records_from_files_datasource_name
 *                       "datasource_name", these file paths must resolve to
 *                       accessible files at that data source location. Prefix
 *                       matching is supported. If the data source is hdfs,
 *                       prefixes must be aligned with directories, i.e.
 *                       partial file names will not match.  If no data source
 *                       is specified, the files are assumed to be local to the
 *                       database and must all be accessible to the gpudb user,
 *                       residing on the path (or relative to the path)
 *                       specified by the external files directory in the
 *                       Kinetica <a
 *                       href="../../../config/#config-main-external-files"
 *                       target="_top">configuration file</a>. Wildcards (*)
 *                       can be used to specify a group of files.  Prefix
 *                       matching is supported, the prefixes must be aligned
 *                       with directories.  If the first path ends in .tsv, the
 *                       text delimiter will be defaulted to a tab character.
 *                       If the first path ends in .psv, the text delimiter
 *                       will be defaulted to a pipe character (|).
 * @param[in] modifyColumns  Not implemented yet. The default value is an empty
 *                           map.
 * @param[in] createTableOptions  Options from @ref
 *                                createTable(const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                "createTable", allowing the structure of the
 *                                table to be defined independently of the data
 *                                source, when creating the target table.
 *                                <ul>
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_type_id
 *                                        "insert_records_from_files_type_id":
 *                                        ID of a currently registered <a
 *                                        href="../../../concepts/types/"
 *                                        target="_top">type</a>.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_no_error_if_exists
 *                                        "insert_records_from_files_no_error_if_exists":
 *                                        If @ref
 *                                        gpudb::insert_records_from_files_true
 *                                        "true", prevents an error from
 *                                        occurring if the table already exists
 *                                        and is of the given type.  If a table
 *                                        with the same name but a different
 *                                        type exists, it is still an error.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_true
 *                                                "insert_records_from_files_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_false
 *                                                "insert_records_from_files_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_files_false
 *                                        "insert_records_from_files_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_is_replicated
 *                                        "insert_records_from_files_is_replicated":
 *                                        Affects the <a
 *                                        href="../../../concepts/tables/#distribution"
 *                                        target="_top">distribution scheme</a>
 *                                        for the table's data.  If @ref
 *                                        gpudb::insert_records_from_files_true
 *                                        "true" and the given table has no
 *                                        explicit <a
 *                                        href="../../../concepts/tables/#shard-key"
 *                                        target="_top">shard key</a> defined,
 *                                        the table will be <a
 *                                        href="../../../concepts/tables/#replication"
 *                                        target="_top">replicated</a>.  If
 *                                        @ref
 *                                        gpudb::insert_records_from_files_false
 *                                        "false", the table will be <a
 *                                        href="../../../concepts/tables/#sharding"
 *                                        target="_top">sharded</a> according
 *                                        to the shard key specified in the
 *                                        given @ref
 *                                        gpudb::insert_records_from_files_type_id
 *                                        "type_id", or <a
 *                                        href="../../../concepts/tables/#random-sharding"
 *                                        target="_top">randomly sharded</a>,
 *                                        if no shard key is specified. Note
 *                                        that a type containing a shard key
 *                                        cannot be used to create a replicated
 *                                        table.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_true
 *                                                "insert_records_from_files_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_false
 *                                                "insert_records_from_files_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_files_false
 *                                        "insert_records_from_files_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_foreign_keys
 *                                        "insert_records_from_files_foreign_keys":
 *                                        Semicolon-separated list of <a
 *                                        href="../../../concepts/tables/#foreign-keys"
 *                                        target="_top">foreign keys</a>, of
 *                                        the format '(source_column_name [,
 *                                        ...]) references
 *                                        target_table_name(primary_key_column_name
 *                                        [, ...]) [as foreign_key_name]'.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_foreign_shard_key
 *                                        "insert_records_from_files_foreign_shard_key":
 *                                        Foreign shard key of the format
 *                                        'source_column references
 *                                        shard_by_column from
 *                                        target_table(primary_key_column)'.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_partition_type
 *                                        "insert_records_from_files_partition_type":
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning"
 *                                        target="_top">Partitioning</a> scheme
 *                                        to use.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_RANGE
 *                                                "insert_records_from_files_RANGE":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-range"
 *                                                target="_top">range
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_INTERVAL
 *                                                "insert_records_from_files_INTERVAL":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-interval"
 *                                                target="_top">interval
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_LIST
 *                                                "insert_records_from_files_LIST":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-list"
 *                                                target="_top">list
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_HASH
 *                                                "insert_records_from_files_HASH":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-hash"
 *                                                target="_top">hash
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_SERIES
 *                                                "insert_records_from_files_SERIES":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-series"
 *                                                target="_top">series
 *                                                partitioning</a>.
 *                                        </ul>
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_partition_keys
 *                                        "insert_records_from_files_partition_keys":
 *                                        Comma-separated list of partition
 *                                        keys, which are the columns or column
 *                                        expressions by which records will be
 *                                        assigned to partitions defined by
 *                                        @ref
 *                                        gpudb::insert_records_from_files_partition_definitions
 *                                        "partition_definitions".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_partition_definitions
 *                                        "insert_records_from_files_partition_definitions":
 *                                        Comma-separated list of partition
 *                                        definitions, whose format depends on
 *                                        the choice of @ref
 *                                        gpudb::insert_records_from_files_partition_type
 *                                        "partition_type".  See <a
 *                                        href="../../../concepts/tables/#partitioning-by-range"
 *                                        target="_top">range partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-interval"
 *                                        target="_top">interval
 *                                        partitioning</a>, <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-hash"
 *                                        target="_top">hash partitioning</a>,
 *                                        or <a
 *                                        href="../../../concepts/tables/#partitioning-by-series"
 *                                        target="_top">series partitioning</a>
 *                                        for example formats.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_is_automatic_partition
 *                                        "insert_records_from_files_is_automatic_partition":
 *                                        If @ref
 *                                        gpudb::insert_records_from_files_true
 *                                        "true", a new partition will be
 *                                        created for values which don't fall
 *                                        into an existing partition.
 *                                        Currently, only supported for <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitions</a>.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_true
 *                                                "insert_records_from_files_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_false
 *                                                "insert_records_from_files_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_files_false
 *                                        "insert_records_from_files_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_ttl
 *                                        "insert_records_from_files_ttl": Sets
 *                                        the <a href="../../../concepts/ttl/"
 *                                        target="_top">TTL</a> of the table
 *                                        specified in @a tableName.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_chunk_size
 *                                        "insert_records_from_files_chunk_size":
 *                                        Indicates the number of records per
 *                                        chunk to be used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_chunk_column_max_memory
 *                                        "insert_records_from_files_chunk_column_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for each column in a chunk to be
 *                                        used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_chunk_max_memory
 *                                        "insert_records_from_files_chunk_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for all columns in a chunk to be
 *                                        used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_is_result_table
 *                                        "insert_records_from_files_is_result_table":
 *                                        Indicates whether the table is a <a
 *                                        href="../../../concepts/tables_memory_only/"
 *                                        target="_top">memory-only table</a>.
 *                                        A result table cannot contain columns
 *                                        with text_search <a
 *                                        href="../../../concepts/types/#data-handling"
 *                                        target="_top">data-handling</a>, and
 *                                        it will not be retained if the server
 *                                        is restarted.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_true
 *                                                "insert_records_from_files_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_false
 *                                                "insert_records_from_files_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_files_false
 *                                        "insert_records_from_files_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_strategy_definition
 *                                        "insert_records_from_files_strategy_definition":
 *                                        The <a
 *                                        href="../../../rm/concepts/#tier-strategies"
 *                                        target="_top">tier strategy</a> for
 *                                        the table and its columns.
 *                                </ul>
 *                                The default value is an empty map.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_bad_record_table_name
 *                             "insert_records_from_files_bad_record_table_name":
 *                             Name of a table to which records that were
 *                             rejected are written. The bad-record-table has
 *                             the following columns: line_number (long),
 *                             line_rejected (string), error_message (string).
 *                             When @ref
 *                             gpudb::insert_records_from_files_error_handling
 *                             "error_handling" is @ref
 *                             gpudb::insert_records_from_files_abort "abort",
 *                             bad records table is not populated.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_bad_record_table_limit
 *                             "insert_records_from_files_bad_record_table_limit":
 *                             A positive integer indicating the maximum number
 *                             of records that can be written to the
 *                             bad-record-table. The default value is '10000'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_bad_record_table_limit_per_input
 *                             "insert_records_from_files_bad_record_table_limit_per_input":
 *                             For subscriptions, a positive integer indicating
 *                             the maximum number of records that can be
 *                             written to the bad-record-table per
 *                             file/payload. Default value will be @ref
 *                             gpudb::insert_records_from_files_bad_record_table_limit
 *                             "bad_record_table_limit" and total size of the
 *                             table per rank is limited to @ref
 *                             gpudb::insert_records_from_files_bad_record_table_limit
 *                             "bad_record_table_limit".
 *                         <li>@ref gpudb::insert_records_from_files_batch_size
 *                             "insert_records_from_files_batch_size": Number
 *                             of records to insert per batch when inserting
 *                             data. The default value is '50000'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_column_formats
 *                             "insert_records_from_files_column_formats": For
 *                             each target column specified, applies the
 *                             column-property-bound format to the source data
 *                             loaded into that column.  Each column format
 *                             will contain a mapping of one or more of its
 *                             column properties to an appropriate format for
 *                             each property.  Currently supported column
 *                             properties include date, time, & datetime. The
 *                             parameter value must be formatted as a JSON
 *                             string of maps of column names to maps of column
 *                             properties to their corresponding column
 *                             formats, e.g., '{ "order_date" : { "date" :
 *                             "%Y.%m.%d" }, "order_time" : { "time" :
 *                             "%H:%M:%S" } }'.  See @ref
 *                             gpudb::insert_records_from_files_default_column_formats
 *                             "default_column_formats" for valid format
 *                             syntax.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_columns_to_load
 *                             "insert_records_from_files_columns_to_load":
 *                             Specifies a comma-delimited list of columns from
 *                             the source data to load.  If more than one file
 *                             is being loaded, this list applies to all files.
 *                             Column numbers can be specified discretely or as
 *                             a range.  For example, a value of '5,7,1..3'
 *                             will insert values from the fifth column in the
 *                             source data into the first column in the target
 *                             table, from the seventh column in the source
 *                             data into the second column in the target table,
 *                             and from the first through third columns in the
 *                             source data into the third through fifth columns
 *                             in the target table.  If the source data
 *                             contains a header, column names matching the
 *                             file header names may be provided instead of
 *                             column numbers.  If the target table doesn't
 *                             exist, the table will be created with the
 *                             columns in this order.  If the target table does
 *                             exist with columns in a different order than the
 *                             source data, this list can be used to match the
 *                             order of the target table.  For example, a value
 *                             of 'C, B, A' will create a three column table
 *                             with column C, followed by column B, followed by
 *                             column A; or will insert those fields in that
 *                             order into a table created with columns in that
 *                             order.  If the target table exists, the column
 *                             names must match the source data field names for
 *                             a name-mapping to be successful.  Mutually
 *                             exclusive with @ref
 *                             gpudb::insert_records_from_files_columns_to_skip
 *                             "columns_to_skip".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_columns_to_skip
 *                             "insert_records_from_files_columns_to_skip":
 *                             Specifies a comma-delimited list of columns from
 *                             the source data to skip.  Mutually exclusive
 *                             with @ref
 *                             gpudb::insert_records_from_files_columns_to_load
 *                             "columns_to_load".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_compression_type
 *                             "insert_records_from_files_compression_type":
 *                             Source data compression type.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_none
 *                                     "insert_records_from_files_none": No
 *                                     compression.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_auto
 *                                     "insert_records_from_files_auto": Auto
 *                                     detect compression type
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_gzip
 *                                     "insert_records_from_files_gzip": gzip
 *                                     file compression.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_bzip2
 *                                     "insert_records_from_files_bzip2": bzip2
 *                                     file compression.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_auto
 *                             "insert_records_from_files_auto".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_datasource_name
 *                             "insert_records_from_files_datasource_name":
 *                             Name of an existing external data source from
 *                             which data file(s) specified in @a filepaths
 *                             will be loaded
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_default_column_formats
 *                             "insert_records_from_files_default_column_formats":
 *                             Specifies the default format to be applied to
 *                             source data loaded into columns with the
 *                             corresponding column property.  Currently
 *                             supported column properties include date, time,
 *                             & datetime.  This default column-property-bound
 *                             format can be overridden by specifying a column
 *                             property & format for a given target column in
 *                             @ref
 *                             gpudb::insert_records_from_files_column_formats
 *                             "column_formats". For each specified annotation,
 *                             the format will apply to all columns with that
 *                             annotation unless a custom @ref
 *                             gpudb::insert_records_from_files_column_formats
 *                             "column_formats" for that annotation is
 *                             specified.  The parameter value must be
 *                             formatted as a JSON string that is a map of
 *                             column properties to their respective column
 *                             formats, e.g., '{ "date" : "%Y.%m.%d", "time" :
 *                             "%H:%M:%S" }'.  Column formats are specified as
 *                             a string of control characters and plain text.
 *                             The supported control characters are 'Y', 'm',
 *                             'd', 'H', 'M', 'S', and 's', which follow the
 *                             Linux 'strptime()' specification, as well as
 *                             's', which specifies seconds and fractional
 *                             seconds (though the fractional component will be
 *                             truncated past milliseconds).  Formats for the
 *                             'date' annotation must include the 'Y', 'm', and
 *                             'd' control characters. Formats for the 'time'
 *                             annotation must include the 'H', 'M', and either
 *                             'S' or 's' (but not both) control characters.
 *                             Formats for the 'datetime' annotation meet both
 *                             the 'date' and 'time' control character
 *                             requirements. For example, '{"datetime" :
 *                             "%m/%d/%Y %H:%M:%S" }' would be used to
 *                             interpret text as "05/04/2000 12:12:11"
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_error_handling
 *                             "insert_records_from_files_error_handling":
 *                             Specifies how errors should be handled upon
 *                             insertion.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_permissive
 *                                     "insert_records_from_files_permissive":
 *                                     Records with missing columns are
 *                                     populated with nulls if possible;
 *                                     otherwise, the malformed records are
 *                                     skipped.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_ignore_bad_records
 *                                     "insert_records_from_files_ignore_bad_records":
 *                                     Malformed records are skipped.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_abort
 *                                     "insert_records_from_files_abort": Stops
 *                                     current insertion and aborts entire
 *                                     operation when an error is encountered.
 *                                     Primary key collisions are considered
 *                                     abortable errors in this mode.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_abort
 *                             "insert_records_from_files_abort".
 *                         <li>@ref gpudb::insert_records_from_files_file_type
 *                             "insert_records_from_files_file_type": Specifies
 *                             the type of the file(s) whose records will be
 *                             inserted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_avro
 *                                     "insert_records_from_files_avro": Avro
 *                                     file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_delimited_text
 *                                     "insert_records_from_files_delimited_text":
 *                                     Delimited text file format; e.g., CSV,
 *                                     TSV, PSV, etc.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_gdb
 *                                     "insert_records_from_files_gdb":
 *                                     Esri/GDB file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_json
 *                                     "insert_records_from_files_json": Json
 *                                     file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_parquet
 *                                     "insert_records_from_files_parquet":
 *                                     Apache Parquet file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_shapefile
 *                                     "insert_records_from_files_shapefile":
 *                                     ShapeFile file format
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "insert_records_from_files_delimited_text".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_flatten_columns
 *                             "insert_records_from_files_flatten_columns":
 *                             Specifies how to handle nested columns.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true": Break
 *                                     up nested columns to multiple columns
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false": Treat
 *                                     nested columns as json columns instead
 *                                     of flattening
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_gdal_configuration_options
 *                             "insert_records_from_files_gdal_configuration_options":
 *                             Comma separated list of gdal conf options, for
 *                             the specific requets: key=value
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_ignore_existing_pk
 *                             "insert_records_from_files_ignore_existing_pk":
 *                             Specifies the record collision error-suppression
 *                             policy for inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             not in upsert mode (upsert mode is disabled when
 *                             @ref
 *                             gpudb::insert_records_from_files_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_from_files_false "false").
 *                             If set to @ref
 *                             gpudb::insert_records_from_files_true "true",
 *                             any record being inserted that is rejected for
 *                             having primary key values that match those of an
 *                             existing table record will be ignored with no
 *                             error generated.  If @ref
 *                             gpudb::insert_records_from_files_false "false",
 *                             the rejection of any record for having primary
 *                             key values matching an existing record will
 *                             result in an error being reported, as determined
 *                             by @ref
 *                             gpudb::insert_records_from_files_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key or if upsert mode is in
 *                             effect (@ref
 *                             gpudb::insert_records_from_files_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_from_files_true "true"),
 *                             then this option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true": Ignore
 *                                     new records whose primary key values
 *                                     collide with those of existing records
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false": Treat
 *                                     as errors any new records whose primary
 *                                     key values collide with those of
 *                                     existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_ingestion_mode
 *                             "insert_records_from_files_ingestion_mode":
 *                             Whether to do a full load, dry run, or perform a
 *                             type inference on the source data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_full
 *                                     "insert_records_from_files_full": Run a
 *                                     type inference on the source data (if
 *                                     needed) and ingest
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_dry_run
 *                                     "insert_records_from_files_dry_run":
 *                                     Does not load data, but walks through
 *                                     the source data and determines the
 *                                     number of valid records, taking into
 *                                     account the current mode of @ref
 *                                     gpudb::insert_records_from_files_error_handling
 *                                     "error_handling".
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_type_inference_only
 *                                     "insert_records_from_files_type_inference_only":
 *                                     Infer the type of the source data and
 *                                     return, without ingesting any data.  The
 *                                     inferred type is returned in the
 *                                     response.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_full
 *                             "insert_records_from_files_full".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_kafka_consumers_per_rank
 *                             "insert_records_from_files_kafka_consumers_per_rank":
 *                             Number of Kafka consumer threads per rank (valid
 *                             range 1-6). The default value is '1'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_kafka_group_id
 *                             "insert_records_from_files_kafka_group_id": The
 *                             group id to be used when consuming data from a
 *                             Kafka topic (valid only for Kafka datasource
 *                             subscriptions).
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_kafka_offset_reset_policy
 *                             "insert_records_from_files_kafka_offset_reset_policy":
 *                             Policy to determine whether the Kafka data
 *                             consumption starts either at earliest offset or
 *                             latest offset.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_earliest
 *                                     "insert_records_from_files_earliest"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_latest
 *                                     "insert_records_from_files_latest"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_earliest
 *                             "insert_records_from_files_earliest".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_kafka_optimistic_ingest
 *                             "insert_records_from_files_kafka_optimistic_ingest":
 *                             Enable optimistic ingestion where Kafka topic
 *                             offsets and table data are committed
 *                             independently to achieve parallelism.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_kafka_subscription_cancel_after
 *                             "insert_records_from_files_kafka_subscription_cancel_after":
 *                             Sets the Kafka subscription lifespan (in
 *                             minutes). Expired subscription will be cancelled
 *                             automatically.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_kafka_type_inference_fetch_timeout
 *                             "insert_records_from_files_kafka_type_inference_fetch_timeout":
 *                             Maximum time to collect Kafka messages before
 *                             type inferencing on the set of them.
 *                         <li>@ref gpudb::insert_records_from_files_layer
 *                             "insert_records_from_files_layer": Geo files
 *                             layer(s) name(s): comma separated.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_loading_mode
 *                             "insert_records_from_files_loading_mode": Scheme
 *                             for distributing the extraction and loading of
 *                             data from the source data file(s). This option
 *                             applies only when loading files that are local
 *                             to the database.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_head
 *                                     "insert_records_from_files_head": The
 *                                     head node loads all data. All files must
 *                                     be available to the head node.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_distributed_shared
 *                                     "insert_records_from_files_distributed_shared":
 *                                     The head node coordinates loading data
 *                                     by worker processes across all nodes
 *                                     from shared files available to all
 *                                     workers.  NOTE:  Instead of existing on
 *                                     a shared source, the files can be
 *                                     duplicated on a source local to each
 *                                     host to improve performance, though the
 *                                     files must appear as the same data set
 *                                     from the perspective of all hosts
 *                                     performing the load.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_distributed_local
 *                                     "insert_records_from_files_distributed_local":
 *                                     A single worker process on each node
 *                                     loads all files that are available to
 *                                     it. This option works best when each
 *                                     worker loads files from its own file
 *                                     system, to maximize performance. In
 *                                     order to avoid data duplication, either
 *                                     each worker performing the load needs to
 *                                     have visibility to a set of files unique
 *                                     to it (no file is visible to more than
 *                                     one node) or the target table needs to
 *                                     have a primary key (which will allow the
 *                                     worker to automatically deduplicate
 *                                     data).  NOTE:  If the target table
 *                                     doesn't exist, the table structure will
 *                                     be determined by the head node. If the
 *                                     head node has no files local to it, it
 *                                     will be unable to determine the
 *                                     structure and the request will fail.  If
 *                                     the head node is configured to have no
 *                                     worker processes, no data strictly
 *                                     accessible to the head node will be
 *                                     loaded.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_head
 *                             "insert_records_from_files_head".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_local_time_offset
 *                             "insert_records_from_files_local_time_offset":
 *                             Apply an offset to Avro local timestamp columns.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_max_records_to_load
 *                             "insert_records_from_files_max_records_to_load":
 *                             Limit the number of records to load in this
 *                             request: if this number is larger than @ref
 *                             gpudb::insert_records_from_files_batch_size
 *                             "batch_size", then the number of records loaded
 *                             will be limited to the next whole number of @ref
 *                             gpudb::insert_records_from_files_batch_size
 *                             "batch_size" (per working thread).
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_num_tasks_per_rank
 *                             "insert_records_from_files_num_tasks_per_rank":
 *                             Number of tasks for reading file per rank.
 *                             Default will be system configuration parameter,
 *                             external_file_reader_num_tasks.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_poll_interval
 *                             "insert_records_from_files_poll_interval": If
 *                             @ref gpudb::insert_records_from_files_true
 *                             "true", the number of seconds between attempts
 *                             to load external files into the table.  If zero,
 *                             polling will be continuous as long as data is
 *                             found.  If no data is found, the interval will
 *                             steadily increase to a maximum of 60 seconds.
 *                             The default value is '0'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_primary_keys
 *                             "insert_records_from_files_primary_keys": Comma
 *                             separated list of column names to set as primary
 *                             keys, when not specified in the type.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_schema_registry_schema_name
 *                             "insert_records_from_files_schema_registry_schema_name":
 *                             Name of the Avro schema in the schema registry
 *                             to use when reading Avro records.
 *                         <li>@ref gpudb::insert_records_from_files_shard_keys
 *                             "insert_records_from_files_shard_keys": Comma
 *                             separated list of column names to set as shard
 *                             keys, when not specified in the type.
 *                         <li>@ref gpudb::insert_records_from_files_skip_lines
 *                             "insert_records_from_files_skip_lines": Skip
 *                             number of lines from begining of file.
 *                         <li>@ref gpudb::insert_records_from_files_subscribe
 *                             "insert_records_from_files_subscribe":
 *                             Continuously poll the data source to check for
 *                             new data and load it into the table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_table_insert_mode
 *                             "insert_records_from_files_table_insert_mode":
 *                             Insertion scheme to use when inserting records
 *                             from multiple shapefiles.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_single
 *                                     "insert_records_from_files_single":
 *                                     Insert all records into a single table.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_table_per_file
 *                                     "insert_records_from_files_table_per_file":
 *                                     Insert records from each file into a new
 *                                     table corresponding to that file.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_single
 *                             "insert_records_from_files_single".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_comment_string
 *                             "insert_records_from_files_text_comment_string":
 *                             Specifies the character string that should be
 *                             interpreted as a comment line prefix in the
 *                             source data.  All lines in the data starting
 *                             with the provided string are ignored.  For @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only. The default value is '#'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_delimiter
 *                             "insert_records_from_files_text_delimiter":
 *                             Specifies the character delimiting field values
 *                             in the source data and field names in the header
 *                             (if present).  For @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only. The default value is ','.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_escape_character
 *                             "insert_records_from_files_text_escape_character":
 *                             Specifies the character that is used to escape
 *                             other characters in the source data.  An 'a',
 *                             'b', 'f', 'n', 'r', 't', or 'v' preceded by an
 *                             escape character will be interpreted as the
 *                             ASCII bell, backspace, form feed, line feed,
 *                             carriage return, horizontal tab, & vertical tab,
 *                             respectively.  For example, the escape character
 *                             followed by an 'n' will be interpreted as a
 *                             newline within a field value.  The escape
 *                             character can also be used to escape the quoting
 *                             character, and will be treated as an escape
 *                             character whether it is within a quoted field
 *                             value or not.  For @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_has_header
 *                             "insert_records_from_files_text_has_header":
 *                             Indicates whether the source data contains a
 *                             header row.  For @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_true
 *                             "insert_records_from_files_true".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_header_property_delimiter
 *                             "insert_records_from_files_text_header_property_delimiter":
 *                             Specifies the delimiter for <a
 *                             href="../../../concepts/types/#column-properties"
 *                             target="_top">column properties</a> in the
 *                             header row (if present).  Cannot be set to same
 *                             value as @ref
 *                             gpudb::insert_records_from_files_text_delimiter
 *                             "text_delimiter".  For @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only. The default value is '|'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_null_string
 *                             "insert_records_from_files_text_null_string":
 *                             Specifies the character string that should be
 *                             interpreted as a null value in the source data.
 *                             For @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only. The default value is '\\N'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_quote_character
 *                             "insert_records_from_files_text_quote_character":
 *                             Specifies the character that should be
 *                             interpreted as a field value quoting character
 *                             in the source data.  The character must appear
 *                             at beginning and end of field value to take
 *                             effect.  Delimiters within quoted fields are
 *                             treated as literals and not delimiters.  Within
 *                             a quoted field, two consecutive quote characters
 *                             will be interpreted as a single literal quote
 *                             character, effectively escaping it.  To not have
 *                             a quote character, specify an empty string.  For
 *                             @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only. The default value is '"'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_search_columns
 *                             "insert_records_from_files_text_search_columns":
 *                             Add 'text_search' property to internally
 *                             inferenced string columns. Comma seperated list
 *                             of column names or '*' for all columns. To add
 *                             'text_search' property only to string columns
 *                             greater than or equal to a minimum size, also
 *                             set the @ref
 *                             gpudb::insert_records_from_files_text_search_min_column_length
 *                             "text_search_min_column_length"
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_search_min_column_length
 *                             "insert_records_from_files_text_search_min_column_length":
 *                             Set the minimum column size for strings to apply
 *                             the 'text_search' property to. Used only when
 *                             @ref
 *                             gpudb::insert_records_from_files_text_search_columns
 *                             "text_search_columns" has a value.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_truncate_strings
 *                             "insert_records_from_files_truncate_strings": If
 *                             set to @ref
 *                             gpudb::insert_records_from_files_true "true",
 *                             truncate string values that are longer than the
 *                             column's type size.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_truncate_table
 *                             "insert_records_from_files_truncate_table": If
 *                             set to @ref
 *                             gpudb::insert_records_from_files_true "true",
 *                             truncates the table specified by @a tableName
 *                             prior to loading the file(s).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_type_inference_mode
 *                             "insert_records_from_files_type_inference_mode":
 *                             Optimize type inferencing for either speed or
 *                             accuracy.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_accuracy
 *                                     "insert_records_from_files_accuracy":
 *                                     Scans data to get exactly-typed & sized
 *                                     columns for all data scanned.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_speed
 *                                     "insert_records_from_files_speed": Scans
 *                                     data and picks the widest possible
 *                                     column types so that 'all' values will
 *                                     fit with minimum data scanned
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_accuracy
 *                             "insert_records_from_files_accuracy".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_update_on_existing_pk
 *                             "insert_records_from_files_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::insert_records_from_files_true "true",
 *                             any existing table record with primary key
 *                             values that match those of a record being
 *                             inserted will be replaced by that new record
 *                             (the new data will be 'upserted'). If set to
 *                             @ref gpudb::insert_records_from_files_false
 *                             "false", any existing table record with primary
 *                             key values that match those of a record being
 *                             inserted will remain unchanged, while the new
 *                             record will be rejected and the error handled as
 *                             determined by @ref
 *                             gpudb::insert_records_from_files_ignore_existing_pk
 *                             "ignore_existing_pk" & @ref
 *                             gpudb::insert_records_from_files_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key, then this option has no
 *                             effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true": Upsert
 *                                     new records when primary keys match
 *                                     existing records
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false":
 *                                     Reject new records when primary keys
 *                                     match existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::InsertRecordsFromFilesResponse "Response" object
 *         containing the result of the operation.
 */
InsertRecordsFromFilesResponse insertRecordsFromFiles( const std::string& tableName,
                                                       const std::vector<std::string>& filepaths,
                                                       const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                       const std::map<std::string, std::string>& createTableOptions,
                                                       const std::map<std::string, std::string>& options ) const;

/**
 * Reads from one or more files and inserts the data into a new or existing
 * table. The source data can be located either in <a
 * href="../../../tools/kifs/" target="_top">KiFS</a>; on the cluster,
 * accessible to the database; or remotely, accessible via a pre-defined
 * external <a href="../../../concepts/data_sources/" target="_top">data
 * source</a>.
 *
 *
 * For delimited text files, there are two loading schemes: positional and
 * name-based. The name-based loading scheme is enabled when the file has a
 * header present and @ref gpudb::insert_records_from_files_text_has_header
 * "text_has_header" is set to @ref gpudb::insert_records_from_files_true
 * "true". In this scheme, the source file(s) field names must match the target
 * table's column names exactly; however, the source file can have more fields
 * than the target table has columns. If @ref
 * gpudb::insert_records_from_files_error_handling "error_handling" is set to
 * @ref gpudb::insert_records_from_files_permissive "permissive", the source
 * file can have fewer fields than the target table has columns. If the
 * name-based loading scheme is being used, names matching the file header's
 * names may be provided to @ref
 * gpudb::insert_records_from_files_columns_to_load "columns_to_load" instead
 * of numbers, but ranges are not supported.
 *
 * Note: Due to data being loaded in parallel, there is no insertion order
 * guaranteed.  For tables with primary keys, in the case of a primary key
 * collision, this means it is indeterminate which record will be inserted
 * first and remain, while the rest of the colliding key records are discarded.
 *
 * Returns once all files are processed.
 *
 * @param[in] tableName  Name of the table into which the data will be
 *                       inserted, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. If the table
 *                       does not exist, the table will be created using either
 *                       an existing @ref
 *                       gpudb::insert_records_from_files_type_id "type_id" or
 *                       the type inferred from the file, and the new table
 *                       name will have to meet standard <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.
 * @param[in] filepaths  A list of file paths from which data will be sourced;
 *                       For paths in <a href="../../../tools/kifs/"
 *                       target="_top">KiFS</a>, use the uri prefix of kifs://
 *                       followed by the path to a file or directory. File
 *                       matching by prefix is supported, e.g. kifs://dir/file
 *                       would match dir/file_1 and dir/file_2. When prefix
 *                       matching is used, the path must start with a full,
 *                       valid KiFS directory name.  If an external data source
 *                       is specified in @ref
 *                       gpudb::insert_records_from_files_datasource_name
 *                       "datasource_name", these file paths must resolve to
 *                       accessible files at that data source location. Prefix
 *                       matching is supported. If the data source is hdfs,
 *                       prefixes must be aligned with directories, i.e.
 *                       partial file names will not match.  If no data source
 *                       is specified, the files are assumed to be local to the
 *                       database and must all be accessible to the gpudb user,
 *                       residing on the path (or relative to the path)
 *                       specified by the external files directory in the
 *                       Kinetica <a
 *                       href="../../../config/#config-main-external-files"
 *                       target="_top">configuration file</a>. Wildcards (*)
 *                       can be used to specify a group of files.  Prefix
 *                       matching is supported, the prefixes must be aligned
 *                       with directories.  If the first path ends in .tsv, the
 *                       text delimiter will be defaulted to a tab character.
 *                       If the first path ends in .psv, the text delimiter
 *                       will be defaulted to a pipe character (|).
 * @param[in] modifyColumns  Not implemented yet. The default value is an empty
 *                           map.
 * @param[in] createTableOptions  Options from @ref
 *                                createTable(const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                "createTable", allowing the structure of the
 *                                table to be defined independently of the data
 *                                source, when creating the target table.
 *                                <ul>
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_type_id
 *                                        "insert_records_from_files_type_id":
 *                                        ID of a currently registered <a
 *                                        href="../../../concepts/types/"
 *                                        target="_top">type</a>.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_no_error_if_exists
 *                                        "insert_records_from_files_no_error_if_exists":
 *                                        If @ref
 *                                        gpudb::insert_records_from_files_true
 *                                        "true", prevents an error from
 *                                        occurring if the table already exists
 *                                        and is of the given type.  If a table
 *                                        with the same name but a different
 *                                        type exists, it is still an error.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_true
 *                                                "insert_records_from_files_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_false
 *                                                "insert_records_from_files_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_files_false
 *                                        "insert_records_from_files_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_is_replicated
 *                                        "insert_records_from_files_is_replicated":
 *                                        Affects the <a
 *                                        href="../../../concepts/tables/#distribution"
 *                                        target="_top">distribution scheme</a>
 *                                        for the table's data.  If @ref
 *                                        gpudb::insert_records_from_files_true
 *                                        "true" and the given table has no
 *                                        explicit <a
 *                                        href="../../../concepts/tables/#shard-key"
 *                                        target="_top">shard key</a> defined,
 *                                        the table will be <a
 *                                        href="../../../concepts/tables/#replication"
 *                                        target="_top">replicated</a>.  If
 *                                        @ref
 *                                        gpudb::insert_records_from_files_false
 *                                        "false", the table will be <a
 *                                        href="../../../concepts/tables/#sharding"
 *                                        target="_top">sharded</a> according
 *                                        to the shard key specified in the
 *                                        given @ref
 *                                        gpudb::insert_records_from_files_type_id
 *                                        "type_id", or <a
 *                                        href="../../../concepts/tables/#random-sharding"
 *                                        target="_top">randomly sharded</a>,
 *                                        if no shard key is specified. Note
 *                                        that a type containing a shard key
 *                                        cannot be used to create a replicated
 *                                        table.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_true
 *                                                "insert_records_from_files_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_false
 *                                                "insert_records_from_files_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_files_false
 *                                        "insert_records_from_files_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_foreign_keys
 *                                        "insert_records_from_files_foreign_keys":
 *                                        Semicolon-separated list of <a
 *                                        href="../../../concepts/tables/#foreign-keys"
 *                                        target="_top">foreign keys</a>, of
 *                                        the format '(source_column_name [,
 *                                        ...]) references
 *                                        target_table_name(primary_key_column_name
 *                                        [, ...]) [as foreign_key_name]'.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_foreign_shard_key
 *                                        "insert_records_from_files_foreign_shard_key":
 *                                        Foreign shard key of the format
 *                                        'source_column references
 *                                        shard_by_column from
 *                                        target_table(primary_key_column)'.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_partition_type
 *                                        "insert_records_from_files_partition_type":
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning"
 *                                        target="_top">Partitioning</a> scheme
 *                                        to use.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_RANGE
 *                                                "insert_records_from_files_RANGE":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-range"
 *                                                target="_top">range
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_INTERVAL
 *                                                "insert_records_from_files_INTERVAL":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-interval"
 *                                                target="_top">interval
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_LIST
 *                                                "insert_records_from_files_LIST":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-list"
 *                                                target="_top">list
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_HASH
 *                                                "insert_records_from_files_HASH":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-hash"
 *                                                target="_top">hash
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_SERIES
 *                                                "insert_records_from_files_SERIES":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-series"
 *                                                target="_top">series
 *                                                partitioning</a>.
 *                                        </ul>
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_partition_keys
 *                                        "insert_records_from_files_partition_keys":
 *                                        Comma-separated list of partition
 *                                        keys, which are the columns or column
 *                                        expressions by which records will be
 *                                        assigned to partitions defined by
 *                                        @ref
 *                                        gpudb::insert_records_from_files_partition_definitions
 *                                        "partition_definitions".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_partition_definitions
 *                                        "insert_records_from_files_partition_definitions":
 *                                        Comma-separated list of partition
 *                                        definitions, whose format depends on
 *                                        the choice of @ref
 *                                        gpudb::insert_records_from_files_partition_type
 *                                        "partition_type".  See <a
 *                                        href="../../../concepts/tables/#partitioning-by-range"
 *                                        target="_top">range partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-interval"
 *                                        target="_top">interval
 *                                        partitioning</a>, <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-hash"
 *                                        target="_top">hash partitioning</a>,
 *                                        or <a
 *                                        href="../../../concepts/tables/#partitioning-by-series"
 *                                        target="_top">series partitioning</a>
 *                                        for example formats.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_is_automatic_partition
 *                                        "insert_records_from_files_is_automatic_partition":
 *                                        If @ref
 *                                        gpudb::insert_records_from_files_true
 *                                        "true", a new partition will be
 *                                        created for values which don't fall
 *                                        into an existing partition.
 *                                        Currently, only supported for <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitions</a>.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_true
 *                                                "insert_records_from_files_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_false
 *                                                "insert_records_from_files_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_files_false
 *                                        "insert_records_from_files_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_ttl
 *                                        "insert_records_from_files_ttl": Sets
 *                                        the <a href="../../../concepts/ttl/"
 *                                        target="_top">TTL</a> of the table
 *                                        specified in @a tableName.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_chunk_size
 *                                        "insert_records_from_files_chunk_size":
 *                                        Indicates the number of records per
 *                                        chunk to be used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_chunk_column_max_memory
 *                                        "insert_records_from_files_chunk_column_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for each column in a chunk to be
 *                                        used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_chunk_max_memory
 *                                        "insert_records_from_files_chunk_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for all columns in a chunk to be
 *                                        used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_is_result_table
 *                                        "insert_records_from_files_is_result_table":
 *                                        Indicates whether the table is a <a
 *                                        href="../../../concepts/tables_memory_only/"
 *                                        target="_top">memory-only table</a>.
 *                                        A result table cannot contain columns
 *                                        with text_search <a
 *                                        href="../../../concepts/types/#data-handling"
 *                                        target="_top">data-handling</a>, and
 *                                        it will not be retained if the server
 *                                        is restarted.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_true
 *                                                "insert_records_from_files_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_files_false
 *                                                "insert_records_from_files_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_files_false
 *                                        "insert_records_from_files_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_files_strategy_definition
 *                                        "insert_records_from_files_strategy_definition":
 *                                        The <a
 *                                        href="../../../rm/concepts/#tier-strategies"
 *                                        target="_top">tier strategy</a> for
 *                                        the table and its columns.
 *                                </ul>
 *                                The default value is an empty map.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_bad_record_table_name
 *                             "insert_records_from_files_bad_record_table_name":
 *                             Name of a table to which records that were
 *                             rejected are written. The bad-record-table has
 *                             the following columns: line_number (long),
 *                             line_rejected (string), error_message (string).
 *                             When @ref
 *                             gpudb::insert_records_from_files_error_handling
 *                             "error_handling" is @ref
 *                             gpudb::insert_records_from_files_abort "abort",
 *                             bad records table is not populated.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_bad_record_table_limit
 *                             "insert_records_from_files_bad_record_table_limit":
 *                             A positive integer indicating the maximum number
 *                             of records that can be written to the
 *                             bad-record-table. The default value is '10000'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_bad_record_table_limit_per_input
 *                             "insert_records_from_files_bad_record_table_limit_per_input":
 *                             For subscriptions, a positive integer indicating
 *                             the maximum number of records that can be
 *                             written to the bad-record-table per
 *                             file/payload. Default value will be @ref
 *                             gpudb::insert_records_from_files_bad_record_table_limit
 *                             "bad_record_table_limit" and total size of the
 *                             table per rank is limited to @ref
 *                             gpudb::insert_records_from_files_bad_record_table_limit
 *                             "bad_record_table_limit".
 *                         <li>@ref gpudb::insert_records_from_files_batch_size
 *                             "insert_records_from_files_batch_size": Number
 *                             of records to insert per batch when inserting
 *                             data. The default value is '50000'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_column_formats
 *                             "insert_records_from_files_column_formats": For
 *                             each target column specified, applies the
 *                             column-property-bound format to the source data
 *                             loaded into that column.  Each column format
 *                             will contain a mapping of one or more of its
 *                             column properties to an appropriate format for
 *                             each property.  Currently supported column
 *                             properties include date, time, & datetime. The
 *                             parameter value must be formatted as a JSON
 *                             string of maps of column names to maps of column
 *                             properties to their corresponding column
 *                             formats, e.g., '{ "order_date" : { "date" :
 *                             "%Y.%m.%d" }, "order_time" : { "time" :
 *                             "%H:%M:%S" } }'.  See @ref
 *                             gpudb::insert_records_from_files_default_column_formats
 *                             "default_column_formats" for valid format
 *                             syntax.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_columns_to_load
 *                             "insert_records_from_files_columns_to_load":
 *                             Specifies a comma-delimited list of columns from
 *                             the source data to load.  If more than one file
 *                             is being loaded, this list applies to all files.
 *                             Column numbers can be specified discretely or as
 *                             a range.  For example, a value of '5,7,1..3'
 *                             will insert values from the fifth column in the
 *                             source data into the first column in the target
 *                             table, from the seventh column in the source
 *                             data into the second column in the target table,
 *                             and from the first through third columns in the
 *                             source data into the third through fifth columns
 *                             in the target table.  If the source data
 *                             contains a header, column names matching the
 *                             file header names may be provided instead of
 *                             column numbers.  If the target table doesn't
 *                             exist, the table will be created with the
 *                             columns in this order.  If the target table does
 *                             exist with columns in a different order than the
 *                             source data, this list can be used to match the
 *                             order of the target table.  For example, a value
 *                             of 'C, B, A' will create a three column table
 *                             with column C, followed by column B, followed by
 *                             column A; or will insert those fields in that
 *                             order into a table created with columns in that
 *                             order.  If the target table exists, the column
 *                             names must match the source data field names for
 *                             a name-mapping to be successful.  Mutually
 *                             exclusive with @ref
 *                             gpudb::insert_records_from_files_columns_to_skip
 *                             "columns_to_skip".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_columns_to_skip
 *                             "insert_records_from_files_columns_to_skip":
 *                             Specifies a comma-delimited list of columns from
 *                             the source data to skip.  Mutually exclusive
 *                             with @ref
 *                             gpudb::insert_records_from_files_columns_to_load
 *                             "columns_to_load".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_compression_type
 *                             "insert_records_from_files_compression_type":
 *                             Source data compression type.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_none
 *                                     "insert_records_from_files_none": No
 *                                     compression.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_auto
 *                                     "insert_records_from_files_auto": Auto
 *                                     detect compression type
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_gzip
 *                                     "insert_records_from_files_gzip": gzip
 *                                     file compression.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_bzip2
 *                                     "insert_records_from_files_bzip2": bzip2
 *                                     file compression.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_auto
 *                             "insert_records_from_files_auto".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_datasource_name
 *                             "insert_records_from_files_datasource_name":
 *                             Name of an existing external data source from
 *                             which data file(s) specified in @a filepaths
 *                             will be loaded
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_default_column_formats
 *                             "insert_records_from_files_default_column_formats":
 *                             Specifies the default format to be applied to
 *                             source data loaded into columns with the
 *                             corresponding column property.  Currently
 *                             supported column properties include date, time,
 *                             & datetime.  This default column-property-bound
 *                             format can be overridden by specifying a column
 *                             property & format for a given target column in
 *                             @ref
 *                             gpudb::insert_records_from_files_column_formats
 *                             "column_formats". For each specified annotation,
 *                             the format will apply to all columns with that
 *                             annotation unless a custom @ref
 *                             gpudb::insert_records_from_files_column_formats
 *                             "column_formats" for that annotation is
 *                             specified.  The parameter value must be
 *                             formatted as a JSON string that is a map of
 *                             column properties to their respective column
 *                             formats, e.g., '{ "date" : "%Y.%m.%d", "time" :
 *                             "%H:%M:%S" }'.  Column formats are specified as
 *                             a string of control characters and plain text.
 *                             The supported control characters are 'Y', 'm',
 *                             'd', 'H', 'M', 'S', and 's', which follow the
 *                             Linux 'strptime()' specification, as well as
 *                             's', which specifies seconds and fractional
 *                             seconds (though the fractional component will be
 *                             truncated past milliseconds).  Formats for the
 *                             'date' annotation must include the 'Y', 'm', and
 *                             'd' control characters. Formats for the 'time'
 *                             annotation must include the 'H', 'M', and either
 *                             'S' or 's' (but not both) control characters.
 *                             Formats for the 'datetime' annotation meet both
 *                             the 'date' and 'time' control character
 *                             requirements. For example, '{"datetime" :
 *                             "%m/%d/%Y %H:%M:%S" }' would be used to
 *                             interpret text as "05/04/2000 12:12:11"
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_error_handling
 *                             "insert_records_from_files_error_handling":
 *                             Specifies how errors should be handled upon
 *                             insertion.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_permissive
 *                                     "insert_records_from_files_permissive":
 *                                     Records with missing columns are
 *                                     populated with nulls if possible;
 *                                     otherwise, the malformed records are
 *                                     skipped.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_ignore_bad_records
 *                                     "insert_records_from_files_ignore_bad_records":
 *                                     Malformed records are skipped.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_abort
 *                                     "insert_records_from_files_abort": Stops
 *                                     current insertion and aborts entire
 *                                     operation when an error is encountered.
 *                                     Primary key collisions are considered
 *                                     abortable errors in this mode.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_abort
 *                             "insert_records_from_files_abort".
 *                         <li>@ref gpudb::insert_records_from_files_file_type
 *                             "insert_records_from_files_file_type": Specifies
 *                             the type of the file(s) whose records will be
 *                             inserted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_avro
 *                                     "insert_records_from_files_avro": Avro
 *                                     file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_delimited_text
 *                                     "insert_records_from_files_delimited_text":
 *                                     Delimited text file format; e.g., CSV,
 *                                     TSV, PSV, etc.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_gdb
 *                                     "insert_records_from_files_gdb":
 *                                     Esri/GDB file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_json
 *                                     "insert_records_from_files_json": Json
 *                                     file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_parquet
 *                                     "insert_records_from_files_parquet":
 *                                     Apache Parquet file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_shapefile
 *                                     "insert_records_from_files_shapefile":
 *                                     ShapeFile file format
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "insert_records_from_files_delimited_text".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_flatten_columns
 *                             "insert_records_from_files_flatten_columns":
 *                             Specifies how to handle nested columns.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true": Break
 *                                     up nested columns to multiple columns
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false": Treat
 *                                     nested columns as json columns instead
 *                                     of flattening
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_gdal_configuration_options
 *                             "insert_records_from_files_gdal_configuration_options":
 *                             Comma separated list of gdal conf options, for
 *                             the specific requets: key=value
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_ignore_existing_pk
 *                             "insert_records_from_files_ignore_existing_pk":
 *                             Specifies the record collision error-suppression
 *                             policy for inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             not in upsert mode (upsert mode is disabled when
 *                             @ref
 *                             gpudb::insert_records_from_files_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_from_files_false "false").
 *                             If set to @ref
 *                             gpudb::insert_records_from_files_true "true",
 *                             any record being inserted that is rejected for
 *                             having primary key values that match those of an
 *                             existing table record will be ignored with no
 *                             error generated.  If @ref
 *                             gpudb::insert_records_from_files_false "false",
 *                             the rejection of any record for having primary
 *                             key values matching an existing record will
 *                             result in an error being reported, as determined
 *                             by @ref
 *                             gpudb::insert_records_from_files_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key or if upsert mode is in
 *                             effect (@ref
 *                             gpudb::insert_records_from_files_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_from_files_true "true"),
 *                             then this option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true": Ignore
 *                                     new records whose primary key values
 *                                     collide with those of existing records
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false": Treat
 *                                     as errors any new records whose primary
 *                                     key values collide with those of
 *                                     existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_ingestion_mode
 *                             "insert_records_from_files_ingestion_mode":
 *                             Whether to do a full load, dry run, or perform a
 *                             type inference on the source data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_full
 *                                     "insert_records_from_files_full": Run a
 *                                     type inference on the source data (if
 *                                     needed) and ingest
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_dry_run
 *                                     "insert_records_from_files_dry_run":
 *                                     Does not load data, but walks through
 *                                     the source data and determines the
 *                                     number of valid records, taking into
 *                                     account the current mode of @ref
 *                                     gpudb::insert_records_from_files_error_handling
 *                                     "error_handling".
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_type_inference_only
 *                                     "insert_records_from_files_type_inference_only":
 *                                     Infer the type of the source data and
 *                                     return, without ingesting any data.  The
 *                                     inferred type is returned in the
 *                                     response.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_full
 *                             "insert_records_from_files_full".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_kafka_consumers_per_rank
 *                             "insert_records_from_files_kafka_consumers_per_rank":
 *                             Number of Kafka consumer threads per rank (valid
 *                             range 1-6). The default value is '1'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_kafka_group_id
 *                             "insert_records_from_files_kafka_group_id": The
 *                             group id to be used when consuming data from a
 *                             Kafka topic (valid only for Kafka datasource
 *                             subscriptions).
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_kafka_offset_reset_policy
 *                             "insert_records_from_files_kafka_offset_reset_policy":
 *                             Policy to determine whether the Kafka data
 *                             consumption starts either at earliest offset or
 *                             latest offset.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_earliest
 *                                     "insert_records_from_files_earliest"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_latest
 *                                     "insert_records_from_files_latest"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_earliest
 *                             "insert_records_from_files_earliest".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_kafka_optimistic_ingest
 *                             "insert_records_from_files_kafka_optimistic_ingest":
 *                             Enable optimistic ingestion where Kafka topic
 *                             offsets and table data are committed
 *                             independently to achieve parallelism.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_kafka_subscription_cancel_after
 *                             "insert_records_from_files_kafka_subscription_cancel_after":
 *                             Sets the Kafka subscription lifespan (in
 *                             minutes). Expired subscription will be cancelled
 *                             automatically.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_kafka_type_inference_fetch_timeout
 *                             "insert_records_from_files_kafka_type_inference_fetch_timeout":
 *                             Maximum time to collect Kafka messages before
 *                             type inferencing on the set of them.
 *                         <li>@ref gpudb::insert_records_from_files_layer
 *                             "insert_records_from_files_layer": Geo files
 *                             layer(s) name(s): comma separated.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_loading_mode
 *                             "insert_records_from_files_loading_mode": Scheme
 *                             for distributing the extraction and loading of
 *                             data from the source data file(s). This option
 *                             applies only when loading files that are local
 *                             to the database.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_head
 *                                     "insert_records_from_files_head": The
 *                                     head node loads all data. All files must
 *                                     be available to the head node.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_distributed_shared
 *                                     "insert_records_from_files_distributed_shared":
 *                                     The head node coordinates loading data
 *                                     by worker processes across all nodes
 *                                     from shared files available to all
 *                                     workers.  NOTE:  Instead of existing on
 *                                     a shared source, the files can be
 *                                     duplicated on a source local to each
 *                                     host to improve performance, though the
 *                                     files must appear as the same data set
 *                                     from the perspective of all hosts
 *                                     performing the load.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_distributed_local
 *                                     "insert_records_from_files_distributed_local":
 *                                     A single worker process on each node
 *                                     loads all files that are available to
 *                                     it. This option works best when each
 *                                     worker loads files from its own file
 *                                     system, to maximize performance. In
 *                                     order to avoid data duplication, either
 *                                     each worker performing the load needs to
 *                                     have visibility to a set of files unique
 *                                     to it (no file is visible to more than
 *                                     one node) or the target table needs to
 *                                     have a primary key (which will allow the
 *                                     worker to automatically deduplicate
 *                                     data).  NOTE:  If the target table
 *                                     doesn't exist, the table structure will
 *                                     be determined by the head node. If the
 *                                     head node has no files local to it, it
 *                                     will be unable to determine the
 *                                     structure and the request will fail.  If
 *                                     the head node is configured to have no
 *                                     worker processes, no data strictly
 *                                     accessible to the head node will be
 *                                     loaded.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_head
 *                             "insert_records_from_files_head".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_local_time_offset
 *                             "insert_records_from_files_local_time_offset":
 *                             Apply an offset to Avro local timestamp columns.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_max_records_to_load
 *                             "insert_records_from_files_max_records_to_load":
 *                             Limit the number of records to load in this
 *                             request: if this number is larger than @ref
 *                             gpudb::insert_records_from_files_batch_size
 *                             "batch_size", then the number of records loaded
 *                             will be limited to the next whole number of @ref
 *                             gpudb::insert_records_from_files_batch_size
 *                             "batch_size" (per working thread).
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_num_tasks_per_rank
 *                             "insert_records_from_files_num_tasks_per_rank":
 *                             Number of tasks for reading file per rank.
 *                             Default will be system configuration parameter,
 *                             external_file_reader_num_tasks.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_poll_interval
 *                             "insert_records_from_files_poll_interval": If
 *                             @ref gpudb::insert_records_from_files_true
 *                             "true", the number of seconds between attempts
 *                             to load external files into the table.  If zero,
 *                             polling will be continuous as long as data is
 *                             found.  If no data is found, the interval will
 *                             steadily increase to a maximum of 60 seconds.
 *                             The default value is '0'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_primary_keys
 *                             "insert_records_from_files_primary_keys": Comma
 *                             separated list of column names to set as primary
 *                             keys, when not specified in the type.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_schema_registry_schema_name
 *                             "insert_records_from_files_schema_registry_schema_name":
 *                             Name of the Avro schema in the schema registry
 *                             to use when reading Avro records.
 *                         <li>@ref gpudb::insert_records_from_files_shard_keys
 *                             "insert_records_from_files_shard_keys": Comma
 *                             separated list of column names to set as shard
 *                             keys, when not specified in the type.
 *                         <li>@ref gpudb::insert_records_from_files_skip_lines
 *                             "insert_records_from_files_skip_lines": Skip
 *                             number of lines from begining of file.
 *                         <li>@ref gpudb::insert_records_from_files_subscribe
 *                             "insert_records_from_files_subscribe":
 *                             Continuously poll the data source to check for
 *                             new data and load it into the table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_table_insert_mode
 *                             "insert_records_from_files_table_insert_mode":
 *                             Insertion scheme to use when inserting records
 *                             from multiple shapefiles.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_single
 *                                     "insert_records_from_files_single":
 *                                     Insert all records into a single table.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_table_per_file
 *                                     "insert_records_from_files_table_per_file":
 *                                     Insert records from each file into a new
 *                                     table corresponding to that file.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_single
 *                             "insert_records_from_files_single".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_comment_string
 *                             "insert_records_from_files_text_comment_string":
 *                             Specifies the character string that should be
 *                             interpreted as a comment line prefix in the
 *                             source data.  All lines in the data starting
 *                             with the provided string are ignored.  For @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only. The default value is '#'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_delimiter
 *                             "insert_records_from_files_text_delimiter":
 *                             Specifies the character delimiting field values
 *                             in the source data and field names in the header
 *                             (if present).  For @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only. The default value is ','.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_escape_character
 *                             "insert_records_from_files_text_escape_character":
 *                             Specifies the character that is used to escape
 *                             other characters in the source data.  An 'a',
 *                             'b', 'f', 'n', 'r', 't', or 'v' preceded by an
 *                             escape character will be interpreted as the
 *                             ASCII bell, backspace, form feed, line feed,
 *                             carriage return, horizontal tab, & vertical tab,
 *                             respectively.  For example, the escape character
 *                             followed by an 'n' will be interpreted as a
 *                             newline within a field value.  The escape
 *                             character can also be used to escape the quoting
 *                             character, and will be treated as an escape
 *                             character whether it is within a quoted field
 *                             value or not.  For @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_has_header
 *                             "insert_records_from_files_text_has_header":
 *                             Indicates whether the source data contains a
 *                             header row.  For @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_true
 *                             "insert_records_from_files_true".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_header_property_delimiter
 *                             "insert_records_from_files_text_header_property_delimiter":
 *                             Specifies the delimiter for <a
 *                             href="../../../concepts/types/#column-properties"
 *                             target="_top">column properties</a> in the
 *                             header row (if present).  Cannot be set to same
 *                             value as @ref
 *                             gpudb::insert_records_from_files_text_delimiter
 *                             "text_delimiter".  For @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only. The default value is '|'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_null_string
 *                             "insert_records_from_files_text_null_string":
 *                             Specifies the character string that should be
 *                             interpreted as a null value in the source data.
 *                             For @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only. The default value is '\\N'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_quote_character
 *                             "insert_records_from_files_text_quote_character":
 *                             Specifies the character that should be
 *                             interpreted as a field value quoting character
 *                             in the source data.  The character must appear
 *                             at beginning and end of field value to take
 *                             effect.  Delimiters within quoted fields are
 *                             treated as literals and not delimiters.  Within
 *                             a quoted field, two consecutive quote characters
 *                             will be interpreted as a single literal quote
 *                             character, effectively escaping it.  To not have
 *                             a quote character, specify an empty string.  For
 *                             @ref
 *                             gpudb::insert_records_from_files_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_files_file_type
 *                             "file_type" only. The default value is '"'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_search_columns
 *                             "insert_records_from_files_text_search_columns":
 *                             Add 'text_search' property to internally
 *                             inferenced string columns. Comma seperated list
 *                             of column names or '*' for all columns. To add
 *                             'text_search' property only to string columns
 *                             greater than or equal to a minimum size, also
 *                             set the @ref
 *                             gpudb::insert_records_from_files_text_search_min_column_length
 *                             "text_search_min_column_length"
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_text_search_min_column_length
 *                             "insert_records_from_files_text_search_min_column_length":
 *                             Set the minimum column size for strings to apply
 *                             the 'text_search' property to. Used only when
 *                             @ref
 *                             gpudb::insert_records_from_files_text_search_columns
 *                             "text_search_columns" has a value.
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_truncate_strings
 *                             "insert_records_from_files_truncate_strings": If
 *                             set to @ref
 *                             gpudb::insert_records_from_files_true "true",
 *                             truncate string values that are longer than the
 *                             column's type size.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_truncate_table
 *                             "insert_records_from_files_truncate_table": If
 *                             set to @ref
 *                             gpudb::insert_records_from_files_true "true",
 *                             truncates the table specified by @a tableName
 *                             prior to loading the file(s).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_type_inference_mode
 *                             "insert_records_from_files_type_inference_mode":
 *                             Optimize type inferencing for either speed or
 *                             accuracy.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_accuracy
 *                                     "insert_records_from_files_accuracy":
 *                                     Scans data to get exactly-typed & sized
 *                                     columns for all data scanned.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_speed
 *                                     "insert_records_from_files_speed": Scans
 *                                     data and picks the widest possible
 *                                     column types so that 'all' values will
 *                                     fit with minimum data scanned
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_accuracy
 *                             "insert_records_from_files_accuracy".
 *                         <li>@ref
 *                             gpudb::insert_records_from_files_update_on_existing_pk
 *                             "insert_records_from_files_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::insert_records_from_files_true "true",
 *                             any existing table record with primary key
 *                             values that match those of a record being
 *                             inserted will be replaced by that new record
 *                             (the new data will be 'upserted'). If set to
 *                             @ref gpudb::insert_records_from_files_false
 *                             "false", any existing table record with primary
 *                             key values that match those of a record being
 *                             inserted will remain unchanged, while the new
 *                             record will be rejected and the error handled as
 *                             determined by @ref
 *                             gpudb::insert_records_from_files_ignore_existing_pk
 *                             "ignore_existing_pk" & @ref
 *                             gpudb::insert_records_from_files_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key, then this option has no
 *                             effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_true
 *                                     "insert_records_from_files_true": Upsert
 *                                     new records when primary keys match
 *                                     existing records
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_files_false
 *                                     "insert_records_from_files_false":
 *                                     Reject new records when primary keys
 *                                     match existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_files_false
 *                             "insert_records_from_files_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::InsertRecordsFromFilesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::InsertRecordsFromFilesResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
InsertRecordsFromFilesResponse& insertRecordsFromFiles( const std::string& tableName,
                                                        const std::vector<std::string>& filepaths,
                                                        const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                        const std::map<std::string, std::string>& createTableOptions,
                                                        const std::map<std::string, std::string>& options,
                                                        InsertRecordsFromFilesResponse& response_ ) const;

/**
 * Reads from the given text-based or binary payload and inserts the data into
 * a new or existing table.  The table will be created if it doesn't already
 * exist.
 *
 * Returns once all records are processed.
 *
 * @param[in] request_  @ref gpudb::InsertRecordsFromPayloadRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::InsertRecordsFromPayloadResponse "Response" object
 *         containing the result of the operation.
 */
InsertRecordsFromPayloadResponse insertRecordsFromPayload( const InsertRecordsFromPayloadRequest& request_ ) const;

/**
 * Reads from the given text-based or binary payload and inserts the data into
 * a new or existing table.  The table will be created if it doesn't already
 * exist.
 *
 * Returns once all records are processed.
 *
 * @param[in] request_  @ref gpudb::InsertRecordsFromPayloadRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::InsertRecordsFromPayloadResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::InsertRecordsFromPayloadResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
InsertRecordsFromPayloadResponse& insertRecordsFromPayload( const InsertRecordsFromPayloadRequest& request_,
                                                            InsertRecordsFromPayloadResponse& response_ ) const;

/**
 * Reads from the given text-based or binary payload and inserts the data into
 * a new or existing table.  The table will be created if it doesn't already
 * exist.
 *
 * Returns once all records are processed.
 *
 * @param[in] tableName  Name of the table into which the data will be
 *                       inserted, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. If the table
 *                       does not exist, the table will be created using either
 *                       an existing @ref
 *                       gpudb::insert_records_from_payload_type_id "type_id"
 *                       or the type inferred from the payload, and the new
 *                       table name will have to meet standard <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.
 * @param[in] dataText  Records formatted as delimited text
 * @param[in] dataBytes  Records formatted as binary data
 * @param[in] modifyColumns  Not implemented yet. The default value is an empty
 *                           map.
 * @param[in] createTableOptions  Options used when creating the target table.
 *                                Includes type to use. The other options match
 *                                those in @ref
 *                                createTable(const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                "createTable".
 *                                <ul>
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_type_id
 *                                        "insert_records_from_payload_type_id":
 *                                        ID of a currently registered <a
 *                                        href="../../../concepts/types/"
 *                                        target="_top">type</a>. The default
 *                                        value is ''.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_no_error_if_exists
 *                                        "insert_records_from_payload_no_error_if_exists":
 *                                        If @ref
 *                                        gpudb::insert_records_from_payload_true
 *                                        "true", prevents an error from
 *                                        occurring if the table already exists
 *                                        and is of the given type.  If a table
 *                                        with the same ID but a different type
 *                                        exists, it is still an error.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_true
 *                                                "insert_records_from_payload_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_false
 *                                                "insert_records_from_payload_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_payload_false
 *                                        "insert_records_from_payload_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_is_replicated
 *                                        "insert_records_from_payload_is_replicated":
 *                                        Affects the <a
 *                                        href="../../../concepts/tables/#distribution"
 *                                        target="_top">distribution scheme</a>
 *                                        for the table's data.  If @ref
 *                                        gpudb::insert_records_from_payload_true
 *                                        "true" and the given type has no
 *                                        explicit <a
 *                                        href="../../../concepts/tables/#shard-key"
 *                                        target="_top">shard key</a> defined,
 *                                        the table will be <a
 *                                        href="../../../concepts/tables/#replication"
 *                                        target="_top">replicated</a>.  If
 *                                        @ref
 *                                        gpudb::insert_records_from_payload_false
 *                                        "false", the table will be <a
 *                                        href="../../../concepts/tables/#sharding"
 *                                        target="_top">sharded</a> according
 *                                        to the shard key specified in the
 *                                        given @ref
 *                                        gpudb::insert_records_from_payload_type_id
 *                                        "type_id", or <a
 *                                        href="../../../concepts/tables/#random-sharding"
 *                                        target="_top">randomly sharded</a>,
 *                                        if no shard key is specified.  Note
 *                                        that a type containing a shard key
 *                                        cannot be used to create a replicated
 *                                        table.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_true
 *                                                "insert_records_from_payload_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_false
 *                                                "insert_records_from_payload_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_payload_false
 *                                        "insert_records_from_payload_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_foreign_keys
 *                                        "insert_records_from_payload_foreign_keys":
 *                                        Semicolon-separated list of <a
 *                                        href="../../../concepts/tables/#foreign-keys"
 *                                        target="_top">foreign keys</a>, of
 *                                        the format '(source_column_name [,
 *                                        ...]) references
 *                                        target_table_name(primary_key_column_name
 *                                        [, ...]) [as foreign_key_name]'.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_foreign_shard_key
 *                                        "insert_records_from_payload_foreign_shard_key":
 *                                        Foreign shard key of the format
 *                                        'source_column references
 *                                        shard_by_column from
 *                                        target_table(primary_key_column)'.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_partition_type
 *                                        "insert_records_from_payload_partition_type":
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning"
 *                                        target="_top">Partitioning</a> scheme
 *                                        to use.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_RANGE
 *                                                "insert_records_from_payload_RANGE":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-range"
 *                                                target="_top">range
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_INTERVAL
 *                                                "insert_records_from_payload_INTERVAL":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-interval"
 *                                                target="_top">interval
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_LIST
 *                                                "insert_records_from_payload_LIST":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-list"
 *                                                target="_top">list
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_HASH
 *                                                "insert_records_from_payload_HASH":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-hash"
 *                                                target="_top">hash
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_SERIES
 *                                                "insert_records_from_payload_SERIES":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-series"
 *                                                target="_top">series
 *                                                partitioning</a>.
 *                                        </ul>
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_partition_keys
 *                                        "insert_records_from_payload_partition_keys":
 *                                        Comma-separated list of partition
 *                                        keys, which are the columns or column
 *                                        expressions by which records will be
 *                                        assigned to partitions defined by
 *                                        @ref
 *                                        gpudb::insert_records_from_payload_partition_definitions
 *                                        "partition_definitions".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_partition_definitions
 *                                        "insert_records_from_payload_partition_definitions":
 *                                        Comma-separated list of partition
 *                                        definitions, whose format depends on
 *                                        the choice of @ref
 *                                        gpudb::insert_records_from_payload_partition_type
 *                                        "partition_type".  See <a
 *                                        href="../../../concepts/tables/#partitioning-by-range"
 *                                        target="_top">range partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-interval"
 *                                        target="_top">interval
 *                                        partitioning</a>, <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-hash"
 *                                        target="_top">hash partitioning</a>,
 *                                        or <a
 *                                        href="../../../concepts/tables/#partitioning-by-series"
 *                                        target="_top">series partitioning</a>
 *                                        for example formats.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_is_automatic_partition
 *                                        "insert_records_from_payload_is_automatic_partition":
 *                                        If @ref
 *                                        gpudb::insert_records_from_payload_true
 *                                        "true", a new partition will be
 *                                        created for values which don't fall
 *                                        into an existing partition.
 *                                        Currently only supported for <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitions</a>.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_true
 *                                                "insert_records_from_payload_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_false
 *                                                "insert_records_from_payload_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_payload_false
 *                                        "insert_records_from_payload_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_ttl
 *                                        "insert_records_from_payload_ttl":
 *                                        Sets the <a
 *                                        href="../../../concepts/ttl/"
 *                                        target="_top">TTL</a> of the table
 *                                        specified in @a tableName.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_chunk_size
 *                                        "insert_records_from_payload_chunk_size":
 *                                        Indicates the number of records per
 *                                        chunk to be used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_chunk_column_max_memory
 *                                        "insert_records_from_payload_chunk_column_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for each column in a chunk to be
 *                                        used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_chunk_max_memory
 *                                        "insert_records_from_payload_chunk_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for all columns in a chunk to be
 *                                        used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_is_result_table
 *                                        "insert_records_from_payload_is_result_table":
 *                                        Indicates whether the table is a <a
 *                                        href="../../../concepts/tables_memory_only/"
 *                                        target="_top">memory-only table</a>.
 *                                        A result table cannot contain columns
 *                                        with text_search <a
 *                                        href="../../../concepts/types/#data-handling"
 *                                        target="_top">data-handling</a>, and
 *                                        it will not be retained if the server
 *                                        is restarted.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_true
 *                                                "insert_records_from_payload_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_false
 *                                                "insert_records_from_payload_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_payload_false
 *                                        "insert_records_from_payload_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_strategy_definition
 *                                        "insert_records_from_payload_strategy_definition":
 *                                        The <a
 *                                        href="../../../rm/concepts/#tier-strategies"
 *                                        target="_top">tier strategy</a> for
 *                                        the table and its columns.
 *                                </ul>
 *                                The default value is an empty map.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_avro_header_bytes
 *                             "insert_records_from_payload_avro_header_bytes":
 *                             Optional number of bytes to skip when reading an
 *                             avro record.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_avro_num_records
 *                             "insert_records_from_payload_avro_num_records":
 *                             Optional number of avro records, if data
 *                             includes only records.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_avro_schema
 *                             "insert_records_from_payload_avro_schema":
 *                             Optional string representing avro schema, for
 *                             insert records in avro format, that does not
 *                             include is schema.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_avro_schemaless
 *                             "insert_records_from_payload_avro_schemaless":
 *                             When user provides 'avro_schema', avro data is
 *                             assumed to be schemaless, unless specified.
 *                             Default is 'true' when given avro_schema.
 *                             Igonred when avro_schema is not given.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false"
 *                             </ul>
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_bad_record_table_name
 *                             "insert_records_from_payload_bad_record_table_name":
 *                             Optional name of a table to which records that
 *                             were rejected are written.  The bad-record-table
 *                             has the following columns: line_number (long),
 *                             line_rejected (string), error_message (string).
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_bad_record_table_limit
 *                             "insert_records_from_payload_bad_record_table_limit":
 *                             A positive integer indicating the maximum number
 *                             of records that can be  written to the
 *                             bad-record-table.   Default value is 10000
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_bad_record_table_limit_per_input
 *                             "insert_records_from_payload_bad_record_table_limit_per_input":
 *                             For subscriptions: A positive integer indicating
 *                             the maximum number of records that can be
 *                             written to the bad-record-table per
 *                             file/payload. Default value will be
 *                             'bad_record_table_limit' and total size of the
 *                             table per rank is limited to
 *                             'bad_record_table_limit'
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_batch_size
 *                             "insert_records_from_payload_batch_size":
 *                             Internal tuning parameter--number of records per
 *                             batch when inserting data.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_column_formats
 *                             "insert_records_from_payload_column_formats":
 *                             For each target column specified, applies the
 *                             column-property-bound format to the source data
 *                             loaded into that column.  Each column format
 *                             will contain a mapping of one or more of its
 *                             column properties to an appropriate format for
 *                             each property.  Currently supported column
 *                             properties include date, time, & datetime. The
 *                             parameter value must be formatted as a JSON
 *                             string of maps of column names to maps of column
 *                             properties to their corresponding column
 *                             formats, e.g., '{ "order_date" : { "date" :
 *                             "%Y.%m.%d" }, "order_time" : { "time" :
 *                             "%H:%M:%S" } }'.  See @ref
 *                             gpudb::insert_records_from_payload_default_column_formats
 *                             "default_column_formats" for valid format
 *                             syntax.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_columns_to_load
 *                             "insert_records_from_payload_columns_to_load":
 *                             Specifies a comma-delimited list of columns from
 *                             the source data to load.  If more than one file
 *                             is being loaded, this list applies to all files.
 *                             Column numbers can be specified discretely or as
 *                             a range.  For example, a value of '5,7,1..3'
 *                             will insert values from the fifth column in the
 *                             source data into the first column in the target
 *                             table, from the seventh column in the source
 *                             data into the second column in the target table,
 *                             and from the first through third columns in the
 *                             source data into the third through fifth columns
 *                             in the target table.  If the source data
 *                             contains a header, column names matching the
 *                             file header names may be provided instead of
 *                             column numbers.  If the target table doesn't
 *                             exist, the table will be created with the
 *                             columns in this order.  If the target table does
 *                             exist with columns in a different order than the
 *                             source data, this list can be used to match the
 *                             order of the target table.  For example, a value
 *                             of 'C, B, A' will create a three column table
 *                             with column C, followed by column B, followed by
 *                             column A; or will insert those fields in that
 *                             order into a table created with columns in that
 *                             order.  If the target table exists, the column
 *                             names must match the source data field names for
 *                             a name-mapping to be successful.  Mutually
 *                             exclusive with @ref
 *                             gpudb::insert_records_from_payload_columns_to_skip
 *                             "columns_to_skip".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_columns_to_skip
 *                             "insert_records_from_payload_columns_to_skip":
 *                             Specifies a comma-delimited list of columns from
 *                             the source data to skip.  Mutually exclusive
 *                             with @ref
 *                             gpudb::insert_records_from_payload_columns_to_load
 *                             "columns_to_load".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_compression_type
 *                             "insert_records_from_payload_compression_type":
 *                             Optional: payload compression type.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_none
 *                                     "insert_records_from_payload_none":
 *                                     Uncompressed
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_auto
 *                                     "insert_records_from_payload_auto":
 *                                     Default. Auto detect compression type
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_gzip
 *                                     "insert_records_from_payload_gzip": gzip
 *                                     file compression.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_bzip2
 *                                     "insert_records_from_payload_bzip2":
 *                                     bzip2 file compression.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_auto
 *                             "insert_records_from_payload_auto".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_default_column_formats
 *                             "insert_records_from_payload_default_column_formats":
 *                             Specifies the default format to be applied to
 *                             source data loaded into columns with the
 *                             corresponding column property.  Currently
 *                             supported column properties include date, time,
 *                             & datetime.  This default column-property-bound
 *                             format can be overridden by specifying a column
 *                             property & format for a given target column in
 *                             @ref
 *                             gpudb::insert_records_from_payload_column_formats
 *                             "column_formats". For each specified annotation,
 *                             the format will apply to all columns with that
 *                             annotation unless a custom @ref
 *                             gpudb::insert_records_from_payload_column_formats
 *                             "column_formats" for that annotation is
 *                             specified.  The parameter value must be
 *                             formatted as a JSON string that is a map of
 *                             column properties to their respective column
 *                             formats, e.g., '{ "date" : "%Y.%m.%d", "time" :
 *                             "%H:%M:%S" }'.  Column formats are specified as
 *                             a string of control characters and plain text.
 *                             The supported control characters are 'Y', 'm',
 *                             'd', 'H', 'M', 'S', and 's', which follow the
 *                             Linux 'strptime()' specification, as well as
 *                             's', which specifies seconds and fractional
 *                             seconds (though the fractional component will be
 *                             truncated past milliseconds).  Formats for the
 *                             'date' annotation must include the 'Y', 'm', and
 *                             'd' control characters. Formats for the 'time'
 *                             annotation must include the 'H', 'M', and either
 *                             'S' or 's' (but not both) control characters.
 *                             Formats for the 'datetime' annotation meet both
 *                             the 'date' and 'time' control character
 *                             requirements. For example, '{"datetime" :
 *                             "%m/%d/%Y %H:%M:%S" }' would be used to
 *                             interpret text as "05/04/2000 12:12:11"
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_error_handling
 *                             "insert_records_from_payload_error_handling":
 *                             Specifies how errors should be handled upon
 *                             insertion.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_permissive
 *                                     "insert_records_from_payload_permissive":
 *                                     Records with missing columns are
 *                                     populated with nulls if possible;
 *                                     otherwise, the malformed records are
 *                                     skipped.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_ignore_bad_records
 *                                     "insert_records_from_payload_ignore_bad_records":
 *                                     Malformed records are skipped.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_abort
 *                                     "insert_records_from_payload_abort":
 *                                     Stops current insertion and aborts
 *                                     entire operation when an error is
 *                                     encountered.  Primary key collisions are
 *                                     considered abortable errors in this
 *                                     mode.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_abort
 *                             "insert_records_from_payload_abort".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "insert_records_from_payload_file_type":
 *                             Specifies the type of the file(s) whose records
 *                             will be inserted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_avro
 *                                     "insert_records_from_payload_avro": Avro
 *                                     file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_delimited_text
 *                                     "insert_records_from_payload_delimited_text":
 *                                     Delimited text file format; e.g., CSV,
 *                                     TSV, PSV, etc.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_gdb
 *                                     "insert_records_from_payload_gdb":
 *                                     Esri/GDB file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_json
 *                                     "insert_records_from_payload_json": Json
 *                                     file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_parquet
 *                                     "insert_records_from_payload_parquet":
 *                                     Apache Parquet file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_shapefile
 *                                     "insert_records_from_payload_shapefile":
 *                                     ShapeFile file format
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "insert_records_from_payload_delimited_text".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_flatten_columns
 *                             "insert_records_from_payload_flatten_columns":
 *                             Specifies how to handle nested columns.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true":
 *                                     Break up nested columns to multiple
 *                                     columns
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false":
 *                                     Treat nested columns as json columns
 *                                     instead of flattening
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "insert_records_from_payload_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_gdal_configuration_options
 *                             "insert_records_from_payload_gdal_configuration_options":
 *                             Comma separated list of gdal conf options, for
 *                             the specific requets: key=value. The default
 *                             value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_ignore_existing_pk
 *                             "insert_records_from_payload_ignore_existing_pk":
 *                             Specifies the record collision error-suppression
 *                             policy for inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             not in upsert mode (upsert mode is disabled when
 *                             @ref
 *                             gpudb::insert_records_from_payload_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "false").  If set to @ref
 *                             gpudb::insert_records_from_payload_true "true",
 *                             any record being inserted that is rejected for
 *                             having primary key values that match those of an
 *                             existing table record will be ignored with no
 *                             error generated.  If @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "false", the rejection of any record for having
 *                             primary key values matching an existing record
 *                             will result in an error being reported, as
 *                             determined by @ref
 *                             gpudb::insert_records_from_payload_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key or if upsert mode is in
 *                             effect (@ref
 *                             gpudb::insert_records_from_payload_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_from_payload_true "true"),
 *                             then this option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true":
 *                                     Ignore new records whose primary key
 *                                     values collide with those of existing
 *                                     records
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false":
 *                                     Treat as errors any new records whose
 *                                     primary key values collide with those of
 *                                     existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "insert_records_from_payload_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_ingestion_mode
 *                             "insert_records_from_payload_ingestion_mode":
 *                             Whether to do a full load, dry run, or perform a
 *                             type inference on the source data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_full
 *                                     "insert_records_from_payload_full": Run
 *                                     a type inference on the source data (if
 *                                     needed) and ingest
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_dry_run
 *                                     "insert_records_from_payload_dry_run":
 *                                     Does not load data, but walks through
 *                                     the source data and determines the
 *                                     number of valid records, taking into
 *                                     account the current mode of @ref
 *                                     gpudb::insert_records_from_payload_error_handling
 *                                     "error_handling".
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_type_inference_only
 *                                     "insert_records_from_payload_type_inference_only":
 *                                     Infer the type of the source data and
 *                                     return, without ingesting any data.  The
 *                                     inferred type is returned in the
 *                                     response.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_full
 *                             "insert_records_from_payload_full".
 *                         <li>@ref gpudb::insert_records_from_payload_layer
 *                             "insert_records_from_payload_layer": Optional:
 *                             geo files layer(s) name(s): comma separated. The
 *                             default value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_loading_mode
 *                             "insert_records_from_payload_loading_mode":
 *                             Scheme for distributing the extraction and
 *                             loading of data from the source data file(s).
 *                             This option applies only when loading files that
 *                             are local to the database.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_head
 *                                     "insert_records_from_payload_head": The
 *                                     head node loads all data. All files must
 *                                     be available to the head node.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_distributed_shared
 *                                     "insert_records_from_payload_distributed_shared":
 *                                     The head node coordinates loading data
 *                                     by worker processes across all nodes
 *                                     from shared files available to all
 *                                     workers.  NOTE:  Instead of existing on
 *                                     a shared source, the files can be
 *                                     duplicated on a source local to each
 *                                     host to improve performance, though the
 *                                     files must appear as the same data set
 *                                     from the perspective of all hosts
 *                                     performing the load.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_distributed_local
 *                                     "insert_records_from_payload_distributed_local":
 *                                     A single worker process on each node
 *                                     loads all files that are available to
 *                                     it. This option works best when each
 *                                     worker loads files from its own file
 *                                     system, to maximize performance. In
 *                                     order to avoid data duplication, either
 *                                     each worker performing the load needs to
 *                                     have visibility to a set of files unique
 *                                     to it (no file is visible to more than
 *                                     one node) or the target table needs to
 *                                     have a primary key (which will allow the
 *                                     worker to automatically deduplicate
 *                                     data).  NOTE:  If the target table
 *                                     doesn't exist, the table structure will
 *                                     be determined by the head node. If the
 *                                     head node has no files local to it, it
 *                                     will be unable to determine the
 *                                     structure and the request will fail.  If
 *                                     the head node is configured to have no
 *                                     worker processes, no data strictly
 *                                     accessible to the head node will be
 *                                     loaded.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_head
 *                             "insert_records_from_payload_head".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_local_time_offset
 *                             "insert_records_from_payload_local_time_offset":
 *                             For Avro local timestamp columns
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_max_records_to_load
 *                             "insert_records_from_payload_max_records_to_load":
 *                             Limit the number of records to load in this
 *                             request: If this number is larger than a
 *                             batch_size, then the number of records loaded
 *                             will be limited to the next whole number of
 *                             batch_size (per working thread). The default
 *                             value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_num_tasks_per_rank
 *                             "insert_records_from_payload_num_tasks_per_rank":
 *                             Optional: number of tasks for reading file per
 *                             rank. Default will be
 *                             external_file_reader_num_tasks
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_poll_interval
 *                             "insert_records_from_payload_poll_interval": If
 *                             @ref gpudb::insert_records_from_payload_true
 *                             "true", the number of seconds between attempts
 *                             to load external files into the table.  If zero,
 *                             polling will be continuous as long as data is
 *                             found.  If no data is found, the interval will
 *                             steadily increase to a maximum of 60 seconds.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_primary_keys
 *                             "insert_records_from_payload_primary_keys":
 *                             Optional: comma separated list of column names,
 *                             to set as primary keys, when not specified in
 *                             the type. The default value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_schema_registry_schema_id
 *                             "insert_records_from_payload_schema_registry_schema_id"
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_schema_registry_schema_name
 *                             "insert_records_from_payload_schema_registry_schema_name"
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_schema_registry_schema_version
 *                             "insert_records_from_payload_schema_registry_schema_version"
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_shard_keys
 *                             "insert_records_from_payload_shard_keys":
 *                             Optional: comma separated list of column names,
 *                             to set as primary keys, when not specified in
 *                             the type. The default value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_skip_lines
 *                             "insert_records_from_payload_skip_lines": Skip
 *                             number of lines from begining of file.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_subscribe
 *                             "insert_records_from_payload_subscribe":
 *                             Continuously poll the data source to check for
 *                             new data and load it into the table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "insert_records_from_payload_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_table_insert_mode
 *                             "insert_records_from_payload_table_insert_mode":
 *                             Optional: table_insert_mode. When inserting
 *                             records from multiple files: if table_per_file
 *                             then insert from each file into a new table.
 *                             Currently supported only for shapefiles.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_single
 *                                     "insert_records_from_payload_single"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_table_per_file
 *                                     "insert_records_from_payload_table_per_file"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_single
 *                             "insert_records_from_payload_single".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_comment_string
 *                             "insert_records_from_payload_text_comment_string":
 *                             Specifies the character string that should be
 *                             interpreted as a comment line prefix in the
 *                             source data.  All lines in the data starting
 *                             with the provided string are ignored.  For @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only. The default value is '#'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_delimiter
 *                             "insert_records_from_payload_text_delimiter":
 *                             Specifies the character delimiting field values
 *                             in the source data and field names in the header
 *                             (if present).  For @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only. The default value is ','.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_escape_character
 *                             "insert_records_from_payload_text_escape_character":
 *                             Specifies the character that is used to escape
 *                             other characters in the source data.  An 'a',
 *                             'b', 'f', 'n', 'r', 't', or 'v' preceded by an
 *                             escape character will be interpreted as the
 *                             ASCII bell, backspace, form feed, line feed,
 *                             carriage return, horizontal tab, & vertical tab,
 *                             respectively.  For example, the escape character
 *                             followed by an 'n' will be interpreted as a
 *                             newline within a field value.  The escape
 *                             character can also be used to escape the quoting
 *                             character, and will be treated as an escape
 *                             character whether it is within a quoted field
 *                             value or not.  For @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_has_header
 *                             "insert_records_from_payload_text_has_header":
 *                             Indicates whether the source data contains a
 *                             header row.  For @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_true
 *                             "insert_records_from_payload_true".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_header_property_delimiter
 *                             "insert_records_from_payload_text_header_property_delimiter":
 *                             Specifies the delimiter for <a
 *                             href="../../../concepts/types/#column-properties"
 *                             target="_top">column properties</a> in the
 *                             header row (if present).  Cannot be set to same
 *                             value as @ref
 *                             gpudb::insert_records_from_payload_text_delimiter
 *                             "text_delimiter".  For @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only. The default value is '|'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_null_string
 *                             "insert_records_from_payload_text_null_string":
 *                             Specifies the character string that should be
 *                             interpreted as a null value in the source data.
 *                             For @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only. The default value is '\\N'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_quote_character
 *                             "insert_records_from_payload_text_quote_character":
 *                             Specifies the character that should be
 *                             interpreted as a field value quoting character
 *                             in the source data.  The character must appear
 *                             at beginning and end of field value to take
 *                             effect.  Delimiters within quoted fields are
 *                             treated as literals and not delimiters.  Within
 *                             a quoted field, two consecutive quote characters
 *                             will be interpreted as a single literal quote
 *                             character, effectively escaping it.  To not have
 *                             a quote character, specify an empty string.  For
 *                             @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only. The default value is '"'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_search_columns
 *                             "insert_records_from_payload_text_search_columns":
 *                             Add 'text_search' property to internally
 *                             inferenced string columns. Comma seperated list
 *                             of column names or '*' for all columns. To add
 *                             text_search property only to string columns of
 *                             minimum size, set also the option
 *                             'text_search_min_column_length'
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_search_min_column_length
 *                             "insert_records_from_payload_text_search_min_column_length":
 *                             Set minimum column size. Used only when
 *                             'text_search_columns' has a value.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_truncate_strings
 *                             "insert_records_from_payload_truncate_strings":
 *                             If set to @ref
 *                             gpudb::insert_records_from_payload_true "true",
 *                             truncate string values that are longer than the
 *                             column's type size.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "insert_records_from_payload_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_truncate_table
 *                             "insert_records_from_payload_truncate_table": If
 *                             set to @ref
 *                             gpudb::insert_records_from_payload_true "true",
 *                             truncates the table specified by @a tableName
 *                             prior to loading the file(s).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "insert_records_from_payload_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_type_inference_mode
 *                             "insert_records_from_payload_type_inference_mode":
 *                             optimize type inference for:
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_accuracy
 *                                     "insert_records_from_payload_accuracy":
 *                                     Scans data to get exactly-typed & sized
 *                                     columns for all data scanned.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_speed
 *                                     "insert_records_from_payload_speed":
 *                                     Scans data and picks the widest possible
 *                                     column types so that 'all' values will
 *                                     fit with minimum data scanned
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_accuracy
 *                             "insert_records_from_payload_accuracy".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_update_on_existing_pk
 *                             "insert_records_from_payload_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::insert_records_from_payload_true "true",
 *                             any existing table record with primary key
 *                             values that match those of a record being
 *                             inserted will be replaced by that new record
 *                             (the new data will be "upserted"). If set to
 *                             @ref gpudb::insert_records_from_payload_false
 *                             "false", any existing table record with primary
 *                             key values that match those of a record being
 *                             inserted will remain unchanged, while the new
 *                             record will be rejected and the error handled as
 *                             determined by @ref
 *                             gpudb::insert_records_from_payload_ignore_existing_pk
 *                             "ignore_existing_pk" & @ref
 *                             gpudb::insert_records_from_payload_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key, then this option has no
 *                             effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true":
 *                                     Upsert new records when primary keys
 *                                     match existing records
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false":
 *                                     Reject new records when primary keys
 *                                     match existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "insert_records_from_payload_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::InsertRecordsFromPayloadResponse "Response" object
 *         containing the result of the operation.
 */
InsertRecordsFromPayloadResponse insertRecordsFromPayload( const std::string& tableName,
                                                           const std::string& dataText,
                                                           const std::vector<uint8_t>& dataBytes,
                                                           const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                           const std::map<std::string, std::string>& createTableOptions,
                                                           const std::map<std::string, std::string>& options ) const;

/**
 * Reads from the given text-based or binary payload and inserts the data into
 * a new or existing table.  The table will be created if it doesn't already
 * exist.
 *
 * Returns once all records are processed.
 *
 * @param[in] tableName  Name of the table into which the data will be
 *                       inserted, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. If the table
 *                       does not exist, the table will be created using either
 *                       an existing @ref
 *                       gpudb::insert_records_from_payload_type_id "type_id"
 *                       or the type inferred from the payload, and the new
 *                       table name will have to meet standard <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.
 * @param[in] dataText  Records formatted as delimited text
 * @param[in] dataBytes  Records formatted as binary data
 * @param[in] modifyColumns  Not implemented yet. The default value is an empty
 *                           map.
 * @param[in] createTableOptions  Options used when creating the target table.
 *                                Includes type to use. The other options match
 *                                those in @ref
 *                                createTable(const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                                "createTable".
 *                                <ul>
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_type_id
 *                                        "insert_records_from_payload_type_id":
 *                                        ID of a currently registered <a
 *                                        href="../../../concepts/types/"
 *                                        target="_top">type</a>. The default
 *                                        value is ''.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_no_error_if_exists
 *                                        "insert_records_from_payload_no_error_if_exists":
 *                                        If @ref
 *                                        gpudb::insert_records_from_payload_true
 *                                        "true", prevents an error from
 *                                        occurring if the table already exists
 *                                        and is of the given type.  If a table
 *                                        with the same ID but a different type
 *                                        exists, it is still an error.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_true
 *                                                "insert_records_from_payload_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_false
 *                                                "insert_records_from_payload_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_payload_false
 *                                        "insert_records_from_payload_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_is_replicated
 *                                        "insert_records_from_payload_is_replicated":
 *                                        Affects the <a
 *                                        href="../../../concepts/tables/#distribution"
 *                                        target="_top">distribution scheme</a>
 *                                        for the table's data.  If @ref
 *                                        gpudb::insert_records_from_payload_true
 *                                        "true" and the given type has no
 *                                        explicit <a
 *                                        href="../../../concepts/tables/#shard-key"
 *                                        target="_top">shard key</a> defined,
 *                                        the table will be <a
 *                                        href="../../../concepts/tables/#replication"
 *                                        target="_top">replicated</a>.  If
 *                                        @ref
 *                                        gpudb::insert_records_from_payload_false
 *                                        "false", the table will be <a
 *                                        href="../../../concepts/tables/#sharding"
 *                                        target="_top">sharded</a> according
 *                                        to the shard key specified in the
 *                                        given @ref
 *                                        gpudb::insert_records_from_payload_type_id
 *                                        "type_id", or <a
 *                                        href="../../../concepts/tables/#random-sharding"
 *                                        target="_top">randomly sharded</a>,
 *                                        if no shard key is specified.  Note
 *                                        that a type containing a shard key
 *                                        cannot be used to create a replicated
 *                                        table.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_true
 *                                                "insert_records_from_payload_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_false
 *                                                "insert_records_from_payload_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_payload_false
 *                                        "insert_records_from_payload_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_foreign_keys
 *                                        "insert_records_from_payload_foreign_keys":
 *                                        Semicolon-separated list of <a
 *                                        href="../../../concepts/tables/#foreign-keys"
 *                                        target="_top">foreign keys</a>, of
 *                                        the format '(source_column_name [,
 *                                        ...]) references
 *                                        target_table_name(primary_key_column_name
 *                                        [, ...]) [as foreign_key_name]'.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_foreign_shard_key
 *                                        "insert_records_from_payload_foreign_shard_key":
 *                                        Foreign shard key of the format
 *                                        'source_column references
 *                                        shard_by_column from
 *                                        target_table(primary_key_column)'.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_partition_type
 *                                        "insert_records_from_payload_partition_type":
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning"
 *                                        target="_top">Partitioning</a> scheme
 *                                        to use.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_RANGE
 *                                                "insert_records_from_payload_RANGE":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-range"
 *                                                target="_top">range
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_INTERVAL
 *                                                "insert_records_from_payload_INTERVAL":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-interval"
 *                                                target="_top">interval
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_LIST
 *                                                "insert_records_from_payload_LIST":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-list"
 *                                                target="_top">list
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_HASH
 *                                                "insert_records_from_payload_HASH":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-hash"
 *                                                target="_top">hash
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_SERIES
 *                                                "insert_records_from_payload_SERIES":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-series"
 *                                                target="_top">series
 *                                                partitioning</a>.
 *                                        </ul>
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_partition_keys
 *                                        "insert_records_from_payload_partition_keys":
 *                                        Comma-separated list of partition
 *                                        keys, which are the columns or column
 *                                        expressions by which records will be
 *                                        assigned to partitions defined by
 *                                        @ref
 *                                        gpudb::insert_records_from_payload_partition_definitions
 *                                        "partition_definitions".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_partition_definitions
 *                                        "insert_records_from_payload_partition_definitions":
 *                                        Comma-separated list of partition
 *                                        definitions, whose format depends on
 *                                        the choice of @ref
 *                                        gpudb::insert_records_from_payload_partition_type
 *                                        "partition_type".  See <a
 *                                        href="../../../concepts/tables/#partitioning-by-range"
 *                                        target="_top">range partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-interval"
 *                                        target="_top">interval
 *                                        partitioning</a>, <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-hash"
 *                                        target="_top">hash partitioning</a>,
 *                                        or <a
 *                                        href="../../../concepts/tables/#partitioning-by-series"
 *                                        target="_top">series partitioning</a>
 *                                        for example formats.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_is_automatic_partition
 *                                        "insert_records_from_payload_is_automatic_partition":
 *                                        If @ref
 *                                        gpudb::insert_records_from_payload_true
 *                                        "true", a new partition will be
 *                                        created for values which don't fall
 *                                        into an existing partition.
 *                                        Currently only supported for <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitions</a>.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_true
 *                                                "insert_records_from_payload_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_false
 *                                                "insert_records_from_payload_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_payload_false
 *                                        "insert_records_from_payload_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_ttl
 *                                        "insert_records_from_payload_ttl":
 *                                        Sets the <a
 *                                        href="../../../concepts/ttl/"
 *                                        target="_top">TTL</a> of the table
 *                                        specified in @a tableName.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_chunk_size
 *                                        "insert_records_from_payload_chunk_size":
 *                                        Indicates the number of records per
 *                                        chunk to be used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_chunk_column_max_memory
 *                                        "insert_records_from_payload_chunk_column_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for each column in a chunk to be
 *                                        used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_chunk_max_memory
 *                                        "insert_records_from_payload_chunk_max_memory":
 *                                        Indicates the target maximum data
 *                                        size for all columns in a chunk to be
 *                                        used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_is_result_table
 *                                        "insert_records_from_payload_is_result_table":
 *                                        Indicates whether the table is a <a
 *                                        href="../../../concepts/tables_memory_only/"
 *                                        target="_top">memory-only table</a>.
 *                                        A result table cannot contain columns
 *                                        with text_search <a
 *                                        href="../../../concepts/types/#data-handling"
 *                                        target="_top">data-handling</a>, and
 *                                        it will not be retained if the server
 *                                        is restarted.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_true
 *                                                "insert_records_from_payload_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_payload_false
 *                                                "insert_records_from_payload_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_payload_false
 *                                        "insert_records_from_payload_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_payload_strategy_definition
 *                                        "insert_records_from_payload_strategy_definition":
 *                                        The <a
 *                                        href="../../../rm/concepts/#tier-strategies"
 *                                        target="_top">tier strategy</a> for
 *                                        the table and its columns.
 *                                </ul>
 *                                The default value is an empty map.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_avro_header_bytes
 *                             "insert_records_from_payload_avro_header_bytes":
 *                             Optional number of bytes to skip when reading an
 *                             avro record.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_avro_num_records
 *                             "insert_records_from_payload_avro_num_records":
 *                             Optional number of avro records, if data
 *                             includes only records.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_avro_schema
 *                             "insert_records_from_payload_avro_schema":
 *                             Optional string representing avro schema, for
 *                             insert records in avro format, that does not
 *                             include is schema.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_avro_schemaless
 *                             "insert_records_from_payload_avro_schemaless":
 *                             When user provides 'avro_schema', avro data is
 *                             assumed to be schemaless, unless specified.
 *                             Default is 'true' when given avro_schema.
 *                             Igonred when avro_schema is not given.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false"
 *                             </ul>
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_bad_record_table_name
 *                             "insert_records_from_payload_bad_record_table_name":
 *                             Optional name of a table to which records that
 *                             were rejected are written.  The bad-record-table
 *                             has the following columns: line_number (long),
 *                             line_rejected (string), error_message (string).
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_bad_record_table_limit
 *                             "insert_records_from_payload_bad_record_table_limit":
 *                             A positive integer indicating the maximum number
 *                             of records that can be  written to the
 *                             bad-record-table.   Default value is 10000
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_bad_record_table_limit_per_input
 *                             "insert_records_from_payload_bad_record_table_limit_per_input":
 *                             For subscriptions: A positive integer indicating
 *                             the maximum number of records that can be
 *                             written to the bad-record-table per
 *                             file/payload. Default value will be
 *                             'bad_record_table_limit' and total size of the
 *                             table per rank is limited to
 *                             'bad_record_table_limit'
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_batch_size
 *                             "insert_records_from_payload_batch_size":
 *                             Internal tuning parameter--number of records per
 *                             batch when inserting data.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_column_formats
 *                             "insert_records_from_payload_column_formats":
 *                             For each target column specified, applies the
 *                             column-property-bound format to the source data
 *                             loaded into that column.  Each column format
 *                             will contain a mapping of one or more of its
 *                             column properties to an appropriate format for
 *                             each property.  Currently supported column
 *                             properties include date, time, & datetime. The
 *                             parameter value must be formatted as a JSON
 *                             string of maps of column names to maps of column
 *                             properties to their corresponding column
 *                             formats, e.g., '{ "order_date" : { "date" :
 *                             "%Y.%m.%d" }, "order_time" : { "time" :
 *                             "%H:%M:%S" } }'.  See @ref
 *                             gpudb::insert_records_from_payload_default_column_formats
 *                             "default_column_formats" for valid format
 *                             syntax.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_columns_to_load
 *                             "insert_records_from_payload_columns_to_load":
 *                             Specifies a comma-delimited list of columns from
 *                             the source data to load.  If more than one file
 *                             is being loaded, this list applies to all files.
 *                             Column numbers can be specified discretely or as
 *                             a range.  For example, a value of '5,7,1..3'
 *                             will insert values from the fifth column in the
 *                             source data into the first column in the target
 *                             table, from the seventh column in the source
 *                             data into the second column in the target table,
 *                             and from the first through third columns in the
 *                             source data into the third through fifth columns
 *                             in the target table.  If the source data
 *                             contains a header, column names matching the
 *                             file header names may be provided instead of
 *                             column numbers.  If the target table doesn't
 *                             exist, the table will be created with the
 *                             columns in this order.  If the target table does
 *                             exist with columns in a different order than the
 *                             source data, this list can be used to match the
 *                             order of the target table.  For example, a value
 *                             of 'C, B, A' will create a three column table
 *                             with column C, followed by column B, followed by
 *                             column A; or will insert those fields in that
 *                             order into a table created with columns in that
 *                             order.  If the target table exists, the column
 *                             names must match the source data field names for
 *                             a name-mapping to be successful.  Mutually
 *                             exclusive with @ref
 *                             gpudb::insert_records_from_payload_columns_to_skip
 *                             "columns_to_skip".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_columns_to_skip
 *                             "insert_records_from_payload_columns_to_skip":
 *                             Specifies a comma-delimited list of columns from
 *                             the source data to skip.  Mutually exclusive
 *                             with @ref
 *                             gpudb::insert_records_from_payload_columns_to_load
 *                             "columns_to_load".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_compression_type
 *                             "insert_records_from_payload_compression_type":
 *                             Optional: payload compression type.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_none
 *                                     "insert_records_from_payload_none":
 *                                     Uncompressed
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_auto
 *                                     "insert_records_from_payload_auto":
 *                                     Default. Auto detect compression type
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_gzip
 *                                     "insert_records_from_payload_gzip": gzip
 *                                     file compression.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_bzip2
 *                                     "insert_records_from_payload_bzip2":
 *                                     bzip2 file compression.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_auto
 *                             "insert_records_from_payload_auto".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_default_column_formats
 *                             "insert_records_from_payload_default_column_formats":
 *                             Specifies the default format to be applied to
 *                             source data loaded into columns with the
 *                             corresponding column property.  Currently
 *                             supported column properties include date, time,
 *                             & datetime.  This default column-property-bound
 *                             format can be overridden by specifying a column
 *                             property & format for a given target column in
 *                             @ref
 *                             gpudb::insert_records_from_payload_column_formats
 *                             "column_formats". For each specified annotation,
 *                             the format will apply to all columns with that
 *                             annotation unless a custom @ref
 *                             gpudb::insert_records_from_payload_column_formats
 *                             "column_formats" for that annotation is
 *                             specified.  The parameter value must be
 *                             formatted as a JSON string that is a map of
 *                             column properties to their respective column
 *                             formats, e.g., '{ "date" : "%Y.%m.%d", "time" :
 *                             "%H:%M:%S" }'.  Column formats are specified as
 *                             a string of control characters and plain text.
 *                             The supported control characters are 'Y', 'm',
 *                             'd', 'H', 'M', 'S', and 's', which follow the
 *                             Linux 'strptime()' specification, as well as
 *                             's', which specifies seconds and fractional
 *                             seconds (though the fractional component will be
 *                             truncated past milliseconds).  Formats for the
 *                             'date' annotation must include the 'Y', 'm', and
 *                             'd' control characters. Formats for the 'time'
 *                             annotation must include the 'H', 'M', and either
 *                             'S' or 's' (but not both) control characters.
 *                             Formats for the 'datetime' annotation meet both
 *                             the 'date' and 'time' control character
 *                             requirements. For example, '{"datetime" :
 *                             "%m/%d/%Y %H:%M:%S" }' would be used to
 *                             interpret text as "05/04/2000 12:12:11"
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_error_handling
 *                             "insert_records_from_payload_error_handling":
 *                             Specifies how errors should be handled upon
 *                             insertion.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_permissive
 *                                     "insert_records_from_payload_permissive":
 *                                     Records with missing columns are
 *                                     populated with nulls if possible;
 *                                     otherwise, the malformed records are
 *                                     skipped.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_ignore_bad_records
 *                                     "insert_records_from_payload_ignore_bad_records":
 *                                     Malformed records are skipped.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_abort
 *                                     "insert_records_from_payload_abort":
 *                                     Stops current insertion and aborts
 *                                     entire operation when an error is
 *                                     encountered.  Primary key collisions are
 *                                     considered abortable errors in this
 *                                     mode.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_abort
 *                             "insert_records_from_payload_abort".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "insert_records_from_payload_file_type":
 *                             Specifies the type of the file(s) whose records
 *                             will be inserted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_avro
 *                                     "insert_records_from_payload_avro": Avro
 *                                     file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_delimited_text
 *                                     "insert_records_from_payload_delimited_text":
 *                                     Delimited text file format; e.g., CSV,
 *                                     TSV, PSV, etc.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_gdb
 *                                     "insert_records_from_payload_gdb":
 *                                     Esri/GDB file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_json
 *                                     "insert_records_from_payload_json": Json
 *                                     file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_parquet
 *                                     "insert_records_from_payload_parquet":
 *                                     Apache Parquet file format
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_shapefile
 *                                     "insert_records_from_payload_shapefile":
 *                                     ShapeFile file format
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "insert_records_from_payload_delimited_text".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_flatten_columns
 *                             "insert_records_from_payload_flatten_columns":
 *                             Specifies how to handle nested columns.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true":
 *                                     Break up nested columns to multiple
 *                                     columns
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false":
 *                                     Treat nested columns as json columns
 *                                     instead of flattening
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "insert_records_from_payload_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_gdal_configuration_options
 *                             "insert_records_from_payload_gdal_configuration_options":
 *                             Comma separated list of gdal conf options, for
 *                             the specific requets: key=value. The default
 *                             value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_ignore_existing_pk
 *                             "insert_records_from_payload_ignore_existing_pk":
 *                             Specifies the record collision error-suppression
 *                             policy for inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             not in upsert mode (upsert mode is disabled when
 *                             @ref
 *                             gpudb::insert_records_from_payload_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "false").  If set to @ref
 *                             gpudb::insert_records_from_payload_true "true",
 *                             any record being inserted that is rejected for
 *                             having primary key values that match those of an
 *                             existing table record will be ignored with no
 *                             error generated.  If @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "false", the rejection of any record for having
 *                             primary key values matching an existing record
 *                             will result in an error being reported, as
 *                             determined by @ref
 *                             gpudb::insert_records_from_payload_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key or if upsert mode is in
 *                             effect (@ref
 *                             gpudb::insert_records_from_payload_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_from_payload_true "true"),
 *                             then this option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true":
 *                                     Ignore new records whose primary key
 *                                     values collide with those of existing
 *                                     records
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false":
 *                                     Treat as errors any new records whose
 *                                     primary key values collide with those of
 *                                     existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "insert_records_from_payload_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_ingestion_mode
 *                             "insert_records_from_payload_ingestion_mode":
 *                             Whether to do a full load, dry run, or perform a
 *                             type inference on the source data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_full
 *                                     "insert_records_from_payload_full": Run
 *                                     a type inference on the source data (if
 *                                     needed) and ingest
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_dry_run
 *                                     "insert_records_from_payload_dry_run":
 *                                     Does not load data, but walks through
 *                                     the source data and determines the
 *                                     number of valid records, taking into
 *                                     account the current mode of @ref
 *                                     gpudb::insert_records_from_payload_error_handling
 *                                     "error_handling".
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_type_inference_only
 *                                     "insert_records_from_payload_type_inference_only":
 *                                     Infer the type of the source data and
 *                                     return, without ingesting any data.  The
 *                                     inferred type is returned in the
 *                                     response.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_full
 *                             "insert_records_from_payload_full".
 *                         <li>@ref gpudb::insert_records_from_payload_layer
 *                             "insert_records_from_payload_layer": Optional:
 *                             geo files layer(s) name(s): comma separated. The
 *                             default value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_loading_mode
 *                             "insert_records_from_payload_loading_mode":
 *                             Scheme for distributing the extraction and
 *                             loading of data from the source data file(s).
 *                             This option applies only when loading files that
 *                             are local to the database.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_head
 *                                     "insert_records_from_payload_head": The
 *                                     head node loads all data. All files must
 *                                     be available to the head node.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_distributed_shared
 *                                     "insert_records_from_payload_distributed_shared":
 *                                     The head node coordinates loading data
 *                                     by worker processes across all nodes
 *                                     from shared files available to all
 *                                     workers.  NOTE:  Instead of existing on
 *                                     a shared source, the files can be
 *                                     duplicated on a source local to each
 *                                     host to improve performance, though the
 *                                     files must appear as the same data set
 *                                     from the perspective of all hosts
 *                                     performing the load.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_distributed_local
 *                                     "insert_records_from_payload_distributed_local":
 *                                     A single worker process on each node
 *                                     loads all files that are available to
 *                                     it. This option works best when each
 *                                     worker loads files from its own file
 *                                     system, to maximize performance. In
 *                                     order to avoid data duplication, either
 *                                     each worker performing the load needs to
 *                                     have visibility to a set of files unique
 *                                     to it (no file is visible to more than
 *                                     one node) or the target table needs to
 *                                     have a primary key (which will allow the
 *                                     worker to automatically deduplicate
 *                                     data).  NOTE:  If the target table
 *                                     doesn't exist, the table structure will
 *                                     be determined by the head node. If the
 *                                     head node has no files local to it, it
 *                                     will be unable to determine the
 *                                     structure and the request will fail.  If
 *                                     the head node is configured to have no
 *                                     worker processes, no data strictly
 *                                     accessible to the head node will be
 *                                     loaded.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_head
 *                             "insert_records_from_payload_head".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_local_time_offset
 *                             "insert_records_from_payload_local_time_offset":
 *                             For Avro local timestamp columns
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_max_records_to_load
 *                             "insert_records_from_payload_max_records_to_load":
 *                             Limit the number of records to load in this
 *                             request: If this number is larger than a
 *                             batch_size, then the number of records loaded
 *                             will be limited to the next whole number of
 *                             batch_size (per working thread). The default
 *                             value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_num_tasks_per_rank
 *                             "insert_records_from_payload_num_tasks_per_rank":
 *                             Optional: number of tasks for reading file per
 *                             rank. Default will be
 *                             external_file_reader_num_tasks
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_poll_interval
 *                             "insert_records_from_payload_poll_interval": If
 *                             @ref gpudb::insert_records_from_payload_true
 *                             "true", the number of seconds between attempts
 *                             to load external files into the table.  If zero,
 *                             polling will be continuous as long as data is
 *                             found.  If no data is found, the interval will
 *                             steadily increase to a maximum of 60 seconds.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_primary_keys
 *                             "insert_records_from_payload_primary_keys":
 *                             Optional: comma separated list of column names,
 *                             to set as primary keys, when not specified in
 *                             the type. The default value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_schema_registry_schema_id
 *                             "insert_records_from_payload_schema_registry_schema_id"
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_schema_registry_schema_name
 *                             "insert_records_from_payload_schema_registry_schema_name"
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_schema_registry_schema_version
 *                             "insert_records_from_payload_schema_registry_schema_version"
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_shard_keys
 *                             "insert_records_from_payload_shard_keys":
 *                             Optional: comma separated list of column names,
 *                             to set as primary keys, when not specified in
 *                             the type. The default value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_skip_lines
 *                             "insert_records_from_payload_skip_lines": Skip
 *                             number of lines from begining of file.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_subscribe
 *                             "insert_records_from_payload_subscribe":
 *                             Continuously poll the data source to check for
 *                             new data and load it into the table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "insert_records_from_payload_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_table_insert_mode
 *                             "insert_records_from_payload_table_insert_mode":
 *                             Optional: table_insert_mode. When inserting
 *                             records from multiple files: if table_per_file
 *                             then insert from each file into a new table.
 *                             Currently supported only for shapefiles.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_single
 *                                     "insert_records_from_payload_single"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_table_per_file
 *                                     "insert_records_from_payload_table_per_file"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_single
 *                             "insert_records_from_payload_single".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_comment_string
 *                             "insert_records_from_payload_text_comment_string":
 *                             Specifies the character string that should be
 *                             interpreted as a comment line prefix in the
 *                             source data.  All lines in the data starting
 *                             with the provided string are ignored.  For @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only. The default value is '#'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_delimiter
 *                             "insert_records_from_payload_text_delimiter":
 *                             Specifies the character delimiting field values
 *                             in the source data and field names in the header
 *                             (if present).  For @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only. The default value is ','.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_escape_character
 *                             "insert_records_from_payload_text_escape_character":
 *                             Specifies the character that is used to escape
 *                             other characters in the source data.  An 'a',
 *                             'b', 'f', 'n', 'r', 't', or 'v' preceded by an
 *                             escape character will be interpreted as the
 *                             ASCII bell, backspace, form feed, line feed,
 *                             carriage return, horizontal tab, & vertical tab,
 *                             respectively.  For example, the escape character
 *                             followed by an 'n' will be interpreted as a
 *                             newline within a field value.  The escape
 *                             character can also be used to escape the quoting
 *                             character, and will be treated as an escape
 *                             character whether it is within a quoted field
 *                             value or not.  For @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_has_header
 *                             "insert_records_from_payload_text_has_header":
 *                             Indicates whether the source data contains a
 *                             header row.  For @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_true
 *                             "insert_records_from_payload_true".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_header_property_delimiter
 *                             "insert_records_from_payload_text_header_property_delimiter":
 *                             Specifies the delimiter for <a
 *                             href="../../../concepts/types/#column-properties"
 *                             target="_top">column properties</a> in the
 *                             header row (if present).  Cannot be set to same
 *                             value as @ref
 *                             gpudb::insert_records_from_payload_text_delimiter
 *                             "text_delimiter".  For @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only. The default value is '|'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_null_string
 *                             "insert_records_from_payload_text_null_string":
 *                             Specifies the character string that should be
 *                             interpreted as a null value in the source data.
 *                             For @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only. The default value is '\\N'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_quote_character
 *                             "insert_records_from_payload_text_quote_character":
 *                             Specifies the character that should be
 *                             interpreted as a field value quoting character
 *                             in the source data.  The character must appear
 *                             at beginning and end of field value to take
 *                             effect.  Delimiters within quoted fields are
 *                             treated as literals and not delimiters.  Within
 *                             a quoted field, two consecutive quote characters
 *                             will be interpreted as a single literal quote
 *                             character, effectively escaping it.  To not have
 *                             a quote character, specify an empty string.  For
 *                             @ref
 *                             gpudb::insert_records_from_payload_delimited_text
 *                             "delimited_text" @ref
 *                             gpudb::insert_records_from_payload_file_type
 *                             "file_type" only. The default value is '"'.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_search_columns
 *                             "insert_records_from_payload_text_search_columns":
 *                             Add 'text_search' property to internally
 *                             inferenced string columns. Comma seperated list
 *                             of column names or '*' for all columns. To add
 *                             text_search property only to string columns of
 *                             minimum size, set also the option
 *                             'text_search_min_column_length'
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_text_search_min_column_length
 *                             "insert_records_from_payload_text_search_min_column_length":
 *                             Set minimum column size. Used only when
 *                             'text_search_columns' has a value.
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_truncate_strings
 *                             "insert_records_from_payload_truncate_strings":
 *                             If set to @ref
 *                             gpudb::insert_records_from_payload_true "true",
 *                             truncate string values that are longer than the
 *                             column's type size.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "insert_records_from_payload_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_truncate_table
 *                             "insert_records_from_payload_truncate_table": If
 *                             set to @ref
 *                             gpudb::insert_records_from_payload_true "true",
 *                             truncates the table specified by @a tableName
 *                             prior to loading the file(s).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "insert_records_from_payload_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_type_inference_mode
 *                             "insert_records_from_payload_type_inference_mode":
 *                             optimize type inference for:
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_accuracy
 *                                     "insert_records_from_payload_accuracy":
 *                                     Scans data to get exactly-typed & sized
 *                                     columns for all data scanned.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_speed
 *                                     "insert_records_from_payload_speed":
 *                                     Scans data and picks the widest possible
 *                                     column types so that 'all' values will
 *                                     fit with minimum data scanned
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_accuracy
 *                             "insert_records_from_payload_accuracy".
 *                         <li>@ref
 *                             gpudb::insert_records_from_payload_update_on_existing_pk
 *                             "insert_records_from_payload_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::insert_records_from_payload_true "true",
 *                             any existing table record with primary key
 *                             values that match those of a record being
 *                             inserted will be replaced by that new record
 *                             (the new data will be "upserted"). If set to
 *                             @ref gpudb::insert_records_from_payload_false
 *                             "false", any existing table record with primary
 *                             key values that match those of a record being
 *                             inserted will remain unchanged, while the new
 *                             record will be rejected and the error handled as
 *                             determined by @ref
 *                             gpudb::insert_records_from_payload_ignore_existing_pk
 *                             "ignore_existing_pk" & @ref
 *                             gpudb::insert_records_from_payload_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key, then this option has no
 *                             effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_true
 *                                     "insert_records_from_payload_true":
 *                                     Upsert new records when primary keys
 *                                     match existing records
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_payload_false
 *                                     "insert_records_from_payload_false":
 *                                     Reject new records when primary keys
 *                                     match existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_payload_false
 *                             "insert_records_from_payload_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::InsertRecordsFromPayloadResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::InsertRecordsFromPayloadResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
InsertRecordsFromPayloadResponse& insertRecordsFromPayload( const std::string& tableName,
                                                            const std::string& dataText,
                                                            const std::vector<uint8_t>& dataBytes,
                                                            const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                            const std::map<std::string, std::string>& createTableOptions,
                                                            const std::map<std::string, std::string>& options,
                                                            InsertRecordsFromPayloadResponse& response_ ) const;

/**
 * Computes remote query result and inserts the result data into a new or
 * existing table
 *
 * @param[in] request_  @ref gpudb::InsertRecordsFromQueryRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::InsertRecordsFromQueryResponse "Response" object
 *         containing the result of the operation.
 */
InsertRecordsFromQueryResponse insertRecordsFromQuery( const InsertRecordsFromQueryRequest& request_ ) const;

/**
 * Computes remote query result and inserts the result data into a new or
 * existing table
 *
 * @param[in] request_  @ref gpudb::InsertRecordsFromQueryRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::InsertRecordsFromQueryResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::InsertRecordsFromQueryResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
InsertRecordsFromQueryResponse& insertRecordsFromQuery( const InsertRecordsFromQueryRequest& request_,
                                                        InsertRecordsFromQueryResponse& response_ ) const;

/**
 * Computes remote query result and inserts the result data into a new or
 * existing table
 *
 * @param[in] tableName  Name of the table into which the data will be
 *                       inserted, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. If the table
 *                       does not exist, the table will be created using either
 *                       an existing @ref
 *                       gpudb::insert_records_from_query_type_id "type_id" or
 *                       the type inferred from the remote query, and the new
 *                       table name will have to meet standard <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.
 * @param[in] remoteQuery  Query for which result data needs to be imported
 * @param[in] modifyColumns  Not implemented yet. The default value is an empty
 *                           map.
 * @param[in] createTableOptions  Options used when creating the target table.
 *                                <ul>
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_type_id
 *                                        "insert_records_from_query_type_id":
 *                                        ID of a currently registered <a
 *                                        href="../../../concepts/types/"
 *                                        target="_top">type</a>. The default
 *                                        value is ''.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_no_error_if_exists
 *                                        "insert_records_from_query_no_error_if_exists":
 *                                        If @ref
 *                                        gpudb::insert_records_from_query_true
 *                                        "true", prevents an error from
 *                                        occurring if the table already exists
 *                                        and is of the given type.  If a table
 *                                        with the same ID but a different type
 *                                        exists, it is still an error.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_true
 *                                                "insert_records_from_query_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_false
 *                                                "insert_records_from_query_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_query_false
 *                                        "insert_records_from_query_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_is_replicated
 *                                        "insert_records_from_query_is_replicated":
 *                                        Affects the <a
 *                                        href="../../../concepts/tables/#distribution"
 *                                        target="_top">distribution scheme</a>
 *                                        for the table's data.  If @ref
 *                                        gpudb::insert_records_from_query_true
 *                                        "true" and the given type has no
 *                                        explicit <a
 *                                        href="../../../concepts/tables/#shard-key"
 *                                        target="_top">shard key</a> defined,
 *                                        the table will be <a
 *                                        href="../../../concepts/tables/#replication"
 *                                        target="_top">replicated</a>.  If
 *                                        @ref
 *                                        gpudb::insert_records_from_query_false
 *                                        "false", the table will be <a
 *                                        href="../../../concepts/tables/#sharding"
 *                                        target="_top">sharded</a> according
 *                                        to the shard key specified in the
 *                                        given @ref
 *                                        gpudb::insert_records_from_query_type_id
 *                                        "type_id", or <a
 *                                        href="../../../concepts/tables/#random-sharding"
 *                                        target="_top">randomly sharded</a>,
 *                                        if no shard key is specified.  Note
 *                                        that a type containing a shard key
 *                                        cannot be used to create a replicated
 *                                        table.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_true
 *                                                "insert_records_from_query_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_false
 *                                                "insert_records_from_query_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_query_false
 *                                        "insert_records_from_query_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_foreign_keys
 *                                        "insert_records_from_query_foreign_keys":
 *                                        Semicolon-separated list of <a
 *                                        href="../../../concepts/tables/#foreign-keys"
 *                                        target="_top">foreign keys</a>, of
 *                                        the format '(source_column_name [,
 *                                        ...]) references
 *                                        target_table_name(primary_key_column_name
 *                                        [, ...]) [as foreign_key_name]'.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_foreign_shard_key
 *                                        "insert_records_from_query_foreign_shard_key":
 *                                        Foreign shard key of the format
 *                                        'source_column references
 *                                        shard_by_column from
 *                                        target_table(primary_key_column)'.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_partition_type
 *                                        "insert_records_from_query_partition_type":
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning"
 *                                        target="_top">Partitioning</a> scheme
 *                                        to use.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_RANGE
 *                                                "insert_records_from_query_RANGE":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-range"
 *                                                target="_top">range
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_INTERVAL
 *                                                "insert_records_from_query_INTERVAL":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-interval"
 *                                                target="_top">interval
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_LIST
 *                                                "insert_records_from_query_LIST":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-list"
 *                                                target="_top">list
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_HASH
 *                                                "insert_records_from_query_HASH":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-hash"
 *                                                target="_top">hash
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_SERIES
 *                                                "insert_records_from_query_SERIES":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-series"
 *                                                target="_top">series
 *                                                partitioning</a>.
 *                                        </ul>
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_partition_keys
 *                                        "insert_records_from_query_partition_keys":
 *                                        Comma-separated list of partition
 *                                        keys, which are the columns or column
 *                                        expressions by which records will be
 *                                        assigned to partitions defined by
 *                                        @ref
 *                                        gpudb::insert_records_from_query_partition_definitions
 *                                        "partition_definitions".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_partition_definitions
 *                                        "insert_records_from_query_partition_definitions":
 *                                        Comma-separated list of partition
 *                                        definitions, whose format depends on
 *                                        the choice of @ref
 *                                        gpudb::insert_records_from_query_partition_type
 *                                        "partition_type".  See <a
 *                                        href="../../../concepts/tables/#partitioning-by-range"
 *                                        target="_top">range partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-interval"
 *                                        target="_top">interval
 *                                        partitioning</a>, <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-hash"
 *                                        target="_top">hash partitioning</a>,
 *                                        or <a
 *                                        href="../../../concepts/tables/#partitioning-by-series"
 *                                        target="_top">series partitioning</a>
 *                                        for example formats.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_is_automatic_partition
 *                                        "insert_records_from_query_is_automatic_partition":
 *                                        If @ref
 *                                        gpudb::insert_records_from_query_true
 *                                        "true", a new partition will be
 *                                        created for values which don't fall
 *                                        into an existing partition.
 *                                        Currently only supported for <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitions</a>.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_true
 *                                                "insert_records_from_query_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_false
 *                                                "insert_records_from_query_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_query_false
 *                                        "insert_records_from_query_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_ttl
 *                                        "insert_records_from_query_ttl": Sets
 *                                        the <a href="../../../concepts/ttl/"
 *                                        target="_top">TTL</a> of the table
 *                                        specified in @a tableName.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_chunk_size
 *                                        "insert_records_from_query_chunk_size":
 *                                        Indicates the number of records per
 *                                        chunk to be used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_is_result_table
 *                                        "insert_records_from_query_is_result_table":
 *                                        Indicates whether the table is a <a
 *                                        href="../../../concepts/tables_memory_only/"
 *                                        target="_top">memory-only table</a>.
 *                                        A result table cannot contain columns
 *                                        with text_search <a
 *                                        href="../../../concepts/types/#data-handling"
 *                                        target="_top">data-handling</a>, and
 *                                        it will not be retained if the server
 *                                        is restarted.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_true
 *                                                "insert_records_from_query_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_false
 *                                                "insert_records_from_query_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_query_false
 *                                        "insert_records_from_query_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_strategy_definition
 *                                        "insert_records_from_query_strategy_definition":
 *                                        The <a
 *                                        href="../../../rm/concepts/#tier-strategies"
 *                                        target="_top">tier strategy</a> for
 *                                        the table and its columns.
 *                                </ul>
 *                                The default value is an empty map.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_bad_record_table_name
 *                             "insert_records_from_query_bad_record_table_name":
 *                             Optional name of a table to which records that
 *                             were rejected are written.  The bad-record-table
 *                             has the following columns: line_number (long),
 *                             line_rejected (string), error_message (string).
 *                             When error handling is Abort, bad records table
 *                             is not populated.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_bad_record_table_limit
 *                             "insert_records_from_query_bad_record_table_limit":
 *                             A positive integer indicating the maximum number
 *                             of records that can be  written to the
 *                             bad-record-table.   Default value is 10000
 *                         <li>@ref gpudb::insert_records_from_query_batch_size
 *                             "insert_records_from_query_batch_size": Number
 *                             of records per batch when inserting data.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_datasource_name
 *                             "insert_records_from_query_datasource_name":
 *                             Name of an existing external data source from
 *                             which table will be loaded
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_error_handling
 *                             "insert_records_from_query_error_handling":
 *                             Specifies how errors should be handled upon
 *                             insertion.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_permissive
 *                                     "insert_records_from_query_permissive":
 *                                     Records with missing columns are
 *                                     populated with nulls if possible;
 *                                     otherwise, the malformed records are
 *                                     skipped.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_ignore_bad_records
 *                                     "insert_records_from_query_ignore_bad_records":
 *                                     Malformed records are skipped.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_abort
 *                                     "insert_records_from_query_abort": Stops
 *                                     current insertion and aborts entire
 *                                     operation when an error is encountered.
 *                                     Primary key collisions are considered
 *                                     abortable errors in this mode.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_abort
 *                             "insert_records_from_query_abort".
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_ignore_existing_pk
 *                             "insert_records_from_query_ignore_existing_pk":
 *                             Specifies the record collision error-suppression
 *                             policy for inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             not in upsert mode (upsert mode is disabled when
 *                             @ref
 *                             gpudb::insert_records_from_query_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_from_query_false "false").
 *                             If set to @ref
 *                             gpudb::insert_records_from_query_true "true",
 *                             any record being inserted that is rejected for
 *                             having primary key values that match those of an
 *                             existing table record will be ignored with no
 *                             error generated.  If @ref
 *                             gpudb::insert_records_from_query_false "false",
 *                             the rejection of any record for having primary
 *                             key values matching an existing record will
 *                             result in an error being reported, as determined
 *                             by @ref
 *                             gpudb::insert_records_from_query_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key or if upsert mode is in
 *                             effect (@ref
 *                             gpudb::insert_records_from_query_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_from_query_true "true"),
 *                             then this option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_true
 *                                     "insert_records_from_query_true": Ignore
 *                                     new records whose primary key values
 *                                     collide with those of existing records
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_false
 *                                     "insert_records_from_query_false": Treat
 *                                     as errors any new records whose primary
 *                                     key values collide with those of
 *                                     existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_false
 *                             "insert_records_from_query_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_ingestion_mode
 *                             "insert_records_from_query_ingestion_mode":
 *                             Whether to do a full load, dry run, or perform a
 *                             type inference on the source data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_full
 *                                     "insert_records_from_query_full": Run a
 *                                     type inference on the source data (if
 *                                     needed) and ingest
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_dry_run
 *                                     "insert_records_from_query_dry_run":
 *                                     Does not load data, but walks through
 *                                     the source data and determines the
 *                                     number of valid records, taking into
 *                                     account the current mode of @ref
 *                                     gpudb::insert_records_from_query_error_handling
 *                                     "error_handling".
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_type_inference_only
 *                                     "insert_records_from_query_type_inference_only":
 *                                     Infer the type of the source data and
 *                                     return, without ingesting any data.  The
 *                                     inferred type is returned in the
 *                                     response.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_full
 *                             "insert_records_from_query_full".
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_jdbc_fetch_size
 *                             "insert_records_from_query_jdbc_fetch_size": The
 *                             JDBC fetch size, which determines how many rows
 *                             to fetch per round trip.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_jdbc_session_init_statement
 *                             "insert_records_from_query_jdbc_session_init_statement":
 *                             Executes the statement per each jdbc session
 *                             before doing actual load. The default value is
 *                             ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_num_splits_per_rank
 *                             "insert_records_from_query_num_splits_per_rank":
 *                             Optional: number of splits for reading data per
 *                             rank. Default will be
 *                             external_file_reader_num_tasks. The default
 *                             value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_num_tasks_per_rank
 *                             "insert_records_from_query_num_tasks_per_rank":
 *                             Optional: number of tasks for reading data per
 *                             rank. Default will be
 *                             external_file_reader_num_tasks
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_primary_keys
 *                             "insert_records_from_query_primary_keys":
 *                             Optional: comma separated list of column names,
 *                             to set as primary keys, when not specified in
 *                             the type. The default value is ''.
 *                         <li>@ref gpudb::insert_records_from_query_shard_keys
 *                             "insert_records_from_query_shard_keys":
 *                             Optional: comma separated list of column names,
 *                             to set as primary keys, when not specified in
 *                             the type. The default value is ''.
 *                         <li>@ref gpudb::insert_records_from_query_subscribe
 *                             "insert_records_from_query_subscribe":
 *                             Continuously poll the data source to check for
 *                             new data and load it into the table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_true
 *                                     "insert_records_from_query_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_false
 *                                     "insert_records_from_query_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_false
 *                             "insert_records_from_query_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_truncate_table
 *                             "insert_records_from_query_truncate_table": If
 *                             set to @ref
 *                             gpudb::insert_records_from_query_true "true",
 *                             truncates the table specified by @a tableName
 *                             prior to loading the data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_true
 *                                     "insert_records_from_query_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_false
 *                                     "insert_records_from_query_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_false
 *                             "insert_records_from_query_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_remote_query
 *                             "insert_records_from_query_remote_query": Remote
 *                             SQL query from which data will be sourced
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_remote_query_order_by
 *                             "insert_records_from_query_remote_query_order_by":
 *                             Name of column to be used for splitting the
 *                             query into multiple sub-queries using ordering
 *                             of given column. The default value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_remote_query_filter_column
 *                             "insert_records_from_query_remote_query_filter_column":
 *                             Name of column to be used for splitting the
 *                             query into multiple sub-queries using the data
 *                             distribution of given column. The default value
 *                             is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_remote_query_increasing_column
 *                             "insert_records_from_query_remote_query_increasing_column":
 *                             Column on subscribed remote query result that
 *                             will increase for new records (e.g., TIMESTAMP).
 *                             The default value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_remote_query_partition_column
 *                             "insert_records_from_query_remote_query_partition_column":
 *                             Alias name for remote_query_filter_column. The
 *                             default value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_truncate_strings
 *                             "insert_records_from_query_truncate_strings": If
 *                             set to @ref
 *                             gpudb::insert_records_from_query_true "true",
 *                             truncate string values that are longer than the
 *                             column's type size.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_true
 *                                     "insert_records_from_query_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_false
 *                                     "insert_records_from_query_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_false
 *                             "insert_records_from_query_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_update_on_existing_pk
 *                             "insert_records_from_query_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::insert_records_from_query_true "true",
 *                             any existing table record with primary key
 *                             values that match those of a record being
 *                             inserted will be replaced by that new record
 *                             (the new data will be "upserted"). If set to
 *                             @ref gpudb::insert_records_from_query_false
 *                             "false", any existing table record with primary
 *                             key values that match those of a record being
 *                             inserted will remain unchanged, while the new
 *                             record will be rejected and the error handled as
 *                             determined by @ref
 *                             gpudb::insert_records_from_query_ignore_existing_pk
 *                             "ignore_existing_pk" & @ref
 *                             gpudb::insert_records_from_query_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key, then this option has no
 *                             effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_true
 *                                     "insert_records_from_query_true": Upsert
 *                                     new records when primary keys match
 *                                     existing records
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_false
 *                                     "insert_records_from_query_false":
 *                                     Reject new records when primary keys
 *                                     match existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_false
 *                             "insert_records_from_query_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::InsertRecordsFromQueryResponse "Response" object
 *         containing the result of the operation.
 */
InsertRecordsFromQueryResponse insertRecordsFromQuery( const std::string& tableName,
                                                       const std::string& remoteQuery,
                                                       const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                       const std::map<std::string, std::string>& createTableOptions,
                                                       const std::map<std::string, std::string>& options ) const;

/**
 * Computes remote query result and inserts the result data into a new or
 * existing table
 *
 * @param[in] tableName  Name of the table into which the data will be
 *                       inserted, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>. If the table
 *                       does not exist, the table will be created using either
 *                       an existing @ref
 *                       gpudb::insert_records_from_query_type_id "type_id" or
 *                       the type inferred from the remote query, and the new
 *                       table name will have to meet standard <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.
 * @param[in] remoteQuery  Query for which result data needs to be imported
 * @param[in] modifyColumns  Not implemented yet. The default value is an empty
 *                           map.
 * @param[in] createTableOptions  Options used when creating the target table.
 *                                <ul>
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_type_id
 *                                        "insert_records_from_query_type_id":
 *                                        ID of a currently registered <a
 *                                        href="../../../concepts/types/"
 *                                        target="_top">type</a>. The default
 *                                        value is ''.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_no_error_if_exists
 *                                        "insert_records_from_query_no_error_if_exists":
 *                                        If @ref
 *                                        gpudb::insert_records_from_query_true
 *                                        "true", prevents an error from
 *                                        occurring if the table already exists
 *                                        and is of the given type.  If a table
 *                                        with the same ID but a different type
 *                                        exists, it is still an error.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_true
 *                                                "insert_records_from_query_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_false
 *                                                "insert_records_from_query_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_query_false
 *                                        "insert_records_from_query_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_is_replicated
 *                                        "insert_records_from_query_is_replicated":
 *                                        Affects the <a
 *                                        href="../../../concepts/tables/#distribution"
 *                                        target="_top">distribution scheme</a>
 *                                        for the table's data.  If @ref
 *                                        gpudb::insert_records_from_query_true
 *                                        "true" and the given type has no
 *                                        explicit <a
 *                                        href="../../../concepts/tables/#shard-key"
 *                                        target="_top">shard key</a> defined,
 *                                        the table will be <a
 *                                        href="../../../concepts/tables/#replication"
 *                                        target="_top">replicated</a>.  If
 *                                        @ref
 *                                        gpudb::insert_records_from_query_false
 *                                        "false", the table will be <a
 *                                        href="../../../concepts/tables/#sharding"
 *                                        target="_top">sharded</a> according
 *                                        to the shard key specified in the
 *                                        given @ref
 *                                        gpudb::insert_records_from_query_type_id
 *                                        "type_id", or <a
 *                                        href="../../../concepts/tables/#random-sharding"
 *                                        target="_top">randomly sharded</a>,
 *                                        if no shard key is specified.  Note
 *                                        that a type containing a shard key
 *                                        cannot be used to create a replicated
 *                                        table.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_true
 *                                                "insert_records_from_query_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_false
 *                                                "insert_records_from_query_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_query_false
 *                                        "insert_records_from_query_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_foreign_keys
 *                                        "insert_records_from_query_foreign_keys":
 *                                        Semicolon-separated list of <a
 *                                        href="../../../concepts/tables/#foreign-keys"
 *                                        target="_top">foreign keys</a>, of
 *                                        the format '(source_column_name [,
 *                                        ...]) references
 *                                        target_table_name(primary_key_column_name
 *                                        [, ...]) [as foreign_key_name]'.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_foreign_shard_key
 *                                        "insert_records_from_query_foreign_shard_key":
 *                                        Foreign shard key of the format
 *                                        'source_column references
 *                                        shard_by_column from
 *                                        target_table(primary_key_column)'.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_partition_type
 *                                        "insert_records_from_query_partition_type":
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning"
 *                                        target="_top">Partitioning</a> scheme
 *                                        to use.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_RANGE
 *                                                "insert_records_from_query_RANGE":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-range"
 *                                                target="_top">range
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_INTERVAL
 *                                                "insert_records_from_query_INTERVAL":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-interval"
 *                                                target="_top">interval
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_LIST
 *                                                "insert_records_from_query_LIST":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-list"
 *                                                target="_top">list
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_HASH
 *                                                "insert_records_from_query_HASH":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-hash"
 *                                                target="_top">hash
 *                                                partitioning</a>.
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_SERIES
 *                                                "insert_records_from_query_SERIES":
 *                                                Use <a
 *                                                href="../../../concepts/tables/#partitioning-by-series"
 *                                                target="_top">series
 *                                                partitioning</a>.
 *                                        </ul>
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_partition_keys
 *                                        "insert_records_from_query_partition_keys":
 *                                        Comma-separated list of partition
 *                                        keys, which are the columns or column
 *                                        expressions by which records will be
 *                                        assigned to partitions defined by
 *                                        @ref
 *                                        gpudb::insert_records_from_query_partition_definitions
 *                                        "partition_definitions".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_partition_definitions
 *                                        "insert_records_from_query_partition_definitions":
 *                                        Comma-separated list of partition
 *                                        definitions, whose format depends on
 *                                        the choice of @ref
 *                                        gpudb::insert_records_from_query_partition_type
 *                                        "partition_type".  See <a
 *                                        href="../../../concepts/tables/#partitioning-by-range"
 *                                        target="_top">range partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-interval"
 *                                        target="_top">interval
 *                                        partitioning</a>, <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitioning</a>,
 *                                        <a
 *                                        href="../../../concepts/tables/#partitioning-by-hash"
 *                                        target="_top">hash partitioning</a>,
 *                                        or <a
 *                                        href="../../../concepts/tables/#partitioning-by-series"
 *                                        target="_top">series partitioning</a>
 *                                        for example formats.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_is_automatic_partition
 *                                        "insert_records_from_query_is_automatic_partition":
 *                                        If @ref
 *                                        gpudb::insert_records_from_query_true
 *                                        "true", a new partition will be
 *                                        created for values which don't fall
 *                                        into an existing partition.
 *                                        Currently only supported for <a
 *                                        href="../../../concepts/tables/#partitioning-by-list"
 *                                        target="_top">list partitions</a>.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_true
 *                                                "insert_records_from_query_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_false
 *                                                "insert_records_from_query_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_query_false
 *                                        "insert_records_from_query_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_ttl
 *                                        "insert_records_from_query_ttl": Sets
 *                                        the <a href="../../../concepts/ttl/"
 *                                        target="_top">TTL</a> of the table
 *                                        specified in @a tableName.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_chunk_size
 *                                        "insert_records_from_query_chunk_size":
 *                                        Indicates the number of records per
 *                                        chunk to be used for this table.
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_is_result_table
 *                                        "insert_records_from_query_is_result_table":
 *                                        Indicates whether the table is a <a
 *                                        href="../../../concepts/tables_memory_only/"
 *                                        target="_top">memory-only table</a>.
 *                                        A result table cannot contain columns
 *                                        with text_search <a
 *                                        href="../../../concepts/types/#data-handling"
 *                                        target="_top">data-handling</a>, and
 *                                        it will not be retained if the server
 *                                        is restarted.
 *                                        Supported values:
 *                                        <ul>
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_true
 *                                                "insert_records_from_query_true"
 *                                            <li>@ref
 *                                                gpudb::insert_records_from_query_false
 *                                                "insert_records_from_query_false"
 *                                        </ul>
 *                                        The default value is @ref
 *                                        gpudb::insert_records_from_query_false
 *                                        "insert_records_from_query_false".
 *                                    <li>@ref
 *                                        gpudb::insert_records_from_query_strategy_definition
 *                                        "insert_records_from_query_strategy_definition":
 *                                        The <a
 *                                        href="../../../rm/concepts/#tier-strategies"
 *                                        target="_top">tier strategy</a> for
 *                                        the table and its columns.
 *                                </ul>
 *                                The default value is an empty map.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_bad_record_table_name
 *                             "insert_records_from_query_bad_record_table_name":
 *                             Optional name of a table to which records that
 *                             were rejected are written.  The bad-record-table
 *                             has the following columns: line_number (long),
 *                             line_rejected (string), error_message (string).
 *                             When error handling is Abort, bad records table
 *                             is not populated.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_bad_record_table_limit
 *                             "insert_records_from_query_bad_record_table_limit":
 *                             A positive integer indicating the maximum number
 *                             of records that can be  written to the
 *                             bad-record-table.   Default value is 10000
 *                         <li>@ref gpudb::insert_records_from_query_batch_size
 *                             "insert_records_from_query_batch_size": Number
 *                             of records per batch when inserting data.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_datasource_name
 *                             "insert_records_from_query_datasource_name":
 *                             Name of an existing external data source from
 *                             which table will be loaded
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_error_handling
 *                             "insert_records_from_query_error_handling":
 *                             Specifies how errors should be handled upon
 *                             insertion.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_permissive
 *                                     "insert_records_from_query_permissive":
 *                                     Records with missing columns are
 *                                     populated with nulls if possible;
 *                                     otherwise, the malformed records are
 *                                     skipped.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_ignore_bad_records
 *                                     "insert_records_from_query_ignore_bad_records":
 *                                     Malformed records are skipped.
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_abort
 *                                     "insert_records_from_query_abort": Stops
 *                                     current insertion and aborts entire
 *                                     operation when an error is encountered.
 *                                     Primary key collisions are considered
 *                                     abortable errors in this mode.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_abort
 *                             "insert_records_from_query_abort".
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_ignore_existing_pk
 *                             "insert_records_from_query_ignore_existing_pk":
 *                             Specifies the record collision error-suppression
 *                             policy for inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             not in upsert mode (upsert mode is disabled when
 *                             @ref
 *                             gpudb::insert_records_from_query_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_from_query_false "false").
 *                             If set to @ref
 *                             gpudb::insert_records_from_query_true "true",
 *                             any record being inserted that is rejected for
 *                             having primary key values that match those of an
 *                             existing table record will be ignored with no
 *                             error generated.  If @ref
 *                             gpudb::insert_records_from_query_false "false",
 *                             the rejection of any record for having primary
 *                             key values matching an existing record will
 *                             result in an error being reported, as determined
 *                             by @ref
 *                             gpudb::insert_records_from_query_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key or if upsert mode is in
 *                             effect (@ref
 *                             gpudb::insert_records_from_query_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::insert_records_from_query_true "true"),
 *                             then this option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_true
 *                                     "insert_records_from_query_true": Ignore
 *                                     new records whose primary key values
 *                                     collide with those of existing records
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_false
 *                                     "insert_records_from_query_false": Treat
 *                                     as errors any new records whose primary
 *                                     key values collide with those of
 *                                     existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_false
 *                             "insert_records_from_query_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_ingestion_mode
 *                             "insert_records_from_query_ingestion_mode":
 *                             Whether to do a full load, dry run, or perform a
 *                             type inference on the source data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_full
 *                                     "insert_records_from_query_full": Run a
 *                                     type inference on the source data (if
 *                                     needed) and ingest
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_dry_run
 *                                     "insert_records_from_query_dry_run":
 *                                     Does not load data, but walks through
 *                                     the source data and determines the
 *                                     number of valid records, taking into
 *                                     account the current mode of @ref
 *                                     gpudb::insert_records_from_query_error_handling
 *                                     "error_handling".
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_type_inference_only
 *                                     "insert_records_from_query_type_inference_only":
 *                                     Infer the type of the source data and
 *                                     return, without ingesting any data.  The
 *                                     inferred type is returned in the
 *                                     response.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_full
 *                             "insert_records_from_query_full".
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_jdbc_fetch_size
 *                             "insert_records_from_query_jdbc_fetch_size": The
 *                             JDBC fetch size, which determines how many rows
 *                             to fetch per round trip.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_jdbc_session_init_statement
 *                             "insert_records_from_query_jdbc_session_init_statement":
 *                             Executes the statement per each jdbc session
 *                             before doing actual load. The default value is
 *                             ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_num_splits_per_rank
 *                             "insert_records_from_query_num_splits_per_rank":
 *                             Optional: number of splits for reading data per
 *                             rank. Default will be
 *                             external_file_reader_num_tasks. The default
 *                             value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_num_tasks_per_rank
 *                             "insert_records_from_query_num_tasks_per_rank":
 *                             Optional: number of tasks for reading data per
 *                             rank. Default will be
 *                             external_file_reader_num_tasks
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_primary_keys
 *                             "insert_records_from_query_primary_keys":
 *                             Optional: comma separated list of column names,
 *                             to set as primary keys, when not specified in
 *                             the type. The default value is ''.
 *                         <li>@ref gpudb::insert_records_from_query_shard_keys
 *                             "insert_records_from_query_shard_keys":
 *                             Optional: comma separated list of column names,
 *                             to set as primary keys, when not specified in
 *                             the type. The default value is ''.
 *                         <li>@ref gpudb::insert_records_from_query_subscribe
 *                             "insert_records_from_query_subscribe":
 *                             Continuously poll the data source to check for
 *                             new data and load it into the table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_true
 *                                     "insert_records_from_query_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_false
 *                                     "insert_records_from_query_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_false
 *                             "insert_records_from_query_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_truncate_table
 *                             "insert_records_from_query_truncate_table": If
 *                             set to @ref
 *                             gpudb::insert_records_from_query_true "true",
 *                             truncates the table specified by @a tableName
 *                             prior to loading the data.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_true
 *                                     "insert_records_from_query_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_false
 *                                     "insert_records_from_query_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_false
 *                             "insert_records_from_query_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_remote_query
 *                             "insert_records_from_query_remote_query": Remote
 *                             SQL query from which data will be sourced
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_remote_query_order_by
 *                             "insert_records_from_query_remote_query_order_by":
 *                             Name of column to be used for splitting the
 *                             query into multiple sub-queries using ordering
 *                             of given column. The default value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_remote_query_filter_column
 *                             "insert_records_from_query_remote_query_filter_column":
 *                             Name of column to be used for splitting the
 *                             query into multiple sub-queries using the data
 *                             distribution of given column. The default value
 *                             is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_remote_query_increasing_column
 *                             "insert_records_from_query_remote_query_increasing_column":
 *                             Column on subscribed remote query result that
 *                             will increase for new records (e.g., TIMESTAMP).
 *                             The default value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_remote_query_partition_column
 *                             "insert_records_from_query_remote_query_partition_column":
 *                             Alias name for remote_query_filter_column. The
 *                             default value is ''.
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_truncate_strings
 *                             "insert_records_from_query_truncate_strings": If
 *                             set to @ref
 *                             gpudb::insert_records_from_query_true "true",
 *                             truncate string values that are longer than the
 *                             column's type size.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_true
 *                                     "insert_records_from_query_true"
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_false
 *                                     "insert_records_from_query_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_false
 *                             "insert_records_from_query_false".
 *                         <li>@ref
 *                             gpudb::insert_records_from_query_update_on_existing_pk
 *                             "insert_records_from_query_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             inserting into a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>. If set to @ref
 *                             gpudb::insert_records_from_query_true "true",
 *                             any existing table record with primary key
 *                             values that match those of a record being
 *                             inserted will be replaced by that new record
 *                             (the new data will be "upserted"). If set to
 *                             @ref gpudb::insert_records_from_query_false
 *                             "false", any existing table record with primary
 *                             key values that match those of a record being
 *                             inserted will remain unchanged, while the new
 *                             record will be rejected and the error handled as
 *                             determined by @ref
 *                             gpudb::insert_records_from_query_ignore_existing_pk
 *                             "ignore_existing_pk" & @ref
 *                             gpudb::insert_records_from_query_error_handling
 *                             "error_handling".  If the specified table does
 *                             not have a primary key, then this option has no
 *                             effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_true
 *                                     "insert_records_from_query_true": Upsert
 *                                     new records when primary keys match
 *                                     existing records
 *                                 <li>@ref
 *                                     gpudb::insert_records_from_query_false
 *                                     "insert_records_from_query_false":
 *                                     Reject new records when primary keys
 *                                     match existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::insert_records_from_query_false
 *                             "insert_records_from_query_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::InsertRecordsFromQueryResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::InsertRecordsFromQueryResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
InsertRecordsFromQueryResponse& insertRecordsFromQuery( const std::string& tableName,
                                                        const std::string& remoteQuery,
                                                        const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                        const std::map<std::string, std::string>& createTableOptions,
                                                        const std::map<std::string, std::string>& options,
                                                        InsertRecordsFromQueryResponse& response_ ) const;

/**
 * Generates a specified number of random records and adds them to the given
 * table. There is an optional parameter that allows the user to customize the
 * ranges of the column values. It also allows the user to specify linear
 * profiles for some or all columns in which case linear values are generated
 * rather than random ones. Only individual tables are supported for this
 * operation.
 *
 * This operation is synchronous, meaning that a response will not be returned
 * until all random records are fully available.
 *
 * @param[in] request_  @ref gpudb::InsertRecordsRandomRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::InsertRecordsRandomResponse "Response" object containing
 *         the result of the operation.
 */
InsertRecordsRandomResponse insertRecordsRandom( const InsertRecordsRandomRequest& request_ ) const;

/**
 * Generates a specified number of random records and adds them to the given
 * table. There is an optional parameter that allows the user to customize the
 * ranges of the column values. It also allows the user to specify linear
 * profiles for some or all columns in which case linear values are generated
 * rather than random ones. Only individual tables are supported for this
 * operation.
 *
 * This operation is synchronous, meaning that a response will not be returned
 * until all random records are fully available.
 *
 * @param[in] request_  @ref gpudb::InsertRecordsRandomRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::InsertRecordsRandomResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::InsertRecordsRandomResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
InsertRecordsRandomResponse& insertRecordsRandom( const InsertRecordsRandomRequest& request_,
                                                  InsertRecordsRandomResponse& response_ ) const;

/**
 * Generates a specified number of random records and adds them to the given
 * table. There is an optional parameter that allows the user to customize the
 * ranges of the column values. It also allows the user to specify linear
 * profiles for some or all columns in which case linear values are generated
 * rather than random ones. Only individual tables are supported for this
 * operation.
 *
 * This operation is synchronous, meaning that a response will not be returned
 * until all random records are fully available.
 *
 * @param[in] tableName  Table to which random records will be added, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table, not a view.
 * @param[in] count  Number of records to generate.
 * @param[in] options  Optional parameter to pass in specifications for the
 *                     randomness of the values.  This map is different from
 *                     the *options* parameter of most other endpoints in that
 *                     it is a map of string to map of string to doubles, while
 *                     most others are maps of string to string.  In this map,
 *                     the top level keys represent which column's parameters
 *                     are being specified, while the internal keys represents
 *                     which parameter is being specified.  These parameters
 *                     take on different meanings depending on the type of the
 *                     column.  Below follows a more detailed description of
 *                     the map:
 *                     <ul>
 *                         <li>@ref gpudb::insert_records_random_seed
 *                             "insert_records_random_seed": If provided, the
 *                             internal random number generator will be
 *                             initialized with the given value.  The minimum
 *                             is 0.  This allows for the same set of random
 *                             numbers to be generated across invocation of
 *                             this endpoint in case the user wants to repeat
 *                             the test.  Since @a options, is a map of maps,
 *                             we need an internal map to provide the seed
 *                             value.  For example, to pass 100 as the seed
 *                             value through this parameter, you need something
 *                             equivalent to: 'options' = {'seed': { 'value':
 *                             100 } }.
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_random_value
 *                                     "insert_records_random_value": The seed
 *                                     value to use
 *                             </ul>
 *                         <li>@ref gpudb::insert_records_random_all
 *                             "insert_records_random_all": This key indicates
 *                             that the specifications relayed in the internal
 *                             map are to be applied to all columns of the
 *                             records.
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_random_min
 *                                     "insert_records_random_min": For
 *                                     numerical columns, the minimum of the
 *                                     generated values is set to this value.
 *                                     Default is -99999.  For point, shape,
 *                                     and track columns, min for numeric 'x'
 *                                     and 'y' columns needs to be within
 *                                     [-180, 180] and [-90, 90], respectively.
 *                                     The default minimum possible values for
 *                                     these columns in such cases are -180.0
 *                                     and -90.0. For the 'TIMESTAMP' column,
 *                                     the default minimum corresponds to Jan
 *                                     1, 2010.  For string columns, the
 *                                     minimum length of the randomly generated
 *                                     strings is set to this value (default is
 *                                     0). If both minimum and maximum are
 *                                     provided, minimum must be less than or
 *                                     equal to max.  If the min is outside the
 *                                     accepted ranges for strings columns and
 *                                     'x' and 'y' columns for
 *                                     point/shape/track, then those parameters
 *                                     will not be set; however, an error will
 *                                     not be thrown in such a case. It is the
 *                                     responsibility of the user to use the
 *                                     @ref gpudb::insert_records_random_all
 *                                     "all" parameter judiciously.
 *                                 <li>@ref gpudb::insert_records_random_max
 *                                     "insert_records_random_max": For
 *                                     numerical columns, the maximum of the
 *                                     generated values is set to this value.
 *                                     Default is 99999. For point, shape, and
 *                                     track columns, max for numeric 'x' and
 *                                     'y' columns needs to be within [-180,
 *                                     180] and [-90, 90], respectively. The
 *                                     default minimum possible values for
 *                                     these columns in such cases are 180.0
 *                                     and 90.0.  For string columns, the
 *                                     maximum length of the randomly generated
 *                                     strings. If both minimum and maximum are
 *                                     provided, *max* must be greater than or
 *                                     equal to *min*.  If the *max* is outside
 *                                     the accepted ranges for strings columns
 *                                     and 'x' and 'y' columns for
 *                                     point/shape/track, then those parameters
 *                                     will not be set; however, an error will
 *                                     not be thrown in such a case. It is the
 *                                     responsibility of the user to use the
 *                                     @ref gpudb::insert_records_random_all
 *                                     "all" parameter judiciously.
 *                                 <li>@ref
 *                                     gpudb::insert_records_random_interval
 *                                     "insert_records_random_interval": If
 *                                     specified, generate values for all
 *                                     columns evenly spaced with the given
 *                                     interval value. If a max value is
 *                                     specified for a given column the data is
 *                                     randomly generated between min and max
 *                                     and decimated down to the interval. If
 *                                     no max is provided the data is linerally
 *                                     generated starting at the minimum value
 *                                     (instead of generating random data). For
 *                                     non-decimated string-type columns the
 *                                     interval value is ignored. Instead the
 *                                     values are generated following the
 *                                     pattern: 'attrname_creationIndex#', i.e.
 *                                     the column name suffixed with an
 *                                     underscore and a running counter
 *                                     (starting at 0). For string types with
 *                                     limited size (eg char4) the prefix is
 *                                     dropped. No nulls will be generated for
 *                                     nullable columns.
 *                                 <li>@ref
 *                                     gpudb::insert_records_random_null_percentage
 *                                     "insert_records_random_null_percentage":
 *                                     If specified, then generate the given
 *                                     percentage of the count as nulls for all
 *                                     nullable columns.  This option will be
 *                                     ignored for non-nullable columns.  The
 *                                     value must be within the range [0, 1.0].
 *                                     The default value is 5% (0.05).
 *                                 <li>@ref
 *                                     gpudb::insert_records_random_cardinality
 *                                     "insert_records_random_cardinality": If
 *                                     specified, limit the randomly generated
 *                                     values to a fixed set. Not allowed on a
 *                                     column with interval specified, and is
 *                                     not applicable to WKT or Track-specific
 *                                     columns. The value must be greater than
 *                                     0. This option is disabled by default.
 *                             </ul>
 *                         <li>@ref gpudb::insert_records_random_attr_name
 *                             "insert_records_random_attr_name": Use the
 *                             desired column name in place of @ref
 *                             gpudb::insert_records_random_attr_name
 *                             "attr_name", and set the following parameters
 *                             for the column specified. This overrides any
 *                             parameter set by @ref
 *                             gpudb::insert_records_random_all "all".
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_random_min
 *                                     "insert_records_random_min": For
 *                                     numerical columns, the minimum of the
 *                                     generated values is set to this value.
 *                                     Default is -99999.  For point, shape,
 *                                     and track columns, min for numeric 'x'
 *                                     and 'y' columns needs to be within
 *                                     [-180, 180] and [-90, 90], respectively.
 *                                     The default minimum possible values for
 *                                     these columns in such cases are -180.0
 *                                     and -90.0. For the 'TIMESTAMP' column,
 *                                     the default minimum corresponds to Jan
 *                                     1, 2010.  For string columns, the
 *                                     minimum length of the randomly generated
 *                                     strings is set to this value (default is
 *                                     0). If both minimum and maximum are
 *                                     provided, minimum must be less than or
 *                                     equal to max.  If the min is outside the
 *                                     accepted ranges for strings columns and
 *                                     'x' and 'y' columns for
 *                                     point/shape/track, then those parameters
 *                                     will not be set; however, an error will
 *                                     not be thrown in such a case. It is the
 *                                     responsibility of the user to use the
 *                                     @ref gpudb::insert_records_random_all
 *                                     "all" parameter judiciously.
 *                                 <li>@ref gpudb::insert_records_random_max
 *                                     "insert_records_random_max": For
 *                                     numerical columns, the maximum of the
 *                                     generated values is set to this value.
 *                                     Default is 99999. For point, shape, and
 *                                     track columns, max for numeric 'x' and
 *                                     'y' columns needs to be within [-180,
 *                                     180] and [-90, 90], respectively. The
 *                                     default minimum possible values for
 *                                     these columns in such cases are 180.0
 *                                     and 90.0.  For string columns, the
 *                                     maximum length of the randomly generated
 *                                     strings. If both minimum and maximum are
 *                                     provided, *max* must be greater than or
 *                                     equal to *min*.  If the *max* is outside
 *                                     the accepted ranges for strings columns
 *                                     and 'x' and 'y' columns for
 *                                     point/shape/track, then those parameters
 *                                     will not be set; however, an error will
 *                                     not be thrown in such a case. It is the
 *                                     responsibility of the user to use the
 *                                     @ref gpudb::insert_records_random_all
 *                                     "all" parameter judiciously.
 *                                 <li>@ref
 *                                     gpudb::insert_records_random_interval
 *                                     "insert_records_random_interval": If
 *                                     specified, generate values for all
 *                                     columns evenly spaced with the given
 *                                     interval value. If a max value is
 *                                     specified for a given column the data is
 *                                     randomly generated between min and max
 *                                     and decimated down to the interval. If
 *                                     no max is provided the data is linerally
 *                                     generated starting at the minimum value
 *                                     (instead of generating random data). For
 *                                     non-decimated string-type columns the
 *                                     interval value is ignored. Instead the
 *                                     values are generated following the
 *                                     pattern: 'attrname_creationIndex#', i.e.
 *                                     the column name suffixed with an
 *                                     underscore and a running counter
 *                                     (starting at 0). For string types with
 *                                     limited size (eg char4) the prefix is
 *                                     dropped. No nulls will be generated for
 *                                     nullable columns.
 *                                 <li>@ref
 *                                     gpudb::insert_records_random_null_percentage
 *                                     "insert_records_random_null_percentage":
 *                                     If specified and if this column is
 *                                     nullable, then generate the given
 *                                     percentage of the count as nulls.  This
 *                                     option will result in an error if the
 *                                     column is not nullable.  The value must
 *                                     be within the range [0, 1.0].  The
 *                                     default value is 5% (0.05).
 *                                 <li>@ref
 *                                     gpudb::insert_records_random_cardinality
 *                                     "insert_records_random_cardinality": If
 *                                     specified, limit the randomly generated
 *                                     values to a fixed set. Not allowed on a
 *                                     column with interval specified, and is
 *                                     not applicable to WKT or Track-specific
 *                                     columns. The value must be greater than
 *                                     0. This option is disabled by default.
 *                             </ul>
 *                         <li>@ref gpudb::insert_records_random_track_length
 *                             "insert_records_random_track_length": This
 *                             key-map pair is only valid for track data sets
 *                             (an error is thrown otherwise).  No nulls would
 *                             be generated for nullable columns.
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_random_min
 *                                     "insert_records_random_min": Minimum
 *                                     possible length for generated series;
 *                                     default is 100 records per series. Must
 *                                     be an integral value within the range
 *                                     [1, 500]. If both min and max are
 *                                     specified, min must be less than or
 *                                     equal to max. The minimum allowed value
 *                                     is 1. The maximum allowed value is 500.
 *                                 <li>@ref gpudb::insert_records_random_max
 *                                     "insert_records_random_max": Maximum
 *                                     possible length for generated series;
 *                                     default is 500 records per series. Must
 *                                     be an integral value within the range
 *                                     [1, 500]. If both min and max are
 *                                     specified, max must be greater than or
 *                                     equal to min. The minimum allowed value
 *                                     is 1. The maximum allowed value is 500.
 *                             </ul>
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::InsertRecordsRandomResponse "Response" object containing
 *         the result of the operation.
 */
InsertRecordsRandomResponse insertRecordsRandom( const std::string& tableName,
                                                 const int64_t count,
                                                 const std::map<std::string, std::map<std::string, double> >& options ) const;

/**
 * Generates a specified number of random records and adds them to the given
 * table. There is an optional parameter that allows the user to customize the
 * ranges of the column values. It also allows the user to specify linear
 * profiles for some or all columns in which case linear values are generated
 * rather than random ones. Only individual tables are supported for this
 * operation.
 *
 * This operation is synchronous, meaning that a response will not be returned
 * until all random records are fully available.
 *
 * @param[in] tableName  Table to which random records will be added, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table, not a view.
 * @param[in] count  Number of records to generate.
 * @param[in] options  Optional parameter to pass in specifications for the
 *                     randomness of the values.  This map is different from
 *                     the *options* parameter of most other endpoints in that
 *                     it is a map of string to map of string to doubles, while
 *                     most others are maps of string to string.  In this map,
 *                     the top level keys represent which column's parameters
 *                     are being specified, while the internal keys represents
 *                     which parameter is being specified.  These parameters
 *                     take on different meanings depending on the type of the
 *                     column.  Below follows a more detailed description of
 *                     the map:
 *                     <ul>
 *                         <li>@ref gpudb::insert_records_random_seed
 *                             "insert_records_random_seed": If provided, the
 *                             internal random number generator will be
 *                             initialized with the given value.  The minimum
 *                             is 0.  This allows for the same set of random
 *                             numbers to be generated across invocation of
 *                             this endpoint in case the user wants to repeat
 *                             the test.  Since @a options, is a map of maps,
 *                             we need an internal map to provide the seed
 *                             value.  For example, to pass 100 as the seed
 *                             value through this parameter, you need something
 *                             equivalent to: 'options' = {'seed': { 'value':
 *                             100 } }.
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_random_value
 *                                     "insert_records_random_value": The seed
 *                                     value to use
 *                             </ul>
 *                         <li>@ref gpudb::insert_records_random_all
 *                             "insert_records_random_all": This key indicates
 *                             that the specifications relayed in the internal
 *                             map are to be applied to all columns of the
 *                             records.
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_random_min
 *                                     "insert_records_random_min": For
 *                                     numerical columns, the minimum of the
 *                                     generated values is set to this value.
 *                                     Default is -99999.  For point, shape,
 *                                     and track columns, min for numeric 'x'
 *                                     and 'y' columns needs to be within
 *                                     [-180, 180] and [-90, 90], respectively.
 *                                     The default minimum possible values for
 *                                     these columns in such cases are -180.0
 *                                     and -90.0. For the 'TIMESTAMP' column,
 *                                     the default minimum corresponds to Jan
 *                                     1, 2010.  For string columns, the
 *                                     minimum length of the randomly generated
 *                                     strings is set to this value (default is
 *                                     0). If both minimum and maximum are
 *                                     provided, minimum must be less than or
 *                                     equal to max.  If the min is outside the
 *                                     accepted ranges for strings columns and
 *                                     'x' and 'y' columns for
 *                                     point/shape/track, then those parameters
 *                                     will not be set; however, an error will
 *                                     not be thrown in such a case. It is the
 *                                     responsibility of the user to use the
 *                                     @ref gpudb::insert_records_random_all
 *                                     "all" parameter judiciously.
 *                                 <li>@ref gpudb::insert_records_random_max
 *                                     "insert_records_random_max": For
 *                                     numerical columns, the maximum of the
 *                                     generated values is set to this value.
 *                                     Default is 99999. For point, shape, and
 *                                     track columns, max for numeric 'x' and
 *                                     'y' columns needs to be within [-180,
 *                                     180] and [-90, 90], respectively. The
 *                                     default minimum possible values for
 *                                     these columns in such cases are 180.0
 *                                     and 90.0.  For string columns, the
 *                                     maximum length of the randomly generated
 *                                     strings. If both minimum and maximum are
 *                                     provided, *max* must be greater than or
 *                                     equal to *min*.  If the *max* is outside
 *                                     the accepted ranges for strings columns
 *                                     and 'x' and 'y' columns for
 *                                     point/shape/track, then those parameters
 *                                     will not be set; however, an error will
 *                                     not be thrown in such a case. It is the
 *                                     responsibility of the user to use the
 *                                     @ref gpudb::insert_records_random_all
 *                                     "all" parameter judiciously.
 *                                 <li>@ref
 *                                     gpudb::insert_records_random_interval
 *                                     "insert_records_random_interval": If
 *                                     specified, generate values for all
 *                                     columns evenly spaced with the given
 *                                     interval value. If a max value is
 *                                     specified for a given column the data is
 *                                     randomly generated between min and max
 *                                     and decimated down to the interval. If
 *                                     no max is provided the data is linerally
 *                                     generated starting at the minimum value
 *                                     (instead of generating random data). For
 *                                     non-decimated string-type columns the
 *                                     interval value is ignored. Instead the
 *                                     values are generated following the
 *                                     pattern: 'attrname_creationIndex#', i.e.
 *                                     the column name suffixed with an
 *                                     underscore and a running counter
 *                                     (starting at 0). For string types with
 *                                     limited size (eg char4) the prefix is
 *                                     dropped. No nulls will be generated for
 *                                     nullable columns.
 *                                 <li>@ref
 *                                     gpudb::insert_records_random_null_percentage
 *                                     "insert_records_random_null_percentage":
 *                                     If specified, then generate the given
 *                                     percentage of the count as nulls for all
 *                                     nullable columns.  This option will be
 *                                     ignored for non-nullable columns.  The
 *                                     value must be within the range [0, 1.0].
 *                                     The default value is 5% (0.05).
 *                                 <li>@ref
 *                                     gpudb::insert_records_random_cardinality
 *                                     "insert_records_random_cardinality": If
 *                                     specified, limit the randomly generated
 *                                     values to a fixed set. Not allowed on a
 *                                     column with interval specified, and is
 *                                     not applicable to WKT or Track-specific
 *                                     columns. The value must be greater than
 *                                     0. This option is disabled by default.
 *                             </ul>
 *                         <li>@ref gpudb::insert_records_random_attr_name
 *                             "insert_records_random_attr_name": Use the
 *                             desired column name in place of @ref
 *                             gpudb::insert_records_random_attr_name
 *                             "attr_name", and set the following parameters
 *                             for the column specified. This overrides any
 *                             parameter set by @ref
 *                             gpudb::insert_records_random_all "all".
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_random_min
 *                                     "insert_records_random_min": For
 *                                     numerical columns, the minimum of the
 *                                     generated values is set to this value.
 *                                     Default is -99999.  For point, shape,
 *                                     and track columns, min for numeric 'x'
 *                                     and 'y' columns needs to be within
 *                                     [-180, 180] and [-90, 90], respectively.
 *                                     The default minimum possible values for
 *                                     these columns in such cases are -180.0
 *                                     and -90.0. For the 'TIMESTAMP' column,
 *                                     the default minimum corresponds to Jan
 *                                     1, 2010.  For string columns, the
 *                                     minimum length of the randomly generated
 *                                     strings is set to this value (default is
 *                                     0). If both minimum and maximum are
 *                                     provided, minimum must be less than or
 *                                     equal to max.  If the min is outside the
 *                                     accepted ranges for strings columns and
 *                                     'x' and 'y' columns for
 *                                     point/shape/track, then those parameters
 *                                     will not be set; however, an error will
 *                                     not be thrown in such a case. It is the
 *                                     responsibility of the user to use the
 *                                     @ref gpudb::insert_records_random_all
 *                                     "all" parameter judiciously.
 *                                 <li>@ref gpudb::insert_records_random_max
 *                                     "insert_records_random_max": For
 *                                     numerical columns, the maximum of the
 *                                     generated values is set to this value.
 *                                     Default is 99999. For point, shape, and
 *                                     track columns, max for numeric 'x' and
 *                                     'y' columns needs to be within [-180,
 *                                     180] and [-90, 90], respectively. The
 *                                     default minimum possible values for
 *                                     these columns in such cases are 180.0
 *                                     and 90.0.  For string columns, the
 *                                     maximum length of the randomly generated
 *                                     strings. If both minimum and maximum are
 *                                     provided, *max* must be greater than or
 *                                     equal to *min*.  If the *max* is outside
 *                                     the accepted ranges for strings columns
 *                                     and 'x' and 'y' columns for
 *                                     point/shape/track, then those parameters
 *                                     will not be set; however, an error will
 *                                     not be thrown in such a case. It is the
 *                                     responsibility of the user to use the
 *                                     @ref gpudb::insert_records_random_all
 *                                     "all" parameter judiciously.
 *                                 <li>@ref
 *                                     gpudb::insert_records_random_interval
 *                                     "insert_records_random_interval": If
 *                                     specified, generate values for all
 *                                     columns evenly spaced with the given
 *                                     interval value. If a max value is
 *                                     specified for a given column the data is
 *                                     randomly generated between min and max
 *                                     and decimated down to the interval. If
 *                                     no max is provided the data is linerally
 *                                     generated starting at the minimum value
 *                                     (instead of generating random data). For
 *                                     non-decimated string-type columns the
 *                                     interval value is ignored. Instead the
 *                                     values are generated following the
 *                                     pattern: 'attrname_creationIndex#', i.e.
 *                                     the column name suffixed with an
 *                                     underscore and a running counter
 *                                     (starting at 0). For string types with
 *                                     limited size (eg char4) the prefix is
 *                                     dropped. No nulls will be generated for
 *                                     nullable columns.
 *                                 <li>@ref
 *                                     gpudb::insert_records_random_null_percentage
 *                                     "insert_records_random_null_percentage":
 *                                     If specified and if this column is
 *                                     nullable, then generate the given
 *                                     percentage of the count as nulls.  This
 *                                     option will result in an error if the
 *                                     column is not nullable.  The value must
 *                                     be within the range [0, 1.0].  The
 *                                     default value is 5% (0.05).
 *                                 <li>@ref
 *                                     gpudb::insert_records_random_cardinality
 *                                     "insert_records_random_cardinality": If
 *                                     specified, limit the randomly generated
 *                                     values to a fixed set. Not allowed on a
 *                                     column with interval specified, and is
 *                                     not applicable to WKT or Track-specific
 *                                     columns. The value must be greater than
 *                                     0. This option is disabled by default.
 *                             </ul>
 *                         <li>@ref gpudb::insert_records_random_track_length
 *                             "insert_records_random_track_length": This
 *                             key-map pair is only valid for track data sets
 *                             (an error is thrown otherwise).  No nulls would
 *                             be generated for nullable columns.
 *                             <ul>
 *                                 <li>@ref gpudb::insert_records_random_min
 *                                     "insert_records_random_min": Minimum
 *                                     possible length for generated series;
 *                                     default is 100 records per series. Must
 *                                     be an integral value within the range
 *                                     [1, 500]. If both min and max are
 *                                     specified, min must be less than or
 *                                     equal to max. The minimum allowed value
 *                                     is 1. The maximum allowed value is 500.
 *                                 <li>@ref gpudb::insert_records_random_max
 *                                     "insert_records_random_max": Maximum
 *                                     possible length for generated series;
 *                                     default is 500 records per series. Must
 *                                     be an integral value within the range
 *                                     [1, 500]. If both min and max are
 *                                     specified, max must be greater than or
 *                                     equal to min. The minimum allowed value
 *                                     is 1. The maximum allowed value is 500.
 *                             </ul>
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::InsertRecordsRandomResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::InsertRecordsRandomResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
InsertRecordsRandomResponse& insertRecordsRandom( const std::string& tableName,
                                                  const int64_t count,
                                                  const std::map<std::string, std::map<std::string, double> >& options,
                                                  InsertRecordsRandomResponse& response_ ) const;

/**
 * Adds a symbol or icon (i.e.\ an image) to represent data points when data is
 * rendered visually. Users must provide the symbol identifier (string), a
 * format (currently supported: 'svg' and 'svg_path'), the data for the symbol,
 * and any additional optional parameter (e.g.\ color). To have a symbol used
 * for rendering create a table with a string column named 'SYMBOLCODE' (along
 * with 'x' or 'y' for example). Then when the table is rendered (via <a
 * href="../../../api/rest/wms_rest/" target="_top">WMS</a>) if the
 * 'dosymbology' parameter is 'true' then the value of the 'SYMBOLCODE' column
 * is used to pick the symbol displayed for each point.
 *
 * @param[in] request_  @ref gpudb::InsertSymbolRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::InsertSymbolResponse "Response" object containing the
 *         result of the operation.
 */
InsertSymbolResponse insertSymbol( const InsertSymbolRequest& request_ ) const;

/**
 * Adds a symbol or icon (i.e.\ an image) to represent data points when data is
 * rendered visually. Users must provide the symbol identifier (string), a
 * format (currently supported: 'svg' and 'svg_path'), the data for the symbol,
 * and any additional optional parameter (e.g.\ color). To have a symbol used
 * for rendering create a table with a string column named 'SYMBOLCODE' (along
 * with 'x' or 'y' for example). Then when the table is rendered (via <a
 * href="../../../api/rest/wms_rest/" target="_top">WMS</a>) if the
 * 'dosymbology' parameter is 'true' then the value of the 'SYMBOLCODE' column
 * is used to pick the symbol displayed for each point.
 *
 * @param[in] request_  @ref gpudb::InsertSymbolRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::InsertSymbolResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::InsertSymbolResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
InsertSymbolResponse& insertSymbol( const InsertSymbolRequest& request_,
                                    InsertSymbolResponse& response_ ) const;

/**
 * Adds a symbol or icon (i.e.\ an image) to represent data points when data is
 * rendered visually. Users must provide the symbol identifier (string), a
 * format (currently supported: 'svg' and 'svg_path'), the data for the symbol,
 * and any additional optional parameter (e.g.\ color). To have a symbol used
 * for rendering create a table with a string column named 'SYMBOLCODE' (along
 * with 'x' or 'y' for example). Then when the table is rendered (via <a
 * href="../../../api/rest/wms_rest/" target="_top">WMS</a>) if the
 * 'dosymbology' parameter is 'true' then the value of the 'SYMBOLCODE' column
 * is used to pick the symbol displayed for each point.
 *
 * @param[in] symbolId  The id of the symbol being added. This is the same id
 *                      that should be in the 'SYMBOLCODE' column for objects
 *                      using this symbol
 * @param[in] symbolFormat  Specifies the symbol format. Must be either 'svg'
 *                          or 'svg_path'.
 *                          Supported values:
 *                          <ul>
 *                              <li>@ref gpudb::insert_symbol_svg
 *                                  "insert_symbol_svg"
 *                              <li>@ref gpudb::insert_symbol_svg_path
 *                                  "insert_symbol_svg_path"
 *                          </ul>
 * @param[in] symbolData  The actual symbol data. If @a symbolFormat is 'svg'
 *                        then this should be the raw bytes representing an svg
 *                        file. If @a symbolFormat is svg path then this should
 *                        be an svg path string, for example:
 *                        'M25.979,12.896,5.979,12.896,5.979,19.562,25.979,19.562z'
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::insert_symbol_color
 *                             "insert_symbol_color": If @a symbolFormat is
 *                             'svg' this is ignored. If @a symbolFormat is
 *                             'svg_path' then this option specifies the color
 *                             (in RRGGBB hex format) of the path. For example,
 *                             to have the path rendered in red, used 'FF0000'.
 *                             If 'color' is not provided then '00FF00' (i.e.
 *                             green) is used by default.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::InsertSymbolResponse "Response" object containing the
 *         result of the operation.
 */
InsertSymbolResponse insertSymbol( const std::string& symbolId,
                                   const std::string& symbolFormat,
                                   const std::vector<uint8_t>& symbolData,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Adds a symbol or icon (i.e.\ an image) to represent data points when data is
 * rendered visually. Users must provide the symbol identifier (string), a
 * format (currently supported: 'svg' and 'svg_path'), the data for the symbol,
 * and any additional optional parameter (e.g.\ color). To have a symbol used
 * for rendering create a table with a string column named 'SYMBOLCODE' (along
 * with 'x' or 'y' for example). Then when the table is rendered (via <a
 * href="../../../api/rest/wms_rest/" target="_top">WMS</a>) if the
 * 'dosymbology' parameter is 'true' then the value of the 'SYMBOLCODE' column
 * is used to pick the symbol displayed for each point.
 *
 * @param[in] symbolId  The id of the symbol being added. This is the same id
 *                      that should be in the 'SYMBOLCODE' column for objects
 *                      using this symbol
 * @param[in] symbolFormat  Specifies the symbol format. Must be either 'svg'
 *                          or 'svg_path'.
 *                          Supported values:
 *                          <ul>
 *                              <li>@ref gpudb::insert_symbol_svg
 *                                  "insert_symbol_svg"
 *                              <li>@ref gpudb::insert_symbol_svg_path
 *                                  "insert_symbol_svg_path"
 *                          </ul>
 * @param[in] symbolData  The actual symbol data. If @a symbolFormat is 'svg'
 *                        then this should be the raw bytes representing an svg
 *                        file. If @a symbolFormat is svg path then this should
 *                        be an svg path string, for example:
 *                        'M25.979,12.896,5.979,12.896,5.979,19.562,25.979,19.562z'
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::insert_symbol_color
 *                             "insert_symbol_color": If @a symbolFormat is
 *                             'svg' this is ignored. If @a symbolFormat is
 *                             'svg_path' then this option specifies the color
 *                             (in RRGGBB hex format) of the path. For example,
 *                             to have the path rendered in red, used 'FF0000'.
 *                             If 'color' is not provided then '00FF00' (i.e.
 *                             green) is used by default.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::InsertSymbolResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::InsertSymbolResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
InsertSymbolResponse& insertSymbol( const std::string& symbolId,
                                    const std::string& symbolFormat,
                                    const std::vector<uint8_t>& symbolData,
                                    const std::map<std::string, std::string>& options,
                                    InsertSymbolResponse& response_ ) const;

/**
 * Kills a running proc instance.
 *
 * @param[in] request_  @ref gpudb::KillProcRequest "Request" object containing
 *                      the parameters for the operation.
 *
 * @return @ref gpudb::KillProcResponse "Response" object containing the result
 *         of the operation.
 */
KillProcResponse killProc( const KillProcRequest& request_ ) const;

/**
 * Kills a running proc instance.
 *
 * @param[in] request_  @ref gpudb::KillProcRequest "Request" object containing
 *                      the parameters for the operation.
 * @param[out] response_  @ref gpudb::KillProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::KillProcResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
KillProcResponse& killProc( const KillProcRequest& request_,
                            KillProcResponse& response_ ) const;

/**
 * Kills a running proc instance.
 *
 * @param[in] runId  The run ID of a running proc instance. If a proc with a
 *                   matching run ID is not found or the proc instance has
 *                   already completed, no procs will be killed. If not
 *                   specified, all running proc instances will be killed. The
 *                   default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::kill_proc_run_tag
 *                             "kill_proc_run_tag": If @a runId is specified,
 *                             kill the proc instance that has a matching run
 *                             ID and a matching run tag that was provided to
 *                             @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc". If @a runId is not specified,
 *                             kill the proc instance(s) where a matching run
 *                             tag was provided to @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc". The default value is ''.
 *                         <li>@ref gpudb::kill_proc_clear_execute_at_startup
 *                             "kill_proc_clear_execute_at_startup": If @ref
 *                             gpudb::kill_proc_true "true", kill and remove
 *                             the instance of the proc matching the auto-start
 *                             run ID that was created to run when the database
 *                             is started. The auto-start run ID was returned
 *                             from @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc" and can be retrieved using @ref
 *                             showProc(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showProc".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::kill_proc_true
 *                                     "kill_proc_true"
 *                                 <li>@ref gpudb::kill_proc_false
 *                                     "kill_proc_false"
 *                             </ul>
 *                             The default value is @ref gpudb::kill_proc_false
 *                             "kill_proc_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::KillProcResponse "Response" object containing the result
 *         of the operation.
 */
KillProcResponse killProc( const std::string& runId,
                           const std::map<std::string, std::string>& options ) const;

/**
 * Kills a running proc instance.
 *
 * @param[in] runId  The run ID of a running proc instance. If a proc with a
 *                   matching run ID is not found or the proc instance has
 *                   already completed, no procs will be killed. If not
 *                   specified, all running proc instances will be killed. The
 *                   default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::kill_proc_run_tag
 *                             "kill_proc_run_tag": If @a runId is specified,
 *                             kill the proc instance that has a matching run
 *                             ID and a matching run tag that was provided to
 *                             @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc". If @a runId is not specified,
 *                             kill the proc instance(s) where a matching run
 *                             tag was provided to @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc". The default value is ''.
 *                         <li>@ref gpudb::kill_proc_clear_execute_at_startup
 *                             "kill_proc_clear_execute_at_startup": If @ref
 *                             gpudb::kill_proc_true "true", kill and remove
 *                             the instance of the proc matching the auto-start
 *                             run ID that was created to run when the database
 *                             is started. The auto-start run ID was returned
 *                             from @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc" and can be retrieved using @ref
 *                             showProc(const std::string&, const std::map<std::string, std::string>&) const
 *                             "showProc".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::kill_proc_true
 *                                     "kill_proc_true"
 *                                 <li>@ref gpudb::kill_proc_false
 *                                     "kill_proc_false"
 *                             </ul>
 *                             The default value is @ref gpudb::kill_proc_false
 *                             "kill_proc_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::KillProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::KillProcResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
KillProcResponse& killProc( const std::string& runId,
                            const std::map<std::string, std::string>& options,
                            KillProcResponse& response_ ) const;

/** @private */
ListGraphResponse listGraph( const ListGraphRequest& request_ ) const;

/** @private */
ListGraphResponse& listGraph( const ListGraphRequest& request_,
                              ListGraphResponse& response_ ) const;

/** @private */
ListGraphResponse listGraph( const std::string& graphName,
                             const std::map<std::string, std::string>& options ) const;

/** @private */
ListGraphResponse& listGraph( const std::string& graphName,
                              const std::map<std::string, std::string>& options,
                              ListGraphResponse& response_ ) const;

/**
 * Manages global access to a table's data.  By default a table has a @ref
 * gpudb::LockTableRequest::lockType "lockType" of @ref
 * gpudb::lock_table_read_write "read_write", indicating all operations are
 * permitted.  A user may request a @ref gpudb::lock_table_read_only
 * "read_only" or a @ref gpudb::lock_table_write_only "write_only" lock, after
 * which only read or write operations, respectively, are permitted on the
 * table until the lock is removed.  When @ref
 * gpudb::LockTableRequest::lockType "lockType" is @ref
 * gpudb::lock_table_no_access "no_access" then no operations are permitted on
 * the table.  The lock status can be queried by setting @ref
 * gpudb::LockTableRequest::lockType "lockType" to @ref
 * gpudb::lock_table_status "status".
 *
 * @param[in] request_  @ref gpudb::LockTableRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::LockTableResponse "Response" object containing the
 *         result of the operation.
 */
LockTableResponse lockTable( const LockTableRequest& request_ ) const;

/**
 * Manages global access to a table's data.  By default a table has a @ref
 * gpudb::LockTableRequest::lockType "lockType" of @ref
 * gpudb::lock_table_read_write "read_write", indicating all operations are
 * permitted.  A user may request a @ref gpudb::lock_table_read_only
 * "read_only" or a @ref gpudb::lock_table_write_only "write_only" lock, after
 * which only read or write operations, respectively, are permitted on the
 * table until the lock is removed.  When @ref
 * gpudb::LockTableRequest::lockType "lockType" is @ref
 * gpudb::lock_table_no_access "no_access" then no operations are permitted on
 * the table.  The lock status can be queried by setting @ref
 * gpudb::LockTableRequest::lockType "lockType" to @ref
 * gpudb::lock_table_status "status".
 *
 * @param[in] request_  @ref gpudb::LockTableRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::LockTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::LockTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
LockTableResponse& lockTable( const LockTableRequest& request_,
                              LockTableResponse& response_ ) const;

/**
 * Manages global access to a table's data.  By default a table has a @a
 * lockType of @ref gpudb::lock_table_read_write "read_write", indicating all
 * operations are permitted.  A user may request a @ref
 * gpudb::lock_table_read_only "read_only" or a @ref
 * gpudb::lock_table_write_only "write_only" lock, after which only read or
 * write operations, respectively, are permitted on the table until the lock is
 * removed.  When @a lockType is @ref gpudb::lock_table_no_access "no_access"
 * then no operations are permitted on the table.  The lock status can be
 * queried by setting @a lockType to @ref gpudb::lock_table_status "status".
 *
 * @param[in] tableName  Name of the table to be locked, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  It must be a
 *                       currently existing table or view.
 * @param[in] lockType  The type of lock being applied to the table. Setting it
 *                      to @ref gpudb::lock_table_status "status" will return
 *                      the current lock status of the table without changing
 *                      it.
 *                      Supported values:
 *                      <ul>
 *                          <li>@ref gpudb::lock_table_status
 *                              "lock_table_status": Show locked status
 *                          <li>@ref gpudb::lock_table_no_access
 *                              "lock_table_no_access": Allow no read/write
 *                              operations
 *                          <li>@ref gpudb::lock_table_read_only
 *                              "lock_table_read_only": Allow only read
 *                              operations
 *                          <li>@ref gpudb::lock_table_write_only
 *                              "lock_table_write_only": Allow only write
 *                              operations
 *                          <li>@ref gpudb::lock_table_read_write
 *                              "lock_table_read_write": Allow all read/write
 *                              operations
 *                      </ul>
 *                      The default value is @ref gpudb::lock_table_status
 *                      "lock_table_status".
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::LockTableResponse "Response" object containing the
 *         result of the operation.
 */
LockTableResponse lockTable( const std::string& tableName,
                             const std::string& lockType,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Manages global access to a table's data.  By default a table has a @a
 * lockType of @ref gpudb::lock_table_read_write "read_write", indicating all
 * operations are permitted.  A user may request a @ref
 * gpudb::lock_table_read_only "read_only" or a @ref
 * gpudb::lock_table_write_only "write_only" lock, after which only read or
 * write operations, respectively, are permitted on the table until the lock is
 * removed.  When @a lockType is @ref gpudb::lock_table_no_access "no_access"
 * then no operations are permitted on the table.  The lock status can be
 * queried by setting @a lockType to @ref gpudb::lock_table_status "status".
 *
 * @param[in] tableName  Name of the table to be locked, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  It must be a
 *                       currently existing table or view.
 * @param[in] lockType  The type of lock being applied to the table. Setting it
 *                      to @ref gpudb::lock_table_status "status" will return
 *                      the current lock status of the table without changing
 *                      it.
 *                      Supported values:
 *                      <ul>
 *                          <li>@ref gpudb::lock_table_status
 *                              "lock_table_status": Show locked status
 *                          <li>@ref gpudb::lock_table_no_access
 *                              "lock_table_no_access": Allow no read/write
 *                              operations
 *                          <li>@ref gpudb::lock_table_read_only
 *                              "lock_table_read_only": Allow only read
 *                              operations
 *                          <li>@ref gpudb::lock_table_write_only
 *                              "lock_table_write_only": Allow only write
 *                              operations
 *                          <li>@ref gpudb::lock_table_read_write
 *                              "lock_table_read_write": Allow all read/write
 *                              operations
 *                      </ul>
 *                      The default value is @ref gpudb::lock_table_status
 *                      "lock_table_status".
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::LockTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::LockTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
LockTableResponse& lockTable( const std::string& tableName,
                              const std::string& lockType,
                              const std::map<std::string, std::string>& options,
                              LockTableResponse& response_ ) const;

/**
 * Matches a directed route implied by a given set of latitude/longitude points
 * to an existing underlying road network graph using a given solution type.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph---match/"
 * target="_top">/match/graph examples</a> before using this endpoint.
 *
 * @param[in] request_  @ref gpudb::MatchGraphRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::MatchGraphResponse "Response" object containing the
 *         result of the operation.
 */
MatchGraphResponse matchGraph( const MatchGraphRequest& request_ ) const;

/**
 * Matches a directed route implied by a given set of latitude/longitude points
 * to an existing underlying road network graph using a given solution type.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph---match/"
 * target="_top">/match/graph examples</a> before using this endpoint.
 *
 * @param[in] request_  @ref gpudb::MatchGraphRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::MatchGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::MatchGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
MatchGraphResponse& matchGraph( const MatchGraphRequest& request_,
                                MatchGraphResponse& response_ ) const;

/**
 * Matches a directed route implied by a given set of latitude/longitude points
 * to an existing underlying road network graph using a given solution type.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph---match/"
 * target="_top">/match/graph examples</a> before using this endpoint.
 *
 * @param[in] graphName  Name of the underlying geospatial graph resource to
 *                       match to using @a samplePoints.
 * @param[in] samplePoints  Sample points used to match to an underlying
 *                          geospatial graph. Sample points must be specified
 *                          using <a
 *                          href="../../../graph_solver/network_graph_solver/#match-identifiers"
 *                          target="_top">identifiers</a>; identifiers are
 *                          grouped as <a
 *                          href="../../../graph_solver/network_graph_solver/#match-combinations"
 *                          target="_top">combinations</a>. Identifiers can be
 *                          used with: existing column names, e.g.,
 *                          'table.column AS SAMPLE_X'; expressions, e.g.,
 *                          'ST_MAKEPOINT(table.x, table.y) AS
 *                          SAMPLE_WKTPOINT'; or constant values, e.g., '{1, 2,
 *                          10} AS SAMPLE_TRIPID'.
 * @param[in] solveMethod  The type of solver to use for graph matching.
 *                         Supported values:
 *                         <ul>
 *                             <li>@ref gpudb::match_graph_markov_chain
 *                                 "match_graph_markov_chain": Matches @a
 *                                 samplePoints to the graph using the Hidden
 *                                 Markov Model (HMM)-based method, which
 *                                 conducts a range-tree closest-edge search to
 *                                 find the best combinations of possible road
 *                                 segments (@ref
 *                                 gpudb::match_graph_num_segments
 *                                 "num_segments") for each sample point to
 *                                 create the best route. The route is secured
 *                                 one point at a time while looking ahead @ref
 *                                 gpudb::match_graph_chain_width "chain_width"
 *                                 number of points, so the prediction is
 *                                 corrected after each point. This solution
 *                                 type is the most accurate but also the most
 *                                 computationally intensive. Related options:
 *                                 @ref gpudb::match_graph_num_segments
 *                                 "num_segments" and @ref
 *                                 gpudb::match_graph_chain_width
 *                                 "chain_width".
 *                             <li>@ref gpudb::match_graph_match_od_pairs
 *                                 "match_graph_match_od_pairs": Matches @a
 *                                 samplePoints to find the most probable path
 *                                 between origin and destination pairs with
 *                                 cost constraints.
 *                             <li>@ref gpudb::match_graph_match_supply_demand
 *                                 "match_graph_match_supply_demand": Matches
 *                                 @a samplePoints to optimize scheduling
 *                                 multiple supplies (trucks) with varying
 *                                 sizes to varying demand sites with varying
 *                                 capacities per depot. Related options: @ref
 *                                 gpudb::match_graph_partial_loading
 *                                 "partial_loading" and @ref
 *                                 gpudb::match_graph_max_combinations
 *                                 "max_combinations".
 *                             <li>@ref gpudb::match_graph_match_batch_solves
 *                                 "match_graph_match_batch_solves": Matches @a
 *                                 samplePoints source and destination pairs
 *                                 for the shortest path solves in batch mode.
 *                             <li>@ref gpudb::match_graph_match_loops
 *                                 "match_graph_match_loops": Matches closed
 *                                 loops (Eulerian paths) originating and
 *                                 ending at each graph node within min and max
 *                                 hops (levels).
 *                             <li>@ref
 *                                 gpudb::match_graph_match_charging_stations
 *                                 "match_graph_match_charging_stations":
 *                                 Matches an optimal path across a number of
 *                                 ev-charging stations between source and
 *                                 target locations.
 *                             <li>@ref gpudb::match_graph_match_similarity
 *                                 "match_graph_match_similarity": Matches the
 *                                 intersection set(s) by computing the Jaccard
 *                                 similarity score between node pairs.
 *                             <li>@ref gpudb::match_graph_match_pickup_dropoff
 *                                 "match_graph_match_pickup_dropoff": Matches
 *                                 the pickups and dropoffs by optimizing the
 *                                 total trip costs
 *                             <li>@ref gpudb::match_graph_match_clusters
 *                                 "match_graph_match_clusters": Matches the
 *                                 graph nodes with a cluster index using
 *                                 Louvain clustering algorithm
 *                             <li>@ref gpudb::match_graph_match_pattern
 *                                 "match_graph_match_pattern": Matches a
 *                                 pattern in the graph
 *                             <li>@ref gpudb::match_graph_match_embedding
 *                                 "match_graph_match_embedding": Creates
 *                                 vector node embeddings
 *                         </ul>
 *                         The default value is @ref
 *                         gpudb::match_graph_markov_chain
 *                         "match_graph_markov_chain".
 * @param[in] solutionTable  The name of the table used to store the results,
 *                           in [schema_name.]table_name format, using standard
 *                           <a
 *                           href="../../../concepts/tables/#table-name-resolution"
 *                           target="_top">name resolution rules</a> and
 *                           meeting <a
 *                           href="../../../concepts/tables/#table-naming-criteria"
 *                           target="_top">table naming criteria</a>.  This
 *                           table contains a <a
 *                           href="../../../location_intelligence/geo_objects/#geospatial-tracks"
 *                           target="_top">track</a> of geospatial points for
 *                           the matched portion of the graph, a track ID, and
 *                           a score value. Also outputs a details table
 *                           containing a trip ID (that matches the track ID),
 *                           the latitude/longitude pair, the timestamp the
 *                           point was recorded at, and an edge ID
 *                           corresponding to the matched road segment. Must
 *                           not be an existing table of the same name. The
 *                           default value is ''.
 * @param[in] options  Additional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::match_graph_gps_noise
 *                             "match_graph_gps_noise": GPS noise value (in
 *                             meters) to remove redundant sample points. Use
 *                             -1 to disable noise reduction. The default value
 *                             accounts for 95% of point variation (+ or -5
 *                             meters). The default value is '5.0'.
 *                         <li>@ref gpudb::match_graph_num_segments
 *                             "match_graph_num_segments": Maximum number of
 *                             potentially matching road segments for each
 *                             sample point. For the @ref
 *                             gpudb::match_graph_markov_chain "markov_chain"
 *                             solver, the default is 3. The default value is
 *                             '3'.
 *                         <li>@ref gpudb::match_graph_search_radius
 *                             "match_graph_search_radius": Maximum search
 *                             radius used when snapping sample points onto
 *                             potentially matching surrounding segments. The
 *                             default value corresponds to approximately 100
 *                             meters. The default value is '0.001'.
 *                         <li>@ref gpudb::match_graph_chain_width
 *                             "match_graph_chain_width": For the @ref
 *                             gpudb::match_graph_markov_chain "markov_chain"
 *                             solver only. Length of the sample points
 *                             lookahead window within the Markov kernel; the
 *                             larger the number, the more accurate the
 *                             solution. The default value is '9'.
 *                         <li>@ref gpudb::match_graph_source
 *                             "match_graph_source": Optional WKT starting
 *                             point from @a samplePoints for the solver. The
 *                             default behavior for the endpoint is to use time
 *                             to determine the starting point. The default
 *                             value is 'POINT NULL'.
 *                         <li>@ref gpudb::match_graph_destination
 *                             "match_graph_destination": Optional WKT ending
 *                             point from @a samplePoints for the solver. The
 *                             default behavior for the endpoint is to use time
 *                             to determine the destination point. The default
 *                             value is 'POINT NULL'.
 *                         <li>@ref gpudb::match_graph_partial_loading
 *                             "match_graph_partial_loading": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. When false
 *                             (non-default), trucks do not off-load at the
 *                             demand (store) side if the remainder is less
 *                             than the store's need.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": Partial off-loading
 *                                     at multiple store (demand) locations
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": No partial
 *                                     off-loading allowed if supply is less
 *                                     than the store's demand.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_true "match_graph_true".
 *                         <li>@ref gpudb::match_graph_max_combinations
 *                             "match_graph_max_combinations": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. This is the
 *                             cutoff for the number of generated combinations
 *                             for sequencing the demand locations - can
 *                             increase this up to 2M. The default value is
 *                             '10000'.
 *                         <li>@ref gpudb::match_graph_max_supply_combinations
 *                             "match_graph_max_supply_combinations": For the
 *                             @ref gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. This is the
 *                             cutoff for the number of generated combinations
 *                             for sequencing the supply locations if/when
 *                             'permute_supplies' is true. The default value is
 *                             '10000'.
 *                         <li>@ref gpudb::match_graph_left_turn_penalty
 *                             "match_graph_left_turn_penalty": This will add
 *                             an additonal weight over the edges labelled as
 *                             'left turn' if the 'add_turn' option parameter
 *                             of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::match_graph_right_turn_penalty
 *                             "match_graph_right_turn_penalty": This will add
 *                             an additonal weight over the edges labelled as'
 *                             right turn' if the 'add_turn' option parameter
 *                             of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::match_graph_intersection_penalty
 *                             "match_graph_intersection_penalty": This will
 *                             add an additonal weight over the edges labelled
 *                             as 'intersection' if the 'add_turn' option
 *                             parameter of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::match_graph_sharp_turn_penalty
 *                             "match_graph_sharp_turn_penalty": This will add
 *                             an additonal weight over the edges labelled as
 *                             'sharp turn' or 'u-turn' if the 'add_turn'
 *                             option parameter of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::match_graph_aggregated_output
 *                             "match_graph_aggregated_output": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. When it is
 *                             true (default), each record in the output table
 *                             shows a particular truck's scheduled cumulative
 *                             round trip path (MULTILINESTRING) and the
 *                             corresponding aggregated cost. Otherwise, each
 *                             record shows a single scheduled truck route
 *                             (LINESTRING) towards a particular demand
 *                             location (store id) with its corresponding cost.
 *                             The default value is 'true'.
 *                         <li>@ref gpudb::match_graph_output_tracks
 *                             "match_graph_output_tracks": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. When it is
 *                             true (non-default), the output will be in tracks
 *                             format for all the round trips of each truck in
 *                             which the timestamps are populated directly from
 *                             the edge weights starting from their originating
 *                             depots. The default value is 'false'.
 *                         <li>@ref gpudb::match_graph_max_trip_cost
 *                             "match_graph_max_trip_cost": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" and @ref
 *                             gpudb::match_graph_match_pickup_dropoff
 *                             "match_pickup_dropoff" solvers only. If this
 *                             constraint is greater than zero (default) then
 *                             the trucks/rides will skip travelling from one
 *                             demand/pick location to another if the cost
 *                             between them is greater than this number
 *                             (distance or time). Zero (default) value means
 *                             no check is performed. The default value is
 *                             '0.0'.
 *                         <li>@ref gpudb::match_graph_filter_folding_paths
 *                             "match_graph_filter_folding_paths": For the @ref
 *                             gpudb::match_graph_markov_chain "markov_chain"
 *                             solver only. When true (non-default), the paths
 *                             per sequence combination is checked for folding
 *                             over patterns and can significantly increase the
 *                             execution time depending on the chain width and
 *                             the number of gps samples.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": Filter out the
 *                                     folded paths.
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": Do not filter out
 *                                     the folded paths
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_false "match_graph_false".
 *                         <li>@ref gpudb::match_graph_unit_unloading_cost
 *                             "match_graph_unit_unloading_cost": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. The unit cost
 *                             per load amount to be delivered. If this value
 *                             is greater than zero (default) then the
 *                             additional cost of this unit load multiplied by
 *                             the total dropped load will be added over to the
 *                             trip cost to the demand location. The default
 *                             value is '0.0'.
 *                         <li>@ref gpudb::match_graph_max_num_threads
 *                             "match_graph_max_num_threads": For the @ref
 *                             gpudb::match_graph_markov_chain "markov_chain"
 *                             solver only. If specified (greater than zero),
 *                             the maximum number of threads will not be
 *                             greater than the specified value. It can be
 *                             lower due to the memory and the number cores
 *                             available. Default value of zero allows the
 *                             algorithm to set the maximal number of threads
 *                             within these constraints. The default value is
 *                             '0'.
 *                         <li>@ref gpudb::match_graph_service_limit
 *                             "match_graph_service_limit": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. If specified
 *                             (greater than zero), any supply actor's total
 *                             service cost (distance or time) will be limited
 *                             by the specified value including multiple rounds
 *                             (if set). The default value is '0.0'.
 *                         <li>@ref gpudb::match_graph_enable_reuse
 *                             "match_graph_enable_reuse": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. If specified
 *                             (true), all supply actors can be scheduled for
 *                             second rounds from their originating depots.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": Allows reusing
 *                                     supply actors (trucks, e.g.) for
 *                                     scheduling again.
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": Supply actors are
 *                                     scheduled only once from their depots.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_false "match_graph_false".
 *                         <li>@ref gpudb::match_graph_max_stops
 *                             "match_graph_max_stops": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. If specified
 *                             (greater than zero), a supply actor (truck) can
 *                             at most have this many stops (demand locations)
 *                             in one round trip. Otherwise, it is unlimited.
 *                             If 'enable_truck_reuse' is on, this condition
 *                             will be applied separately at each round trip
 *                             use of the same truck. The default value is '0'.
 *                         <li>@ref gpudb::match_graph_service_radius
 *                             "match_graph_service_radius": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" and @ref
 *                             gpudb::match_graph_match_pickup_dropoff
 *                             "match_pickup_dropoff" solvers only. If
 *                             specified (greater than zero), it filters the
 *                             demands/picks outside this radius centered
 *                             around the supply actor/ride's originating
 *                             location (distance or time). The default value
 *                             is '0.0'.
 *                         <li>@ref gpudb::match_graph_permute_supplies
 *                             "match_graph_permute_supplies": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. If specified
 *                             (true), supply side actors are permuted for the
 *                             demand combinations during msdo optimization -
 *                             note that this option increases optimization
 *                             time significantly - use of 'max_combinations'
 *                             option is recommended to prevent prohibitively
 *                             long runs.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": Generates sequences
 *                                     over supply side permutations if total
 *                                     supply is less than twice the total
 *                                     demand
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": Permutations are
 *                                     not performed, rather a specific order
 *                                     of supplies based on capacity is
 *                                     computed
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_true "match_graph_true".
 *                         <li>@ref gpudb::match_graph_batch_tsm_mode
 *                             "match_graph_batch_tsm_mode": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. When enabled,
 *                             it sets the number of visits on each demand
 *                             location by a single salesman at each trip is
 *                             considered to be (one) 1, otherwise there is no
 *                             bound.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": Sets only one visit
 *                                     per demand location by a salesman (tsm
 *                                     mode)
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": No preset limit
 *                                     (usual msdo mode)
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_false "match_graph_false".
 *                         <li>@ref gpudb::match_graph_round_trip
 *                             "match_graph_round_trip": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. When enabled,
 *                             the supply will have to return back to the
 *                             origination location.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": The optimization is
 *                                     done for trips in round trip manner
 *                                     always returning to originating
 *                                     locations
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": Supplies do not
 *                                     have to come back to their originating
 *                                     locations in their routes. The routes
 *                                     are considered finished at the final
 *                                     dropoff.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_true "match_graph_true".
 *                         <li>@ref gpudb::match_graph_num_cycles
 *                             "match_graph_num_cycles": For the @ref
 *                             gpudb::match_graph_match_clusters
 *                             "match_clusters" solver only. Terminates the
 *                             cluster exchange iterations across 2-step-cycles
 *                             (outer loop) when quality does not improve
 *                             during iterations. The default value is '10'.
 *                         <li>@ref gpudb::match_graph_num_loops_per_cycle
 *                             "match_graph_num_loops_per_cycle": For the @ref
 *                             gpudb::match_graph_match_clusters
 *                             "match_clusters" and @ref
 *                             gpudb::match_graph_match_embedding
 *                             "match_embedding" solvers only. Terminates the
 *                             cluster exchanges within the first step
 *                             iterations of a cycle (inner loop) unless
 *                             convergence is reached. The default value is
 *                             '10'.
 *                         <li>@ref gpudb::match_graph_num_output_clusters
 *                             "match_graph_num_output_clusters": For the @ref
 *                             gpudb::match_graph_match_clusters
 *                             "match_clusters" solver only.  Limits the output
 *                             to the top 'num_output_clusters' clusters based
 *                             on density. Default value of zero outputs all
 *                             clusters. The default value is '0'.
 *                         <li>@ref gpudb::match_graph_max_num_clusters
 *                             "match_graph_max_num_clusters": For the @ref
 *                             gpudb::match_graph_match_clusters
 *                             "match_clusters" and @ref
 *                             gpudb::match_graph_match_embedding
 *                             "match_embedding" solvers only. If set (value
 *                             greater than zero), it terminates when the
 *                             number of clusters goes below than this number.
 *                             For embedding solver the default is 8. The
 *                             default value is '0'.
 *                         <li>@ref gpudb::match_graph_cluster_quality_metric
 *                             "match_graph_cluster_quality_metric": For the
 *                             @ref gpudb::match_graph_match_clusters
 *                             "match_clusters" solver only. The quality metric
 *                             for Louvain modularity optimization solver.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_girvan
 *                                     "match_graph_girvan": Uses the Newman
 *                                     Girvan quality metric for cluster solver
 *                                 <li>@ref gpudb::match_graph_spectral
 *                                     "match_graph_spectral": Applies
 *                                     recursive spectral bisection (RSB)
 *                                     partitioning solver
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_girvan "match_graph_girvan".
 *                         <li>@ref gpudb::match_graph_restricted_type
 *                             "match_graph_restricted_type": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. Optimization
 *                             is performed by restricting routes labeled by
 *                             'MSDO_ODDEVEN_RESTRICTED' only for this supply
 *                             actor (truck) type.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_odd
 *                                     "match_graph_odd": Applies odd/even rule
 *                                     restrictions to odd tagged vehicles.
 *                                 <li>@ref gpudb::match_graph_even
 *                                     "match_graph_even": Applies odd/even
 *                                     rule restrictions to even tagged
 *                                     vehicles.
 *                                 <li>@ref gpudb::match_graph_none
 *                                     "match_graph_none": Does not apply
 *                                     odd/even rule restrictions to any
 *                                     vehicles.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_none "match_graph_none".
 *                         <li>@ref gpudb::match_graph_server_id
 *                             "match_graph_server_id": Indicates which graph
 *                             server(s) to send the request to. Default is to
 *                             send to the server, amongst those containing the
 *                             corresponding graph, that has the most
 *                             computational bandwidth. The default value is
 *                             ''.
 *                         <li>@ref gpudb::match_graph_inverse_solve
 *                             "match_graph_inverse_solve": For the @ref
 *                             gpudb::match_graph_match_batch_solves
 *                             "match_batch_solves" solver only. Solves
 *                             source-destination pairs using inverse shortest
 *                             path solver.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": Solves using inverse
 *                                     shortest path solver.
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": Solves using direct
 *                                     shortest path solver.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_false "match_graph_false".
 *                         <li>@ref gpudb::match_graph_min_loop_level
 *                             "match_graph_min_loop_level": For the @ref
 *                             gpudb::match_graph_match_loops "match_loops"
 *                             solver only. Finds closed loops around each node
 *                             deducible not less than this minimal hop (level)
 *                             deep. The default value is '0'.
 *                         <li>@ref gpudb::match_graph_max_loop_level
 *                             "match_graph_max_loop_level": For the @ref
 *                             gpudb::match_graph_match_loops "match_loops"
 *                             solver only. Finds closed loops around each node
 *                             deducible not more than this maximal hop (level)
 *                             deep. The default value is '5'.
 *                         <li>@ref gpudb::match_graph_search_limit
 *                             "match_graph_search_limit": For the @ref
 *                             gpudb::match_graph_match_loops "match_loops"
 *                             solver only. Searches within this limit of nodes
 *                             per vertex to detect loops. The value zero means
 *                             there is no limit. The default value is '10000'.
 *                         <li>@ref gpudb::match_graph_output_batch_size
 *                             "match_graph_output_batch_size": For the @ref
 *                             gpudb::match_graph_match_loops "match_loops"
 *                             solver only. Uses this value as the batch size
 *                             of the number of loops in flushing(inserting) to
 *                             the output table. The default value is '1000'.
 *                         <li>@ref gpudb::match_graph_charging_capacity
 *                             "match_graph_charging_capacity": For the @ref
 *                             gpudb::match_graph_match_charging_stations
 *                             "match_charging_stations" solver only. This is
 *                             the maximum ev-charging capacity of a vehicle
 *                             (distance in meters or time in seconds depending
 *                             on the unit of the graph weights). The default
 *                             value is '300000.0'.
 *                         <li>@ref gpudb::match_graph_charging_candidates
 *                             "match_graph_charging_candidates": For the @ref
 *                             gpudb::match_graph_match_charging_stations
 *                             "match_charging_stations" solver only. Solver
 *                             searches for this many number of stations
 *                             closest around each base charging location found
 *                             by capacity. The default value is '10'.
 *                         <li>@ref gpudb::match_graph_charging_penalty
 *                             "match_graph_charging_penalty": For the @ref
 *                             gpudb::match_graph_match_charging_stations
 *                             "match_charging_stations" solver only. This is
 *                             the penalty for full charging. The default value
 *                             is '30000.0'.
 *                         <li>@ref gpudb::match_graph_max_hops
 *                             "match_graph_max_hops": For the @ref
 *                             gpudb::match_graph_match_similarity
 *                             "match_similarity" and @ref
 *                             gpudb::match_graph_match_embedding
 *                             "match_embedding" solvers only. Searches within
 *                             this maximum hops for source and target node
 *                             pairs to compute the Jaccard scores. The default
 *                             value is '3'.
 *                         <li>@ref gpudb::match_graph_traversal_node_limit
 *                             "match_graph_traversal_node_limit": For the @ref
 *                             gpudb::match_graph_match_similarity
 *                             "match_similarity" solver only. Limits the
 *                             traversal depth if it reaches this many number
 *                             of nodes. The default value is '1000'.
 *                         <li>@ref gpudb::match_graph_paired_similarity
 *                             "match_graph_paired_similarity": For the @ref
 *                             gpudb::match_graph_match_similarity
 *                             "match_similarity" solver only. If true, it
 *                             computes Jaccard score between each pair,
 *                             otherwise it will compute Jaccard from the
 *                             intersection set between the source and target
 *                             nodes.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true"
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_true "match_graph_true".
 *                         <li>@ref gpudb::match_graph_force_undirected
 *                             "match_graph_force_undirected": For the @ref
 *                             gpudb::match_graph_match_pattern "match_pattern"
 *                             and @ref gpudb::match_graph_match_embedding
 *                             "match_embedding" solvers only. Pattern matching
 *                             will be using both pattern and graph as
 *                             undirected if set to true.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true"
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_false "match_graph_false".
 *                         <li>@ref gpudb::match_graph_max_vector_dimension
 *                             "match_graph_max_vector_dimension": For the @ref
 *                             gpudb::match_graph_match_embedding
 *                             "match_embedding" solver only. Limits the number
 *                             of dimensions in node vector embeddings. The
 *                             default value is '1000'.
 *                         <li>@ref
 *                             gpudb::match_graph_optimize_embedding_weights
 *                             "match_graph_optimize_embedding_weights": For
 *                             the @ref gpudb::match_graph_match_embedding
 *                             "match_embedding" solvers only. Solves to find
 *                             the optimal weights per sub feature in vector
 *                             emdeddings.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true"
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_false "match_graph_false".
 *                         <li>@ref gpudb::match_graph_embedding_weights
 *                             "match_graph_embedding_weights": For the @ref
 *                             gpudb::match_graph_match_embedding
 *                             "match_embedding" solver only. User specified
 *                             weights per sub feature in vector embeddings.
 *                             The string contains the comma separated float
 *                             values for each sub-feature in the vector space.
 *                             These values will ONLY be used if
 *                             'optimize_embedding_weights' is false. The
 *                             default value is '1.0,1.0,1.0,1.0'.
 *                         <li>@ref
 *                             gpudb::match_graph_optimization_sampling_size
 *                             "match_graph_optimization_sampling_size": For
 *                             the @ref gpudb::match_graph_match_embedding
 *                             "match_embedding" solver only. Sets the number
 *                             of random nodes from the graph for solving the
 *                             weights using stochastic gradient descent. The
 *                             default value is '1000'.
 *                         <li>@ref
 *                             gpudb::match_graph_optimization_max_iterations
 *                             "match_graph_optimization_max_iterations": For
 *                             the @ref gpudb::match_graph_match_embedding
 *                             "match_embedding" solver only. When the
 *                             iterations (epochs) for the convergence of the
 *                             stochastic gradient descent algorithm  reaches
 *                             this number it bails out unless relative error
 *                             between consecutive iterations is below the
 *                             'optimization_error_tolerance' option. The
 *                             default value is '1000'.
 *                         <li>@ref
 *                             gpudb::match_graph_optimization_error_tolerance
 *                             "match_graph_optimization_error_tolerance": For
 *                             the @ref gpudb::match_graph_match_embedding
 *                             "match_embedding" solver only. When the relative
 *                             error between all of the weights' consecutive
 *                             iterations falls below this threshold  the
 *                             optimization cycle is interrupted unless the
 *                             number of iterations reaches the limit set by
 *                             the option 'max_optimization_iterations'. The
 *                             default value is '0.001'.
 *                         <li>@ref
 *                             gpudb::match_graph_optimization_iteration_rate
 *                             "match_graph_optimization_iteration_rate": For
 *                             the @ref gpudb::match_graph_match_embedding
 *                             "match_embedding" solver only. It is otherwise
 *                             known as the learning rate, which is the
 *                             proportionality constant in fornt of the
 *                             gradient term in successive iterations. The
 *                             default value is '0.3'.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::MatchGraphResponse "Response" object containing the
 *         result of the operation.
 */
MatchGraphResponse matchGraph( const std::string& graphName,
                               const std::vector<std::string>& samplePoints,
                               const std::string& solveMethod,
                               const std::string& solutionTable,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Matches a directed route implied by a given set of latitude/longitude points
 * to an existing underlying road network graph using a given solution type.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph---match/"
 * target="_top">/match/graph examples</a> before using this endpoint.
 *
 * @param[in] graphName  Name of the underlying geospatial graph resource to
 *                       match to using @a samplePoints.
 * @param[in] samplePoints  Sample points used to match to an underlying
 *                          geospatial graph. Sample points must be specified
 *                          using <a
 *                          href="../../../graph_solver/network_graph_solver/#match-identifiers"
 *                          target="_top">identifiers</a>; identifiers are
 *                          grouped as <a
 *                          href="../../../graph_solver/network_graph_solver/#match-combinations"
 *                          target="_top">combinations</a>. Identifiers can be
 *                          used with: existing column names, e.g.,
 *                          'table.column AS SAMPLE_X'; expressions, e.g.,
 *                          'ST_MAKEPOINT(table.x, table.y) AS
 *                          SAMPLE_WKTPOINT'; or constant values, e.g., '{1, 2,
 *                          10} AS SAMPLE_TRIPID'.
 * @param[in] solveMethod  The type of solver to use for graph matching.
 *                         Supported values:
 *                         <ul>
 *                             <li>@ref gpudb::match_graph_markov_chain
 *                                 "match_graph_markov_chain": Matches @a
 *                                 samplePoints to the graph using the Hidden
 *                                 Markov Model (HMM)-based method, which
 *                                 conducts a range-tree closest-edge search to
 *                                 find the best combinations of possible road
 *                                 segments (@ref
 *                                 gpudb::match_graph_num_segments
 *                                 "num_segments") for each sample point to
 *                                 create the best route. The route is secured
 *                                 one point at a time while looking ahead @ref
 *                                 gpudb::match_graph_chain_width "chain_width"
 *                                 number of points, so the prediction is
 *                                 corrected after each point. This solution
 *                                 type is the most accurate but also the most
 *                                 computationally intensive. Related options:
 *                                 @ref gpudb::match_graph_num_segments
 *                                 "num_segments" and @ref
 *                                 gpudb::match_graph_chain_width
 *                                 "chain_width".
 *                             <li>@ref gpudb::match_graph_match_od_pairs
 *                                 "match_graph_match_od_pairs": Matches @a
 *                                 samplePoints to find the most probable path
 *                                 between origin and destination pairs with
 *                                 cost constraints.
 *                             <li>@ref gpudb::match_graph_match_supply_demand
 *                                 "match_graph_match_supply_demand": Matches
 *                                 @a samplePoints to optimize scheduling
 *                                 multiple supplies (trucks) with varying
 *                                 sizes to varying demand sites with varying
 *                                 capacities per depot. Related options: @ref
 *                                 gpudb::match_graph_partial_loading
 *                                 "partial_loading" and @ref
 *                                 gpudb::match_graph_max_combinations
 *                                 "max_combinations".
 *                             <li>@ref gpudb::match_graph_match_batch_solves
 *                                 "match_graph_match_batch_solves": Matches @a
 *                                 samplePoints source and destination pairs
 *                                 for the shortest path solves in batch mode.
 *                             <li>@ref gpudb::match_graph_match_loops
 *                                 "match_graph_match_loops": Matches closed
 *                                 loops (Eulerian paths) originating and
 *                                 ending at each graph node within min and max
 *                                 hops (levels).
 *                             <li>@ref
 *                                 gpudb::match_graph_match_charging_stations
 *                                 "match_graph_match_charging_stations":
 *                                 Matches an optimal path across a number of
 *                                 ev-charging stations between source and
 *                                 target locations.
 *                             <li>@ref gpudb::match_graph_match_similarity
 *                                 "match_graph_match_similarity": Matches the
 *                                 intersection set(s) by computing the Jaccard
 *                                 similarity score between node pairs.
 *                             <li>@ref gpudb::match_graph_match_pickup_dropoff
 *                                 "match_graph_match_pickup_dropoff": Matches
 *                                 the pickups and dropoffs by optimizing the
 *                                 total trip costs
 *                             <li>@ref gpudb::match_graph_match_clusters
 *                                 "match_graph_match_clusters": Matches the
 *                                 graph nodes with a cluster index using
 *                                 Louvain clustering algorithm
 *                             <li>@ref gpudb::match_graph_match_pattern
 *                                 "match_graph_match_pattern": Matches a
 *                                 pattern in the graph
 *                             <li>@ref gpudb::match_graph_match_embedding
 *                                 "match_graph_match_embedding": Creates
 *                                 vector node embeddings
 *                         </ul>
 *                         The default value is @ref
 *                         gpudb::match_graph_markov_chain
 *                         "match_graph_markov_chain".
 * @param[in] solutionTable  The name of the table used to store the results,
 *                           in [schema_name.]table_name format, using standard
 *                           <a
 *                           href="../../../concepts/tables/#table-name-resolution"
 *                           target="_top">name resolution rules</a> and
 *                           meeting <a
 *                           href="../../../concepts/tables/#table-naming-criteria"
 *                           target="_top">table naming criteria</a>.  This
 *                           table contains a <a
 *                           href="../../../location_intelligence/geo_objects/#geospatial-tracks"
 *                           target="_top">track</a> of geospatial points for
 *                           the matched portion of the graph, a track ID, and
 *                           a score value. Also outputs a details table
 *                           containing a trip ID (that matches the track ID),
 *                           the latitude/longitude pair, the timestamp the
 *                           point was recorded at, and an edge ID
 *                           corresponding to the matched road segment. Must
 *                           not be an existing table of the same name. The
 *                           default value is ''.
 * @param[in] options  Additional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::match_graph_gps_noise
 *                             "match_graph_gps_noise": GPS noise value (in
 *                             meters) to remove redundant sample points. Use
 *                             -1 to disable noise reduction. The default value
 *                             accounts for 95% of point variation (+ or -5
 *                             meters). The default value is '5.0'.
 *                         <li>@ref gpudb::match_graph_num_segments
 *                             "match_graph_num_segments": Maximum number of
 *                             potentially matching road segments for each
 *                             sample point. For the @ref
 *                             gpudb::match_graph_markov_chain "markov_chain"
 *                             solver, the default is 3. The default value is
 *                             '3'.
 *                         <li>@ref gpudb::match_graph_search_radius
 *                             "match_graph_search_radius": Maximum search
 *                             radius used when snapping sample points onto
 *                             potentially matching surrounding segments. The
 *                             default value corresponds to approximately 100
 *                             meters. The default value is '0.001'.
 *                         <li>@ref gpudb::match_graph_chain_width
 *                             "match_graph_chain_width": For the @ref
 *                             gpudb::match_graph_markov_chain "markov_chain"
 *                             solver only. Length of the sample points
 *                             lookahead window within the Markov kernel; the
 *                             larger the number, the more accurate the
 *                             solution. The default value is '9'.
 *                         <li>@ref gpudb::match_graph_source
 *                             "match_graph_source": Optional WKT starting
 *                             point from @a samplePoints for the solver. The
 *                             default behavior for the endpoint is to use time
 *                             to determine the starting point. The default
 *                             value is 'POINT NULL'.
 *                         <li>@ref gpudb::match_graph_destination
 *                             "match_graph_destination": Optional WKT ending
 *                             point from @a samplePoints for the solver. The
 *                             default behavior for the endpoint is to use time
 *                             to determine the destination point. The default
 *                             value is 'POINT NULL'.
 *                         <li>@ref gpudb::match_graph_partial_loading
 *                             "match_graph_partial_loading": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. When false
 *                             (non-default), trucks do not off-load at the
 *                             demand (store) side if the remainder is less
 *                             than the store's need.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": Partial off-loading
 *                                     at multiple store (demand) locations
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": No partial
 *                                     off-loading allowed if supply is less
 *                                     than the store's demand.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_true "match_graph_true".
 *                         <li>@ref gpudb::match_graph_max_combinations
 *                             "match_graph_max_combinations": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. This is the
 *                             cutoff for the number of generated combinations
 *                             for sequencing the demand locations - can
 *                             increase this up to 2M. The default value is
 *                             '10000'.
 *                         <li>@ref gpudb::match_graph_max_supply_combinations
 *                             "match_graph_max_supply_combinations": For the
 *                             @ref gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. This is the
 *                             cutoff for the number of generated combinations
 *                             for sequencing the supply locations if/when
 *                             'permute_supplies' is true. The default value is
 *                             '10000'.
 *                         <li>@ref gpudb::match_graph_left_turn_penalty
 *                             "match_graph_left_turn_penalty": This will add
 *                             an additonal weight over the edges labelled as
 *                             'left turn' if the 'add_turn' option parameter
 *                             of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::match_graph_right_turn_penalty
 *                             "match_graph_right_turn_penalty": This will add
 *                             an additonal weight over the edges labelled as'
 *                             right turn' if the 'add_turn' option parameter
 *                             of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::match_graph_intersection_penalty
 *                             "match_graph_intersection_penalty": This will
 *                             add an additonal weight over the edges labelled
 *                             as 'intersection' if the 'add_turn' option
 *                             parameter of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::match_graph_sharp_turn_penalty
 *                             "match_graph_sharp_turn_penalty": This will add
 *                             an additonal weight over the edges labelled as
 *                             'sharp turn' or 'u-turn' if the 'add_turn'
 *                             option parameter of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::match_graph_aggregated_output
 *                             "match_graph_aggregated_output": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. When it is
 *                             true (default), each record in the output table
 *                             shows a particular truck's scheduled cumulative
 *                             round trip path (MULTILINESTRING) and the
 *                             corresponding aggregated cost. Otherwise, each
 *                             record shows a single scheduled truck route
 *                             (LINESTRING) towards a particular demand
 *                             location (store id) with its corresponding cost.
 *                             The default value is 'true'.
 *                         <li>@ref gpudb::match_graph_output_tracks
 *                             "match_graph_output_tracks": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. When it is
 *                             true (non-default), the output will be in tracks
 *                             format for all the round trips of each truck in
 *                             which the timestamps are populated directly from
 *                             the edge weights starting from their originating
 *                             depots. The default value is 'false'.
 *                         <li>@ref gpudb::match_graph_max_trip_cost
 *                             "match_graph_max_trip_cost": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" and @ref
 *                             gpudb::match_graph_match_pickup_dropoff
 *                             "match_pickup_dropoff" solvers only. If this
 *                             constraint is greater than zero (default) then
 *                             the trucks/rides will skip travelling from one
 *                             demand/pick location to another if the cost
 *                             between them is greater than this number
 *                             (distance or time). Zero (default) value means
 *                             no check is performed. The default value is
 *                             '0.0'.
 *                         <li>@ref gpudb::match_graph_filter_folding_paths
 *                             "match_graph_filter_folding_paths": For the @ref
 *                             gpudb::match_graph_markov_chain "markov_chain"
 *                             solver only. When true (non-default), the paths
 *                             per sequence combination is checked for folding
 *                             over patterns and can significantly increase the
 *                             execution time depending on the chain width and
 *                             the number of gps samples.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": Filter out the
 *                                     folded paths.
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": Do not filter out
 *                                     the folded paths
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_false "match_graph_false".
 *                         <li>@ref gpudb::match_graph_unit_unloading_cost
 *                             "match_graph_unit_unloading_cost": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. The unit cost
 *                             per load amount to be delivered. If this value
 *                             is greater than zero (default) then the
 *                             additional cost of this unit load multiplied by
 *                             the total dropped load will be added over to the
 *                             trip cost to the demand location. The default
 *                             value is '0.0'.
 *                         <li>@ref gpudb::match_graph_max_num_threads
 *                             "match_graph_max_num_threads": For the @ref
 *                             gpudb::match_graph_markov_chain "markov_chain"
 *                             solver only. If specified (greater than zero),
 *                             the maximum number of threads will not be
 *                             greater than the specified value. It can be
 *                             lower due to the memory and the number cores
 *                             available. Default value of zero allows the
 *                             algorithm to set the maximal number of threads
 *                             within these constraints. The default value is
 *                             '0'.
 *                         <li>@ref gpudb::match_graph_service_limit
 *                             "match_graph_service_limit": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. If specified
 *                             (greater than zero), any supply actor's total
 *                             service cost (distance or time) will be limited
 *                             by the specified value including multiple rounds
 *                             (if set). The default value is '0.0'.
 *                         <li>@ref gpudb::match_graph_enable_reuse
 *                             "match_graph_enable_reuse": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. If specified
 *                             (true), all supply actors can be scheduled for
 *                             second rounds from their originating depots.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": Allows reusing
 *                                     supply actors (trucks, e.g.) for
 *                                     scheduling again.
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": Supply actors are
 *                                     scheduled only once from their depots.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_false "match_graph_false".
 *                         <li>@ref gpudb::match_graph_max_stops
 *                             "match_graph_max_stops": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. If specified
 *                             (greater than zero), a supply actor (truck) can
 *                             at most have this many stops (demand locations)
 *                             in one round trip. Otherwise, it is unlimited.
 *                             If 'enable_truck_reuse' is on, this condition
 *                             will be applied separately at each round trip
 *                             use of the same truck. The default value is '0'.
 *                         <li>@ref gpudb::match_graph_service_radius
 *                             "match_graph_service_radius": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" and @ref
 *                             gpudb::match_graph_match_pickup_dropoff
 *                             "match_pickup_dropoff" solvers only. If
 *                             specified (greater than zero), it filters the
 *                             demands/picks outside this radius centered
 *                             around the supply actor/ride's originating
 *                             location (distance or time). The default value
 *                             is '0.0'.
 *                         <li>@ref gpudb::match_graph_permute_supplies
 *                             "match_graph_permute_supplies": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. If specified
 *                             (true), supply side actors are permuted for the
 *                             demand combinations during msdo optimization -
 *                             note that this option increases optimization
 *                             time significantly - use of 'max_combinations'
 *                             option is recommended to prevent prohibitively
 *                             long runs.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": Generates sequences
 *                                     over supply side permutations if total
 *                                     supply is less than twice the total
 *                                     demand
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": Permutations are
 *                                     not performed, rather a specific order
 *                                     of supplies based on capacity is
 *                                     computed
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_true "match_graph_true".
 *                         <li>@ref gpudb::match_graph_batch_tsm_mode
 *                             "match_graph_batch_tsm_mode": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. When enabled,
 *                             it sets the number of visits on each demand
 *                             location by a single salesman at each trip is
 *                             considered to be (one) 1, otherwise there is no
 *                             bound.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": Sets only one visit
 *                                     per demand location by a salesman (tsm
 *                                     mode)
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": No preset limit
 *                                     (usual msdo mode)
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_false "match_graph_false".
 *                         <li>@ref gpudb::match_graph_round_trip
 *                             "match_graph_round_trip": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. When enabled,
 *                             the supply will have to return back to the
 *                             origination location.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": The optimization is
 *                                     done for trips in round trip manner
 *                                     always returning to originating
 *                                     locations
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": Supplies do not
 *                                     have to come back to their originating
 *                                     locations in their routes. The routes
 *                                     are considered finished at the final
 *                                     dropoff.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_true "match_graph_true".
 *                         <li>@ref gpudb::match_graph_num_cycles
 *                             "match_graph_num_cycles": For the @ref
 *                             gpudb::match_graph_match_clusters
 *                             "match_clusters" solver only. Terminates the
 *                             cluster exchange iterations across 2-step-cycles
 *                             (outer loop) when quality does not improve
 *                             during iterations. The default value is '10'.
 *                         <li>@ref gpudb::match_graph_num_loops_per_cycle
 *                             "match_graph_num_loops_per_cycle": For the @ref
 *                             gpudb::match_graph_match_clusters
 *                             "match_clusters" and @ref
 *                             gpudb::match_graph_match_embedding
 *                             "match_embedding" solvers only. Terminates the
 *                             cluster exchanges within the first step
 *                             iterations of a cycle (inner loop) unless
 *                             convergence is reached. The default value is
 *                             '10'.
 *                         <li>@ref gpudb::match_graph_num_output_clusters
 *                             "match_graph_num_output_clusters": For the @ref
 *                             gpudb::match_graph_match_clusters
 *                             "match_clusters" solver only.  Limits the output
 *                             to the top 'num_output_clusters' clusters based
 *                             on density. Default value of zero outputs all
 *                             clusters. The default value is '0'.
 *                         <li>@ref gpudb::match_graph_max_num_clusters
 *                             "match_graph_max_num_clusters": For the @ref
 *                             gpudb::match_graph_match_clusters
 *                             "match_clusters" and @ref
 *                             gpudb::match_graph_match_embedding
 *                             "match_embedding" solvers only. If set (value
 *                             greater than zero), it terminates when the
 *                             number of clusters goes below than this number.
 *                             For embedding solver the default is 8. The
 *                             default value is '0'.
 *                         <li>@ref gpudb::match_graph_cluster_quality_metric
 *                             "match_graph_cluster_quality_metric": For the
 *                             @ref gpudb::match_graph_match_clusters
 *                             "match_clusters" solver only. The quality metric
 *                             for Louvain modularity optimization solver.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_girvan
 *                                     "match_graph_girvan": Uses the Newman
 *                                     Girvan quality metric for cluster solver
 *                                 <li>@ref gpudb::match_graph_spectral
 *                                     "match_graph_spectral": Applies
 *                                     recursive spectral bisection (RSB)
 *                                     partitioning solver
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_girvan "match_graph_girvan".
 *                         <li>@ref gpudb::match_graph_restricted_type
 *                             "match_graph_restricted_type": For the @ref
 *                             gpudb::match_graph_match_supply_demand
 *                             "match_supply_demand" solver only. Optimization
 *                             is performed by restricting routes labeled by
 *                             'MSDO_ODDEVEN_RESTRICTED' only for this supply
 *                             actor (truck) type.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_odd
 *                                     "match_graph_odd": Applies odd/even rule
 *                                     restrictions to odd tagged vehicles.
 *                                 <li>@ref gpudb::match_graph_even
 *                                     "match_graph_even": Applies odd/even
 *                                     rule restrictions to even tagged
 *                                     vehicles.
 *                                 <li>@ref gpudb::match_graph_none
 *                                     "match_graph_none": Does not apply
 *                                     odd/even rule restrictions to any
 *                                     vehicles.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_none "match_graph_none".
 *                         <li>@ref gpudb::match_graph_server_id
 *                             "match_graph_server_id": Indicates which graph
 *                             server(s) to send the request to. Default is to
 *                             send to the server, amongst those containing the
 *                             corresponding graph, that has the most
 *                             computational bandwidth. The default value is
 *                             ''.
 *                         <li>@ref gpudb::match_graph_inverse_solve
 *                             "match_graph_inverse_solve": For the @ref
 *                             gpudb::match_graph_match_batch_solves
 *                             "match_batch_solves" solver only. Solves
 *                             source-destination pairs using inverse shortest
 *                             path solver.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true": Solves using inverse
 *                                     shortest path solver.
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false": Solves using direct
 *                                     shortest path solver.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_false "match_graph_false".
 *                         <li>@ref gpudb::match_graph_min_loop_level
 *                             "match_graph_min_loop_level": For the @ref
 *                             gpudb::match_graph_match_loops "match_loops"
 *                             solver only. Finds closed loops around each node
 *                             deducible not less than this minimal hop (level)
 *                             deep. The default value is '0'.
 *                         <li>@ref gpudb::match_graph_max_loop_level
 *                             "match_graph_max_loop_level": For the @ref
 *                             gpudb::match_graph_match_loops "match_loops"
 *                             solver only. Finds closed loops around each node
 *                             deducible not more than this maximal hop (level)
 *                             deep. The default value is '5'.
 *                         <li>@ref gpudb::match_graph_search_limit
 *                             "match_graph_search_limit": For the @ref
 *                             gpudb::match_graph_match_loops "match_loops"
 *                             solver only. Searches within this limit of nodes
 *                             per vertex to detect loops. The value zero means
 *                             there is no limit. The default value is '10000'.
 *                         <li>@ref gpudb::match_graph_output_batch_size
 *                             "match_graph_output_batch_size": For the @ref
 *                             gpudb::match_graph_match_loops "match_loops"
 *                             solver only. Uses this value as the batch size
 *                             of the number of loops in flushing(inserting) to
 *                             the output table. The default value is '1000'.
 *                         <li>@ref gpudb::match_graph_charging_capacity
 *                             "match_graph_charging_capacity": For the @ref
 *                             gpudb::match_graph_match_charging_stations
 *                             "match_charging_stations" solver only. This is
 *                             the maximum ev-charging capacity of a vehicle
 *                             (distance in meters or time in seconds depending
 *                             on the unit of the graph weights). The default
 *                             value is '300000.0'.
 *                         <li>@ref gpudb::match_graph_charging_candidates
 *                             "match_graph_charging_candidates": For the @ref
 *                             gpudb::match_graph_match_charging_stations
 *                             "match_charging_stations" solver only. Solver
 *                             searches for this many number of stations
 *                             closest around each base charging location found
 *                             by capacity. The default value is '10'.
 *                         <li>@ref gpudb::match_graph_charging_penalty
 *                             "match_graph_charging_penalty": For the @ref
 *                             gpudb::match_graph_match_charging_stations
 *                             "match_charging_stations" solver only. This is
 *                             the penalty for full charging. The default value
 *                             is '30000.0'.
 *                         <li>@ref gpudb::match_graph_max_hops
 *                             "match_graph_max_hops": For the @ref
 *                             gpudb::match_graph_match_similarity
 *                             "match_similarity" and @ref
 *                             gpudb::match_graph_match_embedding
 *                             "match_embedding" solvers only. Searches within
 *                             this maximum hops for source and target node
 *                             pairs to compute the Jaccard scores. The default
 *                             value is '3'.
 *                         <li>@ref gpudb::match_graph_traversal_node_limit
 *                             "match_graph_traversal_node_limit": For the @ref
 *                             gpudb::match_graph_match_similarity
 *                             "match_similarity" solver only. Limits the
 *                             traversal depth if it reaches this many number
 *                             of nodes. The default value is '1000'.
 *                         <li>@ref gpudb::match_graph_paired_similarity
 *                             "match_graph_paired_similarity": For the @ref
 *                             gpudb::match_graph_match_similarity
 *                             "match_similarity" solver only. If true, it
 *                             computes Jaccard score between each pair,
 *                             otherwise it will compute Jaccard from the
 *                             intersection set between the source and target
 *                             nodes.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true"
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_true "match_graph_true".
 *                         <li>@ref gpudb::match_graph_force_undirected
 *                             "match_graph_force_undirected": For the @ref
 *                             gpudb::match_graph_match_pattern "match_pattern"
 *                             and @ref gpudb::match_graph_match_embedding
 *                             "match_embedding" solvers only. Pattern matching
 *                             will be using both pattern and graph as
 *                             undirected if set to true.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true"
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_false "match_graph_false".
 *                         <li>@ref gpudb::match_graph_max_vector_dimension
 *                             "match_graph_max_vector_dimension": For the @ref
 *                             gpudb::match_graph_match_embedding
 *                             "match_embedding" solver only. Limits the number
 *                             of dimensions in node vector embeddings. The
 *                             default value is '1000'.
 *                         <li>@ref
 *                             gpudb::match_graph_optimize_embedding_weights
 *                             "match_graph_optimize_embedding_weights": For
 *                             the @ref gpudb::match_graph_match_embedding
 *                             "match_embedding" solvers only. Solves to find
 *                             the optimal weights per sub feature in vector
 *                             emdeddings.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::match_graph_true
 *                                     "match_graph_true"
 *                                 <li>@ref gpudb::match_graph_false
 *                                     "match_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::match_graph_false "match_graph_false".
 *                         <li>@ref gpudb::match_graph_embedding_weights
 *                             "match_graph_embedding_weights": For the @ref
 *                             gpudb::match_graph_match_embedding
 *                             "match_embedding" solver only. User specified
 *                             weights per sub feature in vector embeddings.
 *                             The string contains the comma separated float
 *                             values for each sub-feature in the vector space.
 *                             These values will ONLY be used if
 *                             'optimize_embedding_weights' is false. The
 *                             default value is '1.0,1.0,1.0,1.0'.
 *                         <li>@ref
 *                             gpudb::match_graph_optimization_sampling_size
 *                             "match_graph_optimization_sampling_size": For
 *                             the @ref gpudb::match_graph_match_embedding
 *                             "match_embedding" solver only. Sets the number
 *                             of random nodes from the graph for solving the
 *                             weights using stochastic gradient descent. The
 *                             default value is '1000'.
 *                         <li>@ref
 *                             gpudb::match_graph_optimization_max_iterations
 *                             "match_graph_optimization_max_iterations": For
 *                             the @ref gpudb::match_graph_match_embedding
 *                             "match_embedding" solver only. When the
 *                             iterations (epochs) for the convergence of the
 *                             stochastic gradient descent algorithm  reaches
 *                             this number it bails out unless relative error
 *                             between consecutive iterations is below the
 *                             'optimization_error_tolerance' option. The
 *                             default value is '1000'.
 *                         <li>@ref
 *                             gpudb::match_graph_optimization_error_tolerance
 *                             "match_graph_optimization_error_tolerance": For
 *                             the @ref gpudb::match_graph_match_embedding
 *                             "match_embedding" solver only. When the relative
 *                             error between all of the weights' consecutive
 *                             iterations falls below this threshold  the
 *                             optimization cycle is interrupted unless the
 *                             number of iterations reaches the limit set by
 *                             the option 'max_optimization_iterations'. The
 *                             default value is '0.001'.
 *                         <li>@ref
 *                             gpudb::match_graph_optimization_iteration_rate
 *                             "match_graph_optimization_iteration_rate": For
 *                             the @ref gpudb::match_graph_match_embedding
 *                             "match_embedding" solver only. It is otherwise
 *                             known as the learning rate, which is the
 *                             proportionality constant in fornt of the
 *                             gradient term in successive iterations. The
 *                             default value is '0.3'.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::MatchGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::MatchGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
MatchGraphResponse& matchGraph( const std::string& graphName,
                                const std::vector<std::string>& samplePoints,
                                const std::string& solveMethod,
                                const std::string& solutionTable,
                                const std::map<std::string, std::string>& options,
                                MatchGraphResponse& response_ ) const;

/**
 * Create a new empty result table (specified by @ref
 * gpudb::MergeRecordsRequest::tableName "tableName"), and insert all records
 * from source tables (specified by @ref
 * gpudb::MergeRecordsRequest::sourceTableNames "sourceTableNames") based on
 * the field mapping information (specified by @ref
 * gpudb::MergeRecordsRequest::fieldMaps "fieldMaps").
 *
 * For merge records details and examples, see <a
 * href="../../../concepts/merge_records/" target="_top">Merge Records</a>.
 * For limitations, see <a
 * href="../../../concepts/merge_records/#limitations-and-cautions"
 * target="_top">Merge Records Limitations and Cautions</a>.
 *
 * The field map (specified by @ref gpudb::MergeRecordsRequest::fieldMaps
 * "fieldMaps") holds the user-specified maps of target table column names to
 * source table columns. The array of @ref
 * gpudb::MergeRecordsRequest::fieldMaps "fieldMaps" must match one-to-one with
 * the @ref gpudb::MergeRecordsRequest::sourceTableNames "sourceTableNames",
 * e.g., there's a map present in @ref gpudb::MergeRecordsRequest::fieldMaps
 * "fieldMaps" for each table listed in @ref
 * gpudb::MergeRecordsRequest::sourceTableNames "sourceTableNames".
 *
 * @param[in] request_  @ref gpudb::MergeRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::MergeRecordsResponse "Response" object containing the
 *         result of the operation.
 */
MergeRecordsResponse mergeRecords( const MergeRecordsRequest& request_ ) const;

/**
 * Create a new empty result table (specified by @ref
 * gpudb::MergeRecordsRequest::tableName "tableName"), and insert all records
 * from source tables (specified by @ref
 * gpudb::MergeRecordsRequest::sourceTableNames "sourceTableNames") based on
 * the field mapping information (specified by @ref
 * gpudb::MergeRecordsRequest::fieldMaps "fieldMaps").
 *
 * For merge records details and examples, see <a
 * href="../../../concepts/merge_records/" target="_top">Merge Records</a>.
 * For limitations, see <a
 * href="../../../concepts/merge_records/#limitations-and-cautions"
 * target="_top">Merge Records Limitations and Cautions</a>.
 *
 * The field map (specified by @ref gpudb::MergeRecordsRequest::fieldMaps
 * "fieldMaps") holds the user-specified maps of target table column names to
 * source table columns. The array of @ref
 * gpudb::MergeRecordsRequest::fieldMaps "fieldMaps" must match one-to-one with
 * the @ref gpudb::MergeRecordsRequest::sourceTableNames "sourceTableNames",
 * e.g., there's a map present in @ref gpudb::MergeRecordsRequest::fieldMaps
 * "fieldMaps" for each table listed in @ref
 * gpudb::MergeRecordsRequest::sourceTableNames "sourceTableNames".
 *
 * @param[in] request_  @ref gpudb::MergeRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::MergeRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::MergeRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
MergeRecordsResponse& mergeRecords( const MergeRecordsRequest& request_,
                                    MergeRecordsResponse& response_ ) const;

/**
 * Create a new empty result table (specified by @a tableName), and insert all
 * records from source tables (specified by @a sourceTableNames) based on the
 * field mapping information (specified by @a fieldMaps).
 *
 * For merge records details and examples, see <a
 * href="../../../concepts/merge_records/" target="_top">Merge Records</a>.
 * For limitations, see <a
 * href="../../../concepts/merge_records/#limitations-and-cautions"
 * target="_top">Merge Records Limitations and Cautions</a>.
 *
 * The field map (specified by @a fieldMaps) holds the user-specified maps of
 * target table column names to source table columns. The array of @a fieldMaps
 * must match one-to-one with the @a sourceTableNames, e.g., there's a map
 * present in @a fieldMaps for each table listed in @a sourceTableNames.
 *
 * @param[in] tableName  The name of the new result table for the records to be
 *                       merged into, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a> and meeting <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.  Must NOT be
 *                       an existing table.
 * @param[in] sourceTableNames  The list of names of source tables to get the
 *                              records from, each in [schema_name.]table_name
 *                              format, using standard <a
 *                              href="../../../concepts/tables/#table-name-resolution"
 *                              target="_top">name resolution rules</a>.  Must
 *                              be existing table names.
 * @param[in] fieldMaps  Contains a list of source/target column mappings, one
 *                       mapping for each source table listed in @a
 *                       sourceTableNames being merged into the target table
 *                       specified by @a tableName.  Each mapping contains the
 *                       target column names (as keys) that the data in the
 *                       mapped source columns or column <a
 *                       href="../../../concepts/expressions/"
 *                       target="_top">expressions</a> (as values) will be
 *                       merged into.  All of the source columns being merged
 *                       into a given target column must match in type, as that
 *                       type will determine the type of the new target column.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::merge_records_create_temp_table
 *                             "merge_records_create_temp_table": If @ref
 *                             gpudb::merge_records_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             tableName. If @ref gpudb::merge_records_persist
 *                             "persist" is @ref gpudb::merge_records_false
 *                             "false", then this is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::merge_records_qualified_table_name
 *                             "qualified_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::merge_records_true
 *                                     "merge_records_true"
 *                                 <li>@ref gpudb::merge_records_false
 *                                     "merge_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::merge_records_false
 *                             "merge_records_false".
 *                         <li>@ref gpudb::merge_records_collection_name
 *                             "merge_records_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the merged table as part of @a
 *                             tableName and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created merged table specified by @a tableName.
 *                         <li>@ref gpudb::merge_records_is_replicated
 *                             "merge_records_is_replicated": Indicates the <a
 *                             href="../../../concepts/tables/#distribution"
 *                             target="_top">distribution scheme</a> for the
 *                             data of the merged table specified in @a
 *                             tableName.  If true, the table will be <a
 *                             href="../../../concepts/tables/#replication"
 *                             target="_top">replicated</a>.  If false, the
 *                             table will be <a
 *                             href="../../../concepts/tables/#random-sharding"
 *                             target="_top">randomly sharded</a>.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::merge_records_true
 *                                     "merge_records_true"
 *                                 <li>@ref gpudb::merge_records_false
 *                                     "merge_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::merge_records_false
 *                             "merge_records_false".
 *                         <li>@ref gpudb::merge_records_ttl
 *                             "merge_records_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the merged table
 *                             specified in @a tableName.
 *                         <li>@ref gpudb::merge_records_persist
 *                             "merge_records_persist": If @ref
 *                             gpudb::merge_records_true "true", then the table
 *                             specified in @a tableName will be persisted and
 *                             will not expire unless a @ref
 *                             gpudb::merge_records_ttl "ttl" is specified.
 *                             If @ref gpudb::merge_records_false "false", then
 *                             the table will be an in-memory table and will
 *                             expire unless a @ref gpudb::merge_records_ttl
 *                             "ttl" is specified otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::merge_records_true
 *                                     "merge_records_true"
 *                                 <li>@ref gpudb::merge_records_false
 *                                     "merge_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::merge_records_true "merge_records_true".
 *                         <li>@ref gpudb::merge_records_chunk_size
 *                             "merge_records_chunk_size": Indicates the number
 *                             of records per chunk to be used for the merged
 *                             table specified in @a tableName.
 *                         <li>@ref
 *                             gpudb::merge_records_chunk_column_max_memory
 *                             "merge_records_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for the merged
 *                             table specified in @a tableName.
 *                         <li>@ref gpudb::merge_records_chunk_max_memory
 *                             "merge_records_chunk_max_memory": Indicates the
 *                             target maximum data size for all columns in a
 *                             chunk to be used for the merged table specified
 *                             in @a tableName.
 *                         <li>@ref gpudb::merge_records_view_id
 *                             "merge_records_view_id": view this result table
 *                             is part of. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::MergeRecordsResponse "Response" object containing the
 *         result of the operation.
 */
MergeRecordsResponse mergeRecords( const std::string& tableName,
                                   const std::vector<std::string>& sourceTableNames,
                                   const std::vector<std::map<std::string, std::string> >& fieldMaps,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Create a new empty result table (specified by @a tableName), and insert all
 * records from source tables (specified by @a sourceTableNames) based on the
 * field mapping information (specified by @a fieldMaps).
 *
 * For merge records details and examples, see <a
 * href="../../../concepts/merge_records/" target="_top">Merge Records</a>.
 * For limitations, see <a
 * href="../../../concepts/merge_records/#limitations-and-cautions"
 * target="_top">Merge Records Limitations and Cautions</a>.
 *
 * The field map (specified by @a fieldMaps) holds the user-specified maps of
 * target table column names to source table columns. The array of @a fieldMaps
 * must match one-to-one with the @a sourceTableNames, e.g., there's a map
 * present in @a fieldMaps for each table listed in @a sourceTableNames.
 *
 * @param[in] tableName  The name of the new result table for the records to be
 *                       merged into, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a> and meeting <a
 *                       href="../../../concepts/tables/#table-naming-criteria"
 *                       target="_top">table naming criteria</a>.  Must NOT be
 *                       an existing table.
 * @param[in] sourceTableNames  The list of names of source tables to get the
 *                              records from, each in [schema_name.]table_name
 *                              format, using standard <a
 *                              href="../../../concepts/tables/#table-name-resolution"
 *                              target="_top">name resolution rules</a>.  Must
 *                              be existing table names.
 * @param[in] fieldMaps  Contains a list of source/target column mappings, one
 *                       mapping for each source table listed in @a
 *                       sourceTableNames being merged into the target table
 *                       specified by @a tableName.  Each mapping contains the
 *                       target column names (as keys) that the data in the
 *                       mapped source columns or column <a
 *                       href="../../../concepts/expressions/"
 *                       target="_top">expressions</a> (as values) will be
 *                       merged into.  All of the source columns being merged
 *                       into a given target column must match in type, as that
 *                       type will determine the type of the new target column.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::merge_records_create_temp_table
 *                             "merge_records_create_temp_table": If @ref
 *                             gpudb::merge_records_true "true", a unique
 *                             temporary table name will be generated in the
 *                             sys_temp schema and used in place of @a
 *                             tableName. If @ref gpudb::merge_records_persist
 *                             "persist" is @ref gpudb::merge_records_false
 *                             "false", then this is always allowed even if the
 *                             caller does not have permission to create
 *                             tables. The generated name is returned in @ref
 *                             gpudb::merge_records_qualified_table_name
 *                             "qualified_table_name".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::merge_records_true
 *                                     "merge_records_true"
 *                                 <li>@ref gpudb::merge_records_false
 *                                     "merge_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::merge_records_false
 *                             "merge_records_false".
 *                         <li>@ref gpudb::merge_records_collection_name
 *                             "merge_records_collection_name":
 *                             [DEPRECATED--please specify the containing
 *                             schema for the merged table as part of @a
 *                             tableName and use @ref
 *                             createSchema(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createSchema" to create the schema if
 *                             non-existent]  Name of a schema for the newly
 *                             created merged table specified by @a tableName.
 *                         <li>@ref gpudb::merge_records_is_replicated
 *                             "merge_records_is_replicated": Indicates the <a
 *                             href="../../../concepts/tables/#distribution"
 *                             target="_top">distribution scheme</a> for the
 *                             data of the merged table specified in @a
 *                             tableName.  If true, the table will be <a
 *                             href="../../../concepts/tables/#replication"
 *                             target="_top">replicated</a>.  If false, the
 *                             table will be <a
 *                             href="../../../concepts/tables/#random-sharding"
 *                             target="_top">randomly sharded</a>.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::merge_records_true
 *                                     "merge_records_true"
 *                                 <li>@ref gpudb::merge_records_false
 *                                     "merge_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::merge_records_false
 *                             "merge_records_false".
 *                         <li>@ref gpudb::merge_records_ttl
 *                             "merge_records_ttl": Sets the <a
 *                             href="../../../concepts/ttl/"
 *                             target="_top">TTL</a> of the merged table
 *                             specified in @a tableName.
 *                         <li>@ref gpudb::merge_records_persist
 *                             "merge_records_persist": If @ref
 *                             gpudb::merge_records_true "true", then the table
 *                             specified in @a tableName will be persisted and
 *                             will not expire unless a @ref
 *                             gpudb::merge_records_ttl "ttl" is specified.
 *                             If @ref gpudb::merge_records_false "false", then
 *                             the table will be an in-memory table and will
 *                             expire unless a @ref gpudb::merge_records_ttl
 *                             "ttl" is specified otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::merge_records_true
 *                                     "merge_records_true"
 *                                 <li>@ref gpudb::merge_records_false
 *                                     "merge_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::merge_records_true "merge_records_true".
 *                         <li>@ref gpudb::merge_records_chunk_size
 *                             "merge_records_chunk_size": Indicates the number
 *                             of records per chunk to be used for the merged
 *                             table specified in @a tableName.
 *                         <li>@ref
 *                             gpudb::merge_records_chunk_column_max_memory
 *                             "merge_records_chunk_column_max_memory":
 *                             Indicates the target maximum data size for each
 *                             column in a chunk to be used for the merged
 *                             table specified in @a tableName.
 *                         <li>@ref gpudb::merge_records_chunk_max_memory
 *                             "merge_records_chunk_max_memory": Indicates the
 *                             target maximum data size for all columns in a
 *                             chunk to be used for the merged table specified
 *                             in @a tableName.
 *                         <li>@ref gpudb::merge_records_view_id
 *                             "merge_records_view_id": view this result table
 *                             is part of. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::MergeRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::MergeRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
MergeRecordsResponse& mergeRecords( const std::string& tableName,
                                    const std::vector<std::string>& sourceTableNames,
                                    const std::vector<std::map<std::string, std::string> >& fieldMaps,
                                    const std::map<std::string, std::string>& options,
                                    MergeRecordsResponse& response_ ) const;

/**
 * Update an existing graph network using given nodes, edges, weights,
 * restrictions, and options.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, and <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a> before using this endpoint.
 *
 * @param[in] request_  @ref gpudb::ModifyGraphRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ModifyGraphResponse "Response" object containing the
 *         result of the operation.
 */
ModifyGraphResponse modifyGraph( const ModifyGraphRequest& request_ ) const;

/**
 * Update an existing graph network using given nodes, edges, weights,
 * restrictions, and options.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, and <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a> before using this endpoint.
 *
 * @param[in] request_  @ref gpudb::ModifyGraphRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ModifyGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ModifyGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ModifyGraphResponse& modifyGraph( const ModifyGraphRequest& request_,
                                  ModifyGraphResponse& response_ ) const;

/**
 * Update an existing graph network using given nodes, edges, weights,
 * restrictions, and options.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, and <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a> before using this endpoint.
 *
 * @param[in] graphName  Name of the graph resource to modify.
 * @param[in] nodes  Nodes with which to update existing @a nodes in graph
 *                   specified by @a graphName. Review <a
 *                   href="../../../graph_solver/network_graph_solver/#nodes"
 *                   target="_top">Nodes</a> for more information. Nodes must
 *                   be specified using <a
 *                   href="../../../graph_solver/network_graph_solver/#identifiers"
 *                   target="_top">identifiers</a>; identifiers are grouped as
 *                   <a
 *                   href="../../../graph_solver/network_graph_solver/#id-combos"
 *                   target="_top">combinations</a>. Identifiers can be used
 *                   with existing column names, e.g., 'table.column AS
 *                   NODE_ID', expressions, e.g., 'ST_MAKEPOINT(column1,
 *                   column2) AS NODE_WKTPOINT', or raw values, e.g., '{9, 10,
 *                   11} AS NODE_ID'. If using raw values in an identifier
 *                   combination, the number of values specified must match
 *                   across the combination. Identifier combination(s) do not
 *                   have to match the method used to create the graph, e.g.,
 *                   if column names were specified to create the graph,
 *                   expressions or raw values could also be used to modify the
 *                   graph.
 * @param[in] edges  Edges with which to update existing @a edges in graph
 *                   specified by @a graphName. Review <a
 *                   href="../../../graph_solver/network_graph_solver/#edges"
 *                   target="_top">Edges</a> for more information. Edges must
 *                   be specified using <a
 *                   href="../../../graph_solver/network_graph_solver/#identifiers"
 *                   target="_top">identifiers</a>; identifiers are grouped as
 *                   <a
 *                   href="../../../graph_solver/network_graph_solver/#id-combos"
 *                   target="_top">combinations</a>. Identifiers can be used
 *                   with existing column names, e.g., 'table.column AS
 *                   EDGE_ID', expressions, e.g., 'SUBSTR(column, 1, 6) AS
 *                   EDGE_NODE1_NAME', or raw values, e.g., "{'family',
 *                   'coworker'} AS EDGE_LABEL". If using raw values in an
 *                   identifier combination, the number of values specified
 *                   must match across the combination. Identifier
 *                   combination(s) do not have to match the method used to
 *                   create the graph, e.g., if column names were specified to
 *                   create the graph, expressions or raw values could also be
 *                   used to modify the graph.
 * @param[in] weights  Weights with which to update existing @a weights in
 *                     graph specified by @a graphName. Review <a
 *                     href="../../../graph_solver/network_graph_solver/#graph-weights"
 *                     target="_top">Weights</a> for more information. Weights
 *                     must be specified using <a
 *                     href="../../../graph_solver/network_graph_solver/#identifiers"
 *                     target="_top">identifiers</a>; identifiers are grouped
 *                     as <a
 *                     href="../../../graph_solver/network_graph_solver/#id-combos"
 *                     target="_top">combinations</a>. Identifiers can be used
 *                     with existing column names, e.g., 'table.column AS
 *                     WEIGHTS_EDGE_ID', expressions, e.g., 'ST_LENGTH(wkt) AS
 *                     WEIGHTS_VALUESPECIFIED', or raw values, e.g., '{4, 15}
 *                     AS WEIGHTS_VALUESPECIFIED'. If using raw values in an
 *                     identifier combination, the number of values specified
 *                     must match across the combination. Identifier
 *                     combination(s) do not have to match the method used to
 *                     create the graph, e.g., if column names were specified
 *                     to create the graph, expressions or raw values could
 *                     also be used to modify the graph.
 * @param[in] restrictions  Restrictions with which to update existing @a
 *                          restrictions in graph specified by @a graphName.
 *                          Review <a
 *                          href="../../../graph_solver/network_graph_solver/#graph-restrictions"
 *                          target="_top">Restrictions</a> for more
 *                          information. Restrictions must be specified using
 *                          <a
 *                          href="../../../graph_solver/network_graph_solver/#identifiers"
 *                          target="_top">identifiers</a>; identifiers are
 *                          grouped as <a
 *                          href="../../../graph_solver/network_graph_solver/#id-combos"
 *                          target="_top">combinations</a>. Identifiers can be
 *                          used with existing column names, e.g.,
 *                          'table.column AS RESTRICTIONS_EDGE_ID',
 *                          expressions, e.g., 'column/2 AS
 *                          RESTRICTIONS_VALUECOMPARED', or raw values, e.g.,
 *                          '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'. If
 *                          using raw values in an identifier combination, the
 *                          number of values specified must match across the
 *                          combination. Identifier combination(s) do not have
 *                          to match the method used to create the graph, e.g.,
 *                          if column names were specified to create the graph,
 *                          expressions or raw values could also be used to
 *                          modify the graph.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::modify_graph_restriction_threshold_value
 *                             "modify_graph_restriction_threshold_value":
 *                             Value-based restriction comparison. Any node or
 *                             edge with a RESTRICTIONS_VALUECOMPARED value
 *                             greater than the @ref
 *                             gpudb::modify_graph_restriction_threshold_value
 *                             "restriction_threshold_value" will not be
 *                             included in the graph.
 *                         <li>@ref gpudb::modify_graph_export_create_results
 *                             "modify_graph_export_create_results": If set to
 *                             @ref gpudb::modify_graph_true "true", returns
 *                             the graph topology in the response as arrays.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_false "modify_graph_false".
 *                         <li>@ref gpudb::modify_graph_enable_graph_draw
 *                             "modify_graph_enable_graph_draw": If set to @ref
 *                             gpudb::modify_graph_true "true", adds a
 *                             'EDGE_WKTLINE' column identifier to the
 *                             specified @ref gpudb::modify_graph_graph_table
 *                             "graph_table" so the graph can be viewed via
 *                             WMS; for social and non-geospatial graphs, the
 *                             'EDGE_WKTLINE' column identifier will be
 *                             populated with spatial coordinates derived from
 *                             a flattening layout algorithm so the graph can
 *                             still be viewed.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_false "modify_graph_false".
 *                         <li>@ref gpudb::modify_graph_save_persist
 *                             "modify_graph_save_persist": If set to @ref
 *                             gpudb::modify_graph_true "true", the graph will
 *                             be saved in the persist directory (see the <a
 *                             href="../../../config/" target="_top">config
 *                             reference</a> for more information). If set to
 *                             @ref gpudb::modify_graph_false "false", the
 *                             graph will be removed when the graph server is
 *                             shutdown.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_false "modify_graph_false".
 *                         <li>@ref gpudb::modify_graph_add_table_monitor
 *                             "modify_graph_add_table_monitor": Adds a table
 *                             monitor to every table used in the creation of
 *                             the graph; this table monitor will trigger the
 *                             graph to update dynamically upon inserts to the
 *                             source table(s). Note that upon database
 *                             restart, if @ref
 *                             gpudb::modify_graph_save_persist "save_persist"
 *                             is also set to @ref gpudb::modify_graph_true
 *                             "true", the graph will be fully reconstructed
 *                             and the table monitors will be reattached. For
 *                             more details on table monitors, see @ref
 *                             createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createTableMonitor".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_false "modify_graph_false".
 *                         <li>@ref gpudb::modify_graph_graph_table
 *                             "modify_graph_graph_table": If specified, the
 *                             created graph is also created as a table with
 *                             the given name, in [schema_name.]table_name
 *                             format, using standard <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>.  This
 *                             table will have the following identifier
 *                             columns: 'EDGE_ID', 'EDGE_NODE1_ID',
 *                             'EDGE_NODE2_ID'. If left blank, no table is
 *                             created. The default value is ''.
 *                         <li>@ref gpudb::modify_graph_remove_label_only
 *                             "modify_graph_remove_label_only": When
 *                             RESTRICTIONS on labeled entities requested, if
 *                             set to true this will NOT delete the entity but
 *                             only the label associated with the entity.
 *                             Otherwise (default), it'll delete the label AND
 *                             the entity.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_false "modify_graph_false".
 *                         <li>@ref gpudb::modify_graph_add_turns
 *                             "modify_graph_add_turns": Adds dummy 'pillowed'
 *                             edges around intersection nodes where there are
 *                             more than three edges so that additional weight
 *                             penalties can be imposed by the solve endpoints.
 *                             (increases the total number of edges).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_false "modify_graph_false".
 *                         <li>@ref gpudb::modify_graph_turn_angle
 *                             "modify_graph_turn_angle": Value in degrees
 *                             modifies the thresholds for attributing right,
 *                             left, sharp turns, and intersections. It is the
 *                             vertical deviation angle from the incoming edge
 *                             to the intersection node. The larger the value,
 *                             the larger the threshold for sharp turns and
 *                             intersections; the smaller the value, the larger
 *                             the threshold for right and left turns; 0 &lt;
 *                             turn_angle &lt; 90. The default value is '60'.
 *                         <li>@ref gpudb::modify_graph_use_rtree
 *                             "modify_graph_use_rtree": Use an range tree
 *                             structure to accelerate and improve the accuracy
 *                             of snapping, especially to edges.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_true "modify_graph_true".
 *                         <li>@ref gpudb::modify_graph_label_delimiter
 *                             "modify_graph_label_delimiter": If provided the
 *                             label string will be split according to this
 *                             delimiter and each sub-string will be applied as
 *                             a separate label onto the specified edge. The
 *                             default value is ''.
 *                         <li>@ref gpudb::modify_graph_allow_multiple_edges
 *                             "modify_graph_allow_multiple_edges": Multigraph
 *                             choice; allowing multiple edges with the same
 *                             node pairs if set to true, otherwise, new edges
 *                             with existing same node pairs will not be
 *                             inserted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_true "modify_graph_true".
 *                         <li>@ref gpudb::modify_graph_embedding_table
 *                             "modify_graph_embedding_table": If table exists
 *                             (should be generated by the match/graph
 *                             match_embedding solver), the vector embeddings
 *                             for the newly inserted nodes will be appended
 *                             into this table. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ModifyGraphResponse "Response" object containing the
 *         result of the operation.
 */
ModifyGraphResponse modifyGraph( const std::string& graphName,
                                 const std::vector<std::string>& nodes,
                                 const std::vector<std::string>& edges,
                                 const std::vector<std::string>& weights,
                                 const std::vector<std::string>& restrictions,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Update an existing graph network using given nodes, edges, weights,
 * restrictions, and options.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, and <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a> before using this endpoint.
 *
 * @param[in] graphName  Name of the graph resource to modify.
 * @param[in] nodes  Nodes with which to update existing @a nodes in graph
 *                   specified by @a graphName. Review <a
 *                   href="../../../graph_solver/network_graph_solver/#nodes"
 *                   target="_top">Nodes</a> for more information. Nodes must
 *                   be specified using <a
 *                   href="../../../graph_solver/network_graph_solver/#identifiers"
 *                   target="_top">identifiers</a>; identifiers are grouped as
 *                   <a
 *                   href="../../../graph_solver/network_graph_solver/#id-combos"
 *                   target="_top">combinations</a>. Identifiers can be used
 *                   with existing column names, e.g., 'table.column AS
 *                   NODE_ID', expressions, e.g., 'ST_MAKEPOINT(column1,
 *                   column2) AS NODE_WKTPOINT', or raw values, e.g., '{9, 10,
 *                   11} AS NODE_ID'. If using raw values in an identifier
 *                   combination, the number of values specified must match
 *                   across the combination. Identifier combination(s) do not
 *                   have to match the method used to create the graph, e.g.,
 *                   if column names were specified to create the graph,
 *                   expressions or raw values could also be used to modify the
 *                   graph.
 * @param[in] edges  Edges with which to update existing @a edges in graph
 *                   specified by @a graphName. Review <a
 *                   href="../../../graph_solver/network_graph_solver/#edges"
 *                   target="_top">Edges</a> for more information. Edges must
 *                   be specified using <a
 *                   href="../../../graph_solver/network_graph_solver/#identifiers"
 *                   target="_top">identifiers</a>; identifiers are grouped as
 *                   <a
 *                   href="../../../graph_solver/network_graph_solver/#id-combos"
 *                   target="_top">combinations</a>. Identifiers can be used
 *                   with existing column names, e.g., 'table.column AS
 *                   EDGE_ID', expressions, e.g., 'SUBSTR(column, 1, 6) AS
 *                   EDGE_NODE1_NAME', or raw values, e.g., "{'family',
 *                   'coworker'} AS EDGE_LABEL". If using raw values in an
 *                   identifier combination, the number of values specified
 *                   must match across the combination. Identifier
 *                   combination(s) do not have to match the method used to
 *                   create the graph, e.g., if column names were specified to
 *                   create the graph, expressions or raw values could also be
 *                   used to modify the graph.
 * @param[in] weights  Weights with which to update existing @a weights in
 *                     graph specified by @a graphName. Review <a
 *                     href="../../../graph_solver/network_graph_solver/#graph-weights"
 *                     target="_top">Weights</a> for more information. Weights
 *                     must be specified using <a
 *                     href="../../../graph_solver/network_graph_solver/#identifiers"
 *                     target="_top">identifiers</a>; identifiers are grouped
 *                     as <a
 *                     href="../../../graph_solver/network_graph_solver/#id-combos"
 *                     target="_top">combinations</a>. Identifiers can be used
 *                     with existing column names, e.g., 'table.column AS
 *                     WEIGHTS_EDGE_ID', expressions, e.g., 'ST_LENGTH(wkt) AS
 *                     WEIGHTS_VALUESPECIFIED', or raw values, e.g., '{4, 15}
 *                     AS WEIGHTS_VALUESPECIFIED'. If using raw values in an
 *                     identifier combination, the number of values specified
 *                     must match across the combination. Identifier
 *                     combination(s) do not have to match the method used to
 *                     create the graph, e.g., if column names were specified
 *                     to create the graph, expressions or raw values could
 *                     also be used to modify the graph.
 * @param[in] restrictions  Restrictions with which to update existing @a
 *                          restrictions in graph specified by @a graphName.
 *                          Review <a
 *                          href="../../../graph_solver/network_graph_solver/#graph-restrictions"
 *                          target="_top">Restrictions</a> for more
 *                          information. Restrictions must be specified using
 *                          <a
 *                          href="../../../graph_solver/network_graph_solver/#identifiers"
 *                          target="_top">identifiers</a>; identifiers are
 *                          grouped as <a
 *                          href="../../../graph_solver/network_graph_solver/#id-combos"
 *                          target="_top">combinations</a>. Identifiers can be
 *                          used with existing column names, e.g.,
 *                          'table.column AS RESTRICTIONS_EDGE_ID',
 *                          expressions, e.g., 'column/2 AS
 *                          RESTRICTIONS_VALUECOMPARED', or raw values, e.g.,
 *                          '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'. If
 *                          using raw values in an identifier combination, the
 *                          number of values specified must match across the
 *                          combination. Identifier combination(s) do not have
 *                          to match the method used to create the graph, e.g.,
 *                          if column names were specified to create the graph,
 *                          expressions or raw values could also be used to
 *                          modify the graph.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::modify_graph_restriction_threshold_value
 *                             "modify_graph_restriction_threshold_value":
 *                             Value-based restriction comparison. Any node or
 *                             edge with a RESTRICTIONS_VALUECOMPARED value
 *                             greater than the @ref
 *                             gpudb::modify_graph_restriction_threshold_value
 *                             "restriction_threshold_value" will not be
 *                             included in the graph.
 *                         <li>@ref gpudb::modify_graph_export_create_results
 *                             "modify_graph_export_create_results": If set to
 *                             @ref gpudb::modify_graph_true "true", returns
 *                             the graph topology in the response as arrays.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_false "modify_graph_false".
 *                         <li>@ref gpudb::modify_graph_enable_graph_draw
 *                             "modify_graph_enable_graph_draw": If set to @ref
 *                             gpudb::modify_graph_true "true", adds a
 *                             'EDGE_WKTLINE' column identifier to the
 *                             specified @ref gpudb::modify_graph_graph_table
 *                             "graph_table" so the graph can be viewed via
 *                             WMS; for social and non-geospatial graphs, the
 *                             'EDGE_WKTLINE' column identifier will be
 *                             populated with spatial coordinates derived from
 *                             a flattening layout algorithm so the graph can
 *                             still be viewed.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_false "modify_graph_false".
 *                         <li>@ref gpudb::modify_graph_save_persist
 *                             "modify_graph_save_persist": If set to @ref
 *                             gpudb::modify_graph_true "true", the graph will
 *                             be saved in the persist directory (see the <a
 *                             href="../../../config/" target="_top">config
 *                             reference</a> for more information). If set to
 *                             @ref gpudb::modify_graph_false "false", the
 *                             graph will be removed when the graph server is
 *                             shutdown.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_false "modify_graph_false".
 *                         <li>@ref gpudb::modify_graph_add_table_monitor
 *                             "modify_graph_add_table_monitor": Adds a table
 *                             monitor to every table used in the creation of
 *                             the graph; this table monitor will trigger the
 *                             graph to update dynamically upon inserts to the
 *                             source table(s). Note that upon database
 *                             restart, if @ref
 *                             gpudb::modify_graph_save_persist "save_persist"
 *                             is also set to @ref gpudb::modify_graph_true
 *                             "true", the graph will be fully reconstructed
 *                             and the table monitors will be reattached. For
 *                             more details on table monitors, see @ref
 *                             createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 *                             "createTableMonitor".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_false "modify_graph_false".
 *                         <li>@ref gpudb::modify_graph_graph_table
 *                             "modify_graph_graph_table": If specified, the
 *                             created graph is also created as a table with
 *                             the given name, in [schema_name.]table_name
 *                             format, using standard <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>.  This
 *                             table will have the following identifier
 *                             columns: 'EDGE_ID', 'EDGE_NODE1_ID',
 *                             'EDGE_NODE2_ID'. If left blank, no table is
 *                             created. The default value is ''.
 *                         <li>@ref gpudb::modify_graph_remove_label_only
 *                             "modify_graph_remove_label_only": When
 *                             RESTRICTIONS on labeled entities requested, if
 *                             set to true this will NOT delete the entity but
 *                             only the label associated with the entity.
 *                             Otherwise (default), it'll delete the label AND
 *                             the entity.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_false "modify_graph_false".
 *                         <li>@ref gpudb::modify_graph_add_turns
 *                             "modify_graph_add_turns": Adds dummy 'pillowed'
 *                             edges around intersection nodes where there are
 *                             more than three edges so that additional weight
 *                             penalties can be imposed by the solve endpoints.
 *                             (increases the total number of edges).
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_false "modify_graph_false".
 *                         <li>@ref gpudb::modify_graph_turn_angle
 *                             "modify_graph_turn_angle": Value in degrees
 *                             modifies the thresholds for attributing right,
 *                             left, sharp turns, and intersections. It is the
 *                             vertical deviation angle from the incoming edge
 *                             to the intersection node. The larger the value,
 *                             the larger the threshold for sharp turns and
 *                             intersections; the smaller the value, the larger
 *                             the threshold for right and left turns; 0 &lt;
 *                             turn_angle &lt; 90. The default value is '60'.
 *                         <li>@ref gpudb::modify_graph_use_rtree
 *                             "modify_graph_use_rtree": Use an range tree
 *                             structure to accelerate and improve the accuracy
 *                             of snapping, especially to edges.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_true "modify_graph_true".
 *                         <li>@ref gpudb::modify_graph_label_delimiter
 *                             "modify_graph_label_delimiter": If provided the
 *                             label string will be split according to this
 *                             delimiter and each sub-string will be applied as
 *                             a separate label onto the specified edge. The
 *                             default value is ''.
 *                         <li>@ref gpudb::modify_graph_allow_multiple_edges
 *                             "modify_graph_allow_multiple_edges": Multigraph
 *                             choice; allowing multiple edges with the same
 *                             node pairs if set to true, otherwise, new edges
 *                             with existing same node pairs will not be
 *                             inserted.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::modify_graph_true
 *                                     "modify_graph_true"
 *                                 <li>@ref gpudb::modify_graph_false
 *                                     "modify_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::modify_graph_true "modify_graph_true".
 *                         <li>@ref gpudb::modify_graph_embedding_table
 *                             "modify_graph_embedding_table": If table exists
 *                             (should be generated by the match/graph
 *                             match_embedding solver), the vector embeddings
 *                             for the newly inserted nodes will be appended
 *                             into this table. The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ModifyGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ModifyGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ModifyGraphResponse& modifyGraph( const std::string& graphName,
                                  const std::vector<std::string>& nodes,
                                  const std::vector<std::string>& edges,
                                  const std::vector<std::string>& weights,
                                  const std::vector<std::string>& restrictions,
                                  const std::map<std::string, std::string>& options,
                                  ModifyGraphResponse& response_ ) const;

/**
 * Employs a topological query on a graph generated a-priori by @ref
 * createGraph(const CreateGraphRequest&) const "createGraph" and returns a
 * list of adjacent edge(s) or node(s), also known as an adjacency list,
 * depending on what's been provided to the endpoint; providing edges will
 * return nodes and providing nodes will return edges.
 *
 * To determine the node(s) or edge(s) adjacent to a value from a given column,
 * provide a list of values to @ref gpudb::QueryGraphRequest::queries
 * "queries". This field can be populated with column values from any table as
 * long as the type is supported by the given identifier. See <a
 * href="../../../graph_solver/network_graph_solver/#query-identifiers"
 * target="_top">Query Identifiers</a> for more information.
 *
 * To return the adjacency list in the response, leave @ref
 * gpudb::QueryGraphRequest::adjacencyTable "adjacencyTable" empty.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph---query"
 * target="_top">/match/graph examples</a> before using this endpoint.
 *
 * @param[in] request_  @ref gpudb::QueryGraphRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::QueryGraphResponse "Response" object containing the
 *         result of the operation.
 */
QueryGraphResponse queryGraph( const QueryGraphRequest& request_ ) const;

/**
 * Employs a topological query on a graph generated a-priori by @ref
 * createGraph(const CreateGraphRequest&) const "createGraph" and returns a
 * list of adjacent edge(s) or node(s), also known as an adjacency list,
 * depending on what's been provided to the endpoint; providing edges will
 * return nodes and providing nodes will return edges.
 *
 * To determine the node(s) or edge(s) adjacent to a value from a given column,
 * provide a list of values to @ref gpudb::QueryGraphRequest::queries
 * "queries". This field can be populated with column values from any table as
 * long as the type is supported by the given identifier. See <a
 * href="../../../graph_solver/network_graph_solver/#query-identifiers"
 * target="_top">Query Identifiers</a> for more information.
 *
 * To return the adjacency list in the response, leave @ref
 * gpudb::QueryGraphRequest::adjacencyTable "adjacencyTable" empty.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph---query"
 * target="_top">/match/graph examples</a> before using this endpoint.
 *
 * @param[in] request_  @ref gpudb::QueryGraphRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::QueryGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::QueryGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
QueryGraphResponse& queryGraph( const QueryGraphRequest& request_,
                                QueryGraphResponse& response_ ) const;

/**
 * Employs a topological query on a graph generated a-priori by @ref
 * createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "createGraph" and returns a list of adjacent edge(s) or node(s), also known
 * as an adjacency list, depending on what's been provided to the endpoint;
 * providing edges will return nodes and providing nodes will return edges.
 *
 * To determine the node(s) or edge(s) adjacent to a value from a given column,
 * provide a list of values to @a queries. This field can be populated with
 * column values from any table as long as the type is supported by the given
 * identifier. See <a
 * href="../../../graph_solver/network_graph_solver/#query-identifiers"
 * target="_top">Query Identifiers</a> for more information.
 *
 * To return the adjacency list in the response, leave @a adjacencyTable empty.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph---query"
 * target="_top">/match/graph examples</a> before using this endpoint.
 *
 * @param[in] graphName  Name of the graph resource to query.
 * @param[in] queries  Nodes or edges to be queried specified using <a
 *                     href="../../../graph_solver/network_graph_solver/#query-identifiers"
 *                     target="_top">query identifiers</a>. Identifiers can be
 *                     used with existing column names, e.g., 'table.column AS
 *                     QUERY_NODE_ID', raw values, e.g., '{0, 2} AS
 *                     QUERY_NODE_ID', or expressions, e.g.,
 *                     'ST_MAKEPOINT(table.x, table.y) AS QUERY_NODE_WKTPOINT'.
 *                     Multiple values can be provided as long as the same
 *                     identifier is used for all values. If using raw values
 *                     in an identifier combination, the number of values
 *                     specified must match across the combination.
 * @param[in] restrictions  Additional restrictions to apply to the nodes/edges
 *                          of an existing graph. Restrictions must be
 *                          specified using <a
 *                          href="../../../graph_solver/network_graph_solver/#identifiers"
 *                          target="_top">identifiers</a>; identifiers are
 *                          grouped as <a
 *                          href="../../../graph_solver/network_graph_solver/#id-combos"
 *                          target="_top">combinations</a>. Identifiers can be
 *                          used with existing column names, e.g.,
 *                          'table.column AS RESTRICTIONS_EDGE_ID',
 *                          expressions, e.g., 'column/2 AS
 *                          RESTRICTIONS_VALUECOMPARED', or raw values, e.g.,
 *                          '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'. If
 *                          using raw values in an identifier combination, the
 *                          number of values specified must match across the
 *                          combination. The default value is an empty vector.
 * @param[in] adjacencyTable  Name of the table to store the resulting
 *                            adjacencies, in [schema_name.]table_name format,
 *                            using standard <a
 *                            href="../../../concepts/tables/#table-name-resolution"
 *                            target="_top">name resolution rules</a> and
 *                            meeting <a
 *                            href="../../../concepts/tables/#table-naming-criteria"
 *                            target="_top">table naming criteria</a>.  If left
 *                            blank, the query results are instead returned in
 *                            the response. If the 'QUERY_TARGET_NODE_LABEL' <a
 *                            href="../../../graph_solver/network_graph_solver/#query-identifiers"
 *                            target="_top">query identifier</a> is used in @a
 *                            queries, then two additional columns will be
 *                            available: 'PATH_ID' and 'RING_ID'. See <a
 *                            href="../../../graph_solver/network_graph_solver/#using-labels"
 *                            target="_top">Using Labels</a> for more
 *                            information. The default value is ''.
 * @param[in] rings  Sets the number of rings around the node to query for
 *                   adjacency, with '1' being the edges directly attached to
 *                   the queried node. Also known as number of hops. For
 *                   example, if it is set to '2', the edge(s) directly
 *                   attached to the queried node(s) will be returned; in
 *                   addition, the edge(s) attached to the node(s) attached to
 *                   the initial ring of edge(s) surrounding the queried
 *                   node(s) will be returned. If the value is set to '0', any
 *                   nodes that meet the criteria in @a queries and @a
 *                   restrictions will be returned. This parameter is only
 *                   applicable when querying nodes. The default value is 1.
 * @param[in] options  Additional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::query_graph_force_undirected
 *                             "query_graph_force_undirected": If set to @ref
 *                             gpudb::query_graph_true "true", all inbound
 *                             edges and outbound edges relative to the node
 *                             will be returned. If set to @ref
 *                             gpudb::query_graph_false "false", only outbound
 *                             edges relative to the node will be returned.
 *                             This parameter is only applicable if the queried
 *                             graph @a graphName is directed and when querying
 *                             nodes. Consult <a
 *                             href="../../../graph_solver/network_graph_solver/#directed-graphs"
 *                             target="_top">Directed Graphs</a> for more
 *                             details.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::query_graph_true
 *                                     "query_graph_true"
 *                                 <li>@ref gpudb::query_graph_false
 *                                     "query_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::query_graph_false "query_graph_false".
 *                         <li>@ref gpudb::query_graph_limit
 *                             "query_graph_limit": When specified (&gt;0),
 *                             limits the number of query results. The size of
 *                             the nodes table will be limited by the @ref
 *                             gpudb::query_graph_limit "limit" value. The
 *                             default value is '0'.
 *                         <li>@ref gpudb::query_graph_output_wkt_path
 *                             "query_graph_output_wkt_path": If true then
 *                             concatenated wkt line segments will be added as
 *                             the WKT column of the adjacency table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::query_graph_true
 *                                     "query_graph_true"
 *                                 <li>@ref gpudb::query_graph_false
 *                                     "query_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::query_graph_false "query_graph_false".
 *                         <li>@ref gpudb::query_graph_and_labels
 *                             "query_graph_and_labels": If set to @ref
 *                             gpudb::query_graph_true "true", the result of
 *                             the query has entities that satisfy all of the
 *                             target labels, instead of any.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::query_graph_true
 *                                     "query_graph_true"
 *                                 <li>@ref gpudb::query_graph_false
 *                                     "query_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::query_graph_false "query_graph_false".
 *                         <li>@ref gpudb::query_graph_server_id
 *                             "query_graph_server_id": Indicates which graph
 *                             server(s) to send the request to. Default is to
 *                             send to the server, amongst those containing the
 *                             corresponding graph, that has the most
 *                             computational bandwidth.
 *                         <li>@ref gpudb::query_graph_output_charn_length
 *                             "query_graph_output_charn_length": When
 *                             specified (&gt;0 and &lt;=256), limits the
 *                             number of char length on the output tables for
 *                             string based nodes. The default length is 64.
 *                             The default value is '64'.
 *                         <li>@ref gpudb::query_graph_find_common_labels
 *                             "query_graph_find_common_labels": If set to
 *                             true, for many-to-many queries or multi-level
 *                             traversals, it lists the common labels between
 *                             the source and target nodes and edge labels in
 *                             each path. Otherwise (zero rings), it'll list
 *                             all labels of the node(s) queried.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::query_graph_true
 *                                     "query_graph_true"
 *                                 <li>@ref gpudb::query_graph_false
 *                                     "query_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::query_graph_false "query_graph_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::QueryGraphResponse "Response" object containing the
 *         result of the operation.
 */
QueryGraphResponse queryGraph( const std::string& graphName,
                               const std::vector<std::string>& queries,
                               const std::vector<std::string>& restrictions,
                               const std::string& adjacencyTable,
                               const int32_t rings,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Employs a topological query on a graph generated a-priori by @ref
 * createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "createGraph" and returns a list of adjacent edge(s) or node(s), also known
 * as an adjacency list, depending on what's been provided to the endpoint;
 * providing edges will return nodes and providing nodes will return edges.
 *
 * To determine the node(s) or edge(s) adjacent to a value from a given column,
 * provide a list of values to @a queries. This field can be populated with
 * column values from any table as long as the type is supported by the given
 * identifier. See <a
 * href="../../../graph_solver/network_graph_solver/#query-identifiers"
 * target="_top">Query Identifiers</a> for more information.
 *
 * To return the adjacency list in the response, leave @a adjacencyTable empty.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph---query"
 * target="_top">/match/graph examples</a> before using this endpoint.
 *
 * @param[in] graphName  Name of the graph resource to query.
 * @param[in] queries  Nodes or edges to be queried specified using <a
 *                     href="../../../graph_solver/network_graph_solver/#query-identifiers"
 *                     target="_top">query identifiers</a>. Identifiers can be
 *                     used with existing column names, e.g., 'table.column AS
 *                     QUERY_NODE_ID', raw values, e.g., '{0, 2} AS
 *                     QUERY_NODE_ID', or expressions, e.g.,
 *                     'ST_MAKEPOINT(table.x, table.y) AS QUERY_NODE_WKTPOINT'.
 *                     Multiple values can be provided as long as the same
 *                     identifier is used for all values. If using raw values
 *                     in an identifier combination, the number of values
 *                     specified must match across the combination.
 * @param[in] restrictions  Additional restrictions to apply to the nodes/edges
 *                          of an existing graph. Restrictions must be
 *                          specified using <a
 *                          href="../../../graph_solver/network_graph_solver/#identifiers"
 *                          target="_top">identifiers</a>; identifiers are
 *                          grouped as <a
 *                          href="../../../graph_solver/network_graph_solver/#id-combos"
 *                          target="_top">combinations</a>. Identifiers can be
 *                          used with existing column names, e.g.,
 *                          'table.column AS RESTRICTIONS_EDGE_ID',
 *                          expressions, e.g., 'column/2 AS
 *                          RESTRICTIONS_VALUECOMPARED', or raw values, e.g.,
 *                          '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'. If
 *                          using raw values in an identifier combination, the
 *                          number of values specified must match across the
 *                          combination. The default value is an empty vector.
 * @param[in] adjacencyTable  Name of the table to store the resulting
 *                            adjacencies, in [schema_name.]table_name format,
 *                            using standard <a
 *                            href="../../../concepts/tables/#table-name-resolution"
 *                            target="_top">name resolution rules</a> and
 *                            meeting <a
 *                            href="../../../concepts/tables/#table-naming-criteria"
 *                            target="_top">table naming criteria</a>.  If left
 *                            blank, the query results are instead returned in
 *                            the response. If the 'QUERY_TARGET_NODE_LABEL' <a
 *                            href="../../../graph_solver/network_graph_solver/#query-identifiers"
 *                            target="_top">query identifier</a> is used in @a
 *                            queries, then two additional columns will be
 *                            available: 'PATH_ID' and 'RING_ID'. See <a
 *                            href="../../../graph_solver/network_graph_solver/#using-labels"
 *                            target="_top">Using Labels</a> for more
 *                            information. The default value is ''.
 * @param[in] rings  Sets the number of rings around the node to query for
 *                   adjacency, with '1' being the edges directly attached to
 *                   the queried node. Also known as number of hops. For
 *                   example, if it is set to '2', the edge(s) directly
 *                   attached to the queried node(s) will be returned; in
 *                   addition, the edge(s) attached to the node(s) attached to
 *                   the initial ring of edge(s) surrounding the queried
 *                   node(s) will be returned. If the value is set to '0', any
 *                   nodes that meet the criteria in @a queries and @a
 *                   restrictions will be returned. This parameter is only
 *                   applicable when querying nodes. The default value is 1.
 * @param[in] options  Additional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::query_graph_force_undirected
 *                             "query_graph_force_undirected": If set to @ref
 *                             gpudb::query_graph_true "true", all inbound
 *                             edges and outbound edges relative to the node
 *                             will be returned. If set to @ref
 *                             gpudb::query_graph_false "false", only outbound
 *                             edges relative to the node will be returned.
 *                             This parameter is only applicable if the queried
 *                             graph @a graphName is directed and when querying
 *                             nodes. Consult <a
 *                             href="../../../graph_solver/network_graph_solver/#directed-graphs"
 *                             target="_top">Directed Graphs</a> for more
 *                             details.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::query_graph_true
 *                                     "query_graph_true"
 *                                 <li>@ref gpudb::query_graph_false
 *                                     "query_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::query_graph_false "query_graph_false".
 *                         <li>@ref gpudb::query_graph_limit
 *                             "query_graph_limit": When specified (&gt;0),
 *                             limits the number of query results. The size of
 *                             the nodes table will be limited by the @ref
 *                             gpudb::query_graph_limit "limit" value. The
 *                             default value is '0'.
 *                         <li>@ref gpudb::query_graph_output_wkt_path
 *                             "query_graph_output_wkt_path": If true then
 *                             concatenated wkt line segments will be added as
 *                             the WKT column of the adjacency table.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::query_graph_true
 *                                     "query_graph_true"
 *                                 <li>@ref gpudb::query_graph_false
 *                                     "query_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::query_graph_false "query_graph_false".
 *                         <li>@ref gpudb::query_graph_and_labels
 *                             "query_graph_and_labels": If set to @ref
 *                             gpudb::query_graph_true "true", the result of
 *                             the query has entities that satisfy all of the
 *                             target labels, instead of any.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::query_graph_true
 *                                     "query_graph_true"
 *                                 <li>@ref gpudb::query_graph_false
 *                                     "query_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::query_graph_false "query_graph_false".
 *                         <li>@ref gpudb::query_graph_server_id
 *                             "query_graph_server_id": Indicates which graph
 *                             server(s) to send the request to. Default is to
 *                             send to the server, amongst those containing the
 *                             corresponding graph, that has the most
 *                             computational bandwidth.
 *                         <li>@ref gpudb::query_graph_output_charn_length
 *                             "query_graph_output_charn_length": When
 *                             specified (&gt;0 and &lt;=256), limits the
 *                             number of char length on the output tables for
 *                             string based nodes. The default length is 64.
 *                             The default value is '64'.
 *                         <li>@ref gpudb::query_graph_find_common_labels
 *                             "query_graph_find_common_labels": If set to
 *                             true, for many-to-many queries or multi-level
 *                             traversals, it lists the common labels between
 *                             the source and target nodes and edge labels in
 *                             each path. Otherwise (zero rings), it'll list
 *                             all labels of the node(s) queried.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::query_graph_true
 *                                     "query_graph_true"
 *                                 <li>@ref gpudb::query_graph_false
 *                                     "query_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::query_graph_false "query_graph_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::QueryGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::QueryGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
QueryGraphResponse& queryGraph( const std::string& graphName,
                                const std::vector<std::string>& queries,
                                const std::vector<std::string>& restrictions,
                                const std::string& adjacencyTable,
                                const int32_t rings,
                                const std::map<std::string, std::string>& options,
                                QueryGraphResponse& response_ ) const;

/**
 * Rebalances an existing partitioned graph.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph/"
 * target="_top">graph examples</a> before using this endpoint.
 *
 * @param[in] request_  @ref gpudb::RepartitionGraphRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::RepartitionGraphResponse "Response" object containing
 *         the result of the operation.
 */
RepartitionGraphResponse repartitionGraph( const RepartitionGraphRequest& request_ ) const;

/**
 * Rebalances an existing partitioned graph.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph/"
 * target="_top">graph examples</a> before using this endpoint.
 *
 * @param[in] request_  @ref gpudb::RepartitionGraphRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RepartitionGraphResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RepartitionGraphResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
RepartitionGraphResponse& repartitionGraph( const RepartitionGraphRequest& request_,
                                            RepartitionGraphResponse& response_ ) const;

/**
 * Rebalances an existing partitioned graph.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph/"
 * target="_top">graph examples</a> before using this endpoint.
 *
 * @param[in] graphName  Name of the graph resource to rebalance.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::repartition_graph_new_graph_name
 *                             "repartition_graph_new_graph_name": If a
 *                             non-empty value is specified, the original graph
 *                             will be kept (non-default behaviour) and a new
 *                             balanced graph will be created under this given
 *                             name.  When the value is empty (default), the
 *                             generated 'balanced' graph will replace the
 *                             original 'unbalanced' graph under the same graph
 *                             name. The default value is ''.
 *                         <li>@ref gpudb::repartition_graph_source_node
 *                             "repartition_graph_source_node": The distributed
 *                             shortest path solve is run from this source node
 *                             to all the nodes in the graph to create balaced
 *                             partitions using the iso-distance levels of the
 *                             solution.  The source node is selected by the
 *                             rebalance algorithm automatically (default case
 *                             when the value is an empty string). Otherwise,
 *                             the user specified node is used as the source.
 *                             The default value is ''.
 *                         <li>@ref
 *                             gpudb::repartition_graph_sql_request_avro_json
 *                             "repartition_graph_sql_request_avro_json": The
 *                             default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::RepartitionGraphResponse "Response" object containing
 *         the result of the operation.
 */
RepartitionGraphResponse repartitionGraph( const std::string& graphName,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Rebalances an existing partitioned graph.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph/"
 * target="_top">graph examples</a> before using this endpoint.
 *
 * @param[in] graphName  Name of the graph resource to rebalance.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::repartition_graph_new_graph_name
 *                             "repartition_graph_new_graph_name": If a
 *                             non-empty value is specified, the original graph
 *                             will be kept (non-default behaviour) and a new
 *                             balanced graph will be created under this given
 *                             name.  When the value is empty (default), the
 *                             generated 'balanced' graph will replace the
 *                             original 'unbalanced' graph under the same graph
 *                             name. The default value is ''.
 *                         <li>@ref gpudb::repartition_graph_source_node
 *                             "repartition_graph_source_node": The distributed
 *                             shortest path solve is run from this source node
 *                             to all the nodes in the graph to create balaced
 *                             partitions using the iso-distance levels of the
 *                             solution.  The source node is selected by the
 *                             rebalance algorithm automatically (default case
 *                             when the value is an empty string). Otherwise,
 *                             the user specified node is used as the source.
 *                             The default value is ''.
 *                         <li>@ref
 *                             gpudb::repartition_graph_sql_request_avro_json
 *                             "repartition_graph_sql_request_avro_json": The
 *                             default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::RepartitionGraphResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RepartitionGraphResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
RepartitionGraphResponse& repartitionGraph( const std::string& graphName,
                                            const std::map<std::string, std::string>& options,
                                            RepartitionGraphResponse& response_ ) const;

/** @private */
ReserveResourceResponse reserveResource( const ReserveResourceRequest& request_ ) const;

/** @private */
ReserveResourceResponse& reserveResource( const ReserveResourceRequest& request_,
                                          ReserveResourceResponse& response_ ) const;

/** @private */
ReserveResourceResponse reserveResource( const std::string& component,
                                         const std::string& name,
                                         const std::string& action,
                                         const int64_t bytesRequested,
                                         const int64_t ownerId,
                                         const std::map<std::string, std::string>& options ) const;

/** @private */
ReserveResourceResponse& reserveResource( const std::string& component,
                                          const std::string& name,
                                          const std::string& action,
                                          const int64_t bytesRequested,
                                          const int64_t ownerId,
                                          const std::map<std::string, std::string>& options,
                                          ReserveResourceResponse& response_ ) const;

/**
 * Revoke user or role the specified permission on the specified object.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::RevokePermissionResponse "Response" object containing
 *         the result of the operation.
 */
RevokePermissionResponse revokePermission( const RevokePermissionRequest& request_ ) const;

/**
 * Revoke user or role the specified permission on the specified object.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RevokePermissionResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RevokePermissionResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
RevokePermissionResponse& revokePermission( const RevokePermissionRequest& request_,
                                            RevokePermissionResponse& response_ ) const;

/**
 * Revoke user or role the specified permission on the specified object.
 *
 * @param[in] principal  Name of the user or role for which the permission is
 *                       being revoked.  Must be an existing user or role. The
 *                       default value is ''.
 * @param[in] object  Name of object permission is being revoked from.  It is
 *                    recommended to use a fully-qualified name when possible.
 * @param[in] objectType  The type of object being revoked.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::revoke_permission_context
 *                                "revoke_permission_context": Context
 *                            <li>@ref gpudb::revoke_permission_credential
 *                                "revoke_permission_credential": Credential
 *                            <li>@ref gpudb::revoke_permission_datasink
 *                                "revoke_permission_datasink": Data Sink
 *                            <li>@ref gpudb::revoke_permission_datasource
 *                                "revoke_permission_datasource": Data Source
 *                            <li>@ref gpudb::revoke_permission_directory
 *                                "revoke_permission_directory": KIFS File
 *                                Directory
 *                            <li>@ref gpudb::revoke_permission_graph
 *                                "revoke_permission_graph": A Graph object
 *                            <li>@ref gpudb::revoke_permission_proc
 *                                "revoke_permission_proc": UDF Procedure
 *                            <li>@ref gpudb::revoke_permission_schema
 *                                "revoke_permission_schema": Schema
 *                            <li>@ref gpudb::revoke_permission_sql_proc
 *                                "revoke_permission_sql_proc": SQL Procedure
 *                            <li>@ref gpudb::revoke_permission_system
 *                                "revoke_permission_system": System-level
 *                                access
 *                            <li>@ref gpudb::revoke_permission_table
 *                                "revoke_permission_table": Database Table
 *                            <li>@ref gpudb::revoke_permission_table_monitor
 *                                "revoke_permission_table_monitor": Table
 *                                monitor
 *                        </ul>
 * @param[in] permission  Permission being revoked.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::revoke_permission_admin
 *                                "revoke_permission_admin": Full read/write
 *                                and administrative access on the object.
 *                            <li>@ref gpudb::revoke_permission_connect
 *                                "revoke_permission_connect": Connect access
 *                                on the given data source or data sink.
 *                            <li>@ref gpudb::revoke_permission_create
 *                                "revoke_permission_create": Ability to create
 *                                new objects of this type.
 *                            <li>@ref gpudb::revoke_permission_delete
 *                                "revoke_permission_delete": Delete rows from
 *                                tables.
 *                            <li>@ref gpudb::revoke_permission_execute
 *                                "revoke_permission_execute": Ability to
 *                                Execute the Procedure object.
 *                            <li>@ref gpudb::revoke_permission_insert
 *                                "revoke_permission_insert": Insert access to
 *                                tables.
 *                            <li>@ref gpudb::revoke_permission_read
 *                                "revoke_permission_read": Ability to read,
 *                                list and use the object.
 *                            <li>@ref gpudb::revoke_permission_update
 *                                "revoke_permission_update": Update access to
 *                                the table.
 *                            <li>@ref gpudb::revoke_permission_user_admin
 *                                "revoke_permission_user_admin": Access to
 *                                administer users and roles that do not have
 *                                system_admin permission.
 *                            <li>@ref gpudb::revoke_permission_write
 *                                "revoke_permission_write": Access to write,
 *                                change and delete objects.
 *                        </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::revoke_permission_columns
 *                             "revoke_permission_columns": Revoke table
 *                             security from these columns, comma-separated.
 *                             The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::RevokePermissionResponse "Response" object containing
 *         the result of the operation.
 */
RevokePermissionResponse revokePermission( const std::string& principal,
                                           const std::string& object,
                                           const std::string& objectType,
                                           const std::string& permission,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Revoke user or role the specified permission on the specified object.
 *
 * @param[in] principal  Name of the user or role for which the permission is
 *                       being revoked.  Must be an existing user or role. The
 *                       default value is ''.
 * @param[in] object  Name of object permission is being revoked from.  It is
 *                    recommended to use a fully-qualified name when possible.
 * @param[in] objectType  The type of object being revoked.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::revoke_permission_context
 *                                "revoke_permission_context": Context
 *                            <li>@ref gpudb::revoke_permission_credential
 *                                "revoke_permission_credential": Credential
 *                            <li>@ref gpudb::revoke_permission_datasink
 *                                "revoke_permission_datasink": Data Sink
 *                            <li>@ref gpudb::revoke_permission_datasource
 *                                "revoke_permission_datasource": Data Source
 *                            <li>@ref gpudb::revoke_permission_directory
 *                                "revoke_permission_directory": KIFS File
 *                                Directory
 *                            <li>@ref gpudb::revoke_permission_graph
 *                                "revoke_permission_graph": A Graph object
 *                            <li>@ref gpudb::revoke_permission_proc
 *                                "revoke_permission_proc": UDF Procedure
 *                            <li>@ref gpudb::revoke_permission_schema
 *                                "revoke_permission_schema": Schema
 *                            <li>@ref gpudb::revoke_permission_sql_proc
 *                                "revoke_permission_sql_proc": SQL Procedure
 *                            <li>@ref gpudb::revoke_permission_system
 *                                "revoke_permission_system": System-level
 *                                access
 *                            <li>@ref gpudb::revoke_permission_table
 *                                "revoke_permission_table": Database Table
 *                            <li>@ref gpudb::revoke_permission_table_monitor
 *                                "revoke_permission_table_monitor": Table
 *                                monitor
 *                        </ul>
 * @param[in] permission  Permission being revoked.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::revoke_permission_admin
 *                                "revoke_permission_admin": Full read/write
 *                                and administrative access on the object.
 *                            <li>@ref gpudb::revoke_permission_connect
 *                                "revoke_permission_connect": Connect access
 *                                on the given data source or data sink.
 *                            <li>@ref gpudb::revoke_permission_create
 *                                "revoke_permission_create": Ability to create
 *                                new objects of this type.
 *                            <li>@ref gpudb::revoke_permission_delete
 *                                "revoke_permission_delete": Delete rows from
 *                                tables.
 *                            <li>@ref gpudb::revoke_permission_execute
 *                                "revoke_permission_execute": Ability to
 *                                Execute the Procedure object.
 *                            <li>@ref gpudb::revoke_permission_insert
 *                                "revoke_permission_insert": Insert access to
 *                                tables.
 *                            <li>@ref gpudb::revoke_permission_read
 *                                "revoke_permission_read": Ability to read,
 *                                list and use the object.
 *                            <li>@ref gpudb::revoke_permission_update
 *                                "revoke_permission_update": Update access to
 *                                the table.
 *                            <li>@ref gpudb::revoke_permission_user_admin
 *                                "revoke_permission_user_admin": Access to
 *                                administer users and roles that do not have
 *                                system_admin permission.
 *                            <li>@ref gpudb::revoke_permission_write
 *                                "revoke_permission_write": Access to write,
 *                                change and delete objects.
 *                        </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::revoke_permission_columns
 *                             "revoke_permission_columns": Revoke table
 *                             security from these columns, comma-separated.
 *                             The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::RevokePermissionResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RevokePermissionResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
RevokePermissionResponse& revokePermission( const std::string& principal,
                                            const std::string& object,
                                            const std::string& objectType,
                                            const std::string& permission,
                                            const std::map<std::string, std::string>& options,
                                            RevokePermissionResponse& response_ ) const;

/**
 * Revokes a <a
 * href="../../../security/sec_concepts/#security-concepts-permissions-credential"
 * target="_top">credential-level permission</a> from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionCredentialRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::RevokePermissionCredentialResponse "Response" object
 *         containing the result of the operation.
 */
RevokePermissionCredentialResponse revokePermissionCredential( const RevokePermissionCredentialRequest& request_ ) const;

/**
 * Revokes a <a
 * href="../../../security/sec_concepts/#security-concepts-permissions-credential"
 * target="_top">credential-level permission</a> from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionCredentialRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RevokePermissionCredentialResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::RevokePermissionCredentialResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RevokePermissionCredentialResponse& revokePermissionCredential( const RevokePermissionCredentialRequest& request_,
                                                                RevokePermissionCredentialResponse& response_ ) const;

/**
 * Revokes a <a
 * href="../../../security/sec_concepts/#security-concepts-permissions-credential"
 * target="_top">credential-level permission</a> from a user or role.
 *
 * @param[in] name  Name of the user or role from which the permission will be
 *                  revoked. Must be an existing user or role.
 * @param[in] permission  Permission to revoke from the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::revoke_permission_credential_credential_admin
 *                                "revoke_permission_credential_credential_admin":
 *                                Full read/write and administrative access on
 *                                the credential.
 *                            <li>@ref
 *                                gpudb::revoke_permission_credential_credential_read
 *                                "revoke_permission_credential_credential_read":
 *                                Ability to read and use the credential.
 *                        </ul>
 * @param[in] credentialName  Name of the credential on which the permission
 *                            will be revoked. Must be an existing credential,
 *                            or an empty string to revoke access on all
 *                            credentials.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::RevokePermissionCredentialResponse "Response" object
 *         containing the result of the operation.
 */
RevokePermissionCredentialResponse revokePermissionCredential( const std::string& name,
                                                               const std::string& permission,
                                                               const std::string& credentialName,
                                                               const std::map<std::string, std::string>& options ) const;

/**
 * Revokes a <a
 * href="../../../security/sec_concepts/#security-concepts-permissions-credential"
 * target="_top">credential-level permission</a> from a user or role.
 *
 * @param[in] name  Name of the user or role from which the permission will be
 *                  revoked. Must be an existing user or role.
 * @param[in] permission  Permission to revoke from the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::revoke_permission_credential_credential_admin
 *                                "revoke_permission_credential_credential_admin":
 *                                Full read/write and administrative access on
 *                                the credential.
 *                            <li>@ref
 *                                gpudb::revoke_permission_credential_credential_read
 *                                "revoke_permission_credential_credential_read":
 *                                Ability to read and use the credential.
 *                        </ul>
 * @param[in] credentialName  Name of the credential on which the permission
 *                            will be revoked. Must be an existing credential,
 *                            or an empty string to revoke access on all
 *                            credentials.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::RevokePermissionCredentialResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::RevokePermissionCredentialResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RevokePermissionCredentialResponse& revokePermissionCredential( const std::string& name,
                                                                const std::string& permission,
                                                                const std::string& credentialName,
                                                                const std::map<std::string, std::string>& options,
                                                                RevokePermissionCredentialResponse& response_ ) const;

/**
 * Revokes a <a href="../../../concepts/data_sources/" target="_top">data
 * source</a> permission from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionDatasourceRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::RevokePermissionDatasourceResponse "Response" object
 *         containing the result of the operation.
 */
RevokePermissionDatasourceResponse revokePermissionDatasource( const RevokePermissionDatasourceRequest& request_ ) const;

/**
 * Revokes a <a href="../../../concepts/data_sources/" target="_top">data
 * source</a> permission from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionDatasourceRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RevokePermissionDatasourceResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::RevokePermissionDatasourceResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RevokePermissionDatasourceResponse& revokePermissionDatasource( const RevokePermissionDatasourceRequest& request_,
                                                                RevokePermissionDatasourceResponse& response_ ) const;

/**
 * Revokes a <a href="../../../concepts/data_sources/" target="_top">data
 * source</a> permission from a user or role.
 *
 * @param[in] name  Name of the user or role from which the permission will be
 *                  revoked. Must be an existing user or role.
 * @param[in] permission  Permission to revoke from the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::revoke_permission_datasource_admin
 *                                "revoke_permission_datasource_admin": Admin
 *                                access on the given data source
 *                            <li>@ref
 *                                gpudb::revoke_permission_datasource_connect
 *                                "revoke_permission_datasource_connect":
 *                                Connect access on the given data source
 *                        </ul>
 * @param[in] datasourceName  Name of the data source on which the permission
 *                            will be revoked. Must be an existing data source,
 *                            or an empty string to revoke permission from all
 *                            data sources.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::RevokePermissionDatasourceResponse "Response" object
 *         containing the result of the operation.
 */
RevokePermissionDatasourceResponse revokePermissionDatasource( const std::string& name,
                                                               const std::string& permission,
                                                               const std::string& datasourceName,
                                                               const std::map<std::string, std::string>& options ) const;

/**
 * Revokes a <a href="../../../concepts/data_sources/" target="_top">data
 * source</a> permission from a user or role.
 *
 * @param[in] name  Name of the user or role from which the permission will be
 *                  revoked. Must be an existing user or role.
 * @param[in] permission  Permission to revoke from the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::revoke_permission_datasource_admin
 *                                "revoke_permission_datasource_admin": Admin
 *                                access on the given data source
 *                            <li>@ref
 *                                gpudb::revoke_permission_datasource_connect
 *                                "revoke_permission_datasource_connect":
 *                                Connect access on the given data source
 *                        </ul>
 * @param[in] datasourceName  Name of the data source on which the permission
 *                            will be revoked. Must be an existing data source,
 *                            or an empty string to revoke permission from all
 *                            data sources.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::RevokePermissionDatasourceResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::RevokePermissionDatasourceResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RevokePermissionDatasourceResponse& revokePermissionDatasource( const std::string& name,
                                                                const std::string& permission,
                                                                const std::string& datasourceName,
                                                                const std::map<std::string, std::string>& options,
                                                                RevokePermissionDatasourceResponse& response_ ) const;

/**
 * Revokes a <a href="../../../tools/kifs/" target="_top">KiFS</a>
 * directory-level permission from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionDirectoryRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::RevokePermissionDirectoryResponse "Response" object
 *         containing the result of the operation.
 */
RevokePermissionDirectoryResponse revokePermissionDirectory( const RevokePermissionDirectoryRequest& request_ ) const;

/**
 * Revokes a <a href="../../../tools/kifs/" target="_top">KiFS</a>
 * directory-level permission from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionDirectoryRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RevokePermissionDirectoryResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::RevokePermissionDirectoryResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RevokePermissionDirectoryResponse& revokePermissionDirectory( const RevokePermissionDirectoryRequest& request_,
                                                              RevokePermissionDirectoryResponse& response_ ) const;

/**
 * Revokes a <a href="../../../tools/kifs/" target="_top">KiFS</a>
 * directory-level permission from a user or role.
 *
 * @param[in] name  Name of the user or role from which the permission will be
 *                  revoked. Must be an existing user or role.
 * @param[in] permission  Permission to revoke from the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::revoke_permission_directory_directory_read
 *                                "revoke_permission_directory_directory_read":
 *                                For files in the directory, access to list
 *                                files, download files, or use files in server
 *                                side functions
 *                            <li>@ref
 *                                gpudb::revoke_permission_directory_directory_write
 *                                "revoke_permission_directory_directory_write":
 *                                Access to upload files to, or delete files
 *                                from, the directory. A user or role with
 *                                write access automatically has read acceess
 *                        </ul>
 * @param[in] directoryName  Name of the KiFS directory to which the permission
 *                           revokes access
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::RevokePermissionDirectoryResponse "Response" object
 *         containing the result of the operation.
 */
RevokePermissionDirectoryResponse revokePermissionDirectory( const std::string& name,
                                                             const std::string& permission,
                                                             const std::string& directoryName,
                                                             const std::map<std::string, std::string>& options ) const;

/**
 * Revokes a <a href="../../../tools/kifs/" target="_top">KiFS</a>
 * directory-level permission from a user or role.
 *
 * @param[in] name  Name of the user or role from which the permission will be
 *                  revoked. Must be an existing user or role.
 * @param[in] permission  Permission to revoke from the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::revoke_permission_directory_directory_read
 *                                "revoke_permission_directory_directory_read":
 *                                For files in the directory, access to list
 *                                files, download files, or use files in server
 *                                side functions
 *                            <li>@ref
 *                                gpudb::revoke_permission_directory_directory_write
 *                                "revoke_permission_directory_directory_write":
 *                                Access to upload files to, or delete files
 *                                from, the directory. A user or role with
 *                                write access automatically has read acceess
 *                        </ul>
 * @param[in] directoryName  Name of the KiFS directory to which the permission
 *                           revokes access
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::RevokePermissionDirectoryResponse
 *                        "Response" object containing the results of the
 *                        operation.
 *
 * @return @ref gpudb::RevokePermissionDirectoryResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RevokePermissionDirectoryResponse& revokePermissionDirectory( const std::string& name,
                                                              const std::string& permission,
                                                              const std::string& directoryName,
                                                              const std::map<std::string, std::string>& options,
                                                              RevokePermissionDirectoryResponse& response_ ) const;

/**
 * Revokes a proc-level permission from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionProcRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::RevokePermissionProcResponse "Response" object
 *         containing the result of the operation.
 */
RevokePermissionProcResponse revokePermissionProc( const RevokePermissionProcRequest& request_ ) const;

/**
 * Revokes a proc-level permission from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionProcRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RevokePermissionProcResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RevokePermissionProcResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RevokePermissionProcResponse& revokePermissionProc( const RevokePermissionProcRequest& request_,
                                                    RevokePermissionProcResponse& response_ ) const;

/**
 * Revokes a proc-level permission from a user or role.
 *
 * @param[in] name  Name of the user or role from which the permission will be
 *                  revoked. Must be an existing user or role.
 * @param[in] permission  Permission to revoke from the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::revoke_permission_proc_proc_admin
 *                                "revoke_permission_proc_proc_admin": Admin
 *                                access to the proc.
 *                            <li>@ref
 *                                gpudb::revoke_permission_proc_proc_execute
 *                                "revoke_permission_proc_proc_execute":
 *                                Execute access to the proc.
 *                        </ul>
 * @param[in] procName  Name of the proc to which the permission grants access.
 *                      Must be an existing proc, or an empty string if the
 *                      permission grants access to all procs.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::RevokePermissionProcResponse "Response" object
 *         containing the result of the operation.
 */
RevokePermissionProcResponse revokePermissionProc( const std::string& name,
                                                   const std::string& permission,
                                                   const std::string& procName,
                                                   const std::map<std::string, std::string>& options ) const;

/**
 * Revokes a proc-level permission from a user or role.
 *
 * @param[in] name  Name of the user or role from which the permission will be
 *                  revoked. Must be an existing user or role.
 * @param[in] permission  Permission to revoke from the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::revoke_permission_proc_proc_admin
 *                                "revoke_permission_proc_proc_admin": Admin
 *                                access to the proc.
 *                            <li>@ref
 *                                gpudb::revoke_permission_proc_proc_execute
 *                                "revoke_permission_proc_proc_execute":
 *                                Execute access to the proc.
 *                        </ul>
 * @param[in] procName  Name of the proc to which the permission grants access.
 *                      Must be an existing proc, or an empty string if the
 *                      permission grants access to all procs.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::RevokePermissionProcResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RevokePermissionProcResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RevokePermissionProcResponse& revokePermissionProc( const std::string& name,
                                                    const std::string& permission,
                                                    const std::string& procName,
                                                    const std::map<std::string, std::string>& options,
                                                    RevokePermissionProcResponse& response_ ) const;

/**
 * Revokes a system-level permission from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionSystemRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::RevokePermissionSystemResponse "Response" object
 *         containing the result of the operation.
 */
RevokePermissionSystemResponse revokePermissionSystem( const RevokePermissionSystemRequest& request_ ) const;

/**
 * Revokes a system-level permission from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionSystemRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RevokePermissionSystemResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RevokePermissionSystemResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RevokePermissionSystemResponse& revokePermissionSystem( const RevokePermissionSystemRequest& request_,
                                                        RevokePermissionSystemResponse& response_ ) const;

/**
 * Revokes a system-level permission from a user or role.
 *
 * @param[in] name  Name of the user or role from which the permission will be
 *                  revoked. Must be an existing user or role.
 * @param[in] permission  Permission to revoke from the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::revoke_permission_system_system_admin
 *                                "revoke_permission_system_system_admin": Full
 *                                access to all data and system functions.
 *                            <li>@ref
 *                                gpudb::revoke_permission_system_system_user_admin
 *                                "revoke_permission_system_system_user_admin":
 *                                Access to administer users and roles that do
 *                                not have system_admin permission.
 *                            <li>@ref
 *                                gpudb::revoke_permission_system_system_write
 *                                "revoke_permission_system_system_write": Read
 *                                and write access to all tables.
 *                            <li>@ref
 *                                gpudb::revoke_permission_system_system_read
 *                                "revoke_permission_system_system_read":
 *                                Read-only access to all tables.
 *                        </ul>
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::RevokePermissionSystemResponse "Response" object
 *         containing the result of the operation.
 */
RevokePermissionSystemResponse revokePermissionSystem( const std::string& name,
                                                       const std::string& permission,
                                                       const std::map<std::string, std::string>& options ) const;

/**
 * Revokes a system-level permission from a user or role.
 *
 * @param[in] name  Name of the user or role from which the permission will be
 *                  revoked. Must be an existing user or role.
 * @param[in] permission  Permission to revoke from the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::revoke_permission_system_system_admin
 *                                "revoke_permission_system_system_admin": Full
 *                                access to all data and system functions.
 *                            <li>@ref
 *                                gpudb::revoke_permission_system_system_user_admin
 *                                "revoke_permission_system_system_user_admin":
 *                                Access to administer users and roles that do
 *                                not have system_admin permission.
 *                            <li>@ref
 *                                gpudb::revoke_permission_system_system_write
 *                                "revoke_permission_system_system_write": Read
 *                                and write access to all tables.
 *                            <li>@ref
 *                                gpudb::revoke_permission_system_system_read
 *                                "revoke_permission_system_system_read":
 *                                Read-only access to all tables.
 *                        </ul>
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::RevokePermissionSystemResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RevokePermissionSystemResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RevokePermissionSystemResponse& revokePermissionSystem( const std::string& name,
                                                        const std::string& permission,
                                                        const std::map<std::string, std::string>& options,
                                                        RevokePermissionSystemResponse& response_ ) const;

/**
 * Revokes a table-level permission from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionTableRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::RevokePermissionTableResponse "Response" object
 *         containing the result of the operation.
 */
RevokePermissionTableResponse revokePermissionTable( const RevokePermissionTableRequest& request_ ) const;

/**
 * Revokes a table-level permission from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokePermissionTableRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RevokePermissionTableResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RevokePermissionTableResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RevokePermissionTableResponse& revokePermissionTable( const RevokePermissionTableRequest& request_,
                                                      RevokePermissionTableResponse& response_ ) const;

/**
 * Revokes a table-level permission from a user or role.
 *
 * @param[in] name  Name of the user or role from which the permission will be
 *                  revoked. Must be an existing user or role.
 * @param[in] permission  Permission to revoke from the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::revoke_permission_table_table_admin
 *                                "revoke_permission_table_table_admin": Full
 *                                read/write and administrative access to the
 *                                table.
 *                            <li>@ref
 *                                gpudb::revoke_permission_table_table_insert
 *                                "revoke_permission_table_table_insert":
 *                                Insert access to the table.
 *                            <li>@ref
 *                                gpudb::revoke_permission_table_table_update
 *                                "revoke_permission_table_table_update":
 *                                Update access to the table.
 *                            <li>@ref
 *                                gpudb::revoke_permission_table_table_delete
 *                                "revoke_permission_table_table_delete":
 *                                Delete access to the table.
 *                            <li>@ref
 *                                gpudb::revoke_permission_table_table_read
 *                                "revoke_permission_table_table_read": Read
 *                                access to the table.
 *                        </ul>
 * @param[in] tableName  Name of the table to which the permission grants
 *                       access, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table, view or schema.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::revoke_permission_table_columns
 *                             "revoke_permission_table_columns": Apply
 *                             security to these columns, comma-separated. The
 *                             default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::RevokePermissionTableResponse "Response" object
 *         containing the result of the operation.
 */
RevokePermissionTableResponse revokePermissionTable( const std::string& name,
                                                     const std::string& permission,
                                                     const std::string& tableName,
                                                     const std::map<std::string, std::string>& options ) const;

/**
 * Revokes a table-level permission from a user or role.
 *
 * @param[in] name  Name of the user or role from which the permission will be
 *                  revoked. Must be an existing user or role.
 * @param[in] permission  Permission to revoke from the user or role.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref
 *                                gpudb::revoke_permission_table_table_admin
 *                                "revoke_permission_table_table_admin": Full
 *                                read/write and administrative access to the
 *                                table.
 *                            <li>@ref
 *                                gpudb::revoke_permission_table_table_insert
 *                                "revoke_permission_table_table_insert":
 *                                Insert access to the table.
 *                            <li>@ref
 *                                gpudb::revoke_permission_table_table_update
 *                                "revoke_permission_table_table_update":
 *                                Update access to the table.
 *                            <li>@ref
 *                                gpudb::revoke_permission_table_table_delete
 *                                "revoke_permission_table_table_delete":
 *                                Delete access to the table.
 *                            <li>@ref
 *                                gpudb::revoke_permission_table_table_read
 *                                "revoke_permission_table_table_read": Read
 *                                access to the table.
 *                        </ul>
 * @param[in] tableName  Name of the table to which the permission grants
 *                       access, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing table, view or schema.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::revoke_permission_table_columns
 *                             "revoke_permission_table_columns": Apply
 *                             security to these columns, comma-separated. The
 *                             default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::RevokePermissionTableResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::RevokePermissionTableResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
RevokePermissionTableResponse& revokePermissionTable( const std::string& name,
                                                      const std::string& permission,
                                                      const std::string& tableName,
                                                      const std::map<std::string, std::string>& options,
                                                      RevokePermissionTableResponse& response_ ) const;

/**
 * Revokes membership in a role from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokeRoleRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::RevokeRoleResponse "Response" object containing the
 *         result of the operation.
 */
RevokeRoleResponse revokeRole( const RevokeRoleRequest& request_ ) const;

/**
 * Revokes membership in a role from a user or role.
 *
 * @param[in] request_  @ref gpudb::RevokeRoleRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::RevokeRoleResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::RevokeRoleResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
RevokeRoleResponse& revokeRole( const RevokeRoleRequest& request_,
                                RevokeRoleResponse& response_ ) const;

/**
 * Revokes membership in a role from a user or role.
 *
 * @param[in] role  Name of the role in which membership will be revoked. Must
 *                  be an existing role.
 * @param[in] member  Name of the user or role that will be revoked membership
 *                    in @a role. Must be an existing user or role.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::RevokeRoleResponse "Response" object containing the
 *         result of the operation.
 */
RevokeRoleResponse revokeRole( const std::string& role,
                               const std::string& member,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Revokes membership in a role from a user or role.
 *
 * @param[in] role  Name of the role in which membership will be revoked. Must
 *                  be an existing role.
 * @param[in] member  Name of the user or role that will be revoked membership
 *                    in @a role. Must be an existing user or role.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::RevokeRoleResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::RevokeRoleResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
RevokeRoleResponse& revokeRole( const std::string& role,
                                const std::string& member,
                                const std::map<std::string, std::string>& options,
                                RevokeRoleResponse& response_ ) const;

/** @private */
ShowContainerRegistryResponse showContainerRegistry( const ShowContainerRegistryRequest& request_ ) const;

/** @private */
ShowContainerRegistryResponse& showContainerRegistry( const ShowContainerRegistryRequest& request_,
                                                      ShowContainerRegistryResponse& response_ ) const;

/** @private */
ShowContainerRegistryResponse showContainerRegistry( const std::string& registryName,
                                                     const std::map<std::string, std::string>& options ) const;

/** @private */
ShowContainerRegistryResponse& showContainerRegistry( const std::string& registryName,
                                                      const std::map<std::string, std::string>& options,
                                                      ShowContainerRegistryResponse& response_ ) const;

/**
 * Shows information about a specified <a href="../../../concepts/credentials/"
 * target="_top">credential</a> or all credentials.
 *
 * @param[in] request_  @ref gpudb::ShowCredentialRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowCredentialResponse "Response" object containing the
 *         result of the operation.
 */
ShowCredentialResponse showCredential( const ShowCredentialRequest& request_ ) const;

/**
 * Shows information about a specified <a href="../../../concepts/credentials/"
 * target="_top">credential</a> or all credentials.
 *
 * @param[in] request_  @ref gpudb::ShowCredentialRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowCredentialResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowCredentialResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowCredentialResponse& showCredential( const ShowCredentialRequest& request_,
                                        ShowCredentialResponse& response_ ) const;

/**
 * Shows information about a specified <a href="../../../concepts/credentials/"
 * target="_top">credential</a> or all credentials.
 *
 * @param[in] credentialName  Name of the credential on which to retrieve
 *                            information. The name must refer to a currently
 *                            existing credential. If '*' is specified,
 *                            information about all credentials will be
 *                            returned.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::ShowCredentialResponse "Response" object containing the
 *         result of the operation.
 */
ShowCredentialResponse showCredential( const std::string& credentialName,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Shows information about a specified <a href="../../../concepts/credentials/"
 * target="_top">credential</a> or all credentials.
 *
 * @param[in] credentialName  Name of the credential on which to retrieve
 *                            information. The name must refer to a currently
 *                            existing credential. If '*' is specified,
 *                            information about all credentials will be
 *                            returned.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowCredentialResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowCredentialResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowCredentialResponse& showCredential( const std::string& credentialName,
                                        const std::map<std::string, std::string>& options,
                                        ShowCredentialResponse& response_ ) const;

/**
 * Shows information about a specified <a href="../../../concepts/data_sinks/"
 * target="_top">data sink</a> or all data sinks.
 *
 * @param[in] request_  @ref gpudb::ShowDatasinkRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowDatasinkResponse "Response" object containing the
 *         result of the operation.
 */
ShowDatasinkResponse showDatasink( const ShowDatasinkRequest& request_ ) const;

/**
 * Shows information about a specified <a href="../../../concepts/data_sinks/"
 * target="_top">data sink</a> or all data sinks.
 *
 * @param[in] request_  @ref gpudb::ShowDatasinkRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowDatasinkResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowDatasinkResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowDatasinkResponse& showDatasink( const ShowDatasinkRequest& request_,
                                    ShowDatasinkResponse& response_ ) const;

/**
 * Shows information about a specified <a href="../../../concepts/data_sinks/"
 * target="_top">data sink</a> or all data sinks.
 *
 * @param[in] name  Name of the data sink for which to retrieve information.
 *                  The name must refer to a currently existing data sink. If
 *                  '*' is specified, information about all data sinks will be
 *                  returned.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::ShowDatasinkResponse "Response" object containing the
 *         result of the operation.
 */
ShowDatasinkResponse showDatasink( const std::string& name,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Shows information about a specified <a href="../../../concepts/data_sinks/"
 * target="_top">data sink</a> or all data sinks.
 *
 * @param[in] name  Name of the data sink for which to retrieve information.
 *                  The name must refer to a currently existing data sink. If
 *                  '*' is specified, information about all data sinks will be
 *                  returned.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowDatasinkResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowDatasinkResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowDatasinkResponse& showDatasink( const std::string& name,
                                    const std::map<std::string, std::string>& options,
                                    ShowDatasinkResponse& response_ ) const;

/**
 * Shows information about a specified <a
 * href="../../../concepts/data_sources/" target="_top">data source</a> or all
 * data sources.
 *
 * @param[in] request_  @ref gpudb::ShowDatasourceRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowDatasourceResponse "Response" object containing the
 *         result of the operation.
 */
ShowDatasourceResponse showDatasource( const ShowDatasourceRequest& request_ ) const;

/**
 * Shows information about a specified <a
 * href="../../../concepts/data_sources/" target="_top">data source</a> or all
 * data sources.
 *
 * @param[in] request_  @ref gpudb::ShowDatasourceRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowDatasourceResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowDatasourceResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowDatasourceResponse& showDatasource( const ShowDatasourceRequest& request_,
                                        ShowDatasourceResponse& response_ ) const;

/**
 * Shows information about a specified <a
 * href="../../../concepts/data_sources/" target="_top">data source</a> or all
 * data sources.
 *
 * @param[in] name  Name of the data source for which to retrieve information.
 *                  The name must refer to a currently existing data source. If
 *                  '*' is specified, information about all data sources will
 *                  be returned.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::ShowDatasourceResponse "Response" object containing the
 *         result of the operation.
 */
ShowDatasourceResponse showDatasource( const std::string& name,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Shows information about a specified <a
 * href="../../../concepts/data_sources/" target="_top">data source</a> or all
 * data sources.
 *
 * @param[in] name  Name of the data source for which to retrieve information.
 *                  The name must refer to a currently existing data source. If
 *                  '*' is specified, information about all data sources will
 *                  be returned.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowDatasourceResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowDatasourceResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowDatasourceResponse& showDatasource( const std::string& name,
                                        const std::map<std::string, std::string>& options,
                                        ShowDatasourceResponse& response_ ) const;

/**
 * Shows information about directories in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. Can be used to show a single directory, or all
 * directories.
 *
 * @param[in] request_  @ref gpudb::ShowDirectoriesRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowDirectoriesResponse "Response" object containing the
 *         result of the operation.
 */
ShowDirectoriesResponse showDirectories( const ShowDirectoriesRequest& request_ ) const;

/**
 * Shows information about directories in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. Can be used to show a single directory, or all
 * directories.
 *
 * @param[in] request_  @ref gpudb::ShowDirectoriesRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowDirectoriesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowDirectoriesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowDirectoriesResponse& showDirectories( const ShowDirectoriesRequest& request_,
                                          ShowDirectoriesResponse& response_ ) const;

/**
 * Shows information about directories in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. Can be used to show a single directory, or all
 * directories.
 *
 * @param[in] directoryName  The KiFS directory name to show. If empty, shows
 *                           all directories. The default value is ''.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::ShowDirectoriesResponse "Response" object containing the
 *         result of the operation.
 */
ShowDirectoriesResponse showDirectories( const std::string& directoryName,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Shows information about directories in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. Can be used to show a single directory, or all
 * directories.
 *
 * @param[in] directoryName  The KiFS directory name to show. If empty, shows
 *                           all directories. The default value is ''.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowDirectoriesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowDirectoriesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowDirectoriesResponse& showDirectories( const std::string& directoryName,
                                          const std::map<std::string, std::string>& options,
                                          ShowDirectoriesResponse& response_ ) const;

/**
 * Shows information about a specified <a href="../../../concepts/udf/"
 * target="_top">user-defined function</a> (UDF) environment or all
 * environments.
 * Returns detailed information about existing environments.
 *
 * @param[in] request_  @ref gpudb::ShowEnvironmentRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowEnvironmentResponse "Response" object containing the
 *         result of the operation.
 */
ShowEnvironmentResponse showEnvironment( const ShowEnvironmentRequest& request_ ) const;

/**
 * Shows information about a specified <a href="../../../concepts/udf/"
 * target="_top">user-defined function</a> (UDF) environment or all
 * environments.
 * Returns detailed information about existing environments.
 *
 * @param[in] request_  @ref gpudb::ShowEnvironmentRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowEnvironmentResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowEnvironmentResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowEnvironmentResponse& showEnvironment( const ShowEnvironmentRequest& request_,
                                          ShowEnvironmentResponse& response_ ) const;

/**
 * Shows information about a specified <a href="../../../concepts/udf/"
 * target="_top">user-defined function</a> (UDF) environment or all
 * environments.
 * Returns detailed information about existing environments.
 *
 * @param[in] environmentName  Name of the environment on which to retrieve
 *                             information. The name must refer to a currently
 *                             existing environment. If '*' or an empty value
 *                             is specified, information about all environments
 *                             will be returned. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::show_environment_no_error_if_not_exists
 *                             "show_environment_no_error_if_not_exists": If
 *                             @ref gpudb::show_environment_true "true" and if
 *                             the environment specified in @a environmentName
 *                             does not exist, no error is returned. If @ref
 *                             gpudb::show_environment_false "false" and if the
 *                             environment specified in @a environmentName does
 *                             not exist, then an error is returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_environment_true
 *                                     "show_environment_true"
 *                                 <li>@ref gpudb::show_environment_false
 *                                     "show_environment_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_environment_false
 *                             "show_environment_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowEnvironmentResponse "Response" object containing the
 *         result of the operation.
 */
ShowEnvironmentResponse showEnvironment( const std::string& environmentName,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Shows information about a specified <a href="../../../concepts/udf/"
 * target="_top">user-defined function</a> (UDF) environment or all
 * environments.
 * Returns detailed information about existing environments.
 *
 * @param[in] environmentName  Name of the environment on which to retrieve
 *                             information. The name must refer to a currently
 *                             existing environment. If '*' or an empty value
 *                             is specified, information about all environments
 *                             will be returned. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::show_environment_no_error_if_not_exists
 *                             "show_environment_no_error_if_not_exists": If
 *                             @ref gpudb::show_environment_true "true" and if
 *                             the environment specified in @a environmentName
 *                             does not exist, no error is returned. If @ref
 *                             gpudb::show_environment_false "false" and if the
 *                             environment specified in @a environmentName does
 *                             not exist, then an error is returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_environment_true
 *                                     "show_environment_true"
 *                                 <li>@ref gpudb::show_environment_false
 *                                     "show_environment_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_environment_false
 *                             "show_environment_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowEnvironmentResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowEnvironmentResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowEnvironmentResponse& showEnvironment( const std::string& environmentName,
                                          const std::map<std::string, std::string>& options,
                                          ShowEnvironmentResponse& response_ ) const;

/**
 * Shows information about files in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. Can be used for individual files, or to show all
 * files in a given directory.
 *
 * @param[in] request_  @ref gpudb::ShowFilesRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowFilesResponse "Response" object containing the
 *         result of the operation.
 */
ShowFilesResponse showFiles( const ShowFilesRequest& request_ ) const;

/**
 * Shows information about files in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. Can be used for individual files, or to show all
 * files in a given directory.
 *
 * @param[in] request_  @ref gpudb::ShowFilesRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowFilesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowFilesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowFilesResponse& showFiles( const ShowFilesRequest& request_,
                              ShowFilesResponse& response_ ) const;

/**
 * Shows information about files in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. Can be used for individual files, or to show all
 * files in a given directory.
 *
 * @param[in] paths  File paths to show. Each path can be a KiFS directory
 *                   name, or a full path to a KiFS file. File paths may
 *                   contain wildcard characters after the KiFS directory
 *                   delimeter.  Accepted wildcard characters are asterisk (*)
 *                   to represent any string of zero or more characters, and
 *                   question mark (?) to indicate a single character.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::ShowFilesResponse "Response" object containing the
 *         result of the operation.
 */
ShowFilesResponse showFiles( const std::vector<std::string>& paths,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Shows information about files in <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. Can be used for individual files, or to show all
 * files in a given directory.
 *
 * @param[in] paths  File paths to show. Each path can be a KiFS directory
 *                   name, or a full path to a KiFS file. File paths may
 *                   contain wildcard characters after the KiFS directory
 *                   delimeter.  Accepted wildcard characters are asterisk (*)
 *                   to represent any string of zero or more characters, and
 *                   question mark (?) to indicate a single character.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowFilesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowFilesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowFilesResponse& showFiles( const std::vector<std::string>& paths,
                              const std::map<std::string, std::string>& options,
                              ShowFilesResponse& response_ ) const;

/** @private */
ShowFunctionsResponse showFunctions( const ShowFunctionsRequest& request_ ) const;

/** @private */
ShowFunctionsResponse& showFunctions( const ShowFunctionsRequest& request_,
                                      ShowFunctionsResponse& response_ ) const;

/** @private */
ShowFunctionsResponse showFunctions( const std::vector<std::string>& names,
                                     const std::map<std::string, std::string>& options ) const;

/** @private */
ShowFunctionsResponse& showFunctions( const std::vector<std::string>& names,
                                      const std::map<std::string, std::string>& options,
                                      ShowFunctionsResponse& response_ ) const;

/**
 * Shows information and characteristics of graphs that exist on the graph
 * server.
 *
 * @param[in] request_  @ref gpudb::ShowGraphRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowGraphResponse "Response" object containing the
 *         result of the operation.
 */
ShowGraphResponse showGraph( const ShowGraphRequest& request_ ) const;

/**
 * Shows information and characteristics of graphs that exist on the graph
 * server.
 *
 * @param[in] request_  @ref gpudb::ShowGraphRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowGraphResponse& showGraph( const ShowGraphRequest& request_,
                              ShowGraphResponse& response_ ) const;

/**
 * Shows information and characteristics of graphs that exist on the graph
 * server.
 *
 * @param[in] graphName  Name of the graph on which to retrieve information. If
 *                       left as the default value, information about all
 *                       graphs is returned. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_graph_show_original_request
 *                             "show_graph_show_original_request": If set to
 *                             @ref gpudb::show_graph_true "true", the request
 *                             that was originally used to create the graph is
 *                             also returned as JSON.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_graph_true
 *                                     "show_graph_true"
 *                                 <li>@ref gpudb::show_graph_false
 *                                     "show_graph_false"
 *                             </ul>
 *                             The default value is @ref gpudb::show_graph_true
 *                             "show_graph_true".
 *                         <li>@ref gpudb::show_graph_server_id
 *                             "show_graph_server_id": Indicates which graph
 *                             server(s) to send the request to. Default is to
 *                             send to get information about all the servers.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowGraphResponse "Response" object containing the
 *         result of the operation.
 */
ShowGraphResponse showGraph( const std::string& graphName,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Shows information and characteristics of graphs that exist on the graph
 * server.
 *
 * @param[in] graphName  Name of the graph on which to retrieve information. If
 *                       left as the default value, information about all
 *                       graphs is returned. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_graph_show_original_request
 *                             "show_graph_show_original_request": If set to
 *                             @ref gpudb::show_graph_true "true", the request
 *                             that was originally used to create the graph is
 *                             also returned as JSON.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_graph_true
 *                                     "show_graph_true"
 *                                 <li>@ref gpudb::show_graph_false
 *                                     "show_graph_false"
 *                             </ul>
 *                             The default value is @ref gpudb::show_graph_true
 *                             "show_graph_true".
 *                         <li>@ref gpudb::show_graph_server_id
 *                             "show_graph_server_id": Indicates which graph
 *                             server(s) to send the request to. Default is to
 *                             send to get information about all the servers.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowGraphResponse& showGraph( const std::string& graphName,
                              const std::map<std::string, std::string>& options,
                              ShowGraphResponse& response_ ) const;

/** @private */
ShowGraphGrammarResponse showGraphGrammar( const ShowGraphGrammarRequest& request_ ) const;

/** @private */
ShowGraphGrammarResponse& showGraphGrammar( const ShowGraphGrammarRequest& request_,
                                            ShowGraphGrammarResponse& response_ ) const;

/** @private */
ShowGraphGrammarResponse showGraphGrammar( const std::map<std::string, std::string>& options ) const;

/** @private */
ShowGraphGrammarResponse& showGraphGrammar( const std::map<std::string, std::string>& options,
                                            ShowGraphGrammarResponse& response_ ) const;

/** @private */
ShowModelResponse showModel( const ShowModelRequest& request_ ) const;

/** @private */
ShowModelResponse& showModel( const ShowModelRequest& request_,
                              ShowModelResponse& response_ ) const;

/** @private */
ShowModelResponse showModel( const std::vector<std::string>& modelNames,
                             const std::map<std::string, std::string>& options ) const;

/** @private */
ShowModelResponse& showModel( const std::vector<std::string>& modelNames,
                              const std::map<std::string, std::string>& options,
                              ShowModelResponse& response_ ) const;

/**
 * Shows information about a proc.
 *
 * @param[in] request_  @ref gpudb::ShowProcRequest "Request" object containing
 *                      the parameters for the operation.
 *
 * @return @ref gpudb::ShowProcResponse "Response" object containing the result
 *         of the operation.
 */
ShowProcResponse showProc( const ShowProcRequest& request_ ) const;

/**
 * Shows information about a proc.
 *
 * @param[in] request_  @ref gpudb::ShowProcRequest "Request" object containing
 *                      the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowProcResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
ShowProcResponse& showProc( const ShowProcRequest& request_,
                            ShowProcResponse& response_ ) const;

/**
 * Shows information about a proc.
 *
 * @param[in] procName  Name of the proc to show information about. If
 *                      specified, must be the name of a currently existing
 *                      proc. If not specified, information about all procs
 *                      will be returned. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_proc_include_files
 *                             "show_proc_include_files": If set to @ref
 *                             gpudb::show_proc_true "true", the files that
 *                             make up the proc will be returned. If set to
 *                             @ref gpudb::show_proc_false "false", the files
 *                             will not be returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_proc_true
 *                                     "show_proc_true"
 *                                 <li>@ref gpudb::show_proc_false
 *                                     "show_proc_false"
 *                             </ul>
 *                             The default value is @ref gpudb::show_proc_false
 *                             "show_proc_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowProcResponse "Response" object containing the result
 *         of the operation.
 */
ShowProcResponse showProc( const std::string& procName,
                           const std::map<std::string, std::string>& options ) const;

/**
 * Shows information about a proc.
 *
 * @param[in] procName  Name of the proc to show information about. If
 *                      specified, must be the name of a currently existing
 *                      proc. If not specified, information about all procs
 *                      will be returned. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_proc_include_files
 *                             "show_proc_include_files": If set to @ref
 *                             gpudb::show_proc_true "true", the files that
 *                             make up the proc will be returned. If set to
 *                             @ref gpudb::show_proc_false "false", the files
 *                             will not be returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_proc_true
 *                                     "show_proc_true"
 *                                 <li>@ref gpudb::show_proc_false
 *                                     "show_proc_false"
 *                             </ul>
 *                             The default value is @ref gpudb::show_proc_false
 *                             "show_proc_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowProcResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
ShowProcResponse& showProc( const std::string& procName,
                            const std::map<std::string, std::string>& options,
                            ShowProcResponse& response_ ) const;

/**
 * Shows the statuses of running or completed proc instances. Results are
 * grouped by run ID (as returned from @ref
 * executeProc(const ExecuteProcRequest&) const "executeProc") and data segment
 * ID (each invocation of the proc command on a data segment is assigned a data
 * segment ID).
 *
 * @param[in] request_  @ref gpudb::ShowProcStatusRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowProcStatusResponse "Response" object containing the
 *         result of the operation.
 */
ShowProcStatusResponse showProcStatus( const ShowProcStatusRequest& request_ ) const;

/**
 * Shows the statuses of running or completed proc instances. Results are
 * grouped by run ID (as returned from @ref
 * executeProc(const ExecuteProcRequest&) const "executeProc") and data segment
 * ID (each invocation of the proc command on a data segment is assigned a data
 * segment ID).
 *
 * @param[in] request_  @ref gpudb::ShowProcStatusRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowProcStatusResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowProcStatusResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowProcStatusResponse& showProcStatus( const ShowProcStatusRequest& request_,
                                        ShowProcStatusResponse& response_ ) const;

/**
 * Shows the statuses of running or completed proc instances. Results are
 * grouped by run ID (as returned from @ref
 * executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "executeProc") and data segment ID (each invocation of the proc command on a
 * data segment is assigned a data segment ID).
 *
 * @param[in] runId  The run ID of a specific proc instance for which the
 *                   status will be returned. If a proc with a matching run ID
 *                   is not found, the response will be empty. If not
 *                   specified, the statuses of all executed proc instances
 *                   will be returned. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_proc_status_clear_complete
 *                             "show_proc_status_clear_complete": If set to
 *                             @ref gpudb::show_proc_status_true "true", if a
 *                             proc instance has completed (either successfully
 *                             or unsuccessfully) then its status will be
 *                             cleared and no longer returned in subsequent
 *                             calls.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_proc_status_true
 *                                     "show_proc_status_true"
 *                                 <li>@ref gpudb::show_proc_status_false
 *                                     "show_proc_status_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_proc_status_false
 *                             "show_proc_status_false".
 *                         <li>@ref gpudb::show_proc_status_run_tag
 *                             "show_proc_status_run_tag": If @a runId is
 *                             specified, return the status for a proc instance
 *                             that has a matching run ID and a matching run
 *                             tag that was provided to @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc". If @a runId is not specified,
 *                             return statuses for all proc instances where a
 *                             matching run tag was provided to @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc". The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowProcStatusResponse "Response" object containing the
 *         result of the operation.
 */
ShowProcStatusResponse showProcStatus( const std::string& runId,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Shows the statuses of running or completed proc instances. Results are
 * grouped by run ID (as returned from @ref
 * executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "executeProc") and data segment ID (each invocation of the proc command on a
 * data segment is assigned a data segment ID).
 *
 * @param[in] runId  The run ID of a specific proc instance for which the
 *                   status will be returned. If a proc with a matching run ID
 *                   is not found, the response will be empty. If not
 *                   specified, the statuses of all executed proc instances
 *                   will be returned. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_proc_status_clear_complete
 *                             "show_proc_status_clear_complete": If set to
 *                             @ref gpudb::show_proc_status_true "true", if a
 *                             proc instance has completed (either successfully
 *                             or unsuccessfully) then its status will be
 *                             cleared and no longer returned in subsequent
 *                             calls.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_proc_status_true
 *                                     "show_proc_status_true"
 *                                 <li>@ref gpudb::show_proc_status_false
 *                                     "show_proc_status_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_proc_status_false
 *                             "show_proc_status_false".
 *                         <li>@ref gpudb::show_proc_status_run_tag
 *                             "show_proc_status_run_tag": If @a runId is
 *                             specified, return the status for a proc instance
 *                             that has a matching run ID and a matching run
 *                             tag that was provided to @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc". If @a runId is not specified,
 *                             return statuses for all proc instances where a
 *                             matching run tag was provided to @ref
 *                             executeProc(const std::string&, const std::map<std::string, std::string>&, const std::map<std::string, std::vector<uint8_t> >&, const std::vector<std::string>&, const std::map<std::string, std::vector<std::string> >&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "executeProc". The default value is ''.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowProcStatusResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowProcStatusResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowProcStatusResponse& showProcStatus( const std::string& runId,
                                        const std::map<std::string, std::string>& options,
                                        ShowProcStatusResponse& response_ ) const;

/**
 * Returns information about the internal sub-components (tiered objects) which
 * use resources of the system. The request can either return results from
 * actively used objects (default) or it can be used to query the status of the
 * objects of a given list of tables.
 * Returns detailed information about the requested resource objects.
 *
 * @param[in] request_  @ref gpudb::ShowResourceObjectsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowResourceObjectsResponse "Response" object containing
 *         the result of the operation.
 */
ShowResourceObjectsResponse showResourceObjects( const ShowResourceObjectsRequest& request_ ) const;

/**
 * Returns information about the internal sub-components (tiered objects) which
 * use resources of the system. The request can either return results from
 * actively used objects (default) or it can be used to query the status of the
 * objects of a given list of tables.
 * Returns detailed information about the requested resource objects.
 *
 * @param[in] request_  @ref gpudb::ShowResourceObjectsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowResourceObjectsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowResourceObjectsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowResourceObjectsResponse& showResourceObjects( const ShowResourceObjectsRequest& request_,
                                                  ShowResourceObjectsResponse& response_ ) const;

/**
 * Returns information about the internal sub-components (tiered objects) which
 * use resources of the system. The request can either return results from
 * actively used objects (default) or it can be used to query the status of the
 * objects of a given list of tables.
 * Returns detailed information about the requested resource objects.
 *
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_resource_objects_tiers
 *                             "show_resource_objects_tiers": Comma-separated
 *                             list of tiers to query, leave blank for all
 *                             tiers.
 *                         <li>@ref gpudb::show_resource_objects_expression
 *                             "show_resource_objects_expression": An
 *                             expression to filter the returned objects.
 *                             Expression is limited to the following
 *                             operators:
 *                             =,!=,&lt;,&lt;=,&gt;,&gt;=,+,-,*,AND,OR,LIKE.
 *                             For details see <a
 *                             href="../../../concepts/expressions/"
 *                             target="_top">Expressions</a>. To use a more
 *                             complex expression, query the
 *                             ki_catalog.ki_tiered_objects table directly.
 *                         <li>@ref gpudb::show_resource_objects_order_by
 *                             "show_resource_objects_order_by": Single column
 *                             to be sorted by as well as the sort direction,
 *                             e.g., 'size asc'.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_resource_objects_size
 *                                     "show_resource_objects_size"
 *                                 <li>@ref gpudb::show_resource_objects_id
 *                                     "show_resource_objects_id"
 *                                 <li>@ref
 *                                     gpudb::show_resource_objects_priority
 *                                     "show_resource_objects_priority"
 *                                 <li>@ref gpudb::show_resource_objects_tier
 *                                     "show_resource_objects_tier"
 *                                 <li>@ref
 *                                     gpudb::show_resource_objects_evictable
 *                                     "show_resource_objects_evictable"
 *                                 <li>@ref
 *                                     gpudb::show_resource_objects_owner_resource_group
 *                                     "show_resource_objects_owner_resource_group"
 *                             </ul>
 *                         <li>@ref gpudb::show_resource_objects_limit
 *                             "show_resource_objects_limit": An integer
 *                             indicating the maximum number of results to be
 *                             returned, per rank, or (-1) to indicate that the
 *                             maximum number of results allowed by the server
 *                             should be returned.  The number of records
 *                             returned will never exceed the server's own
 *                             limit, defined by the <a
 *                             href="../../../config/#config-main-general"
 *                             target="_top">max_get_records_size</a> parameter
 *                             in the server configuration. The default value
 *                             is '100'.
 *                         <li>@ref gpudb::show_resource_objects_table_names
 *                             "show_resource_objects_table_names":
 *                             Comma-separated list of tables to restrict the
 *                             results to. Use '*' to show all tables.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowResourceObjectsResponse "Response" object containing
 *         the result of the operation.
 */
ShowResourceObjectsResponse showResourceObjects( const std::map<std::string, std::string>& options ) const;

/**
 * Returns information about the internal sub-components (tiered objects) which
 * use resources of the system. The request can either return results from
 * actively used objects (default) or it can be used to query the status of the
 * objects of a given list of tables.
 * Returns detailed information about the requested resource objects.
 *
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_resource_objects_tiers
 *                             "show_resource_objects_tiers": Comma-separated
 *                             list of tiers to query, leave blank for all
 *                             tiers.
 *                         <li>@ref gpudb::show_resource_objects_expression
 *                             "show_resource_objects_expression": An
 *                             expression to filter the returned objects.
 *                             Expression is limited to the following
 *                             operators:
 *                             =,!=,&lt;,&lt;=,&gt;,&gt;=,+,-,*,AND,OR,LIKE.
 *                             For details see <a
 *                             href="../../../concepts/expressions/"
 *                             target="_top">Expressions</a>. To use a more
 *                             complex expression, query the
 *                             ki_catalog.ki_tiered_objects table directly.
 *                         <li>@ref gpudb::show_resource_objects_order_by
 *                             "show_resource_objects_order_by": Single column
 *                             to be sorted by as well as the sort direction,
 *                             e.g., 'size asc'.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_resource_objects_size
 *                                     "show_resource_objects_size"
 *                                 <li>@ref gpudb::show_resource_objects_id
 *                                     "show_resource_objects_id"
 *                                 <li>@ref
 *                                     gpudb::show_resource_objects_priority
 *                                     "show_resource_objects_priority"
 *                                 <li>@ref gpudb::show_resource_objects_tier
 *                                     "show_resource_objects_tier"
 *                                 <li>@ref
 *                                     gpudb::show_resource_objects_evictable
 *                                     "show_resource_objects_evictable"
 *                                 <li>@ref
 *                                     gpudb::show_resource_objects_owner_resource_group
 *                                     "show_resource_objects_owner_resource_group"
 *                             </ul>
 *                         <li>@ref gpudb::show_resource_objects_limit
 *                             "show_resource_objects_limit": An integer
 *                             indicating the maximum number of results to be
 *                             returned, per rank, or (-1) to indicate that the
 *                             maximum number of results allowed by the server
 *                             should be returned.  The number of records
 *                             returned will never exceed the server's own
 *                             limit, defined by the <a
 *                             href="../../../config/#config-main-general"
 *                             target="_top">max_get_records_size</a> parameter
 *                             in the server configuration. The default value
 *                             is '100'.
 *                         <li>@ref gpudb::show_resource_objects_table_names
 *                             "show_resource_objects_table_names":
 *                             Comma-separated list of tables to restrict the
 *                             results to. Use '*' to show all tables.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowResourceObjectsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowResourceObjectsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowResourceObjectsResponse& showResourceObjects( const std::map<std::string, std::string>& options,
                                                  ShowResourceObjectsResponse& response_ ) const;

/**
 * Requests various statistics for storage/memory tiers and resource groups.
 * Returns statistics on a per-rank basis.
 *
 * @param[in] request_  @ref gpudb::ShowResourceStatisticsRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowResourceStatisticsResponse "Response" object
 *         containing the result of the operation.
 */
ShowResourceStatisticsResponse showResourceStatistics( const ShowResourceStatisticsRequest& request_ ) const;

/**
 * Requests various statistics for storage/memory tiers and resource groups.
 * Returns statistics on a per-rank basis.
 *
 * @param[in] request_  @ref gpudb::ShowResourceStatisticsRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowResourceStatisticsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowResourceStatisticsResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
ShowResourceStatisticsResponse& showResourceStatistics( const ShowResourceStatisticsRequest& request_,
                                                        ShowResourceStatisticsResponse& response_ ) const;

/**
 * Requests various statistics for storage/memory tiers and resource groups.
 * Returns statistics on a per-rank basis.
 *
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::ShowResourceStatisticsResponse "Response" object
 *         containing the result of the operation.
 */
ShowResourceStatisticsResponse showResourceStatistics( const std::map<std::string, std::string>& options ) const;

/**
 * Requests various statistics for storage/memory tiers and resource groups.
 * Returns statistics on a per-rank basis.
 *
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowResourceStatisticsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowResourceStatisticsResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
ShowResourceStatisticsResponse& showResourceStatistics( const std::map<std::string, std::string>& options,
                                                        ShowResourceStatisticsResponse& response_ ) const;

/**
 * Requests resource group properties.
 * Returns detailed information about the requested resource groups.
 *
 * @param[in] request_  @ref gpudb::ShowResourceGroupsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowResourceGroupsResponse "Response" object containing
 *         the result of the operation.
 */
ShowResourceGroupsResponse showResourceGroups( const ShowResourceGroupsRequest& request_ ) const;

/**
 * Requests resource group properties.
 * Returns detailed information about the requested resource groups.
 *
 * @param[in] request_  @ref gpudb::ShowResourceGroupsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowResourceGroupsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowResourceGroupsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowResourceGroupsResponse& showResourceGroups( const ShowResourceGroupsRequest& request_,
                                                ShowResourceGroupsResponse& response_ ) const;

/**
 * Requests resource group properties.
 * Returns detailed information about the requested resource groups.
 *
 * @param[in] names  List of names of groups to be shown. A single entry with
 *                   an empty string returns all groups.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::show_resource_groups_show_default_values
 *                             "show_resource_groups_show_default_values": If
 *                             @ref gpudb::show_resource_groups_true "true"
 *                             include values of fields that are based on the
 *                             default resource group.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_resource_groups_true
 *                                     "show_resource_groups_true"
 *                                 <li>@ref gpudb::show_resource_groups_false
 *                                     "show_resource_groups_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_resource_groups_true
 *                             "show_resource_groups_true".
 *                         <li>@ref
 *                             gpudb::show_resource_groups_show_default_group
 *                             "show_resource_groups_show_default_group": If
 *                             @ref gpudb::show_resource_groups_true "true"
 *                             include the default and system resource groups
 *                             in the response. This value defaults to false if
 *                             an explicit list of group names is provided, and
 *                             true otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_resource_groups_true
 *                                     "show_resource_groups_true"
 *                                 <li>@ref gpudb::show_resource_groups_false
 *                                     "show_resource_groups_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_resource_groups_true
 *                             "show_resource_groups_true".
 *                         <li>@ref gpudb::show_resource_groups_show_tier_usage
 *                             "show_resource_groups_show_tier_usage": If @ref
 *                             gpudb::show_resource_groups_true "true" include
 *                             the resource group usage on the worker ranks in
 *                             the response.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_resource_groups_true
 *                                     "show_resource_groups_true"
 *                                 <li>@ref gpudb::show_resource_groups_false
 *                                     "show_resource_groups_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_resource_groups_false
 *                             "show_resource_groups_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowResourceGroupsResponse "Response" object containing
 *         the result of the operation.
 */
ShowResourceGroupsResponse showResourceGroups( const std::vector<std::string>& names,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Requests resource group properties.
 * Returns detailed information about the requested resource groups.
 *
 * @param[in] names  List of names of groups to be shown. A single entry with
 *                   an empty string returns all groups.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::show_resource_groups_show_default_values
 *                             "show_resource_groups_show_default_values": If
 *                             @ref gpudb::show_resource_groups_true "true"
 *                             include values of fields that are based on the
 *                             default resource group.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_resource_groups_true
 *                                     "show_resource_groups_true"
 *                                 <li>@ref gpudb::show_resource_groups_false
 *                                     "show_resource_groups_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_resource_groups_true
 *                             "show_resource_groups_true".
 *                         <li>@ref
 *                             gpudb::show_resource_groups_show_default_group
 *                             "show_resource_groups_show_default_group": If
 *                             @ref gpudb::show_resource_groups_true "true"
 *                             include the default and system resource groups
 *                             in the response. This value defaults to false if
 *                             an explicit list of group names is provided, and
 *                             true otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_resource_groups_true
 *                                     "show_resource_groups_true"
 *                                 <li>@ref gpudb::show_resource_groups_false
 *                                     "show_resource_groups_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_resource_groups_true
 *                             "show_resource_groups_true".
 *                         <li>@ref gpudb::show_resource_groups_show_tier_usage
 *                             "show_resource_groups_show_tier_usage": If @ref
 *                             gpudb::show_resource_groups_true "true" include
 *                             the resource group usage on the worker ranks in
 *                             the response.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_resource_groups_true
 *                                     "show_resource_groups_true"
 *                                 <li>@ref gpudb::show_resource_groups_false
 *                                     "show_resource_groups_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_resource_groups_false
 *                             "show_resource_groups_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowResourceGroupsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowResourceGroupsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowResourceGroupsResponse& showResourceGroups( const std::vector<std::string>& names,
                                                const std::map<std::string, std::string>& options,
                                                ShowResourceGroupsResponse& response_ ) const;

/**
 * Retrieves information about a <a href="../../../concepts/schemas/"
 * target="_top">schema</a> (or all schemas), as specified in @ref
 * gpudb::ShowSchemaRequest::schemaName "schemaName".
 *
 * @param[in] request_  @ref gpudb::ShowSchemaRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowSchemaResponse "Response" object containing the
 *         result of the operation.
 */
ShowSchemaResponse showSchema( const ShowSchemaRequest& request_ ) const;

/**
 * Retrieves information about a <a href="../../../concepts/schemas/"
 * target="_top">schema</a> (or all schemas), as specified in @ref
 * gpudb::ShowSchemaRequest::schemaName "schemaName".
 *
 * @param[in] request_  @ref gpudb::ShowSchemaRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowSchemaResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowSchemaResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowSchemaResponse& showSchema( const ShowSchemaRequest& request_,
                                ShowSchemaResponse& response_ ) const;

/**
 * Retrieves information about a <a href="../../../concepts/schemas/"
 * target="_top">schema</a> (or all schemas), as specified in @a schemaName.
 *
 * @param[in] schemaName  Name of the schema for which to retrieve the
 *                        information. If blank, then info for all schemas is
 *                        returned.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_schema_no_error_if_not_exists
 *                             "show_schema_no_error_if_not_exists": If @ref
 *                             gpudb::show_schema_false "false" will return an
 *                             error if the provided @a schemaName does not
 *                             exist. If @ref gpudb::show_schema_true "true"
 *                             then it will return an empty result if the
 *                             provided @a schemaName does not exist.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_schema_true
 *                                     "show_schema_true"
 *                                 <li>@ref gpudb::show_schema_false
 *                                     "show_schema_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_schema_false "show_schema_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowSchemaResponse "Response" object containing the
 *         result of the operation.
 */
ShowSchemaResponse showSchema( const std::string& schemaName,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves information about a <a href="../../../concepts/schemas/"
 * target="_top">schema</a> (or all schemas), as specified in @a schemaName.
 *
 * @param[in] schemaName  Name of the schema for which to retrieve the
 *                        information. If blank, then info for all schemas is
 *                        returned.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_schema_no_error_if_not_exists
 *                             "show_schema_no_error_if_not_exists": If @ref
 *                             gpudb::show_schema_false "false" will return an
 *                             error if the provided @a schemaName does not
 *                             exist. If @ref gpudb::show_schema_true "true"
 *                             then it will return an empty result if the
 *                             provided @a schemaName does not exist.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_schema_true
 *                                     "show_schema_true"
 *                                 <li>@ref gpudb::show_schema_false
 *                                     "show_schema_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_schema_false "show_schema_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowSchemaResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowSchemaResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowSchemaResponse& showSchema( const std::string& schemaName,
                                const std::map<std::string, std::string>& options,
                                ShowSchemaResponse& response_ ) const;

/**
 * Shows security information relating to users and/or roles. If the caller is
 * not a system administrator, only information relating to the caller and
 * their roles is returned.
 *
 * @param[in] request_  @ref gpudb::ShowSecurityRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowSecurityResponse "Response" object containing the
 *         result of the operation.
 */
ShowSecurityResponse showSecurity( const ShowSecurityRequest& request_ ) const;

/**
 * Shows security information relating to users and/or roles. If the caller is
 * not a system administrator, only information relating to the caller and
 * their roles is returned.
 *
 * @param[in] request_  @ref gpudb::ShowSecurityRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowSecurityResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowSecurityResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowSecurityResponse& showSecurity( const ShowSecurityRequest& request_,
                                    ShowSecurityResponse& response_ ) const;

/**
 * Shows security information relating to users and/or roles. If the caller is
 * not a system administrator, only information relating to the caller and
 * their roles is returned.
 *
 * @param[in] names  A list of names of users and/or roles about which security
 *                   information is requested. If none are provided,
 *                   information about all users and roles will be returned.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_security_show_current_user
 *                             "show_security_show_current_user": If @ref
 *                             gpudb::show_security_true "true", returns only
 *                             security information for the current user.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_security_true
 *                                     "show_security_true"
 *                                 <li>@ref gpudb::show_security_false
 *                                     "show_security_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_security_false
 *                             "show_security_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowSecurityResponse "Response" object containing the
 *         result of the operation.
 */
ShowSecurityResponse showSecurity( const std::vector<std::string>& names,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Shows security information relating to users and/or roles. If the caller is
 * not a system administrator, only information relating to the caller and
 * their roles is returned.
 *
 * @param[in] names  A list of names of users and/or roles about which security
 *                   information is requested. If none are provided,
 *                   information about all users and roles will be returned.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_security_show_current_user
 *                             "show_security_show_current_user": If @ref
 *                             gpudb::show_security_true "true", returns only
 *                             security information for the current user.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_security_true
 *                                     "show_security_true"
 *                                 <li>@ref gpudb::show_security_false
 *                                     "show_security_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_security_false
 *                             "show_security_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowSecurityResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowSecurityResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowSecurityResponse& showSecurity( const std::vector<std::string>& names,
                                    const std::map<std::string, std::string>& options,
                                    ShowSecurityResponse& response_ ) const;

/**
 * Shows information about SQL procedures, including the full definition of
 * each requested procedure.
 *
 * @param[in] request_  @ref gpudb::ShowSqlProcRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowSqlProcResponse "Response" object containing the
 *         result of the operation.
 */
ShowSqlProcResponse showSqlProc( const ShowSqlProcRequest& request_ ) const;

/**
 * Shows information about SQL procedures, including the full definition of
 * each requested procedure.
 *
 * @param[in] request_  @ref gpudb::ShowSqlProcRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowSqlProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowSqlProcResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowSqlProcResponse& showSqlProc( const ShowSqlProcRequest& request_,
                                  ShowSqlProcResponse& response_ ) const;

/**
 * Shows information about SQL procedures, including the full definition of
 * each requested procedure.
 *
 * @param[in] procedureName  Name of the procedure for which to retrieve the
 *                           information. If blank, then information about all
 *                           procedures is returned. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_sql_proc_no_error_if_not_exists
 *                             "show_sql_proc_no_error_if_not_exists": If @ref
 *                             gpudb::show_sql_proc_true "true", no error will
 *                             be returned if the requested procedure does not
 *                             exist.  If @ref gpudb::show_sql_proc_false
 *                             "false", an error will be returned if the
 *                             requested procedure does not exist.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_sql_proc_true
 *                                     "show_sql_proc_true"
 *                                 <li>@ref gpudb::show_sql_proc_false
 *                                     "show_sql_proc_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_sql_proc_false
 *                             "show_sql_proc_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowSqlProcResponse "Response" object containing the
 *         result of the operation.
 */
ShowSqlProcResponse showSqlProc( const std::string& procedureName,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Shows information about SQL procedures, including the full definition of
 * each requested procedure.
 *
 * @param[in] procedureName  Name of the procedure for which to retrieve the
 *                           information. If blank, then information about all
 *                           procedures is returned. The default value is ''.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_sql_proc_no_error_if_not_exists
 *                             "show_sql_proc_no_error_if_not_exists": If @ref
 *                             gpudb::show_sql_proc_true "true", no error will
 *                             be returned if the requested procedure does not
 *                             exist.  If @ref gpudb::show_sql_proc_false
 *                             "false", an error will be returned if the
 *                             requested procedure does not exist.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_sql_proc_true
 *                                     "show_sql_proc_true"
 *                                 <li>@ref gpudb::show_sql_proc_false
 *                                     "show_sql_proc_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_sql_proc_false
 *                             "show_sql_proc_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowSqlProcResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowSqlProcResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowSqlProcResponse& showSqlProc( const std::string& procedureName,
                                  const std::map<std::string, std::string>& options,
                                  ShowSqlProcResponse& response_ ) const;

/**
 * Retrieves the collected column statistics for the specified table(s).
 *
 * @param[in] request_  @ref gpudb::ShowStatisticsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowStatisticsResponse "Response" object containing the
 *         result of the operation.
 */
ShowStatisticsResponse showStatistics( const ShowStatisticsRequest& request_ ) const;

/**
 * Retrieves the collected column statistics for the specified table(s).
 *
 * @param[in] request_  @ref gpudb::ShowStatisticsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowStatisticsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowStatisticsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowStatisticsResponse& showStatistics( const ShowStatisticsRequest& request_,
                                        ShowStatisticsResponse& response_ ) const;

/**
 * Retrieves the collected column statistics for the specified table(s).
 *
 * @param[in] tableNames  Names of tables whose metadata will be fetched, each
 *                        in [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.  All
 *                        provided tables must exist, or an error is returned.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::show_statistics_no_error_if_not_exists
 *                             "show_statistics_no_error_if_not_exists": If
 *                             @ref gpudb::show_statistics_true "true" and if
 *                             the table names specified in @a tableNames does
 *                             not exist, no error is returned. If @ref
 *                             gpudb::show_statistics_false "false" and if the
 *                             table names specified in @a tableNames does not
 *                             exist, then an error is returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_statistics_true
 *                                     "show_statistics_true"
 *                                 <li>@ref gpudb::show_statistics_false
 *                                     "show_statistics_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_statistics_false
 *                             "show_statistics_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowStatisticsResponse "Response" object containing the
 *         result of the operation.
 */
ShowStatisticsResponse showStatistics( const std::vector<std::string>& tableNames,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves the collected column statistics for the specified table(s).
 *
 * @param[in] tableNames  Names of tables whose metadata will be fetched, each
 *                        in [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.  All
 *                        provided tables must exist, or an error is returned.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref
 *                             gpudb::show_statistics_no_error_if_not_exists
 *                             "show_statistics_no_error_if_not_exists": If
 *                             @ref gpudb::show_statistics_true "true" and if
 *                             the table names specified in @a tableNames does
 *                             not exist, no error is returned. If @ref
 *                             gpudb::show_statistics_false "false" and if the
 *                             table names specified in @a tableNames does not
 *                             exist, then an error is returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_statistics_true
 *                                     "show_statistics_true"
 *                                 <li>@ref gpudb::show_statistics_false
 *                                     "show_statistics_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_statistics_false
 *                             "show_statistics_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowStatisticsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowStatisticsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowStatisticsResponse& showStatistics( const std::vector<std::string>& tableNames,
                                        const std::map<std::string, std::string>& options,
                                        ShowStatisticsResponse& response_ ) const;

/**
 * Returns server configuration and version related information to the caller.
 * The admin tool uses it to present server related information to the user.
 *
 * @param[in] request_  @ref gpudb::ShowSystemPropertiesRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowSystemPropertiesResponse "Response" object
 *         containing the result of the operation.
 */
ShowSystemPropertiesResponse showSystemProperties( const ShowSystemPropertiesRequest& request_ ) const;

/**
 * Returns server configuration and version related information to the caller.
 * The admin tool uses it to present server related information to the user.
 *
 * @param[in] request_  @ref gpudb::ShowSystemPropertiesRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowSystemPropertiesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowSystemPropertiesResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
ShowSystemPropertiesResponse& showSystemProperties( const ShowSystemPropertiesRequest& request_,
                                                    ShowSystemPropertiesResponse& response_ ) const;

/**
 * Returns server configuration and version related information to the caller.
 * The admin tool uses it to present server related information to the user.
 *
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_system_properties_properties
 *                             "show_system_properties_properties": A list of
 *                             comma separated names of properties requested.
 *                             If not specified, all properties will be
 *                             returned.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowSystemPropertiesResponse "Response" object
 *         containing the result of the operation.
 */
ShowSystemPropertiesResponse showSystemProperties( const std::map<std::string, std::string>& options ) const;

/**
 * Returns server configuration and version related information to the caller.
 * The admin tool uses it to present server related information to the user.
 *
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_system_properties_properties
 *                             "show_system_properties_properties": A list of
 *                             comma separated names of properties requested.
 *                             If not specified, all properties will be
 *                             returned.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowSystemPropertiesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowSystemPropertiesResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
ShowSystemPropertiesResponse& showSystemProperties( const std::map<std::string, std::string>& options,
                                                    ShowSystemPropertiesResponse& response_ ) const;

/**
 * Provides server configuration and health related status to the caller. The
 * admin tool uses it to present server related information to the user.
 *
 * @param[in] request_  @ref gpudb::ShowSystemStatusRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowSystemStatusResponse "Response" object containing
 *         the result of the operation.
 */
ShowSystemStatusResponse showSystemStatus( const ShowSystemStatusRequest& request_ ) const;

/**
 * Provides server configuration and health related status to the caller. The
 * admin tool uses it to present server related information to the user.
 *
 * @param[in] request_  @ref gpudb::ShowSystemStatusRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowSystemStatusResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowSystemStatusResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowSystemStatusResponse& showSystemStatus( const ShowSystemStatusRequest& request_,
                                            ShowSystemStatusResponse& response_ ) const;

/**
 * Provides server configuration and health related status to the caller. The
 * admin tool uses it to present server related information to the user.
 *
 * @param[in] options  Optional parameters, currently unused. The default value
 *                     is an empty map.
 *
 * @return @ref gpudb::ShowSystemStatusResponse "Response" object containing
 *         the result of the operation.
 */
ShowSystemStatusResponse showSystemStatus( const std::map<std::string, std::string>& options ) const;

/**
 * Provides server configuration and health related status to the caller. The
 * admin tool uses it to present server related information to the user.
 *
 * @param[in] options  Optional parameters, currently unused. The default value
 *                     is an empty map.
 * @param[out] response_  @ref gpudb::ShowSystemStatusResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowSystemStatusResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowSystemStatusResponse& showSystemStatus( const std::map<std::string, std::string>& options,
                                            ShowSystemStatusResponse& response_ ) const;

/**
 * Returns the last 100 database requests along with the request timing and
 * internal job id. The admin tool uses it to present request timing
 * information to the user.
 *
 * @param[in] request_  @ref gpudb::ShowSystemTimingRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowSystemTimingResponse "Response" object containing
 *         the result of the operation.
 */
ShowSystemTimingResponse showSystemTiming( const ShowSystemTimingRequest& request_ ) const;

/**
 * Returns the last 100 database requests along with the request timing and
 * internal job id. The admin tool uses it to present request timing
 * information to the user.
 *
 * @param[in] request_  @ref gpudb::ShowSystemTimingRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowSystemTimingResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowSystemTimingResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowSystemTimingResponse& showSystemTiming( const ShowSystemTimingRequest& request_,
                                            ShowSystemTimingResponse& response_ ) const;

/**
 * Returns the last 100 database requests along with the request timing and
 * internal job id. The admin tool uses it to present request timing
 * information to the user.
 *
 * @param[in] options  Optional parameters, currently unused. The default value
 *                     is an empty map.
 *
 * @return @ref gpudb::ShowSystemTimingResponse "Response" object containing
 *         the result of the operation.
 */
ShowSystemTimingResponse showSystemTiming( const std::map<std::string, std::string>& options ) const;

/**
 * Returns the last 100 database requests along with the request timing and
 * internal job id. The admin tool uses it to present request timing
 * information to the user.
 *
 * @param[in] options  Optional parameters, currently unused. The default value
 *                     is an empty map.
 * @param[out] response_  @ref gpudb::ShowSystemTimingResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowSystemTimingResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowSystemTimingResponse& showSystemTiming( const std::map<std::string, std::string>& options,
                                            ShowSystemTimingResponse& response_ ) const;

/**
 * Retrieves detailed information about a table, view, or schema, specified in
 * @ref gpudb::ShowTableRequest::tableName "tableName". If the supplied @ref
 * gpudb::ShowTableRequest::tableName "tableName" is a schema the call can
 * return information about either the schema itself or the tables and views it
 * contains. If @ref gpudb::ShowTableRequest::tableName "tableName" is empty,
 * information about all schemas will be returned.
 *
 * If the option @ref gpudb::show_table_get_sizes "get_sizes" is set to @ref
 * gpudb::show_table_true "true", then the number of records in each table is
 * returned (in @ref gpudb::ShowTableResponse::sizes "sizes" and @ref
 * gpudb::ShowTableResponse::fullSizes "fullSizes"), along with the total
 * number of objects across all requested tables (in @ref
 * gpudb::ShowTableResponse::totalSize "totalSize" and @ref
 * gpudb::ShowTableResponse::totalFullSize "totalFullSize").
 *
 * For a schema, setting the @ref gpudb::show_table_show_children
 * "show_children" option to @ref gpudb::show_table_false "false" returns only
 * information about the schema itself; setting @ref
 * gpudb::show_table_show_children "show_children" to @ref
 * gpudb::show_table_true "true" returns a list of tables and views contained
 * in the schema, along with their corresponding detail.
 *
 * To retrieve a list of every table, view, and schema in the database, set
 * @ref gpudb::ShowTableRequest::tableName "tableName" to '*' and @ref
 * gpudb::show_table_show_children "show_children" to @ref
 * gpudb::show_table_true "true".  When doing this, the returned @ref
 * gpudb::ShowTableResponse::totalSize "totalSize" and @ref
 * gpudb::ShowTableResponse::totalFullSize "totalFullSize" will not include the
 * sizes of non-base tables (e.g., filters, views, joins, etc.).
 *
 * @param[in] request_  @ref gpudb::ShowTableRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowTableResponse "Response" object containing the
 *         result of the operation.
 */
ShowTableResponse showTable( const ShowTableRequest& request_ ) const;

/**
 * Retrieves detailed information about a table, view, or schema, specified in
 * @ref gpudb::ShowTableRequest::tableName "tableName". If the supplied @ref
 * gpudb::ShowTableRequest::tableName "tableName" is a schema the call can
 * return information about either the schema itself or the tables and views it
 * contains. If @ref gpudb::ShowTableRequest::tableName "tableName" is empty,
 * information about all schemas will be returned.
 *
 * If the option @ref gpudb::show_table_get_sizes "get_sizes" is set to @ref
 * gpudb::show_table_true "true", then the number of records in each table is
 * returned (in @ref gpudb::ShowTableResponse::sizes "sizes" and @ref
 * gpudb::ShowTableResponse::fullSizes "fullSizes"), along with the total
 * number of objects across all requested tables (in @ref
 * gpudb::ShowTableResponse::totalSize "totalSize" and @ref
 * gpudb::ShowTableResponse::totalFullSize "totalFullSize").
 *
 * For a schema, setting the @ref gpudb::show_table_show_children
 * "show_children" option to @ref gpudb::show_table_false "false" returns only
 * information about the schema itself; setting @ref
 * gpudb::show_table_show_children "show_children" to @ref
 * gpudb::show_table_true "true" returns a list of tables and views contained
 * in the schema, along with their corresponding detail.
 *
 * To retrieve a list of every table, view, and schema in the database, set
 * @ref gpudb::ShowTableRequest::tableName "tableName" to '*' and @ref
 * gpudb::show_table_show_children "show_children" to @ref
 * gpudb::show_table_true "true".  When doing this, the returned @ref
 * gpudb::ShowTableResponse::totalSize "totalSize" and @ref
 * gpudb::ShowTableResponse::totalFullSize "totalFullSize" will not include the
 * sizes of non-base tables (e.g., filters, views, joins, etc.).
 *
 * @param[in] request_  @ref gpudb::ShowTableRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowTableResponse& showTable( const ShowTableRequest& request_,
                              ShowTableResponse& response_ ) const;

/**
 * Retrieves detailed information about a table, view, or schema, specified in
 * @a tableName. If the supplied @a tableName is a schema the call can return
 * information about either the schema itself or the tables and views it
 * contains. If @a tableName is empty, information about all schemas will be
 * returned.
 *
 * If the option @ref gpudb::show_table_get_sizes "get_sizes" is set to @ref
 * gpudb::show_table_true "true", then the number of records in each table is
 * returned (in @ref gpudb::ShowTableResponse::sizes "sizes" and @ref
 * gpudb::ShowTableResponse::fullSizes "fullSizes"), along with the total
 * number of objects across all requested tables (in @ref
 * gpudb::ShowTableResponse::totalSize "totalSize" and @ref
 * gpudb::ShowTableResponse::totalFullSize "totalFullSize").
 *
 * For a schema, setting the @ref gpudb::show_table_show_children
 * "show_children" option to @ref gpudb::show_table_false "false" returns only
 * information about the schema itself; setting @ref
 * gpudb::show_table_show_children "show_children" to @ref
 * gpudb::show_table_true "true" returns a list of tables and views contained
 * in the schema, along with their corresponding detail.
 *
 * To retrieve a list of every table, view, and schema in the database, set @a
 * tableName to '*' and @ref gpudb::show_table_show_children "show_children" to
 * @ref gpudb::show_table_true "true".  When doing this, the returned @ref
 * gpudb::ShowTableResponse::totalSize "totalSize" and @ref
 * gpudb::ShowTableResponse::totalFullSize "totalFullSize" will not include the
 * sizes of non-base tables (e.g., filters, views, joins, etc.).
 *
 * @param[in] tableName  Name of the table for which to retrieve the
 *                       information, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  If blank,
 *                       then returns information about all tables and views.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_table_force_synchronous
 *                             "show_table_force_synchronous": If @ref
 *                             gpudb::show_table_true "true" then the table
 *                             sizes will wait for read lock before returning.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_table_true
 *                                     "show_table_true"
 *                                 <li>@ref gpudb::show_table_false
 *                                     "show_table_false"
 *                             </ul>
 *                             The default value is @ref gpudb::show_table_true
 *                             "show_table_true".
 *                         <li>@ref gpudb::show_table_get_sizes
 *                             "show_table_get_sizes": If @ref
 *                             gpudb::show_table_true "true" then the number of
 *                             records in each table, along with a cumulative
 *                             count, will be returned; blank, otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_table_true
 *                                     "show_table_true"
 *                                 <li>@ref gpudb::show_table_false
 *                                     "show_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_table_false "show_table_false".
 *                         <li>@ref gpudb::show_table_get_cached_sizes
 *                             "show_table_get_cached_sizes": If @ref
 *                             gpudb::show_table_true "true" then the number of
 *                             records in each table, along with a cumulative
 *                             count, will be returned; blank, otherwise. This
 *                             version will return the sizes cached at rank 0,
 *                             which may be stale if there is a multihead
 *                             insert occuring.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_table_true
 *                                     "show_table_true"
 *                                 <li>@ref gpudb::show_table_false
 *                                     "show_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_table_false "show_table_false".
 *                         <li>@ref gpudb::show_table_show_children
 *                             "show_table_show_children": If @a tableName is a
 *                             schema, then @ref gpudb::show_table_true "true"
 *                             will return information about the tables and
 *                             views in the schema, and @ref
 *                             gpudb::show_table_false "false" will return
 *                             information about the schema itself. If @a
 *                             tableName is a table or view, @ref
 *                             gpudb::show_table_show_children "show_children"
 *                             must be @ref gpudb::show_table_false "false". If
 *                             @a tableName is empty, then @ref
 *                             gpudb::show_table_show_children "show_children"
 *                             must be @ref gpudb::show_table_true "true".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_table_true
 *                                     "show_table_true"
 *                                 <li>@ref gpudb::show_table_false
 *                                     "show_table_false"
 *                             </ul>
 *                             The default value is @ref gpudb::show_table_true
 *                             "show_table_true".
 *                         <li>@ref gpudb::show_table_no_error_if_not_exists
 *                             "show_table_no_error_if_not_exists": If @ref
 *                             gpudb::show_table_false "false" will return an
 *                             error if the provided @a tableName does not
 *                             exist. If @ref gpudb::show_table_true "true"
 *                             then it will return an empty result.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_table_true
 *                                     "show_table_true"
 *                                 <li>@ref gpudb::show_table_false
 *                                     "show_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_table_false "show_table_false".
 *                         <li>@ref gpudb::show_table_get_column_info
 *                             "show_table_get_column_info": If @ref
 *                             gpudb::show_table_true "true" then column info
 *                             (memory usage, etc) will be returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_table_true
 *                                     "show_table_true"
 *                                 <li>@ref gpudb::show_table_false
 *                                     "show_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_table_false "show_table_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowTableResponse "Response" object containing the
 *         result of the operation.
 */
ShowTableResponse showTable( const std::string& tableName,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves detailed information about a table, view, or schema, specified in
 * @a tableName. If the supplied @a tableName is a schema the call can return
 * information about either the schema itself or the tables and views it
 * contains. If @a tableName is empty, information about all schemas will be
 * returned.
 *
 * If the option @ref gpudb::show_table_get_sizes "get_sizes" is set to @ref
 * gpudb::show_table_true "true", then the number of records in each table is
 * returned (in @ref gpudb::ShowTableResponse::sizes "sizes" and @ref
 * gpudb::ShowTableResponse::fullSizes "fullSizes"), along with the total
 * number of objects across all requested tables (in @ref
 * gpudb::ShowTableResponse::totalSize "totalSize" and @ref
 * gpudb::ShowTableResponse::totalFullSize "totalFullSize").
 *
 * For a schema, setting the @ref gpudb::show_table_show_children
 * "show_children" option to @ref gpudb::show_table_false "false" returns only
 * information about the schema itself; setting @ref
 * gpudb::show_table_show_children "show_children" to @ref
 * gpudb::show_table_true "true" returns a list of tables and views contained
 * in the schema, along with their corresponding detail.
 *
 * To retrieve a list of every table, view, and schema in the database, set @a
 * tableName to '*' and @ref gpudb::show_table_show_children "show_children" to
 * @ref gpudb::show_table_true "true".  When doing this, the returned @ref
 * gpudb::ShowTableResponse::totalSize "totalSize" and @ref
 * gpudb::ShowTableResponse::totalFullSize "totalFullSize" will not include the
 * sizes of non-base tables (e.g., filters, views, joins, etc.).
 *
 * @param[in] tableName  Name of the table for which to retrieve the
 *                       information, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  If blank,
 *                       then returns information about all tables and views.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_table_force_synchronous
 *                             "show_table_force_synchronous": If @ref
 *                             gpudb::show_table_true "true" then the table
 *                             sizes will wait for read lock before returning.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_table_true
 *                                     "show_table_true"
 *                                 <li>@ref gpudb::show_table_false
 *                                     "show_table_false"
 *                             </ul>
 *                             The default value is @ref gpudb::show_table_true
 *                             "show_table_true".
 *                         <li>@ref gpudb::show_table_get_sizes
 *                             "show_table_get_sizes": If @ref
 *                             gpudb::show_table_true "true" then the number of
 *                             records in each table, along with a cumulative
 *                             count, will be returned; blank, otherwise.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_table_true
 *                                     "show_table_true"
 *                                 <li>@ref gpudb::show_table_false
 *                                     "show_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_table_false "show_table_false".
 *                         <li>@ref gpudb::show_table_get_cached_sizes
 *                             "show_table_get_cached_sizes": If @ref
 *                             gpudb::show_table_true "true" then the number of
 *                             records in each table, along with a cumulative
 *                             count, will be returned; blank, otherwise. This
 *                             version will return the sizes cached at rank 0,
 *                             which may be stale if there is a multihead
 *                             insert occuring.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_table_true
 *                                     "show_table_true"
 *                                 <li>@ref gpudb::show_table_false
 *                                     "show_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_table_false "show_table_false".
 *                         <li>@ref gpudb::show_table_show_children
 *                             "show_table_show_children": If @a tableName is a
 *                             schema, then @ref gpudb::show_table_true "true"
 *                             will return information about the tables and
 *                             views in the schema, and @ref
 *                             gpudb::show_table_false "false" will return
 *                             information about the schema itself. If @a
 *                             tableName is a table or view, @ref
 *                             gpudb::show_table_show_children "show_children"
 *                             must be @ref gpudb::show_table_false "false". If
 *                             @a tableName is empty, then @ref
 *                             gpudb::show_table_show_children "show_children"
 *                             must be @ref gpudb::show_table_true "true".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_table_true
 *                                     "show_table_true"
 *                                 <li>@ref gpudb::show_table_false
 *                                     "show_table_false"
 *                             </ul>
 *                             The default value is @ref gpudb::show_table_true
 *                             "show_table_true".
 *                         <li>@ref gpudb::show_table_no_error_if_not_exists
 *                             "show_table_no_error_if_not_exists": If @ref
 *                             gpudb::show_table_false "false" will return an
 *                             error if the provided @a tableName does not
 *                             exist. If @ref gpudb::show_table_true "true"
 *                             then it will return an empty result.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_table_true
 *                                     "show_table_true"
 *                                 <li>@ref gpudb::show_table_false
 *                                     "show_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_table_false "show_table_false".
 *                         <li>@ref gpudb::show_table_get_column_info
 *                             "show_table_get_column_info": If @ref
 *                             gpudb::show_table_true "true" then column info
 *                             (memory usage, etc) will be returned.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_table_true
 *                                     "show_table_true"
 *                                 <li>@ref gpudb::show_table_false
 *                                     "show_table_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_table_false "show_table_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowTableResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowTableResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowTableResponse& showTable( const std::string& tableName,
                              const std::map<std::string, std::string>& options,
                              ShowTableResponse& response_ ) const;

/**
 * Retrieves the user provided metadata for the specified tables.
 *
 * @param[in] request_  @ref gpudb::ShowTableMetadataRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowTableMetadataResponse "Response" object containing
 *         the result of the operation.
 */
ShowTableMetadataResponse showTableMetadata( const ShowTableMetadataRequest& request_ ) const;

/**
 * Retrieves the user provided metadata for the specified tables.
 *
 * @param[in] request_  @ref gpudb::ShowTableMetadataRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowTableMetadataResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowTableMetadataResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowTableMetadataResponse& showTableMetadata( const ShowTableMetadataRequest& request_,
                                              ShowTableMetadataResponse& response_ ) const;

/**
 * Retrieves the user provided metadata for the specified tables.
 *
 * @param[in] tableNames  Names of tables whose metadata will be fetched, in
 *                        [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.  All
 *                        provided tables must exist, or an error is returned.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::ShowTableMetadataResponse "Response" object containing
 *         the result of the operation.
 */
ShowTableMetadataResponse showTableMetadata( const std::vector<std::string>& tableNames,
                                             const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves the user provided metadata for the specified tables.
 *
 * @param[in] tableNames  Names of tables whose metadata will be fetched, in
 *                        [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.  All
 *                        provided tables must exist, or an error is returned.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowTableMetadataResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowTableMetadataResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowTableMetadataResponse& showTableMetadata( const std::vector<std::string>& tableNames,
                                              const std::map<std::string, std::string>& options,
                                              ShowTableMetadataResponse& response_ ) const;

/**
 * Show table monitors and their properties. Table monitors are created using
 * @ref createTableMonitor(const CreateTableMonitorRequest&) const
 * "createTableMonitor".
 * Returns detailed information about existing table monitors.
 *
 * @param[in] request_  @ref gpudb::ShowTableMonitorsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowTableMonitorsResponse "Response" object containing
 *         the result of the operation.
 */
ShowTableMonitorsResponse showTableMonitors( const ShowTableMonitorsRequest& request_ ) const;

/**
 * Show table monitors and their properties. Table monitors are created using
 * @ref createTableMonitor(const CreateTableMonitorRequest&) const
 * "createTableMonitor".
 * Returns detailed information about existing table monitors.
 *
 * @param[in] request_  @ref gpudb::ShowTableMonitorsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowTableMonitorsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowTableMonitorsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowTableMonitorsResponse& showTableMonitors( const ShowTableMonitorsRequest& request_,
                                              ShowTableMonitorsResponse& response_ ) const;

/**
 * Show table monitors and their properties. Table monitors are created using
 * @ref
 * createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 * "createTableMonitor".
 * Returns detailed information about existing table monitors.
 *
 * @param[in] monitorIds  List of monitors to be shown. An empty list or a
 *                        single entry with an empty string returns all table
 *                        monitors.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::ShowTableMonitorsResponse "Response" object containing
 *         the result of the operation.
 */
ShowTableMonitorsResponse showTableMonitors( const std::vector<std::string>& monitorIds,
                                             const std::map<std::string, std::string>& options ) const;

/**
 * Show table monitors and their properties. Table monitors are created using
 * @ref
 * createTableMonitor(const std::string&, const std::map<std::string, std::string>&) const
 * "createTableMonitor".
 * Returns detailed information about existing table monitors.
 *
 * @param[in] monitorIds  List of monitors to be shown. An empty list or a
 *                        single entry with an empty string returns all table
 *                        monitors.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowTableMonitorsResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowTableMonitorsResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowTableMonitorsResponse& showTableMonitors( const std::vector<std::string>& monitorIds,
                                              const std::map<std::string, std::string>& options,
                                              ShowTableMonitorsResponse& response_ ) const;

/**
 * Gets names of the tables whose type matches the given criteria. Each table
 * has a particular type. This type comprises the schema and properties of the
 * table and sometimes a type label. This function allows a look up of the
 * existing tables based on full or partial type information. The operation is
 * synchronous.
 *
 * @param[in] request_  @ref gpudb::ShowTablesByTypeRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowTablesByTypeResponse "Response" object containing
 *         the result of the operation.
 */
ShowTablesByTypeResponse showTablesByType( const ShowTablesByTypeRequest& request_ ) const;

/**
 * Gets names of the tables whose type matches the given criteria. Each table
 * has a particular type. This type comprises the schema and properties of the
 * table and sometimes a type label. This function allows a look up of the
 * existing tables based on full or partial type information. The operation is
 * synchronous.
 *
 * @param[in] request_  @ref gpudb::ShowTablesByTypeRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowTablesByTypeResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowTablesByTypeResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowTablesByTypeResponse& showTablesByType( const ShowTablesByTypeRequest& request_,
                                            ShowTablesByTypeResponse& response_ ) const;

/**
 * Gets names of the tables whose type matches the given criteria. Each table
 * has a particular type. This type comprises the schema and properties of the
 * table and sometimes a type label. This function allows a look up of the
 * existing tables based on full or partial type information. The operation is
 * synchronous.
 *
 * @param[in] typeId  Type id returned by a call to @ref
 *                    createType(const std::string&, const std::string&, const std::map<std::string, std::vector<std::string> >&, const std::map<std::string, std::string>&) const
 *                    "createType".
 * @param[in] label  Optional user supplied label which can be used instead of
 *                   the type_id to retrieve all tables with the given label.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::ShowTablesByTypeResponse "Response" object containing
 *         the result of the operation.
 */
ShowTablesByTypeResponse showTablesByType( const std::string& typeId,
                                           const std::string& label,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Gets names of the tables whose type matches the given criteria. Each table
 * has a particular type. This type comprises the schema and properties of the
 * table and sometimes a type label. This function allows a look up of the
 * existing tables based on full or partial type information. The operation is
 * synchronous.
 *
 * @param[in] typeId  Type id returned by a call to @ref
 *                    createType(const std::string&, const std::string&, const std::map<std::string, std::vector<std::string> >&, const std::map<std::string, std::string>&) const
 *                    "createType".
 * @param[in] label  Optional user supplied label which can be used instead of
 *                   the type_id to retrieve all tables with the given label.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowTablesByTypeResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::ShowTablesByTypeResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
ShowTablesByTypeResponse& showTablesByType( const std::string& typeId,
                                            const std::string& label,
                                            const std::map<std::string, std::string>& options,
                                            ShowTablesByTypeResponse& response_ ) const;

/**
 * Retrieves information regarding the specified triggers or all existing
 * triggers currently active.
 *
 * @param[in] request_  @ref gpudb::ShowTriggersRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowTriggersResponse "Response" object containing the
 *         result of the operation.
 */
ShowTriggersResponse showTriggers( const ShowTriggersRequest& request_ ) const;

/**
 * Retrieves information regarding the specified triggers or all existing
 * triggers currently active.
 *
 * @param[in] request_  @ref gpudb::ShowTriggersRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowTriggersResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowTriggersResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowTriggersResponse& showTriggers( const ShowTriggersRequest& request_,
                                    ShowTriggersResponse& response_ ) const;

/**
 * Retrieves information regarding the specified triggers or all existing
 * triggers currently active.
 *
 * @param[in] triggerIds  List of IDs of the triggers whose information is to
 *                        be retrieved. An empty list means information will be
 *                        retrieved on all active triggers.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::ShowTriggersResponse "Response" object containing the
 *         result of the operation.
 */
ShowTriggersResponse showTriggers( const std::vector<std::string>& triggerIds,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves information regarding the specified triggers or all existing
 * triggers currently active.
 *
 * @param[in] triggerIds  List of IDs of the triggers whose information is to
 *                        be retrieved. An empty list means information will be
 *                        retrieved on all active triggers.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowTriggersResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowTriggersResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowTriggersResponse& showTriggers( const std::vector<std::string>& triggerIds,
                                    const std::map<std::string, std::string>& options,
                                    ShowTriggersResponse& response_ ) const;

/**
 * Retrieves information for the specified data type ID or type label. For all
 * data types that match the input criteria, the database returns the type ID,
 * the type schema, the label (if available), and the type's column properties.
 *
 * @param[in] request_  @ref gpudb::ShowTypesRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowTypesResponse "Response" object containing the
 *         result of the operation.
 */
ShowTypesResponse showTypes( const ShowTypesRequest& request_ ) const;

/**
 * Retrieves information for the specified data type ID or type label. For all
 * data types that match the input criteria, the database returns the type ID,
 * the type schema, the label (if available), and the type's column properties.
 *
 * @param[in] request_  @ref gpudb::ShowTypesRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowTypesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowTypesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowTypesResponse& showTypes( const ShowTypesRequest& request_,
                              ShowTypesResponse& response_ ) const;

/**
 * Retrieves information for the specified data type ID or type label. For all
 * data types that match the input criteria, the database returns the type ID,
 * the type schema, the label (if available), and the type's column properties.
 *
 * @param[in] typeId  Type Id returned in response to a call to @ref
 *                    createType(const std::string&, const std::string&, const std::map<std::string, std::vector<std::string> >&, const std::map<std::string, std::string>&) const
 *                    "createType".
 * @param[in] label  Option string that was supplied by user in a call to @ref
 *                   createType(const std::string&, const std::string&, const std::map<std::string, std::vector<std::string> >&, const std::map<std::string, std::string>&) const
 *                   "createType".
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_types_no_join_types
 *                             "show_types_no_join_types": When set to 'true',
 *                             no join types will be included.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_types_true
 *                                     "show_types_true"
 *                                 <li>@ref gpudb::show_types_false
 *                                     "show_types_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_types_false "show_types_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowTypesResponse "Response" object containing the
 *         result of the operation.
 */
ShowTypesResponse showTypes( const std::string& typeId,
                             const std::string& label,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves information for the specified data type ID or type label. For all
 * data types that match the input criteria, the database returns the type ID,
 * the type schema, the label (if available), and the type's column properties.
 *
 * @param[in] typeId  Type Id returned in response to a call to @ref
 *                    createType(const std::string&, const std::string&, const std::map<std::string, std::vector<std::string> >&, const std::map<std::string, std::string>&) const
 *                    "createType".
 * @param[in] label  Option string that was supplied by user in a call to @ref
 *                   createType(const std::string&, const std::string&, const std::map<std::string, std::vector<std::string> >&, const std::map<std::string, std::string>&) const
 *                   "createType".
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_types_no_join_types
 *                             "show_types_no_join_types": When set to 'true',
 *                             no join types will be included.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_types_true
 *                                     "show_types_true"
 *                                 <li>@ref gpudb::show_types_false
 *                                     "show_types_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::show_types_false "show_types_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowTypesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowTypesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowTypesResponse& showTypes( const std::string& typeId,
                              const std::string& label,
                              const std::map<std::string, std::string>& options,
                              ShowTypesResponse& response_ ) const;

/**
 * Retrieves information about rendered videos.
 *
 * @param[in] request_  @ref gpudb::ShowVideoRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::ShowVideoResponse "Response" object containing the
 *         result of the operation.
 */
ShowVideoResponse showVideo( const ShowVideoRequest& request_ ) const;

/**
 * Retrieves information about rendered videos.
 *
 * @param[in] request_  @ref gpudb::ShowVideoRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowVideoResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowVideoResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowVideoResponse& showVideo( const ShowVideoRequest& request_,
                              ShowVideoResponse& response_ ) const;

/**
 * Retrieves information about rendered videos.
 *
 * @param[in] paths  The fully-qualified <a href="../../../tools/kifs/"
 *                   target="_top">KiFS</a> paths for the videos to show. If
 *                   empty, shows all videos.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::ShowVideoResponse "Response" object containing the
 *         result of the operation.
 */
ShowVideoResponse showVideo( const std::vector<std::string>& paths,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves information about rendered videos.
 *
 * @param[in] paths  The fully-qualified <a href="../../../tools/kifs/"
 *                   target="_top">KiFS</a> paths for the videos to show. If
 *                   empty, shows all videos.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowVideoResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowVideoResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
ShowVideoResponse& showVideo( const std::vector<std::string>& paths,
                              const std::map<std::string, std::string>& options,
                              ShowVideoResponse& response_ ) const;

/**
 * Requests table wal properties.
 * Returns information about the requested table wal entries.
 *
 * @param[in] request_  @ref gpudb::ShowWalRequest "Request" object containing
 *                      the parameters for the operation.
 *
 * @return @ref gpudb::ShowWalResponse "Response" object containing the result
 *         of the operation.
 */
ShowWalResponse showWal( const ShowWalRequest& request_ ) const;

/**
 * Requests table wal properties.
 * Returns information about the requested table wal entries.
 *
 * @param[in] request_  @ref gpudb::ShowWalRequest "Request" object containing
 *                      the parameters for the operation.
 * @param[out] response_  @ref gpudb::ShowWalResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowWalResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
ShowWalResponse& showWal( const ShowWalRequest& request_,
                          ShowWalResponse& response_ ) const;

/**
 * Requests table wal properties.
 * Returns information about the requested table wal entries.
 *
 * @param[in] tableNames  List of tables to query. An asterisk returns all
 *                        tables.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_wal_show_settings
 *                             "show_wal_show_settings": If @ref
 *                             gpudb::show_wal_true "true" include a map of the
 *                             wal settings for the requested tables.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_wal_true
 *                                     "show_wal_true"
 *                                 <li>@ref gpudb::show_wal_false
 *                                     "show_wal_false"
 *                             </ul>
 *                             The default value is @ref gpudb::show_wal_true
 *                             "show_wal_true".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::ShowWalResponse "Response" object containing the result
 *         of the operation.
 */
ShowWalResponse showWal( const std::vector<std::string>& tableNames,
                         const std::map<std::string, std::string>& options ) const;

/**
 * Requests table wal properties.
 * Returns information about the requested table wal entries.
 *
 * @param[in] tableNames  List of tables to query. An asterisk returns all
 *                        tables.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::show_wal_show_settings
 *                             "show_wal_show_settings": If @ref
 *                             gpudb::show_wal_true "true" include a map of the
 *                             wal settings for the requested tables.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::show_wal_true
 *                                     "show_wal_true"
 *                                 <li>@ref gpudb::show_wal_false
 *                                     "show_wal_false"
 *                             </ul>
 *                             The default value is @ref gpudb::show_wal_true
 *                             "show_wal_true".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::ShowWalResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::ShowWalResponse "Response" object containing the result
 *         of the operation (initially passed in by reference).
 */
ShowWalResponse& showWal( const std::vector<std::string>& tableNames,
                          const std::map<std::string, std::string>& options,
                          ShowWalResponse& response_ ) const;

/**
 * Solves an existing graph for a type of problem (e.g., shortest path, page
 * rank, travelling salesman, etc.) using source nodes, destination nodes, and
 * additional, optional weights and restrictions.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph---solve"
 * target="_top">/solve/graph examples</a> before using this endpoint.
 *
 * @param[in] request_  @ref gpudb::SolveGraphRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::SolveGraphResponse "Response" object containing the
 *         result of the operation.
 */
SolveGraphResponse solveGraph( const SolveGraphRequest& request_ ) const;

/**
 * Solves an existing graph for a type of problem (e.g., shortest path, page
 * rank, travelling salesman, etc.) using source nodes, destination nodes, and
 * additional, optional weights and restrictions.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph---solve"
 * target="_top">/solve/graph examples</a> before using this endpoint.
 *
 * @param[in] request_  @ref gpudb::SolveGraphRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::SolveGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::SolveGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
SolveGraphResponse& solveGraph( const SolveGraphRequest& request_,
                                SolveGraphResponse& response_ ) const;

/**
 * Solves an existing graph for a type of problem (e.g., shortest path, page
 * rank, travelling salesman, etc.) using source nodes, destination nodes, and
 * additional, optional weights and restrictions.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph---solve"
 * target="_top">/solve/graph examples</a> before using this endpoint.
 *
 * @param[in] graphName  Name of the graph resource to solve.
 * @param[in] weightsOnEdges  Additional weights to apply to the edges of an
 *                            existing graph. Weights must be specified using
 *                            <a
 *                            href="../../../graph_solver/network_graph_solver/#identifiers"
 *                            target="_top">identifiers</a>; identifiers are
 *                            grouped as <a
 *                            href="../../../graph_solver/network_graph_solver/#id-combos"
 *                            target="_top">combinations</a>. Identifiers can
 *                            be used with existing column names, e.g.,
 *                            'table.column AS WEIGHTS_EDGE_ID', expressions,
 *                            e.g., 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED',
 *                            or constant values, e.g., '{4, 15, 2} AS
 *                            WEIGHTS_VALUESPECIFIED'. Any provided weights
 *                            will be added (in the case of
 *                            'WEIGHTS_VALUESPECIFIED') to or multiplied with
 *                            (in the case of 'WEIGHTS_FACTORSPECIFIED') the
 *                            existing weight(s). If using constant values in
 *                            an identifier combination, the number of values
 *                            specified must match across the combination. The
 *                            default value is an empty vector.
 * @param[in] restrictions  Additional restrictions to apply to the nodes/edges
 *                          of an existing graph. Restrictions must be
 *                          specified using <a
 *                          href="../../../graph_solver/network_graph_solver/#identifiers"
 *                          target="_top">identifiers</a>; identifiers are
 *                          grouped as <a
 *                          href="../../../graph_solver/network_graph_solver/#id-combos"
 *                          target="_top">combinations</a>. Identifiers can be
 *                          used with existing column names, e.g.,
 *                          'table.column AS RESTRICTIONS_EDGE_ID',
 *                          expressions, e.g., 'column/2 AS
 *                          RESTRICTIONS_VALUECOMPARED', or constant values,
 *                          e.g., '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'.
 *                          If using constant values in an identifier
 *                          combination, the number of values specified must
 *                          match across the combination. If
 *                          remove_previous_restrictions option is set to true,
 *                          any provided restrictions will replace the existing
 *                          restrictions. Otherwise, any provided restrictions
 *                          will be added (in the case of
 *                          'RESTRICTIONS_VALUECOMPARED') to or replaced (in
 *                          the case of 'RESTRICTIONS_ONOFFCOMPARED'). The
 *                          default value is an empty vector.
 * @param[in] solverType  The type of solver to use for the graph.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::solve_graph_SHORTEST_PATH
 *                                "solve_graph_SHORTEST_PATH": Solves for the
 *                                optimal (shortest) path based on weights and
 *                                restrictions from one source to destinations
 *                                nodes. Also known as the Dijkstra solver.
 *                            <li>@ref gpudb::solve_graph_PAGE_RANK
 *                                "solve_graph_PAGE_RANK": Solves for the
 *                                probability of each destination node being
 *                                visited based on the links of the graph
 *                                topology. Weights are not required to use
 *                                this solver.
 *                            <li>@ref gpudb::solve_graph_PROBABILITY_RANK
 *                                "solve_graph_PROBABILITY_RANK": Solves for
 *                                the transitional probability (Hidden Markov)
 *                                for each node based on the weights
 *                                (probability assigned over given edges).
 *                            <li>@ref gpudb::solve_graph_CENTRALITY
 *                                "solve_graph_CENTRALITY": Solves for the
 *                                degree of a node to depict how many pairs of
 *                                individuals that would have to go through the
 *                                node to reach one another in the minimum
 *                                number of hops. Also known as betweenness.
 *                            <li>@ref gpudb::solve_graph_MULTIPLE_ROUTING
 *                                "solve_graph_MULTIPLE_ROUTING": Solves for
 *                                finding the minimum cost cumulative path for
 *                                a round-trip starting from the given source
 *                                and visiting each given destination node once
 *                                then returning to the source. Also known as
 *                                the travelling salesman problem.
 *                            <li>@ref gpudb::solve_graph_INVERSE_SHORTEST_PATH
 *                                "solve_graph_INVERSE_SHORTEST_PATH": Solves
 *                                for finding the optimal path cost for each
 *                                destination node to route to the source node.
 *                                Also known as inverse Dijkstra or the service
 *                                man routing problem.
 *                            <li>@ref gpudb::solve_graph_BACKHAUL_ROUTING
 *                                "solve_graph_BACKHAUL_ROUTING": Solves for
 *                                optimal routes that connect remote asset
 *                                nodes to the fixed (backbone) asset nodes.
 *                            <li>@ref gpudb::solve_graph_ALLPATHS
 *                                "solve_graph_ALLPATHS": Solves for paths that
 *                                would give costs between max and min solution
 *                                radia - Make sure to limit by the
 *                                'max_solution_targets' option. Min cost
 *                                shoudl be &gt;= shortest_path cost.
 *                            <li>@ref gpudb::solve_graph_STATS_ALL
 *                                "solve_graph_STATS_ALL": Solves for graph
 *                                statistics such as graph diameter, longest
 *                                pairs, vertex valences, topology numbers,
 *                                average and max cluster sizes, etc.
 *                            <li>@ref gpudb::solve_graph_CLOSENESS
 *                                "solve_graph_CLOSENESS": Solves for the
 *                                centrality closeness score per node as the
 *                                sum of the inverse shortest path costs to all
 *                                nodes in the graph.
 *                        </ul>
 *                        The default value is @ref
 *                        gpudb::solve_graph_SHORTEST_PATH
 *                        "solve_graph_SHORTEST_PATH".
 * @param[in] sourceNodes  It can be one of the nodal identifiers - e.g:
 *                         'NODE_WKTPOINT' for source nodes. For @ref
 *                         gpudb::solve_graph_BACKHAUL_ROUTING
 *                         "BACKHAUL_ROUTING", this list depicts the fixed
 *                         assets. The default value is an empty vector.
 * @param[in] destinationNodes  It can be one of the nodal identifiers - e.g:
 *                              'NODE_WKTPOINT' for destination (target) nodes.
 *                              For @ref gpudb::solve_graph_BACKHAUL_ROUTING
 *                              "BACKHAUL_ROUTING", this list depicts the
 *                              remote assets. The default value is an empty
 *                              vector.
 * @param[in] solutionTable  Name of the table to store the solution, in
 *                           [schema_name.]table_name format, using standard <a
 *                           href="../../../concepts/tables/#table-name-resolution"
 *                           target="_top">name resolution rules</a>. The
 *                           default value is 'graph_solutions'.
 * @param[in] options  Additional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::solve_graph_max_solution_radius
 *                             "solve_graph_max_solution_radius": For @ref
 *                             gpudb::solve_graph_ALLPATHS "ALLPATHS", @ref
 *                             gpudb::solve_graph_SHORTEST_PATH "SHORTEST_PATH"
 *                             and @ref
 *                             gpudb::solve_graph_INVERSE_SHORTEST_PATH
 *                             "INVERSE_SHORTEST_PATH" solvers only. Sets the
 *                             maximum solution cost radius, which ignores the
 *                             @a destinationNodes list and instead outputs the
 *                             nodes within the radius sorted by ascending
 *                             cost. If set to '0.0', the setting is ignored.
 *                             The default value is '0.0'.
 *                         <li>@ref gpudb::solve_graph_min_solution_radius
 *                             "solve_graph_min_solution_radius": For @ref
 *                             gpudb::solve_graph_ALLPATHS "ALLPATHS", @ref
 *                             gpudb::solve_graph_SHORTEST_PATH "SHORTEST_PATH"
 *                             and @ref
 *                             gpudb::solve_graph_INVERSE_SHORTEST_PATH
 *                             "INVERSE_SHORTEST_PATH" solvers only. Applicable
 *                             only when @ref
 *                             gpudb::solve_graph_max_solution_radius
 *                             "max_solution_radius" is set. Sets the minimum
 *                             solution cost radius, which ignores the @a
 *                             destinationNodes list and instead outputs the
 *                             nodes within the radius sorted by ascending
 *                             cost. If set to '0.0', the setting is ignored.
 *                             The default value is '0.0'.
 *                         <li>@ref gpudb::solve_graph_max_solution_targets
 *                             "solve_graph_max_solution_targets": For @ref
 *                             gpudb::solve_graph_ALLPATHS "ALLPATHS", @ref
 *                             gpudb::solve_graph_SHORTEST_PATH "SHORTEST_PATH"
 *                             and @ref
 *                             gpudb::solve_graph_INVERSE_SHORTEST_PATH
 *                             "INVERSE_SHORTEST_PATH" solvers only. Sets the
 *                             maximum number of solution targets, which
 *                             ignores the @a destinationNodes list and instead
 *                             outputs no more than n number of nodes sorted by
 *                             ascending cost where n is equal to the setting
 *                             value. If set to 0, the setting is ignored. The
 *                             default value is '1000'.
 *                         <li>@ref gpudb::solve_graph_uniform_weights
 *                             "solve_graph_uniform_weights": When specified,
 *                             assigns the given value to all the edges in the
 *                             graph. Note that weights provided in @a
 *                             weightsOnEdges will override this value.
 *                         <li>@ref gpudb::solve_graph_left_turn_penalty
 *                             "solve_graph_left_turn_penalty": This will add
 *                             an additonal weight over the edges labelled as
 *                             'left turn' if the 'add_turn' option parameter
 *                             of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::solve_graph_right_turn_penalty
 *                             "solve_graph_right_turn_penalty": This will add
 *                             an additonal weight over the edges labelled as'
 *                             right turn' if the 'add_turn' option parameter
 *                             of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::solve_graph_intersection_penalty
 *                             "solve_graph_intersection_penalty": This will
 *                             add an additonal weight over the edges labelled
 *                             as 'intersection' if the 'add_turn' option
 *                             parameter of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::solve_graph_sharp_turn_penalty
 *                             "solve_graph_sharp_turn_penalty": This will add
 *                             an additonal weight over the edges labelled as
 *                             'sharp turn' or 'u-turn' if the 'add_turn'
 *                             option parameter of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::solve_graph_num_best_paths
 *                             "solve_graph_num_best_paths": For @ref
 *                             gpudb::solve_graph_MULTIPLE_ROUTING
 *                             "MULTIPLE_ROUTING" solvers only; sets the number
 *                             of shortest paths computed from each node. This
 *                             is the heuristic criterion. Default value of
 *                             zero allows the number to be computed
 *                             automatically by the solver. The user may want
 *                             to override this parameter to speed-up the
 *                             solver. The default value is '0'.
 *                         <li>@ref gpudb::solve_graph_max_num_combinations
 *                             "solve_graph_max_num_combinations": For @ref
 *                             gpudb::solve_graph_MULTIPLE_ROUTING
 *                             "MULTIPLE_ROUTING" solvers only; sets the cap on
 *                             the combinatorial sequences generated. If the
 *                             default value of two millions is overridden to a
 *                             lesser value, it can potentially speed up the
 *                             solver. The default value is '2000000'.
 *                         <li>@ref gpudb::solve_graph_output_edge_path
 *                             "solve_graph_output_edge_path": If true then
 *                             concatenated edge ids will be added as the EDGE
 *                             path column of the solution table for each
 *                             source and target pair in shortest path solves.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::solve_graph_true
 *                                     "solve_graph_true"
 *                                 <li>@ref gpudb::solve_graph_false
 *                                     "solve_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::solve_graph_false "solve_graph_false".
 *                         <li>@ref gpudb::solve_graph_output_wkt_path
 *                             "solve_graph_output_wkt_path": If true then
 *                             concatenated wkt line segments will be added as
 *                             the Wktroute column of the solution table for
 *                             each source and target pair in shortest path
 *                             solves.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::solve_graph_true
 *                                     "solve_graph_true"
 *                                 <li>@ref gpudb::solve_graph_false
 *                                     "solve_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::solve_graph_true "solve_graph_true".
 *                         <li>@ref gpudb::solve_graph_server_id
 *                             "solve_graph_server_id": Indicates which graph
 *                             server(s) to send the request to. Default is to
 *                             send to the server, amongst those containing the
 *                             corresponding graph, that has the most
 *                             computational bandwidth. For SHORTEST_PATH
 *                             solver type, the input is split amongst the
 *                             server containing the corresponding graph.
 *                         <li>@ref gpudb::solve_graph_convergence_limit
 *                             "solve_graph_convergence_limit": For @ref
 *                             gpudb::solve_graph_PAGE_RANK "PAGE_RANK" solvers
 *                             only; Maximum percent relative threshold on the
 *                             pagerank scores of each node between consecutive
 *                             iterations to satisfy convergence. Default value
 *                             is 1 (one) percent. The default value is '1.0'.
 *                         <li>@ref gpudb::solve_graph_max_iterations
 *                             "solve_graph_max_iterations": For @ref
 *                             gpudb::solve_graph_PAGE_RANK "PAGE_RANK" solvers
 *                             only; Maximum number of pagerank iterations for
 *                             satisfying convergence. Default value is 100.
 *                             The default value is '100'.
 *                         <li>@ref gpudb::solve_graph_max_runs
 *                             "solve_graph_max_runs": For all @ref
 *                             gpudb::solve_graph_CENTRALITY "CENTRALITY"
 *                             solvers only; Sets the maximum number of
 *                             shortest path runs; maximum possible value is
 *                             the number of nodes in the graph. Default value
 *                             of 0 enables this value to be auto computed by
 *                             the solver. The default value is '0'.
 *                         <li>@ref gpudb::solve_graph_output_clusters
 *                             "solve_graph_output_clusters": For @ref
 *                             gpudb::solve_graph_STATS_ALL "STATS_ALL" solvers
 *                             only; the cluster index for each node will be
 *                             inserted as an additional column in the output.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::solve_graph_true
 *                                     "solve_graph_true": An additional column
 *                                     'CLUSTER' will be added for each node
 *                                 <li>@ref gpudb::solve_graph_false
 *                                     "solve_graph_false": No extra cluster
 *                                     info per node will be available in the
 *                                     output
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::solve_graph_false "solve_graph_false".
 *                         <li>@ref gpudb::solve_graph_solve_heuristic
 *                             "solve_graph_solve_heuristic": Specify heuristic
 *                             search criterion only for the geo graphs and
 *                             shortest path solves towards a single target.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::solve_graph_astar
 *                                     "solve_graph_astar": Employs A-STAR
 *                                     heuristics to speed up the shortest path
 *                                     traversal
 *                                 <li>@ref gpudb::solve_graph_none
 *                                     "solve_graph_none": No heuristics are
 *                                     applied
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::solve_graph_none "solve_graph_none".
 *                         <li>@ref gpudb::solve_graph_astar_radius
 *                             "solve_graph_astar_radius": For path solvers
 *                             only when 'solve_heuristic' option is 'astar'.
 *                             The shortest path traversal front includes nodes
 *                             only within this radius (kilometers) as it moves
 *                             towards the target location. The default value
 *                             is '70'.
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::SolveGraphResponse "Response" object containing the
 *         result of the operation.
 */
SolveGraphResponse solveGraph( const std::string& graphName,
                               const std::vector<std::string>& weightsOnEdges,
                               const std::vector<std::string>& restrictions,
                               const std::string& solverType,
                               const std::vector<std::string>& sourceNodes,
                               const std::vector<std::string>& destinationNodes,
                               const std::string& solutionTable,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Solves an existing graph for a type of problem (e.g., shortest path, page
 * rank, travelling salesman, etc.) using source nodes, destination nodes, and
 * additional, optional weights and restrictions.
 *
 * IMPORTANT: It's highly recommended that you review the <a
 * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs &
 * Solvers</a> concepts documentation, the <a
 * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
 * Tutorial</a>, and/or some <a href="../../../guide-tags/graph---solve"
 * target="_top">/solve/graph examples</a> before using this endpoint.
 *
 * @param[in] graphName  Name of the graph resource to solve.
 * @param[in] weightsOnEdges  Additional weights to apply to the edges of an
 *                            existing graph. Weights must be specified using
 *                            <a
 *                            href="../../../graph_solver/network_graph_solver/#identifiers"
 *                            target="_top">identifiers</a>; identifiers are
 *                            grouped as <a
 *                            href="../../../graph_solver/network_graph_solver/#id-combos"
 *                            target="_top">combinations</a>. Identifiers can
 *                            be used with existing column names, e.g.,
 *                            'table.column AS WEIGHTS_EDGE_ID', expressions,
 *                            e.g., 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED',
 *                            or constant values, e.g., '{4, 15, 2} AS
 *                            WEIGHTS_VALUESPECIFIED'. Any provided weights
 *                            will be added (in the case of
 *                            'WEIGHTS_VALUESPECIFIED') to or multiplied with
 *                            (in the case of 'WEIGHTS_FACTORSPECIFIED') the
 *                            existing weight(s). If using constant values in
 *                            an identifier combination, the number of values
 *                            specified must match across the combination. The
 *                            default value is an empty vector.
 * @param[in] restrictions  Additional restrictions to apply to the nodes/edges
 *                          of an existing graph. Restrictions must be
 *                          specified using <a
 *                          href="../../../graph_solver/network_graph_solver/#identifiers"
 *                          target="_top">identifiers</a>; identifiers are
 *                          grouped as <a
 *                          href="../../../graph_solver/network_graph_solver/#id-combos"
 *                          target="_top">combinations</a>. Identifiers can be
 *                          used with existing column names, e.g.,
 *                          'table.column AS RESTRICTIONS_EDGE_ID',
 *                          expressions, e.g., 'column/2 AS
 *                          RESTRICTIONS_VALUECOMPARED', or constant values,
 *                          e.g., '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'.
 *                          If using constant values in an identifier
 *                          combination, the number of values specified must
 *                          match across the combination. If
 *                          remove_previous_restrictions option is set to true,
 *                          any provided restrictions will replace the existing
 *                          restrictions. Otherwise, any provided restrictions
 *                          will be added (in the case of
 *                          'RESTRICTIONS_VALUECOMPARED') to or replaced (in
 *                          the case of 'RESTRICTIONS_ONOFFCOMPARED'). The
 *                          default value is an empty vector.
 * @param[in] solverType  The type of solver to use for the graph.
 *                        Supported values:
 *                        <ul>
 *                            <li>@ref gpudb::solve_graph_SHORTEST_PATH
 *                                "solve_graph_SHORTEST_PATH": Solves for the
 *                                optimal (shortest) path based on weights and
 *                                restrictions from one source to destinations
 *                                nodes. Also known as the Dijkstra solver.
 *                            <li>@ref gpudb::solve_graph_PAGE_RANK
 *                                "solve_graph_PAGE_RANK": Solves for the
 *                                probability of each destination node being
 *                                visited based on the links of the graph
 *                                topology. Weights are not required to use
 *                                this solver.
 *                            <li>@ref gpudb::solve_graph_PROBABILITY_RANK
 *                                "solve_graph_PROBABILITY_RANK": Solves for
 *                                the transitional probability (Hidden Markov)
 *                                for each node based on the weights
 *                                (probability assigned over given edges).
 *                            <li>@ref gpudb::solve_graph_CENTRALITY
 *                                "solve_graph_CENTRALITY": Solves for the
 *                                degree of a node to depict how many pairs of
 *                                individuals that would have to go through the
 *                                node to reach one another in the minimum
 *                                number of hops. Also known as betweenness.
 *                            <li>@ref gpudb::solve_graph_MULTIPLE_ROUTING
 *                                "solve_graph_MULTIPLE_ROUTING": Solves for
 *                                finding the minimum cost cumulative path for
 *                                a round-trip starting from the given source
 *                                and visiting each given destination node once
 *                                then returning to the source. Also known as
 *                                the travelling salesman problem.
 *                            <li>@ref gpudb::solve_graph_INVERSE_SHORTEST_PATH
 *                                "solve_graph_INVERSE_SHORTEST_PATH": Solves
 *                                for finding the optimal path cost for each
 *                                destination node to route to the source node.
 *                                Also known as inverse Dijkstra or the service
 *                                man routing problem.
 *                            <li>@ref gpudb::solve_graph_BACKHAUL_ROUTING
 *                                "solve_graph_BACKHAUL_ROUTING": Solves for
 *                                optimal routes that connect remote asset
 *                                nodes to the fixed (backbone) asset nodes.
 *                            <li>@ref gpudb::solve_graph_ALLPATHS
 *                                "solve_graph_ALLPATHS": Solves for paths that
 *                                would give costs between max and min solution
 *                                radia - Make sure to limit by the
 *                                'max_solution_targets' option. Min cost
 *                                shoudl be &gt;= shortest_path cost.
 *                            <li>@ref gpudb::solve_graph_STATS_ALL
 *                                "solve_graph_STATS_ALL": Solves for graph
 *                                statistics such as graph diameter, longest
 *                                pairs, vertex valences, topology numbers,
 *                                average and max cluster sizes, etc.
 *                            <li>@ref gpudb::solve_graph_CLOSENESS
 *                                "solve_graph_CLOSENESS": Solves for the
 *                                centrality closeness score per node as the
 *                                sum of the inverse shortest path costs to all
 *                                nodes in the graph.
 *                        </ul>
 *                        The default value is @ref
 *                        gpudb::solve_graph_SHORTEST_PATH
 *                        "solve_graph_SHORTEST_PATH".
 * @param[in] sourceNodes  It can be one of the nodal identifiers - e.g:
 *                         'NODE_WKTPOINT' for source nodes. For @ref
 *                         gpudb::solve_graph_BACKHAUL_ROUTING
 *                         "BACKHAUL_ROUTING", this list depicts the fixed
 *                         assets. The default value is an empty vector.
 * @param[in] destinationNodes  It can be one of the nodal identifiers - e.g:
 *                              'NODE_WKTPOINT' for destination (target) nodes.
 *                              For @ref gpudb::solve_graph_BACKHAUL_ROUTING
 *                              "BACKHAUL_ROUTING", this list depicts the
 *                              remote assets. The default value is an empty
 *                              vector.
 * @param[in] solutionTable  Name of the table to store the solution, in
 *                           [schema_name.]table_name format, using standard <a
 *                           href="../../../concepts/tables/#table-name-resolution"
 *                           target="_top">name resolution rules</a>. The
 *                           default value is 'graph_solutions'.
 * @param[in] options  Additional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::solve_graph_max_solution_radius
 *                             "solve_graph_max_solution_radius": For @ref
 *                             gpudb::solve_graph_ALLPATHS "ALLPATHS", @ref
 *                             gpudb::solve_graph_SHORTEST_PATH "SHORTEST_PATH"
 *                             and @ref
 *                             gpudb::solve_graph_INVERSE_SHORTEST_PATH
 *                             "INVERSE_SHORTEST_PATH" solvers only. Sets the
 *                             maximum solution cost radius, which ignores the
 *                             @a destinationNodes list and instead outputs the
 *                             nodes within the radius sorted by ascending
 *                             cost. If set to '0.0', the setting is ignored.
 *                             The default value is '0.0'.
 *                         <li>@ref gpudb::solve_graph_min_solution_radius
 *                             "solve_graph_min_solution_radius": For @ref
 *                             gpudb::solve_graph_ALLPATHS "ALLPATHS", @ref
 *                             gpudb::solve_graph_SHORTEST_PATH "SHORTEST_PATH"
 *                             and @ref
 *                             gpudb::solve_graph_INVERSE_SHORTEST_PATH
 *                             "INVERSE_SHORTEST_PATH" solvers only. Applicable
 *                             only when @ref
 *                             gpudb::solve_graph_max_solution_radius
 *                             "max_solution_radius" is set. Sets the minimum
 *                             solution cost radius, which ignores the @a
 *                             destinationNodes list and instead outputs the
 *                             nodes within the radius sorted by ascending
 *                             cost. If set to '0.0', the setting is ignored.
 *                             The default value is '0.0'.
 *                         <li>@ref gpudb::solve_graph_max_solution_targets
 *                             "solve_graph_max_solution_targets": For @ref
 *                             gpudb::solve_graph_ALLPATHS "ALLPATHS", @ref
 *                             gpudb::solve_graph_SHORTEST_PATH "SHORTEST_PATH"
 *                             and @ref
 *                             gpudb::solve_graph_INVERSE_SHORTEST_PATH
 *                             "INVERSE_SHORTEST_PATH" solvers only. Sets the
 *                             maximum number of solution targets, which
 *                             ignores the @a destinationNodes list and instead
 *                             outputs no more than n number of nodes sorted by
 *                             ascending cost where n is equal to the setting
 *                             value. If set to 0, the setting is ignored. The
 *                             default value is '1000'.
 *                         <li>@ref gpudb::solve_graph_uniform_weights
 *                             "solve_graph_uniform_weights": When specified,
 *                             assigns the given value to all the edges in the
 *                             graph. Note that weights provided in @a
 *                             weightsOnEdges will override this value.
 *                         <li>@ref gpudb::solve_graph_left_turn_penalty
 *                             "solve_graph_left_turn_penalty": This will add
 *                             an additonal weight over the edges labelled as
 *                             'left turn' if the 'add_turn' option parameter
 *                             of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::solve_graph_right_turn_penalty
 *                             "solve_graph_right_turn_penalty": This will add
 *                             an additonal weight over the edges labelled as'
 *                             right turn' if the 'add_turn' option parameter
 *                             of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::solve_graph_intersection_penalty
 *                             "solve_graph_intersection_penalty": This will
 *                             add an additonal weight over the edges labelled
 *                             as 'intersection' if the 'add_turn' option
 *                             parameter of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::solve_graph_sharp_turn_penalty
 *                             "solve_graph_sharp_turn_penalty": This will add
 *                             an additonal weight over the edges labelled as
 *                             'sharp turn' or 'u-turn' if the 'add_turn'
 *                             option parameter of the @ref
 *                             createGraph(const std::string&, const bool, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 *                             "createGraph" was invoked at graph creation. The
 *                             default value is '0.0'.
 *                         <li>@ref gpudb::solve_graph_num_best_paths
 *                             "solve_graph_num_best_paths": For @ref
 *                             gpudb::solve_graph_MULTIPLE_ROUTING
 *                             "MULTIPLE_ROUTING" solvers only; sets the number
 *                             of shortest paths computed from each node. This
 *                             is the heuristic criterion. Default value of
 *                             zero allows the number to be computed
 *                             automatically by the solver. The user may want
 *                             to override this parameter to speed-up the
 *                             solver. The default value is '0'.
 *                         <li>@ref gpudb::solve_graph_max_num_combinations
 *                             "solve_graph_max_num_combinations": For @ref
 *                             gpudb::solve_graph_MULTIPLE_ROUTING
 *                             "MULTIPLE_ROUTING" solvers only; sets the cap on
 *                             the combinatorial sequences generated. If the
 *                             default value of two millions is overridden to a
 *                             lesser value, it can potentially speed up the
 *                             solver. The default value is '2000000'.
 *                         <li>@ref gpudb::solve_graph_output_edge_path
 *                             "solve_graph_output_edge_path": If true then
 *                             concatenated edge ids will be added as the EDGE
 *                             path column of the solution table for each
 *                             source and target pair in shortest path solves.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::solve_graph_true
 *                                     "solve_graph_true"
 *                                 <li>@ref gpudb::solve_graph_false
 *                                     "solve_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::solve_graph_false "solve_graph_false".
 *                         <li>@ref gpudb::solve_graph_output_wkt_path
 *                             "solve_graph_output_wkt_path": If true then
 *                             concatenated wkt line segments will be added as
 *                             the Wktroute column of the solution table for
 *                             each source and target pair in shortest path
 *                             solves.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::solve_graph_true
 *                                     "solve_graph_true"
 *                                 <li>@ref gpudb::solve_graph_false
 *                                     "solve_graph_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::solve_graph_true "solve_graph_true".
 *                         <li>@ref gpudb::solve_graph_server_id
 *                             "solve_graph_server_id": Indicates which graph
 *                             server(s) to send the request to. Default is to
 *                             send to the server, amongst those containing the
 *                             corresponding graph, that has the most
 *                             computational bandwidth. For SHORTEST_PATH
 *                             solver type, the input is split amongst the
 *                             server containing the corresponding graph.
 *                         <li>@ref gpudb::solve_graph_convergence_limit
 *                             "solve_graph_convergence_limit": For @ref
 *                             gpudb::solve_graph_PAGE_RANK "PAGE_RANK" solvers
 *                             only; Maximum percent relative threshold on the
 *                             pagerank scores of each node between consecutive
 *                             iterations to satisfy convergence. Default value
 *                             is 1 (one) percent. The default value is '1.0'.
 *                         <li>@ref gpudb::solve_graph_max_iterations
 *                             "solve_graph_max_iterations": For @ref
 *                             gpudb::solve_graph_PAGE_RANK "PAGE_RANK" solvers
 *                             only; Maximum number of pagerank iterations for
 *                             satisfying convergence. Default value is 100.
 *                             The default value is '100'.
 *                         <li>@ref gpudb::solve_graph_max_runs
 *                             "solve_graph_max_runs": For all @ref
 *                             gpudb::solve_graph_CENTRALITY "CENTRALITY"
 *                             solvers only; Sets the maximum number of
 *                             shortest path runs; maximum possible value is
 *                             the number of nodes in the graph. Default value
 *                             of 0 enables this value to be auto computed by
 *                             the solver. The default value is '0'.
 *                         <li>@ref gpudb::solve_graph_output_clusters
 *                             "solve_graph_output_clusters": For @ref
 *                             gpudb::solve_graph_STATS_ALL "STATS_ALL" solvers
 *                             only; the cluster index for each node will be
 *                             inserted as an additional column in the output.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::solve_graph_true
 *                                     "solve_graph_true": An additional column
 *                                     'CLUSTER' will be added for each node
 *                                 <li>@ref gpudb::solve_graph_false
 *                                     "solve_graph_false": No extra cluster
 *                                     info per node will be available in the
 *                                     output
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::solve_graph_false "solve_graph_false".
 *                         <li>@ref gpudb::solve_graph_solve_heuristic
 *                             "solve_graph_solve_heuristic": Specify heuristic
 *                             search criterion only for the geo graphs and
 *                             shortest path solves towards a single target.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::solve_graph_astar
 *                                     "solve_graph_astar": Employs A-STAR
 *                                     heuristics to speed up the shortest path
 *                                     traversal
 *                                 <li>@ref gpudb::solve_graph_none
 *                                     "solve_graph_none": No heuristics are
 *                                     applied
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::solve_graph_none "solve_graph_none".
 *                         <li>@ref gpudb::solve_graph_astar_radius
 *                             "solve_graph_astar_radius": For path solvers
 *                             only when 'solve_heuristic' option is 'astar'.
 *                             The shortest path traversal front includes nodes
 *                             only within this radius (kilometers) as it moves
 *                             towards the target location. The default value
 *                             is '70'.
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::SolveGraphResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::SolveGraphResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
SolveGraphResponse& solveGraph( const std::string& graphName,
                                const std::vector<std::string>& weightsOnEdges,
                                const std::vector<std::string>& restrictions,
                                const std::string& solverType,
                                const std::vector<std::string>& sourceNodes,
                                const std::vector<std::string>& destinationNodes,
                                const std::string& solutionTable,
                                const std::map<std::string, std::string>& options,
                                SolveGraphResponse& response_ ) const;

/**
 * Runs multiple predicate-based updates in a single call.  With the list of
 * given expressions, any matching record's column values will be updated as
 * provided in @ref gpudb::RawUpdateRecordsRequest::newValuesMaps
 * "newValuesMaps".  There is also an optional 'upsert' capability where if a
 * particular predicate doesn't match any existing record, then a new record
 * can be inserted.
 *
 * Note that this operation can only be run on an original table and not on a
 * result view.
 *
 * This operation can update primary key values.  By default only 'pure primary
 * key' predicates are allowed when updating primary key values. If the primary
 * key for a table is the column 'attr1', then the operation will only accept
 * predicates of the form: "attr1 == 'foo'" if the attr1 column is being
 * updated.  For a composite primary key (e.g.\ columns 'attr1' and 'attr2')
 * then this operation will only accept predicates of the form: "(attr1 ==
 * 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns must appear
 * in an equality predicate in the expressions.  Furthermore each 'pure primary
 * key' predicate must be unique within a given request.  These restrictions
 * can be removed by utilizing some available options through @ref
 * gpudb::RawUpdateRecordsRequest::options "options".
 *
 * The @ref gpudb::update_records_update_on_existing_pk "update_on_existing_pk"
 * option specifies the record primary key collision policy for tables with a
 * <a href="../../../concepts/tables/#primary-keys" target="_top">primary
 * key</a>, while @ref gpudb::update_records_ignore_existing_pk
 * "ignore_existing_pk" specifies the record primary key collision
 * error-suppression policy when those collisions result in the update being
 * rejected.  Both are ignored on tables with no primary key.
 *
 * @param[in] request_  @ref gpudb::RawUpdateRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::UpdateRecordsResponse "Response" object containing the
 *         result of the operation.
 */
UpdateRecordsResponse updateRecordsRaw( const RawUpdateRecordsRequest& request_ ) const;

/**
 * Runs multiple predicate-based updates in a single call.  With the list of
 * given expressions, any matching record's column values will be updated as
 * provided in @ref gpudb::RawUpdateRecordsRequest::newValuesMaps
 * "newValuesMaps".  There is also an optional 'upsert' capability where if a
 * particular predicate doesn't match any existing record, then a new record
 * can be inserted.
 *
 * Note that this operation can only be run on an original table and not on a
 * result view.
 *
 * This operation can update primary key values.  By default only 'pure primary
 * key' predicates are allowed when updating primary key values. If the primary
 * key for a table is the column 'attr1', then the operation will only accept
 * predicates of the form: "attr1 == 'foo'" if the attr1 column is being
 * updated.  For a composite primary key (e.g.\ columns 'attr1' and 'attr2')
 * then this operation will only accept predicates of the form: "(attr1 ==
 * 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns must appear
 * in an equality predicate in the expressions.  Furthermore each 'pure primary
 * key' predicate must be unique within a given request.  These restrictions
 * can be removed by utilizing some available options through @ref
 * gpudb::RawUpdateRecordsRequest::options "options".
 *
 * The @ref gpudb::update_records_update_on_existing_pk "update_on_existing_pk"
 * option specifies the record primary key collision policy for tables with a
 * <a href="../../../concepts/tables/#primary-keys" target="_top">primary
 * key</a>, while @ref gpudb::update_records_ignore_existing_pk
 * "ignore_existing_pk" specifies the record primary key collision
 * error-suppression policy when those collisions result in the update being
 * rejected.  Both are ignored on tables with no primary key.
 *
 * @param[in] request_  @ref gpudb::RawUpdateRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::UpdateRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::UpdateRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
UpdateRecordsResponse& updateRecordsRaw( const RawUpdateRecordsRequest& request_,
                                         UpdateRecordsResponse& response_ ) const;

/**
 * Runs multiple predicate-based updates in a single call.  With the list of
 * given expressions, any matching record's column values will be updated as
 * provided in @ref gpudb::UpdateRecordsRequest::newValuesMaps "newValuesMaps".
 * There is also an optional 'upsert' capability where if a particular
 * predicate doesn't match any existing record, then a new record can be
 * inserted.
 *
 * Note that this operation can only be run on an original table and not on a
 * result view.
 *
 * This operation can update primary key values.  By default only 'pure primary
 * key' predicates are allowed when updating primary key values. If the primary
 * key for a table is the column 'attr1', then the operation will only accept
 * predicates of the form: "attr1 == 'foo'" if the attr1 column is being
 * updated.  For a composite primary key (e.g.\ columns 'attr1' and 'attr2')
 * then this operation will only accept predicates of the form: "(attr1 ==
 * 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns must appear
 * in an equality predicate in the expressions.  Furthermore each 'pure primary
 * key' predicate must be unique within a given request.  These restrictions
 * can be removed by utilizing some available options through @ref
 * gpudb::UpdateRecordsRequest::options "options".
 *
 * The @ref gpudb::update_records_update_on_existing_pk "update_on_existing_pk"
 * option specifies the record primary key collision policy for tables with a
 * <a href="../../../concepts/tables/#primary-keys" target="_top">primary
 * key</a>, while @ref gpudb::update_records_ignore_existing_pk
 * "ignore_existing_pk" specifies the record primary key collision
 * error-suppression policy when those collisions result in the update being
 * rejected.  Both are ignored on tables with no primary key.
 *
 * @tparam TRequest  The type of object being added.
 *
 * @param[in] request_  @ref gpudb::UpdateRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::UpdateRecordsResponse "Response" object containing the
 *         result of the operation.
 */
template<typename TRequest>
UpdateRecordsResponse updateRecords( const UpdateRecordsRequest<TRequest>& request_ ) const
{
    RawUpdateRecordsRequest actualRequest_;
    actualRequest_.tableName = request_.tableName;
    actualRequest_.expressions = request_.expressions;
    actualRequest_.newValuesMaps = request_.newValuesMaps;
    avro::encode(actualRequest_.recordsToInsert, request_.data, this->m_threadCount, this->m_executor);
    actualRequest_.options = request_.options;
    UpdateRecordsResponse actualResponse_;
    submitRequest("/update/records", actualRequest_, actualResponse_, true);
    return actualResponse_;
}

/**
 * Runs multiple predicate-based updates in a single call.  With the list of
 * given expressions, any matching record's column values will be updated as
 * provided in @ref gpudb::UpdateRecordsRequest::newValuesMaps "newValuesMaps".
 * There is also an optional 'upsert' capability where if a particular
 * predicate doesn't match any existing record, then a new record can be
 * inserted.
 *
 * Note that this operation can only be run on an original table and not on a
 * result view.
 *
 * This operation can update primary key values.  By default only 'pure primary
 * key' predicates are allowed when updating primary key values. If the primary
 * key for a table is the column 'attr1', then the operation will only accept
 * predicates of the form: "attr1 == 'foo'" if the attr1 column is being
 * updated.  For a composite primary key (e.g.\ columns 'attr1' and 'attr2')
 * then this operation will only accept predicates of the form: "(attr1 ==
 * 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns must appear
 * in an equality predicate in the expressions.  Furthermore each 'pure primary
 * key' predicate must be unique within a given request.  These restrictions
 * can be removed by utilizing some available options through @ref
 * gpudb::UpdateRecordsRequest::options "options".
 *
 * The @ref gpudb::update_records_update_on_existing_pk "update_on_existing_pk"
 * option specifies the record primary key collision policy for tables with a
 * <a href="../../../concepts/tables/#primary-keys" target="_top">primary
 * key</a>, while @ref gpudb::update_records_ignore_existing_pk
 * "ignore_existing_pk" specifies the record primary key collision
 * error-suppression policy when those collisions result in the update being
 * rejected.  Both are ignored on tables with no primary key.
 *
 * @tparam TRequest  The type of object being added.
 *
 * @param[in] request_  @ref gpudb::UpdateRecordsRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::UpdateRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::UpdateRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
template<typename TRequest>
UpdateRecordsResponse& updateRecords( const UpdateRecordsRequest<TRequest>& request_,
                                      UpdateRecordsResponse& response_ ) const
{
    RawUpdateRecordsRequest actualRequest_;
    actualRequest_.tableName = request_.tableName;
    actualRequest_.expressions = request_.expressions;
    actualRequest_.newValuesMaps = request_.newValuesMaps;
    avro::encode(actualRequest_.recordsToInsert, request_.data, this->m_threadCount, this->m_executor);
    actualRequest_.options = request_.options;
    submitRequest("/update/records", actualRequest_, response_, true);
    return response_;
}

/**
 * Runs multiple predicate-based updates in a single call.  With the list of
 * given expressions, any matching record's column values will be updated as
 * provided in @a newValuesMaps.  There is also an optional 'upsert' capability
 * where if a particular predicate doesn't match any existing record, then a
 * new record can be inserted.
 *
 * Note that this operation can only be run on an original table and not on a
 * result view.
 *
 * This operation can update primary key values.  By default only 'pure primary
 * key' predicates are allowed when updating primary key values. If the primary
 * key for a table is the column 'attr1', then the operation will only accept
 * predicates of the form: "attr1 == 'foo'" if the attr1 column is being
 * updated.  For a composite primary key (e.g.\ columns 'attr1' and 'attr2')
 * then this operation will only accept predicates of the form: "(attr1 ==
 * 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns must appear
 * in an equality predicate in the expressions.  Furthermore each 'pure primary
 * key' predicate must be unique within a given request.  These restrictions
 * can be removed by utilizing some available options through @a options.
 *
 * The @ref gpudb::update_records_update_on_existing_pk "update_on_existing_pk"
 * option specifies the record primary key collision policy for tables with a
 * <a href="../../../concepts/tables/#primary-keys" target="_top">primary
 * key</a>, while @ref gpudb::update_records_ignore_existing_pk
 * "ignore_existing_pk" specifies the record primary key collision
 * error-suppression policy when those collisions result in the update being
 * rejected.  Both are ignored on tables with no primary key.
 *
 * @tparam TRequest  The type of object being added.
 *
 * @param[in] tableName  Name of table to be updated, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be a
 *                       currently existing table and not a view.
 * @param[in] expressions  A list of the actual predicates, one for each
 *                         update; format should follow the guidelines @ref
 *                         filter(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                         "here".
 * @param[in] newValuesMaps  List of new values for the matching records.  Each
 *                           element is a map with (key, value) pairs where the
 *                           keys are the names of the columns whose values are
 *                           to be updated; the values are the new values.  The
 *                           number of elements in the list should match the
 *                           length of @a expressions.
 * @param[in] data  An *optional* list of new binary-avro encoded records to
 *                  insert, one for each update.  If one of @a expressions does
 *                  not yield a matching record to be updated, then the
 *                  corresponding element from this list will be added to the
 *                  table. The default value is an empty vector.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::update_records_global_expression
 *                             "update_records_global_expression": An optional
 *                             global expression to reduce the search space of
 *                             the predicates listed in @a expressions. The
 *                             default value is ''.
 *                         <li>@ref gpudb::update_records_bypass_safety_checks
 *                             "update_records_bypass_safety_checks": When set
 *                             to @ref gpudb::update_records_true "true", all
 *                             predicates are available for primary key
 *                             updates.  Keep in mind that it is possible to
 *                             destroy data in this case, since a single
 *                             predicate may match multiple objects
 *                             (potentially all of records of a table), and
 *                             then updating all of those records to have the
 *                             same primary key will, due to the primary key
 *                             uniqueness constraints, effectively delete all
 *                             but one of those updated records.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::update_records_true
 *                                     "update_records_true"
 *                                 <li>@ref gpudb::update_records_false
 *                                     "update_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::update_records_false
 *                             "update_records_false".
 *                         <li>@ref gpudb::update_records_update_on_existing_pk
 *                             "update_records_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             updating a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>.  There are two
 *                             ways that a record collision can occur.  The
 *                             first is an "update collision", which happens
 *                             when the update changes the value of the updated
 *                             record's primary key, and that new primary key
 *                             already exists as the primary key of another
 *                             record in the table.  The second is an "insert
 *                             collision", which occurs when a given filter in
 *                             @a expressions finds no records to update, and
 *                             the alternate insert record given in @a data (or
 *                             @a recordsToInsertStr) contains a primary key
 *                             matching that of an existing record in the
 *                             table.  If @ref
 *                             gpudb::update_records_update_on_existing_pk
 *                             "update_on_existing_pk" is set to @ref
 *                             gpudb::update_records_true "true", "update
 *                             collisions" will result in the existing record
 *                             collided into being removed and the record
 *                             updated with values specified in @a
 *                             newValuesMaps taking its place; "insert
 *                             collisions" will result in the collided-into
 *                             record being updated with the values in @a
 *                             data/@a recordsToInsertStr (if given).  If set
 *                             to @ref gpudb::update_records_false "false", the
 *                             existing collided-into record will remain
 *                             unchanged, while the update will be rejected and
 *                             the error handled as determined by @ref
 *                             gpudb::update_records_ignore_existing_pk
 *                             "ignore_existing_pk".  If the specified table
 *                             does not have a primary key, then this option
 *                             has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::update_records_true
 *                                     "update_records_true": Overwrite the
 *                                     collided-into record when updating a
 *                                     record's primary key or inserting an
 *                                     alternate record causes a primary key
 *                                     collision between the record being
 *                                     updated/inserted and another existing
 *                                     record in the table
 *                                 <li>@ref gpudb::update_records_false
 *                                     "update_records_false": Reject updates
 *                                     which cause primary key collisions
 *                                     between the record being
 *                                     updated/inserted and an existing record
 *                                     in the table
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::update_records_false
 *                             "update_records_false".
 *                         <li>@ref gpudb::update_records_ignore_existing_pk
 *                             "update_records_ignore_existing_pk": Specifies
 *                             the record collision error-suppression policy
 *                             for updating a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             primary key record collisions are rejected (@ref
 *                             gpudb::update_records_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::update_records_false "false").  If set to
 *                             @ref gpudb::update_records_true "true", any
 *                             record update that is rejected for resulting in
 *                             a primary key collision with an existing table
 *                             record will be ignored with no error generated.
 *                             If @ref gpudb::update_records_false "false", the
 *                             rejection of any update for resulting in a
 *                             primary key collision will cause an error to be
 *                             reported.  If the specified table does not have
 *                             a primary key or if @ref
 *                             gpudb::update_records_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::update_records_true "true", then this
 *                             option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::update_records_true
 *                                     "update_records_true": Ignore updates
 *                                     that result in primary key collisions
 *                                     with existing records
 *                                 <li>@ref gpudb::update_records_false
 *                                     "update_records_false": Treat as errors
 *                                     any updates that result in primary key
 *                                     collisions with existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::update_records_false
 *                             "update_records_false".
 *                         <li>@ref gpudb::update_records_update_partition
 *                             "update_records_update_partition": Force
 *                             qualifying records to be deleted and reinserted
 *                             so their partition membership will be
 *                             reevaluated.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::update_records_true
 *                                     "update_records_true"
 *                                 <li>@ref gpudb::update_records_false
 *                                     "update_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::update_records_false
 *                             "update_records_false".
 *                         <li>@ref gpudb::update_records_truncate_strings
 *                             "update_records_truncate_strings": If set to
 *                             @ref gpudb::update_records_true "true", any
 *                             strings which are too long for their charN
 *                             string fields will be truncated to fit.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::update_records_true
 *                                     "update_records_true"
 *                                 <li>@ref gpudb::update_records_false
 *                                     "update_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::update_records_false
 *                             "update_records_false".
 *                         <li>@ref
 *                             gpudb::update_records_use_expressions_in_new_values_maps
 *                             "update_records_use_expressions_in_new_values_maps":
 *                             When set to @ref gpudb::update_records_true
 *                             "true", all new values in @a newValuesMaps are
 *                             considered as expression values. When set to
 *                             @ref gpudb::update_records_false "false", all
 *                             new values in @a newValuesMaps are considered as
 *                             constants.  NOTE:  When @ref
 *                             gpudb::update_records_true "true", string
 *                             constants will need to be quoted to avoid being
 *                             evaluated as expressions.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::update_records_true
 *                                     "update_records_true"
 *                                 <li>@ref gpudb::update_records_false
 *                                     "update_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::update_records_false
 *                             "update_records_false".
 *                         <li>@ref gpudb::update_records_record_id
 *                             "update_records_record_id": ID of a single
 *                             record to be updated (returned in the call to
 *                             @ref
 *                             insertRecords(const std::string&, const std::vector<TRequest>&, const std::map<std::string, std::string>&) const
 *                             "insertRecords" or @ref
 *                             getRecordsFromCollection(const std::string&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 *                             "getRecordsFromCollection").
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::UpdateRecordsResponse "Response" object containing the
 *         result of the operation.
 */
template<typename TRequest>
UpdateRecordsResponse updateRecords( const std::string& tableName,
                                     const std::vector<std::string>& expressions,
                                     const std::vector<std::map<std::string, boost::optional<std::string> > >& newValuesMaps,
                                     const std::vector<TRequest>& data,
                                     const std::map<std::string, std::string>& options ) const
{
    RawUpdateRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.expressions = expressions;
    actualRequest_.newValuesMaps = newValuesMaps;
    avro::encode(actualRequest_.recordsToInsert, data, this->m_threadCount, this->m_executor);
    actualRequest_.options = options;
    UpdateRecordsResponse actualResponse_;
    submitRequest("/update/records", actualRequest_, actualResponse_, true);
    return actualResponse_;
}

/**
 * Runs multiple predicate-based updates in a single call.  With the list of
 * given expressions, any matching record's column values will be updated as
 * provided in @a newValuesMaps.  There is also an optional 'upsert' capability
 * where if a particular predicate doesn't match any existing record, then a
 * new record can be inserted.
 *
 * Note that this operation can only be run on an original table and not on a
 * result view.
 *
 * This operation can update primary key values.  By default only 'pure primary
 * key' predicates are allowed when updating primary key values. If the primary
 * key for a table is the column 'attr1', then the operation will only accept
 * predicates of the form: "attr1 == 'foo'" if the attr1 column is being
 * updated.  For a composite primary key (e.g.\ columns 'attr1' and 'attr2')
 * then this operation will only accept predicates of the form: "(attr1 ==
 * 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns must appear
 * in an equality predicate in the expressions.  Furthermore each 'pure primary
 * key' predicate must be unique within a given request.  These restrictions
 * can be removed by utilizing some available options through @a options.
 *
 * The @ref gpudb::update_records_update_on_existing_pk "update_on_existing_pk"
 * option specifies the record primary key collision policy for tables with a
 * <a href="../../../concepts/tables/#primary-keys" target="_top">primary
 * key</a>, while @ref gpudb::update_records_ignore_existing_pk
 * "ignore_existing_pk" specifies the record primary key collision
 * error-suppression policy when those collisions result in the update being
 * rejected.  Both are ignored on tables with no primary key.
 *
 * @tparam TRequest  The type of object being added.
 *
 * @param[in] tableName  Name of table to be updated, in
 *                       [schema_name.]table_name format, using standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be a
 *                       currently existing table and not a view.
 * @param[in] expressions  A list of the actual predicates, one for each
 *                         update; format should follow the guidelines @ref
 *                         filter(const std::string&, const std::string&, const std::string&, const std::map<std::string, std::string>&) const
 *                         "here".
 * @param[in] newValuesMaps  List of new values for the matching records.  Each
 *                           element is a map with (key, value) pairs where the
 *                           keys are the names of the columns whose values are
 *                           to be updated; the values are the new values.  The
 *                           number of elements in the list should match the
 *                           length of @a expressions.
 * @param[in] data  An *optional* list of new binary-avro encoded records to
 *                  insert, one for each update.  If one of @a expressions does
 *                  not yield a matching record to be updated, then the
 *                  corresponding element from this list will be added to the
 *                  table. The default value is an empty vector.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::update_records_global_expression
 *                             "update_records_global_expression": An optional
 *                             global expression to reduce the search space of
 *                             the predicates listed in @a expressions. The
 *                             default value is ''.
 *                         <li>@ref gpudb::update_records_bypass_safety_checks
 *                             "update_records_bypass_safety_checks": When set
 *                             to @ref gpudb::update_records_true "true", all
 *                             predicates are available for primary key
 *                             updates.  Keep in mind that it is possible to
 *                             destroy data in this case, since a single
 *                             predicate may match multiple objects
 *                             (potentially all of records of a table), and
 *                             then updating all of those records to have the
 *                             same primary key will, due to the primary key
 *                             uniqueness constraints, effectively delete all
 *                             but one of those updated records.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::update_records_true
 *                                     "update_records_true"
 *                                 <li>@ref gpudb::update_records_false
 *                                     "update_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::update_records_false
 *                             "update_records_false".
 *                         <li>@ref gpudb::update_records_update_on_existing_pk
 *                             "update_records_update_on_existing_pk":
 *                             Specifies the record collision policy for
 *                             updating a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>.  There are two
 *                             ways that a record collision can occur.  The
 *                             first is an "update collision", which happens
 *                             when the update changes the value of the updated
 *                             record's primary key, and that new primary key
 *                             already exists as the primary key of another
 *                             record in the table.  The second is an "insert
 *                             collision", which occurs when a given filter in
 *                             @a expressions finds no records to update, and
 *                             the alternate insert record given in @a data (or
 *                             @a recordsToInsertStr) contains a primary key
 *                             matching that of an existing record in the
 *                             table.  If @ref
 *                             gpudb::update_records_update_on_existing_pk
 *                             "update_on_existing_pk" is set to @ref
 *                             gpudb::update_records_true "true", "update
 *                             collisions" will result in the existing record
 *                             collided into being removed and the record
 *                             updated with values specified in @a
 *                             newValuesMaps taking its place; "insert
 *                             collisions" will result in the collided-into
 *                             record being updated with the values in @a
 *                             data/@a recordsToInsertStr (if given).  If set
 *                             to @ref gpudb::update_records_false "false", the
 *                             existing collided-into record will remain
 *                             unchanged, while the update will be rejected and
 *                             the error handled as determined by @ref
 *                             gpudb::update_records_ignore_existing_pk
 *                             "ignore_existing_pk".  If the specified table
 *                             does not have a primary key, then this option
 *                             has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::update_records_true
 *                                     "update_records_true": Overwrite the
 *                                     collided-into record when updating a
 *                                     record's primary key or inserting an
 *                                     alternate record causes a primary key
 *                                     collision between the record being
 *                                     updated/inserted and another existing
 *                                     record in the table
 *                                 <li>@ref gpudb::update_records_false
 *                                     "update_records_false": Reject updates
 *                                     which cause primary key collisions
 *                                     between the record being
 *                                     updated/inserted and an existing record
 *                                     in the table
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::update_records_false
 *                             "update_records_false".
 *                         <li>@ref gpudb::update_records_ignore_existing_pk
 *                             "update_records_ignore_existing_pk": Specifies
 *                             the record collision error-suppression policy
 *                             for updating a table with a <a
 *                             href="../../../concepts/tables/#primary-keys"
 *                             target="_top">primary key</a>, only used when
 *                             primary key record collisions are rejected (@ref
 *                             gpudb::update_records_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::update_records_false "false").  If set to
 *                             @ref gpudb::update_records_true "true", any
 *                             record update that is rejected for resulting in
 *                             a primary key collision with an existing table
 *                             record will be ignored with no error generated.
 *                             If @ref gpudb::update_records_false "false", the
 *                             rejection of any update for resulting in a
 *                             primary key collision will cause an error to be
 *                             reported.  If the specified table does not have
 *                             a primary key or if @ref
 *                             gpudb::update_records_update_on_existing_pk
 *                             "update_on_existing_pk" is @ref
 *                             gpudb::update_records_true "true", then this
 *                             option has no effect.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::update_records_true
 *                                     "update_records_true": Ignore updates
 *                                     that result in primary key collisions
 *                                     with existing records
 *                                 <li>@ref gpudb::update_records_false
 *                                     "update_records_false": Treat as errors
 *                                     any updates that result in primary key
 *                                     collisions with existing records
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::update_records_false
 *                             "update_records_false".
 *                         <li>@ref gpudb::update_records_update_partition
 *                             "update_records_update_partition": Force
 *                             qualifying records to be deleted and reinserted
 *                             so their partition membership will be
 *                             reevaluated.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::update_records_true
 *                                     "update_records_true"
 *                                 <li>@ref gpudb::update_records_false
 *                                     "update_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::update_records_false
 *                             "update_records_false".
 *                         <li>@ref gpudb::update_records_truncate_strings
 *                             "update_records_truncate_strings": If set to
 *                             @ref gpudb::update_records_true "true", any
 *                             strings which are too long for their charN
 *                             string fields will be truncated to fit.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::update_records_true
 *                                     "update_records_true"
 *                                 <li>@ref gpudb::update_records_false
 *                                     "update_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::update_records_false
 *                             "update_records_false".
 *                         <li>@ref
 *                             gpudb::update_records_use_expressions_in_new_values_maps
 *                             "update_records_use_expressions_in_new_values_maps":
 *                             When set to @ref gpudb::update_records_true
 *                             "true", all new values in @a newValuesMaps are
 *                             considered as expression values. When set to
 *                             @ref gpudb::update_records_false "false", all
 *                             new values in @a newValuesMaps are considered as
 *                             constants.  NOTE:  When @ref
 *                             gpudb::update_records_true "true", string
 *                             constants will need to be quoted to avoid being
 *                             evaluated as expressions.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::update_records_true
 *                                     "update_records_true"
 *                                 <li>@ref gpudb::update_records_false
 *                                     "update_records_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::update_records_false
 *                             "update_records_false".
 *                         <li>@ref gpudb::update_records_record_id
 *                             "update_records_record_id": ID of a single
 *                             record to be updated (returned in the call to
 *                             @ref
 *                             insertRecords(const std::string&, const std::vector<TRequest>&, const std::map<std::string, std::string>&) const
 *                             "insertRecords" or @ref
 *                             getRecordsFromCollection(const std::string&, const int64_t, const int64_t, const std::map<std::string, std::string>&) const
 *                             "getRecordsFromCollection").
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::UpdateRecordsResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::UpdateRecordsResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
template<typename TRequest>
UpdateRecordsResponse& updateRecords( const std::string& tableName,
                                      const std::vector<std::string>& expressions,
                                      const std::vector<std::map<std::string, boost::optional<std::string> > >& newValuesMaps,
                                      const std::vector<TRequest>& data,
                                      const std::map<std::string, std::string>& options,
                                      UpdateRecordsResponse& response_ ) const
{
    RawUpdateRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.expressions = expressions;
    actualRequest_.newValuesMaps = newValuesMaps;
    avro::encode(actualRequest_.recordsToInsert, data, this->m_threadCount, this->m_executor);
    actualRequest_.options = options;
    submitRequest("/update/records", actualRequest_, response_, true);
    return response_;
}

/**
 * Updates the view specified by @ref
 * gpudb::UpdateRecordsBySeriesRequest::tableName "tableName" to include full
 * series (track) information from the @ref
 * gpudb::UpdateRecordsBySeriesRequest::worldTableName "worldTableName" for the
 * series (tracks) present in the @ref
 * gpudb::UpdateRecordsBySeriesRequest::viewName "viewName".
 *
 * @param[in] request_  @ref gpudb::UpdateRecordsBySeriesRequest "Request"
 *                      object containing the parameters for the operation.
 *
 * @return @ref gpudb::UpdateRecordsBySeriesResponse "Response" object
 *         containing the result of the operation.
 */
UpdateRecordsBySeriesResponse updateRecordsBySeries( const UpdateRecordsBySeriesRequest& request_ ) const;

/**
 * Updates the view specified by @ref
 * gpudb::UpdateRecordsBySeriesRequest::tableName "tableName" to include full
 * series (track) information from the @ref
 * gpudb::UpdateRecordsBySeriesRequest::worldTableName "worldTableName" for the
 * series (tracks) present in the @ref
 * gpudb::UpdateRecordsBySeriesRequest::viewName "viewName".
 *
 * @param[in] request_  @ref gpudb::UpdateRecordsBySeriesRequest "Request"
 *                      object containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::UpdateRecordsBySeriesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::UpdateRecordsBySeriesResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
UpdateRecordsBySeriesResponse& updateRecordsBySeries( const UpdateRecordsBySeriesRequest& request_,
                                                      UpdateRecordsBySeriesResponse& response_ ) const;

/**
 * Updates the view specified by @a tableName to include full series (track)
 * information from the @a worldTableName for the series (tracks) present in
 * the @a viewName.
 *
 * @param[in] tableName  Name of the view on which the update operation will be
 *                       performed, in [schema_name.]view_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing view.
 * @param[in] worldTableName  Name of the table containing the complete series
 *                            (track) information, in [schema_name.]table_name
 *                            format, using standard <a
 *                            href="../../../concepts/tables/#table-name-resolution"
 *                            target="_top">name resolution rules</a>.
 * @param[in] viewName  Name of the view containing the series (tracks) which
 *                      have to be updated, in [schema_name.]view_name format,
 *                      using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a>. The default
 *                      value is ''.
 * @param[in] reserved  The default value is an empty vector.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::UpdateRecordsBySeriesResponse "Response" object
 *         containing the result of the operation.
 */
UpdateRecordsBySeriesResponse updateRecordsBySeries( const std::string& tableName,
                                                     const std::string& worldTableName,
                                                     const std::string& viewName,
                                                     const std::vector<std::string>& reserved,
                                                     const std::map<std::string, std::string>& options ) const;

/**
 * Updates the view specified by @a tableName to include full series (track)
 * information from the @a worldTableName for the series (tracks) present in
 * the @a viewName.
 *
 * @param[in] tableName  Name of the view on which the update operation will be
 *                       performed, in [schema_name.]view_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.  Must be an
 *                       existing view.
 * @param[in] worldTableName  Name of the table containing the complete series
 *                            (track) information, in [schema_name.]table_name
 *                            format, using standard <a
 *                            href="../../../concepts/tables/#table-name-resolution"
 *                            target="_top">name resolution rules</a>.
 * @param[in] viewName  Name of the view containing the series (tracks) which
 *                      have to be updated, in [schema_name.]view_name format,
 *                      using standard <a
 *                      href="../../../concepts/tables/#table-name-resolution"
 *                      target="_top">name resolution rules</a>. The default
 *                      value is ''.
 * @param[in] reserved  The default value is an empty vector.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::UpdateRecordsBySeriesResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::UpdateRecordsBySeriesResponse "Response" object
 *         containing the result of the operation (initially passed in by
 *         reference).
 */
UpdateRecordsBySeriesResponse& updateRecordsBySeries( const std::string& tableName,
                                                      const std::string& worldTableName,
                                                      const std::string& viewName,
                                                      const std::vector<std::string>& reserved,
                                                      const std::map<std::string, std::string>& options,
                                                      UpdateRecordsBySeriesResponse& response_ ) const;

/**
 * Uploads one or more files to <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. There are two methods for uploading files: load
 * files in their entirety, or load files in parts. The latter is recommeded
 * for files of approximately 60 MB or larger.
 *
 * To upload files in their entirety, populate @ref
 * gpudb::UploadFilesRequest::fileNames "fileNames" with the file names to
 * upload into on KiFS, and their respective byte content in @ref
 * gpudb::UploadFilesRequest::fileData "fileData".
 *
 * Multiple steps are involved when uploading in multiple parts. Only one file
 * at a time can be uploaded in this manner. A user-provided UUID is utilized
 * to tie all the upload steps together for a given file.  To upload a file in
 * multiple parts:
 *
 * 1. Provide the file name in @ref gpudb::UploadFilesRequest::fileNames
 * "fileNames", the UUID in the @ref gpudb::upload_files_multipart_upload_uuid
 * "multipart_upload_uuid" key in @ref gpudb::UploadFilesRequest::options
 * "options", and a @ref gpudb::upload_files_multipart_operation
 * "multipart_operation" value of @ref gpudb::upload_files_init "init".
 * 2. Upload one or more parts by providing the file name, the part data in
 * @ref gpudb::UploadFilesRequest::fileData "fileData", the UUID, a @ref
 * gpudb::upload_files_multipart_operation "multipart_operation" value of @ref
 * gpudb::upload_files_upload_part "upload_part", and the part number in the
 * @ref gpudb::upload_files_multipart_upload_part_number
 * "multipart_upload_part_number". The part numbers must start at 1 and
 * increase incrementally. Parts may not be uploaded out of order.
 * 3. Complete the upload by providing the file name, the UUID, and a @ref
 * gpudb::upload_files_multipart_operation "multipart_operation" value of @ref
 * gpudb::upload_files_complete "complete".
 *
 * Multipart uploads in progress may be canceled by providing the file name,
 * the UUID, and a @ref gpudb::upload_files_multipart_operation
 * "multipart_operation" value of @ref gpudb::upload_files_cancel "cancel".  If
 * an new upload is initialized with a different UUID for an existing upload in
 * progress, the pre-existing upload is automatically canceled in favor of the
 * new upload.
 *
 * The multipart upload must be completed for the file to be usable in KiFS.
 * Information about multipart uploads in progress is available in @ref
 * showFiles(const ShowFilesRequest&) const "showFiles".
 *
 * File data may be pre-encoded using base64 encoding. This should be indicated
 * using the @ref gpudb::upload_files_file_encoding "file_encoding" option, and
 * is recommended when using JSON serialization.
 *
 * Each file path must reside in a top-level KiFS directory, i.e.\ one of the
 * directories listed in @ref
 * showDirectories(const ShowDirectoriesRequest&) const "showDirectories". The
 * user must have write permission on the directory. Nested directories are
 * permitted in file name paths. Directories are deliniated with the directory
 * separator of '/'.  For example, given the file path '/a/b/c/d.txt', 'a' must
 * be a KiFS directory.
 *
 * These characters are allowed in file name paths: letters, numbers, spaces,
 * the path delimiter of '/', and the characters: '.' '-' ':' '[' ']' '(' ')'
 * '#' '='.
 *
 * @param[in] request_  @ref gpudb::UploadFilesRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::UploadFilesResponse "Response" object containing the
 *         result of the operation.
 */
UploadFilesResponse uploadFiles( const UploadFilesRequest& request_ ) const;

/**
 * Uploads one or more files to <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. There are two methods for uploading files: load
 * files in their entirety, or load files in parts. The latter is recommeded
 * for files of approximately 60 MB or larger.
 *
 * To upload files in their entirety, populate @ref
 * gpudb::UploadFilesRequest::fileNames "fileNames" with the file names to
 * upload into on KiFS, and their respective byte content in @ref
 * gpudb::UploadFilesRequest::fileData "fileData".
 *
 * Multiple steps are involved when uploading in multiple parts. Only one file
 * at a time can be uploaded in this manner. A user-provided UUID is utilized
 * to tie all the upload steps together for a given file.  To upload a file in
 * multiple parts:
 *
 * 1. Provide the file name in @ref gpudb::UploadFilesRequest::fileNames
 * "fileNames", the UUID in the @ref gpudb::upload_files_multipart_upload_uuid
 * "multipart_upload_uuid" key in @ref gpudb::UploadFilesRequest::options
 * "options", and a @ref gpudb::upload_files_multipart_operation
 * "multipart_operation" value of @ref gpudb::upload_files_init "init".
 * 2. Upload one or more parts by providing the file name, the part data in
 * @ref gpudb::UploadFilesRequest::fileData "fileData", the UUID, a @ref
 * gpudb::upload_files_multipart_operation "multipart_operation" value of @ref
 * gpudb::upload_files_upload_part "upload_part", and the part number in the
 * @ref gpudb::upload_files_multipart_upload_part_number
 * "multipart_upload_part_number". The part numbers must start at 1 and
 * increase incrementally. Parts may not be uploaded out of order.
 * 3. Complete the upload by providing the file name, the UUID, and a @ref
 * gpudb::upload_files_multipart_operation "multipart_operation" value of @ref
 * gpudb::upload_files_complete "complete".
 *
 * Multipart uploads in progress may be canceled by providing the file name,
 * the UUID, and a @ref gpudb::upload_files_multipart_operation
 * "multipart_operation" value of @ref gpudb::upload_files_cancel "cancel".  If
 * an new upload is initialized with a different UUID for an existing upload in
 * progress, the pre-existing upload is automatically canceled in favor of the
 * new upload.
 *
 * The multipart upload must be completed for the file to be usable in KiFS.
 * Information about multipart uploads in progress is available in @ref
 * showFiles(const ShowFilesRequest&) const "showFiles".
 *
 * File data may be pre-encoded using base64 encoding. This should be indicated
 * using the @ref gpudb::upload_files_file_encoding "file_encoding" option, and
 * is recommended when using JSON serialization.
 *
 * Each file path must reside in a top-level KiFS directory, i.e.\ one of the
 * directories listed in @ref
 * showDirectories(const ShowDirectoriesRequest&) const "showDirectories". The
 * user must have write permission on the directory. Nested directories are
 * permitted in file name paths. Directories are deliniated with the directory
 * separator of '/'.  For example, given the file path '/a/b/c/d.txt', 'a' must
 * be a KiFS directory.
 *
 * These characters are allowed in file name paths: letters, numbers, spaces,
 * the path delimiter of '/', and the characters: '.' '-' ':' '[' ']' '(' ')'
 * '#' '='.
 *
 * @param[in] request_  @ref gpudb::UploadFilesRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::UploadFilesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::UploadFilesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
UploadFilesResponse& uploadFiles( const UploadFilesRequest& request_,
                                  UploadFilesResponse& response_ ) const;

/**
 * Uploads one or more files to <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. There are two methods for uploading files: load
 * files in their entirety, or load files in parts. The latter is recommeded
 * for files of approximately 60 MB or larger.
 *
 * To upload files in their entirety, populate @a fileNames with the file names
 * to upload into on KiFS, and their respective byte content in @a fileData.
 *
 * Multiple steps are involved when uploading in multiple parts. Only one file
 * at a time can be uploaded in this manner. A user-provided UUID is utilized
 * to tie all the upload steps together for a given file.  To upload a file in
 * multiple parts:
 *
 * 1. Provide the file name in @a fileNames, the UUID in the @ref
 * gpudb::upload_files_multipart_upload_uuid "multipart_upload_uuid" key in @a
 * options, and a @ref gpudb::upload_files_multipart_operation
 * "multipart_operation" value of @ref gpudb::upload_files_init "init".
 * 2. Upload one or more parts by providing the file name, the part data in @a
 * fileData, the UUID, a @ref gpudb::upload_files_multipart_operation
 * "multipart_operation" value of @ref gpudb::upload_files_upload_part
 * "upload_part", and the part number in the @ref
 * gpudb::upload_files_multipart_upload_part_number
 * "multipart_upload_part_number". The part numbers must start at 1 and
 * increase incrementally. Parts may not be uploaded out of order.
 * 3. Complete the upload by providing the file name, the UUID, and a @ref
 * gpudb::upload_files_multipart_operation "multipart_operation" value of @ref
 * gpudb::upload_files_complete "complete".
 *
 * Multipart uploads in progress may be canceled by providing the file name,
 * the UUID, and a @ref gpudb::upload_files_multipart_operation
 * "multipart_operation" value of @ref gpudb::upload_files_cancel "cancel".  If
 * an new upload is initialized with a different UUID for an existing upload in
 * progress, the pre-existing upload is automatically canceled in favor of the
 * new upload.
 *
 * The multipart upload must be completed for the file to be usable in KiFS.
 * Information about multipart uploads in progress is available in @ref
 * showFiles(const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "showFiles".
 *
 * File data may be pre-encoded using base64 encoding. This should be indicated
 * using the @ref gpudb::upload_files_file_encoding "file_encoding" option, and
 * is recommended when using JSON serialization.
 *
 * Each file path must reside in a top-level KiFS directory, i.e.\ one of the
 * directories listed in @ref
 * showDirectories(const std::string&, const std::map<std::string, std::string>&) const
 * "showDirectories". The user must have write permission on the directory.
 * Nested directories are permitted in file name paths. Directories are
 * deliniated with the directory separator of '/'.  For example, given the file
 * path '/a/b/c/d.txt', 'a' must be a KiFS directory.
 *
 * These characters are allowed in file name paths: letters, numbers, spaces,
 * the path delimiter of '/', and the characters: '.' '-' ':' '[' ']' '(' ')'
 * '#' '='.
 *
 * @param[in] fileNames  An array of full file name paths to be used for the
 *                       files uploaded to KiFS. File names may have any number
 *                       of nested directories in their paths, but the
 *                       top-level directory must be an existing KiFS
 *                       directory. Each file must reside in or under a
 *                       top-level directory. A full file name path cannot be
 *                       larger than 1024 characters.
 * @param[in] fileData  File data for the files being uploaded, for the
 *                      respective files in @a fileNames.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::upload_files_file_encoding
 *                             "upload_files_file_encoding": Encoding that has
 *                             been applied to the uploaded file data. When
 *                             using JSON serialization it is recommended to
 *                             utilize @ref gpudb::upload_files_base64
 *                             "base64". The caller is responsible for encoding
 *                             the data provided in this payload.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::upload_files_base64
 *                                     "upload_files_base64": Specifies that
 *                                     the file data being uploaded has been
 *                                     base64 encoded.
 *                                 <li>@ref gpudb::upload_files_none
 *                                     "upload_files_none": The uploaded file
 *                                     data has not been encoded.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::upload_files_none "upload_files_none".
 *                         <li>@ref gpudb::upload_files_multipart_operation
 *                             "upload_files_multipart_operation": Multipart
 *                             upload operation to perform.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::upload_files_none
 *                                     "upload_files_none": Default, indicates
 *                                     this is not a multipart upload
 *                                 <li>@ref gpudb::upload_files_init
 *                                     "upload_files_init": Initialize a
 *                                     multipart file upload
 *                                 <li>@ref gpudb::upload_files_upload_part
 *                                     "upload_files_upload_part": Uploads a
 *                                     part of the specified multipart file
 *                                     upload
 *                                 <li>@ref gpudb::upload_files_complete
 *                                     "upload_files_complete": Complete the
 *                                     specified multipart file upload
 *                                 <li>@ref gpudb::upload_files_cancel
 *                                     "upload_files_cancel": Cancel the
 *                                     specified multipart file upload
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::upload_files_none "upload_files_none".
 *                         <li>@ref gpudb::upload_files_multipart_upload_uuid
 *                             "upload_files_multipart_upload_uuid": UUID to
 *                             uniquely identify a multipart upload
 *                         <li>@ref
 *                             gpudb::upload_files_multipart_upload_part_number
 *                             "upload_files_multipart_upload_part_number":
 *                             Incremental part number for each part in a
 *                             multipart upload. Part numbers start at 1,
 *                             increment by 1, and must be uploaded
 *                             sequentially
 *                         <li>@ref gpudb::upload_files_delete_if_exists
 *                             "upload_files_delete_if_exists": If @ref
 *                             gpudb::upload_files_true "true",  any existing
 *                             files specified in @a fileNames will be deleted
 *                             prior to start of upload.   Otherwise the file
 *                             is replaced once the upload completes.  Rollback
 *                             of the original file is  no longer possible if
 *                             the upload is cancelled, aborted or fails if the
 *                             file was deleted beforehand.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::upload_files_true
 *                                     "upload_files_true"
 *                                 <li>@ref gpudb::upload_files_false
 *                                     "upload_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::upload_files_false "upload_files_false".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::UploadFilesResponse "Response" object containing the
 *         result of the operation.
 */
UploadFilesResponse uploadFiles( const std::vector<std::string>& fileNames,
                                 const std::vector<std::vector<uint8_t> >& fileData,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Uploads one or more files to <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>. There are two methods for uploading files: load
 * files in their entirety, or load files in parts. The latter is recommeded
 * for files of approximately 60 MB or larger.
 *
 * To upload files in their entirety, populate @a fileNames with the file names
 * to upload into on KiFS, and their respective byte content in @a fileData.
 *
 * Multiple steps are involved when uploading in multiple parts. Only one file
 * at a time can be uploaded in this manner. A user-provided UUID is utilized
 * to tie all the upload steps together for a given file.  To upload a file in
 * multiple parts:
 *
 * 1. Provide the file name in @a fileNames, the UUID in the @ref
 * gpudb::upload_files_multipart_upload_uuid "multipart_upload_uuid" key in @a
 * options, and a @ref gpudb::upload_files_multipart_operation
 * "multipart_operation" value of @ref gpudb::upload_files_init "init".
 * 2. Upload one or more parts by providing the file name, the part data in @a
 * fileData, the UUID, a @ref gpudb::upload_files_multipart_operation
 * "multipart_operation" value of @ref gpudb::upload_files_upload_part
 * "upload_part", and the part number in the @ref
 * gpudb::upload_files_multipart_upload_part_number
 * "multipart_upload_part_number". The part numbers must start at 1 and
 * increase incrementally. Parts may not be uploaded out of order.
 * 3. Complete the upload by providing the file name, the UUID, and a @ref
 * gpudb::upload_files_multipart_operation "multipart_operation" value of @ref
 * gpudb::upload_files_complete "complete".
 *
 * Multipart uploads in progress may be canceled by providing the file name,
 * the UUID, and a @ref gpudb::upload_files_multipart_operation
 * "multipart_operation" value of @ref gpudb::upload_files_cancel "cancel".  If
 * an new upload is initialized with a different UUID for an existing upload in
 * progress, the pre-existing upload is automatically canceled in favor of the
 * new upload.
 *
 * The multipart upload must be completed for the file to be usable in KiFS.
 * Information about multipart uploads in progress is available in @ref
 * showFiles(const std::vector<std::string>&, const std::map<std::string, std::string>&) const
 * "showFiles".
 *
 * File data may be pre-encoded using base64 encoding. This should be indicated
 * using the @ref gpudb::upload_files_file_encoding "file_encoding" option, and
 * is recommended when using JSON serialization.
 *
 * Each file path must reside in a top-level KiFS directory, i.e.\ one of the
 * directories listed in @ref
 * showDirectories(const std::string&, const std::map<std::string, std::string>&) const
 * "showDirectories". The user must have write permission on the directory.
 * Nested directories are permitted in file name paths. Directories are
 * deliniated with the directory separator of '/'.  For example, given the file
 * path '/a/b/c/d.txt', 'a' must be a KiFS directory.
 *
 * These characters are allowed in file name paths: letters, numbers, spaces,
 * the path delimiter of '/', and the characters: '.' '-' ':' '[' ']' '(' ')'
 * '#' '='.
 *
 * @param[in] fileNames  An array of full file name paths to be used for the
 *                       files uploaded to KiFS. File names may have any number
 *                       of nested directories in their paths, but the
 *                       top-level directory must be an existing KiFS
 *                       directory. Each file must reside in or under a
 *                       top-level directory. A full file name path cannot be
 *                       larger than 1024 characters.
 * @param[in] fileData  File data for the files being uploaded, for the
 *                      respective files in @a fileNames.
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::upload_files_file_encoding
 *                             "upload_files_file_encoding": Encoding that has
 *                             been applied to the uploaded file data. When
 *                             using JSON serialization it is recommended to
 *                             utilize @ref gpudb::upload_files_base64
 *                             "base64". The caller is responsible for encoding
 *                             the data provided in this payload.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::upload_files_base64
 *                                     "upload_files_base64": Specifies that
 *                                     the file data being uploaded has been
 *                                     base64 encoded.
 *                                 <li>@ref gpudb::upload_files_none
 *                                     "upload_files_none": The uploaded file
 *                                     data has not been encoded.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::upload_files_none "upload_files_none".
 *                         <li>@ref gpudb::upload_files_multipart_operation
 *                             "upload_files_multipart_operation": Multipart
 *                             upload operation to perform.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::upload_files_none
 *                                     "upload_files_none": Default, indicates
 *                                     this is not a multipart upload
 *                                 <li>@ref gpudb::upload_files_init
 *                                     "upload_files_init": Initialize a
 *                                     multipart file upload
 *                                 <li>@ref gpudb::upload_files_upload_part
 *                                     "upload_files_upload_part": Uploads a
 *                                     part of the specified multipart file
 *                                     upload
 *                                 <li>@ref gpudb::upload_files_complete
 *                                     "upload_files_complete": Complete the
 *                                     specified multipart file upload
 *                                 <li>@ref gpudb::upload_files_cancel
 *                                     "upload_files_cancel": Cancel the
 *                                     specified multipart file upload
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::upload_files_none "upload_files_none".
 *                         <li>@ref gpudb::upload_files_multipart_upload_uuid
 *                             "upload_files_multipart_upload_uuid": UUID to
 *                             uniquely identify a multipart upload
 *                         <li>@ref
 *                             gpudb::upload_files_multipart_upload_part_number
 *                             "upload_files_multipart_upload_part_number":
 *                             Incremental part number for each part in a
 *                             multipart upload. Part numbers start at 1,
 *                             increment by 1, and must be uploaded
 *                             sequentially
 *                         <li>@ref gpudb::upload_files_delete_if_exists
 *                             "upload_files_delete_if_exists": If @ref
 *                             gpudb::upload_files_true "true",  any existing
 *                             files specified in @a fileNames will be deleted
 *                             prior to start of upload.   Otherwise the file
 *                             is replaced once the upload completes.  Rollback
 *                             of the original file is  no longer possible if
 *                             the upload is cancelled, aborted or fails if the
 *                             file was deleted beforehand.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::upload_files_true
 *                                     "upload_files_true"
 *                                 <li>@ref gpudb::upload_files_false
 *                                     "upload_files_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::upload_files_false "upload_files_false".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::UploadFilesResponse "Response" object
 *                        containing the results of the operation.
 *
 * @return @ref gpudb::UploadFilesResponse "Response" object containing the
 *         result of the operation (initially passed in by reference).
 */
UploadFilesResponse& uploadFiles( const std::vector<std::string>& fileNames,
                                  const std::vector<std::vector<uint8_t> >& fileData,
                                  const std::map<std::string, std::string>& options,
                                  UploadFilesResponse& response_ ) const;

/**
 * Uploads one or more files to <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * Each file path must reside in a top-level KiFS directory, i.e.\ one of the
 * directories listed in @ref
 * showDirectories(const ShowDirectoriesRequest&) const "showDirectories". The
 * user must have write permission on the directory. Nested directories are
 * permitted in file name paths. Directories are deliniated with the directory
 * separator of '/'.  For example, given the file path '/a/b/c/d.txt', 'a' must
 * be a KiFS directory.
 *
 * These characters are allowed in file name paths: letters, numbers, spaces,
 * the path delimiter of '/', and the characters: '.' '-' ':' '[' ']' '(' ')'
 * '#' '='.
 *
 * @param[in] request_  @ref gpudb::UploadFilesFromurlRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::UploadFilesFromurlResponse "Response" object containing
 *         the result of the operation.
 */
UploadFilesFromurlResponse uploadFilesFromurl( const UploadFilesFromurlRequest& request_ ) const;

/**
 * Uploads one or more files to <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * Each file path must reside in a top-level KiFS directory, i.e.\ one of the
 * directories listed in @ref
 * showDirectories(const ShowDirectoriesRequest&) const "showDirectories". The
 * user must have write permission on the directory. Nested directories are
 * permitted in file name paths. Directories are deliniated with the directory
 * separator of '/'.  For example, given the file path '/a/b/c/d.txt', 'a' must
 * be a KiFS directory.
 *
 * These characters are allowed in file name paths: letters, numbers, spaces,
 * the path delimiter of '/', and the characters: '.' '-' ':' '[' ']' '(' ')'
 * '#' '='.
 *
 * @param[in] request_  @ref gpudb::UploadFilesFromurlRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::UploadFilesFromurlResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::UploadFilesFromurlResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
UploadFilesFromurlResponse& uploadFilesFromurl( const UploadFilesFromurlRequest& request_,
                                                UploadFilesFromurlResponse& response_ ) const;

/**
 * Uploads one or more files to <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * Each file path must reside in a top-level KiFS directory, i.e.\ one of the
 * directories listed in @ref
 * showDirectories(const std::string&, const std::map<std::string, std::string>&) const
 * "showDirectories". The user must have write permission on the directory.
 * Nested directories are permitted in file name paths. Directories are
 * deliniated with the directory separator of '/'.  For example, given the file
 * path '/a/b/c/d.txt', 'a' must be a KiFS directory.
 *
 * These characters are allowed in file name paths: letters, numbers, spaces,
 * the path delimiter of '/', and the characters: '.' '-' ':' '[' ']' '(' ')'
 * '#' '='.
 *
 * @param[in] fileNames  An array of full file name paths to be used for the
 *                       files uploaded to KiFS. File names may have any number
 *                       of nested directories in their paths, but the
 *                       top-level directory must be an existing KiFS
 *                       directory. Each file must reside in or under a
 *                       top-level directory. A full file name path cannot be
 *                       larger than 1024 characters.
 * @param[in] urls  List of URLs to upload, for each respective file in @a
 *                  fileNames.
 * @param[in] options  Optional parameters. The default value is an empty map.
 *
 * @return @ref gpudb::UploadFilesFromurlResponse "Response" object containing
 *         the result of the operation.
 */
UploadFilesFromurlResponse uploadFilesFromurl( const std::vector<std::string>& fileNames,
                                               const std::vector<std::string>& urls,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Uploads one or more files to <a href="../../../tools/kifs/"
 * target="_top">KiFS</a>.
 *
 * Each file path must reside in a top-level KiFS directory, i.e.\ one of the
 * directories listed in @ref
 * showDirectories(const std::string&, const std::map<std::string, std::string>&) const
 * "showDirectories". The user must have write permission on the directory.
 * Nested directories are permitted in file name paths. Directories are
 * deliniated with the directory separator of '/'.  For example, given the file
 * path '/a/b/c/d.txt', 'a' must be a KiFS directory.
 *
 * These characters are allowed in file name paths: letters, numbers, spaces,
 * the path delimiter of '/', and the characters: '.' '-' ':' '[' ']' '(' ')'
 * '#' '='.
 *
 * @param[in] fileNames  An array of full file name paths to be used for the
 *                       files uploaded to KiFS. File names may have any number
 *                       of nested directories in their paths, but the
 *                       top-level directory must be an existing KiFS
 *                       directory. Each file must reside in or under a
 *                       top-level directory. A full file name path cannot be
 *                       larger than 1024 characters.
 * @param[in] urls  List of URLs to upload, for each respective file in @a
 *                  fileNames.
 * @param[in] options  Optional parameters. The default value is an empty map.
 * @param[out] response_  @ref gpudb::UploadFilesFromurlResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::UploadFilesFromurlResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
UploadFilesFromurlResponse& uploadFilesFromurl( const std::vector<std::string>& fileNames,
                                                const std::vector<std::string>& urls,
                                                const std::map<std::string, std::string>& options,
                                                UploadFilesFromurlResponse& response_ ) const;

/** @private */
VisualizeGetFeatureInfoResponse visualizeGetFeatureInfo( const VisualizeGetFeatureInfoRequest& request_ ) const;

/** @private */
VisualizeGetFeatureInfoResponse& visualizeGetFeatureInfo( const VisualizeGetFeatureInfoRequest& request_,
                                                          VisualizeGetFeatureInfoResponse& response_ ) const;

/** @private */
VisualizeGetFeatureInfoResponse visualizeGetFeatureInfo( const std::vector<std::string>& tableNames,
                                                         const std::vector<std::string>& xColumnNames,
                                                         const std::vector<std::string>& yColumnNames,
                                                         const std::vector<std::string>& geometryColumnNames,
                                                         const std::vector<std::vector<std::string> >& queryColumnNames,
                                                         const std::string& projection,
                                                         const double minX,
                                                         const double maxX,
                                                         const double minY,
                                                         const double maxY,
                                                         const int32_t width,
                                                         const int32_t height,
                                                         const int32_t x,
                                                         const int32_t y,
                                                         const int32_t radius,
                                                         const int64_t limit,
                                                         const std::string& encoding,
                                                         const std::map<std::string, std::string>& options ) const;

/** @private */
VisualizeGetFeatureInfoResponse& visualizeGetFeatureInfo( const std::vector<std::string>& tableNames,
                                                          const std::vector<std::string>& xColumnNames,
                                                          const std::vector<std::string>& yColumnNames,
                                                          const std::vector<std::string>& geometryColumnNames,
                                                          const std::vector<std::vector<std::string> >& queryColumnNames,
                                                          const std::string& projection,
                                                          const double minX,
                                                          const double maxX,
                                                          const double minY,
                                                          const double maxY,
                                                          const int32_t width,
                                                          const int32_t height,
                                                          const int32_t x,
                                                          const int32_t y,
                                                          const int32_t radius,
                                                          const int64_t limit,
                                                          const std::string& encoding,
                                                          const std::map<std::string, std::string>& options,
                                                          VisualizeGetFeatureInfoResponse& response_ ) const;

/** @private */
VisualizeImageResponse visualizeImage( const VisualizeImageRequest& request_ ) const;

/** @private */
VisualizeImageResponse& visualizeImage( const VisualizeImageRequest& request_,
                                        VisualizeImageResponse& response_ ) const;

/** @private */
VisualizeImageResponse visualizeImage( const std::vector<std::string>& tableNames,
                                       const std::vector<std::string>& worldTableNames,
                                       const std::string& xColumnName,
                                       const std::string& yColumnName,
                                       const std::string& symbolColumnName,
                                       const std::string& geometryColumnName,
                                       const std::vector<std::vector<std::string> >& trackIds,
                                       const double minX,
                                       const double maxX,
                                       const double minY,
                                       const double maxY,
                                       const int32_t width,
                                       const int32_t height,
                                       const std::string& projection,
                                       const int64_t bgColor,
                                       const std::map<std::string, std::vector<std::string> >& styleOptions,
                                       const std::map<std::string, std::string>& options ) const;

/** @private */
VisualizeImageResponse& visualizeImage( const std::vector<std::string>& tableNames,
                                        const std::vector<std::string>& worldTableNames,
                                        const std::string& xColumnName,
                                        const std::string& yColumnName,
                                        const std::string& symbolColumnName,
                                        const std::string& geometryColumnName,
                                        const std::vector<std::vector<std::string> >& trackIds,
                                        const double minX,
                                        const double maxX,
                                        const double minY,
                                        const double maxY,
                                        const int32_t width,
                                        const int32_t height,
                                        const std::string& projection,
                                        const int64_t bgColor,
                                        const std::map<std::string, std::vector<std::string> >& styleOptions,
                                        const std::map<std::string, std::string>& options,
                                        VisualizeImageResponse& response_ ) const;

/**
 * Scatter plot is the only plot type currently supported. A non-numeric column
 * can be specified as x or y column and jitters can be added to them to avoid
 * excessive overlapping. All color values must be in the format RRGGBB or
 * AARRGGBB (to specify the alpha value).
 * The image is contained in the @ref
 * gpudb::VisualizeImageChartResponse::imageData "imageData" field.
 *
 * @param[in] request_  @ref gpudb::VisualizeImageChartRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::VisualizeImageChartResponse "Response" object containing
 *         the result of the operation.
 */
VisualizeImageChartResponse visualizeImageChart( const VisualizeImageChartRequest& request_ ) const;

/**
 * Scatter plot is the only plot type currently supported. A non-numeric column
 * can be specified as x or y column and jitters can be added to them to avoid
 * excessive overlapping. All color values must be in the format RRGGBB or
 * AARRGGBB (to specify the alpha value).
 * The image is contained in the @ref
 * gpudb::VisualizeImageChartResponse::imageData "imageData" field.
 *
 * @param[in] request_  @ref gpudb::VisualizeImageChartRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::VisualizeImageChartResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::VisualizeImageChartResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
VisualizeImageChartResponse& visualizeImageChart( const VisualizeImageChartRequest& request_,
                                                  VisualizeImageChartResponse& response_ ) const;

/**
 * Scatter plot is the only plot type currently supported. A non-numeric column
 * can be specified as x or y column and jitters can be added to them to avoid
 * excessive overlapping. All color values must be in the format RRGGBB or
 * AARRGGBB (to specify the alpha value).
 * The image is contained in the @ref
 * gpudb::VisualizeImageChartResponse::imageData "imageData" field.
 *
 * @param[in] tableName  Name of the table containing the data to be drawn as a
 *                       chart, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] xColumnNames  Names of the columns containing the data mapped to
 *                          the x axis of a chart.
 * @param[in] yColumnNames  Names of the columns containing the data mapped to
 *                          the y axis of a chart.
 * @param[in] minX  Lower bound for the x column values. For non-numeric x
 *                  column, each x column item is mapped to an integral value
 *                  starting from 0.
 * @param[in] maxX  Upper bound for the x column values. For non-numeric x
 *                  column, each x column item is mapped to an integral value
 *                  starting from 0.
 * @param[in] minY  Lower bound for the y column values. For non-numeric y
 *                  column, each y column item is mapped to an integral value
 *                  starting from 0.
 * @param[in] maxY  Upper bound for the y column values. For non-numeric y
 *                  column, each y column item is mapped to an integral value
 *                  starting from 0.
 * @param[in] width  Width of the generated image in pixels.
 * @param[in] height  Height of the generated image in pixels.
 * @param[in] bgColor  Background color of the generated image.
 * @param[in] styleOptions  Rendering style options for a chart.
 *                          <ul>
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_pointcolor
 *                                  "visualize_image_chart_pointcolor": The
 *                                  color of points in the plot represented as
 *                                  a hexadecimal number. The default value is
 *                                  '0000FF'.
 *                              <li>@ref gpudb::visualize_image_chart_pointsize
 *                                  "visualize_image_chart_pointsize": The size
 *                                  of points in the plot represented as number
 *                                  of pixels. The default value is '3'.
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_pointshape
 *                                  "visualize_image_chart_pointshape": The
 *                                  shape of points in the plot.
 *                                  Supported values:
 *                                  <ul>
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_none
 *                                          "visualize_image_chart_none"
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_circle
 *                                          "visualize_image_chart_circle"
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_square
 *                                          "visualize_image_chart_square"
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_diamond
 *                                          "visualize_image_chart_diamond"
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_hollowcircle
 *                                          "visualize_image_chart_hollowcircle"
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_hollowsquare
 *                                          "visualize_image_chart_hollowsquare"
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_hollowdiamond
 *                                          "visualize_image_chart_hollowdiamond"
 *                                  </ul>
 *                                  The default value is @ref
 *                                  gpudb::visualize_image_chart_square
 *                                  "visualize_image_chart_square".
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_cb_pointcolors
 *                                  "visualize_image_chart_cb_pointcolors":
 *                                  Point color class break information
 *                                  consisting of three entries: class-break
 *                                  attribute, class-break values/ranges, and
 *                                  point color values. This option overrides
 *                                  the pointcolor option if both are provided.
 *                                  Class-break ranges are represented in the
 *                                  form of "min:max". Class-break
 *                                  values/ranges and point color values are
 *                                  separated by cb_delimiter, e.g. {"price",
 *                                  "20:30;30:40;40:50",
 *                                  "0xFF0000;0x00FF00;0x0000FF"}.
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_cb_pointsizes
 *                                  "visualize_image_chart_cb_pointsizes":
 *                                  Point size class break information
 *                                  consisting of three entries: class-break
 *                                  attribute, class-break values/ranges, and
 *                                  point size values. This option overrides
 *                                  the pointsize option if both are provided.
 *                                  Class-break ranges are represented in the
 *                                  form of "min:max". Class-break
 *                                  values/ranges and point size values are
 *                                  separated by cb_delimiter, e.g. {"states",
 *                                  "NY;TX;CA", "3;5;7"}.
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_cb_pointshapes
 *                                  "visualize_image_chart_cb_pointshapes":
 *                                  Point shape class break information
 *                                  consisting of three entries: class-break
 *                                  attribute, class-break values/ranges, and
 *                                  point shape names. This option overrides
 *                                  the pointshape option if both are provided.
 *                                  Class-break ranges are represented in the
 *                                  form of "min:max". Class-break
 *                                  values/ranges and point shape names are
 *                                  separated by cb_delimiter, e.g. {"states",
 *                                  "NY;TX;CA", "circle;square;diamond"}.
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_cb_delimiter
 *                                  "visualize_image_chart_cb_delimiter": A
 *                                  character or string which separates
 *                                  per-class values in a class-break style
 *                                  option string. The default value is ';'.
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_x_order_by
 *                                  "visualize_image_chart_x_order_by": An
 *                                  expression or aggregate expression by which
 *                                  non-numeric x column values are sorted,
 *                                  e.g. "avg(price) descending".
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_y_order_by
 *                                  "visualize_image_chart_y_order_by": An
 *                                  expression or aggregate expression by which
 *                                  non-numeric y column values are sorted,
 *                                  e.g. "avg(price)", which defaults to
 *                                  "avg(price) ascending".
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_scale_type_x
 *                                  "visualize_image_chart_scale_type_x": Type
 *                                  of x axis scale.
 *                                  Supported values:
 *                                  <ul>
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_none
 *                                          "visualize_image_chart_none": No
 *                                          scale is applied to the x axis.
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_log
 *                                          "visualize_image_chart_log": A
 *                                          base-10 log scale is applied to the
 *                                          x axis.
 *                                  </ul>
 *                                  The default value is @ref
 *                                  gpudb::visualize_image_chart_none
 *                                  "visualize_image_chart_none".
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_scale_type_y
 *                                  "visualize_image_chart_scale_type_y": Type
 *                                  of y axis scale.
 *                                  Supported values:
 *                                  <ul>
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_none
 *                                          "visualize_image_chart_none": No
 *                                          scale is applied to the y axis.
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_log
 *                                          "visualize_image_chart_log": A
 *                                          base-10 log scale is applied to the
 *                                          y axis.
 *                                  </ul>
 *                                  The default value is @ref
 *                                  gpudb::visualize_image_chart_none
 *                                  "visualize_image_chart_none".
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_min_max_scaled
 *                                  "visualize_image_chart_min_max_scaled": If
 *                                  this options is set to "false", this
 *                                  endpoint expects request's min/max values
 *                                  are not yet scaled. They will be scaled
 *                                  according to scale_type_x or scale_type_y
 *                                  for response. If this options is set to
 *                                  "true", this endpoint expects request's
 *                                  min/max values are already scaled according
 *                                  to scale_type_x/scale_type_y. Response's
 *                                  min/max values will be equal to request's
 *                                  min/max values. The default value is
 *                                  'false'.
 *                              <li>@ref gpudb::visualize_image_chart_jitter_x
 *                                  "visualize_image_chart_jitter_x": Amplitude
 *                                  of horizontal jitter applied to non-numeric
 *                                  x column values. The default value is
 *                                  '0.0'.
 *                              <li>@ref gpudb::visualize_image_chart_jitter_y
 *                                  "visualize_image_chart_jitter_y": Amplitude
 *                                  of vertical jitter applied to non-numeric y
 *                                  column values. The default value is '0.0'.
 *                              <li>@ref gpudb::visualize_image_chart_plot_all
 *                                  "visualize_image_chart_plot_all": If this
 *                                  options is set to "true", all non-numeric
 *                                  column values are plotted ignoring min_x,
 *                                  max_x, min_y and max_y parameters. The
 *                                  default value is 'false'.
 *                          </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::visualize_image_chart_image_encoding
 *                             "visualize_image_chart_image_encoding": Encoding
 *                             to be applied to the output image. When using
 *                             JSON serialization it is recommended to specify
 *                             this as @ref gpudb::visualize_image_chart_base64
 *                             "base64".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::visualize_image_chart_base64
 *                                     "visualize_image_chart_base64": Apply
 *                                     base64 encoding to the output image.
 *                                 <li>@ref gpudb::visualize_image_chart_none
 *                                     "visualize_image_chart_none": Do not
 *                                     apply any additional encoding to the
 *                                     output image.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::visualize_image_chart_none
 *                             "visualize_image_chart_none".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::VisualizeImageChartResponse "Response" object containing
 *         the result of the operation.
 */
VisualizeImageChartResponse visualizeImageChart( const std::string& tableName,
                                                 const std::vector<std::string>& xColumnNames,
                                                 const std::vector<std::string>& yColumnNames,
                                                 const double minX,
                                                 const double maxX,
                                                 const double minY,
                                                 const double maxY,
                                                 const int32_t width,
                                                 const int32_t height,
                                                 const std::string& bgColor,
                                                 const std::map<std::string, std::vector<std::string> >& styleOptions,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Scatter plot is the only plot type currently supported. A non-numeric column
 * can be specified as x or y column and jitters can be added to them to avoid
 * excessive overlapping. All color values must be in the format RRGGBB or
 * AARRGGBB (to specify the alpha value).
 * The image is contained in the @ref
 * gpudb::VisualizeImageChartResponse::imageData "imageData" field.
 *
 * @param[in] tableName  Name of the table containing the data to be drawn as a
 *                       chart, in [schema_name.]table_name format, using
 *                       standard <a
 *                       href="../../../concepts/tables/#table-name-resolution"
 *                       target="_top">name resolution rules</a>.
 * @param[in] xColumnNames  Names of the columns containing the data mapped to
 *                          the x axis of a chart.
 * @param[in] yColumnNames  Names of the columns containing the data mapped to
 *                          the y axis of a chart.
 * @param[in] minX  Lower bound for the x column values. For non-numeric x
 *                  column, each x column item is mapped to an integral value
 *                  starting from 0.
 * @param[in] maxX  Upper bound for the x column values. For non-numeric x
 *                  column, each x column item is mapped to an integral value
 *                  starting from 0.
 * @param[in] minY  Lower bound for the y column values. For non-numeric y
 *                  column, each y column item is mapped to an integral value
 *                  starting from 0.
 * @param[in] maxY  Upper bound for the y column values. For non-numeric y
 *                  column, each y column item is mapped to an integral value
 *                  starting from 0.
 * @param[in] width  Width of the generated image in pixels.
 * @param[in] height  Height of the generated image in pixels.
 * @param[in] bgColor  Background color of the generated image.
 * @param[in] styleOptions  Rendering style options for a chart.
 *                          <ul>
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_pointcolor
 *                                  "visualize_image_chart_pointcolor": The
 *                                  color of points in the plot represented as
 *                                  a hexadecimal number. The default value is
 *                                  '0000FF'.
 *                              <li>@ref gpudb::visualize_image_chart_pointsize
 *                                  "visualize_image_chart_pointsize": The size
 *                                  of points in the plot represented as number
 *                                  of pixels. The default value is '3'.
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_pointshape
 *                                  "visualize_image_chart_pointshape": The
 *                                  shape of points in the plot.
 *                                  Supported values:
 *                                  <ul>
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_none
 *                                          "visualize_image_chart_none"
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_circle
 *                                          "visualize_image_chart_circle"
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_square
 *                                          "visualize_image_chart_square"
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_diamond
 *                                          "visualize_image_chart_diamond"
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_hollowcircle
 *                                          "visualize_image_chart_hollowcircle"
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_hollowsquare
 *                                          "visualize_image_chart_hollowsquare"
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_hollowdiamond
 *                                          "visualize_image_chart_hollowdiamond"
 *                                  </ul>
 *                                  The default value is @ref
 *                                  gpudb::visualize_image_chart_square
 *                                  "visualize_image_chart_square".
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_cb_pointcolors
 *                                  "visualize_image_chart_cb_pointcolors":
 *                                  Point color class break information
 *                                  consisting of three entries: class-break
 *                                  attribute, class-break values/ranges, and
 *                                  point color values. This option overrides
 *                                  the pointcolor option if both are provided.
 *                                  Class-break ranges are represented in the
 *                                  form of "min:max". Class-break
 *                                  values/ranges and point color values are
 *                                  separated by cb_delimiter, e.g. {"price",
 *                                  "20:30;30:40;40:50",
 *                                  "0xFF0000;0x00FF00;0x0000FF"}.
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_cb_pointsizes
 *                                  "visualize_image_chart_cb_pointsizes":
 *                                  Point size class break information
 *                                  consisting of three entries: class-break
 *                                  attribute, class-break values/ranges, and
 *                                  point size values. This option overrides
 *                                  the pointsize option if both are provided.
 *                                  Class-break ranges are represented in the
 *                                  form of "min:max". Class-break
 *                                  values/ranges and point size values are
 *                                  separated by cb_delimiter, e.g. {"states",
 *                                  "NY;TX;CA", "3;5;7"}.
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_cb_pointshapes
 *                                  "visualize_image_chart_cb_pointshapes":
 *                                  Point shape class break information
 *                                  consisting of three entries: class-break
 *                                  attribute, class-break values/ranges, and
 *                                  point shape names. This option overrides
 *                                  the pointshape option if both are provided.
 *                                  Class-break ranges are represented in the
 *                                  form of "min:max". Class-break
 *                                  values/ranges and point shape names are
 *                                  separated by cb_delimiter, e.g. {"states",
 *                                  "NY;TX;CA", "circle;square;diamond"}.
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_cb_delimiter
 *                                  "visualize_image_chart_cb_delimiter": A
 *                                  character or string which separates
 *                                  per-class values in a class-break style
 *                                  option string. The default value is ';'.
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_x_order_by
 *                                  "visualize_image_chart_x_order_by": An
 *                                  expression or aggregate expression by which
 *                                  non-numeric x column values are sorted,
 *                                  e.g. "avg(price) descending".
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_y_order_by
 *                                  "visualize_image_chart_y_order_by": An
 *                                  expression or aggregate expression by which
 *                                  non-numeric y column values are sorted,
 *                                  e.g. "avg(price)", which defaults to
 *                                  "avg(price) ascending".
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_scale_type_x
 *                                  "visualize_image_chart_scale_type_x": Type
 *                                  of x axis scale.
 *                                  Supported values:
 *                                  <ul>
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_none
 *                                          "visualize_image_chart_none": No
 *                                          scale is applied to the x axis.
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_log
 *                                          "visualize_image_chart_log": A
 *                                          base-10 log scale is applied to the
 *                                          x axis.
 *                                  </ul>
 *                                  The default value is @ref
 *                                  gpudb::visualize_image_chart_none
 *                                  "visualize_image_chart_none".
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_scale_type_y
 *                                  "visualize_image_chart_scale_type_y": Type
 *                                  of y axis scale.
 *                                  Supported values:
 *                                  <ul>
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_none
 *                                          "visualize_image_chart_none": No
 *                                          scale is applied to the y axis.
 *                                      <li>@ref
 *                                          gpudb::visualize_image_chart_log
 *                                          "visualize_image_chart_log": A
 *                                          base-10 log scale is applied to the
 *                                          y axis.
 *                                  </ul>
 *                                  The default value is @ref
 *                                  gpudb::visualize_image_chart_none
 *                                  "visualize_image_chart_none".
 *                              <li>@ref
 *                                  gpudb::visualize_image_chart_min_max_scaled
 *                                  "visualize_image_chart_min_max_scaled": If
 *                                  this options is set to "false", this
 *                                  endpoint expects request's min/max values
 *                                  are not yet scaled. They will be scaled
 *                                  according to scale_type_x or scale_type_y
 *                                  for response. If this options is set to
 *                                  "true", this endpoint expects request's
 *                                  min/max values are already scaled according
 *                                  to scale_type_x/scale_type_y. Response's
 *                                  min/max values will be equal to request's
 *                                  min/max values. The default value is
 *                                  'false'.
 *                              <li>@ref gpudb::visualize_image_chart_jitter_x
 *                                  "visualize_image_chart_jitter_x": Amplitude
 *                                  of horizontal jitter applied to non-numeric
 *                                  x column values. The default value is
 *                                  '0.0'.
 *                              <li>@ref gpudb::visualize_image_chart_jitter_y
 *                                  "visualize_image_chart_jitter_y": Amplitude
 *                                  of vertical jitter applied to non-numeric y
 *                                  column values. The default value is '0.0'.
 *                              <li>@ref gpudb::visualize_image_chart_plot_all
 *                                  "visualize_image_chart_plot_all": If this
 *                                  options is set to "true", all non-numeric
 *                                  column values are plotted ignoring min_x,
 *                                  max_x, min_y and max_y parameters. The
 *                                  default value is 'false'.
 *                          </ul>
 * @param[in] options  Optional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::visualize_image_chart_image_encoding
 *                             "visualize_image_chart_image_encoding": Encoding
 *                             to be applied to the output image. When using
 *                             JSON serialization it is recommended to specify
 *                             this as @ref gpudb::visualize_image_chart_base64
 *                             "base64".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::visualize_image_chart_base64
 *                                     "visualize_image_chart_base64": Apply
 *                                     base64 encoding to the output image.
 *                                 <li>@ref gpudb::visualize_image_chart_none
 *                                     "visualize_image_chart_none": Do not
 *                                     apply any additional encoding to the
 *                                     output image.
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::visualize_image_chart_none
 *                             "visualize_image_chart_none".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::VisualizeImageChartResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::VisualizeImageChartResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
VisualizeImageChartResponse& visualizeImageChart( const std::string& tableName,
                                                  const std::vector<std::string>& xColumnNames,
                                                  const std::vector<std::string>& yColumnNames,
                                                  const double minX,
                                                  const double maxX,
                                                  const double minY,
                                                  const double maxY,
                                                  const int32_t width,
                                                  const int32_t height,
                                                  const std::string& bgColor,
                                                  const std::map<std::string, std::vector<std::string> >& styleOptions,
                                                  const std::map<std::string, std::string>& options,
                                                  VisualizeImageChartResponse& response_ ) const;

/** @private */
VisualizeImageClassbreakResponse visualizeImageClassbreak( const VisualizeImageClassbreakRequest& request_ ) const;

/** @private */
VisualizeImageClassbreakResponse& visualizeImageClassbreak( const VisualizeImageClassbreakRequest& request_,
                                                            VisualizeImageClassbreakResponse& response_ ) const;

/** @private */
VisualizeImageClassbreakResponse visualizeImageClassbreak( const std::vector<std::string>& tableNames,
                                                           const std::vector<std::string>& worldTableNames,
                                                           const std::string& xColumnName,
                                                           const std::string& yColumnName,
                                                           const std::string& symbolColumnName,
                                                           const std::string& geometryColumnName,
                                                           const std::vector<std::vector<std::string> >& trackIds,
                                                           const std::string& cbAttr,
                                                           const std::vector<std::string>& cbVals,
                                                           const std::string& cbPointcolorAttr,
                                                           const std::vector<std::string>& cbPointcolorVals,
                                                           const std::string& cbPointalphaAttr,
                                                           const std::vector<std::string>& cbPointalphaVals,
                                                           const std::string& cbPointsizeAttr,
                                                           const std::vector<std::string>& cbPointsizeVals,
                                                           const std::string& cbPointshapeAttr,
                                                           const std::vector<std::string>& cbPointshapeVals,
                                                           const double minX,
                                                           const double maxX,
                                                           const double minY,
                                                           const double maxY,
                                                           const int32_t width,
                                                           const int32_t height,
                                                           const std::string& projection,
                                                           const int64_t bgColor,
                                                           const std::map<std::string, std::vector<std::string> >& styleOptions,
                                                           const std::map<std::string, std::string>& options,
                                                           const std::vector<int32_t>& cbTransparencyVec ) const;

/** @private */
VisualizeImageClassbreakResponse& visualizeImageClassbreak( const std::vector<std::string>& tableNames,
                                                            const std::vector<std::string>& worldTableNames,
                                                            const std::string& xColumnName,
                                                            const std::string& yColumnName,
                                                            const std::string& symbolColumnName,
                                                            const std::string& geometryColumnName,
                                                            const std::vector<std::vector<std::string> >& trackIds,
                                                            const std::string& cbAttr,
                                                            const std::vector<std::string>& cbVals,
                                                            const std::string& cbPointcolorAttr,
                                                            const std::vector<std::string>& cbPointcolorVals,
                                                            const std::string& cbPointalphaAttr,
                                                            const std::vector<std::string>& cbPointalphaVals,
                                                            const std::string& cbPointsizeAttr,
                                                            const std::vector<std::string>& cbPointsizeVals,
                                                            const std::string& cbPointshapeAttr,
                                                            const std::vector<std::string>& cbPointshapeVals,
                                                            const double minX,
                                                            const double maxX,
                                                            const double minY,
                                                            const double maxY,
                                                            const int32_t width,
                                                            const int32_t height,
                                                            const std::string& projection,
                                                            const int64_t bgColor,
                                                            const std::map<std::string, std::vector<std::string> >& styleOptions,
                                                            const std::map<std::string, std::string>& options,
                                                            const std::vector<int32_t>& cbTransparencyVec,
                                                            VisualizeImageClassbreakResponse& response_ ) const;

/** @private */
VisualizeImageContourResponse visualizeImageContour( const VisualizeImageContourRequest& request_ ) const;

/** @private */
VisualizeImageContourResponse& visualizeImageContour( const VisualizeImageContourRequest& request_,
                                                      VisualizeImageContourResponse& response_ ) const;

/** @private */
VisualizeImageContourResponse visualizeImageContour( const std::vector<std::string>& tableNames,
                                                     const std::string& xColumnName,
                                                     const std::string& yColumnName,
                                                     const std::string& valueColumnName,
                                                     const double minX,
                                                     const double maxX,
                                                     const double minY,
                                                     const double maxY,
                                                     const int32_t width,
                                                     const int32_t height,
                                                     const std::string& projection,
                                                     const std::map<std::string, std::string>& styleOptions,
                                                     const std::map<std::string, std::string>& options ) const;

/** @private */
VisualizeImageContourResponse& visualizeImageContour( const std::vector<std::string>& tableNames,
                                                      const std::string& xColumnName,
                                                      const std::string& yColumnName,
                                                      const std::string& valueColumnName,
                                                      const double minX,
                                                      const double maxX,
                                                      const double minY,
                                                      const double maxY,
                                                      const int32_t width,
                                                      const int32_t height,
                                                      const std::string& projection,
                                                      const std::map<std::string, std::string>& styleOptions,
                                                      const std::map<std::string, std::string>& options,
                                                      VisualizeImageContourResponse& response_ ) const;

/** @private */
VisualizeImageHeatmapResponse visualizeImageHeatmap( const VisualizeImageHeatmapRequest& request_ ) const;

/** @private */
VisualizeImageHeatmapResponse& visualizeImageHeatmap( const VisualizeImageHeatmapRequest& request_,
                                                      VisualizeImageHeatmapResponse& response_ ) const;

/** @private */
VisualizeImageHeatmapResponse visualizeImageHeatmap( const std::vector<std::string>& tableNames,
                                                     const std::string& xColumnName,
                                                     const std::string& yColumnName,
                                                     const std::string& valueColumnName,
                                                     const std::string& geometryColumnName,
                                                     const double minX,
                                                     const double maxX,
                                                     const double minY,
                                                     const double maxY,
                                                     const int32_t width,
                                                     const int32_t height,
                                                     const std::string& projection,
                                                     const std::map<std::string, std::string>& styleOptions,
                                                     const std::map<std::string, std::string>& options ) const;

/** @private */
VisualizeImageHeatmapResponse& visualizeImageHeatmap( const std::vector<std::string>& tableNames,
                                                      const std::string& xColumnName,
                                                      const std::string& yColumnName,
                                                      const std::string& valueColumnName,
                                                      const std::string& geometryColumnName,
                                                      const double minX,
                                                      const double maxX,
                                                      const double minY,
                                                      const double maxY,
                                                      const int32_t width,
                                                      const int32_t height,
                                                      const std::string& projection,
                                                      const std::map<std::string, std::string>& styleOptions,
                                                      const std::map<std::string, std::string>& options,
                                                      VisualizeImageHeatmapResponse& response_ ) const;

/** @private */
VisualizeImageLabelsResponse visualizeImageLabels( const VisualizeImageLabelsRequest& request_ ) const;

/** @private */
VisualizeImageLabelsResponse& visualizeImageLabels( const VisualizeImageLabelsRequest& request_,
                                                    VisualizeImageLabelsResponse& response_ ) const;

/** @private */
VisualizeImageLabelsResponse visualizeImageLabels( const std::string& tableName,
                                                   const std::string& xColumnName,
                                                   const std::string& yColumnName,
                                                   const std::string& xOffset,
                                                   const std::string& yOffset,
                                                   const std::string& textString,
                                                   const std::string& font,
                                                   const std::string& textColor,
                                                   const std::string& textAngle,
                                                   const std::string& textScale,
                                                   const std::string& drawBox,
                                                   const std::string& drawLeader,
                                                   const std::string& lineWidth,
                                                   const std::string& lineColor,
                                                   const std::string& fillColor,
                                                   const std::string& leaderXColumnName,
                                                   const std::string& leaderYColumnName,
                                                   const std::string& filter,
                                                   const double minX,
                                                   const double maxX,
                                                   const double minY,
                                                   const double maxY,
                                                   const int32_t width,
                                                   const int32_t height,
                                                   const std::string& projection,
                                                   const std::map<std::string, std::string>& options ) const;

/** @private */
VisualizeImageLabelsResponse& visualizeImageLabels( const std::string& tableName,
                                                    const std::string& xColumnName,
                                                    const std::string& yColumnName,
                                                    const std::string& xOffset,
                                                    const std::string& yOffset,
                                                    const std::string& textString,
                                                    const std::string& font,
                                                    const std::string& textColor,
                                                    const std::string& textAngle,
                                                    const std::string& textScale,
                                                    const std::string& drawBox,
                                                    const std::string& drawLeader,
                                                    const std::string& lineWidth,
                                                    const std::string& lineColor,
                                                    const std::string& fillColor,
                                                    const std::string& leaderXColumnName,
                                                    const std::string& leaderYColumnName,
                                                    const std::string& filter,
                                                    const double minX,
                                                    const double maxX,
                                                    const double minY,
                                                    const double maxY,
                                                    const int32_t width,
                                                    const int32_t height,
                                                    const std::string& projection,
                                                    const std::map<std::string, std::string>& options,
                                                    VisualizeImageLabelsResponse& response_ ) const;

/**
 * Generate an image containing isolines for travel results using an existing
 * graph. Isolines represent curves of equal cost, with cost typically
 * referring to the time or distance assigned as the weights of the underlying
 * graph. See <a href="../../../graph_solver/network_graph_solver/"
 * target="_top">Graphs & Solvers</a> for more information on graphs.
 *
 * @param[in] request_  @ref gpudb::VisualizeIsochroneRequest "Request" object
 *                      containing the parameters for the operation.
 *
 * @return @ref gpudb::VisualizeIsochroneResponse "Response" object containing
 *         the result of the operation.
 */
VisualizeIsochroneResponse visualizeIsochrone( const VisualizeIsochroneRequest& request_ ) const;

/**
 * Generate an image containing isolines for travel results using an existing
 * graph. Isolines represent curves of equal cost, with cost typically
 * referring to the time or distance assigned as the weights of the underlying
 * graph. See <a href="../../../graph_solver/network_graph_solver/"
 * target="_top">Graphs & Solvers</a> for more information on graphs.
 *
 * @param[in] request_  @ref gpudb::VisualizeIsochroneRequest "Request" object
 *                      containing the parameters for the operation.
 * @param[out] response_  @ref gpudb::VisualizeIsochroneResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::VisualizeIsochroneResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
VisualizeIsochroneResponse& visualizeIsochrone( const VisualizeIsochroneRequest& request_,
                                                VisualizeIsochroneResponse& response_ ) const;

/**
 * Generate an image containing isolines for travel results using an existing
 * graph. Isolines represent curves of equal cost, with cost typically
 * referring to the time or distance assigned as the weights of the underlying
 * graph. See <a href="../../../graph_solver/network_graph_solver/"
 * target="_top">Graphs & Solvers</a> for more information on graphs.
 *
 * @param[in] graphName  Name of the graph on which the isochrone is to be
 *                       computed.
 * @param[in] sourceNode  Starting vertex on the underlying graph from/to which
 *                        the isochrones are created.
 * @param[in] maxSolutionRadius  Extent of the search radius around @a
 *                               sourceNode. Set to '-1.0' for unrestricted
 *                               search radius. The default value is -1.0.
 * @param[in] weightsOnEdges  Additional weights to apply to the edges of an
 *                            existing graph. Weights must be specified using
 *                            <a
 *                            href="../../../graph_solver/network_graph_solver/#identifiers"
 *                            target="_top">identifiers</a>; identifiers are
 *                            grouped as <a
 *                            href="../../../graph_solver/network_graph_solver/#id-combos"
 *                            target="_top">combinations</a>. Identifiers can
 *                            be used with existing column names, e.g.,
 *                            'table.column AS WEIGHTS_EDGE_ID', or
 *                            expressions, e.g., 'ST_LENGTH(wkt) AS
 *                            WEIGHTS_VALUESPECIFIED'. Any provided weights
 *                            will be added (in the case of
 *                            'WEIGHTS_VALUESPECIFIED') to or multiplied with
 *                            (in the case of 'WEIGHTS_FACTORSPECIFIED') the
 *                            existing weight(s). The default value is an empty
 *                            vector.
 * @param[in] restrictions  Additional restrictions to apply to the nodes/edges
 *                          of an existing graph. Restrictions must be
 *                          specified using <a
 *                          href="../../../graph_solver/network_graph_solver/#identifiers"
 *                          target="_top">identifiers</a>; identifiers are
 *                          grouped as <a
 *                          href="../../../graph_solver/network_graph_solver/#id-combos"
 *                          target="_top">combinations</a>. Identifiers can be
 *                          used with existing column names, e.g.,
 *                          'table.column AS RESTRICTIONS_EDGE_ID', or
 *                          expressions, e.g., 'column/2 AS
 *                          RESTRICTIONS_VALUECOMPARED'. If @ref
 *                          gpudb::visualize_isochrone_remove_previous_restrictions
 *                          "remove_previous_restrictions" is set to @ref
 *                          gpudb::visualize_isochrone_true "true", any
 *                          provided restrictions will replace the existing
 *                          restrictions. If @ref
 *                          gpudb::visualize_isochrone_remove_previous_restrictions
 *                          "remove_previous_restrictions" is set to @ref
 *                          gpudb::visualize_isochrone_false "false", any
 *                          provided restrictions will be added (in the case of
 *                          'RESTRICTIONS_VALUECOMPARED') to or replaced (in
 *                          the case of 'RESTRICTIONS_ONOFFCOMPARED'). The
 *                          default value is an empty vector.
 * @param[in] numLevels  Number of equally-separated isochrones to compute. The
 *                       default value is 1.
 * @param[in] generateImage  If set to @ref gpudb::visualize_isochrone_true
 *                           "true", generates a PNG image of the isochrones in
 *                           the response.
 *                           Supported values:
 *                           <ul>
 *                               <li>true
 *                               <li>false
 *                           </ul>
 *                           The default value is true.
 * @param[in] levelsTable  Name of the table to output the isochrones to, in
 *                         [schema_name.]table_name format, using standard <a
 *                         href="../../../concepts/tables/#table-name-resolution"
 *                         target="_top">name resolution rules</a> and meeting
 *                         <a
 *                         href="../../../concepts/tables/#table-naming-criteria"
 *                         target="_top">table naming criteria</a>.  The table
 *                         will contain levels and their corresponding WKT
 *                         geometry. If no value is provided, the table is not
 *                         generated. The default value is ''.
 * @param[in] styleOptions  Various style related options of the isochrone
 *                          image.
 *                          <ul>
 *                              <li>@ref gpudb::visualize_isochrone_line_size
 *                                  "visualize_isochrone_line_size": The width
 *                                  of the contour lines in pixels. The default
 *                                  value is '3'. The minimum allowed value is
 *                                  '0'. The maximum allowed value is '20'.
 *                              <li>@ref gpudb::visualize_isochrone_color
 *                                  "visualize_isochrone_color": Color of
 *                                  generated isolines. All color values must
 *                                  be in the format RRGGBB or AARRGGBB (to
 *                                  specify the alpha value). If alpha is
 *                                  specified and flooded contours are enabled,
 *                                  it will be used for as the transparency of
 *                                  the latter. The default value is
 *                                  'FF696969'.
 *                              <li>@ref gpudb::visualize_isochrone_bg_color
 *                                  "visualize_isochrone_bg_color": When @a
 *                                  generateImage is set to @ref
 *                                  gpudb::visualize_isochrone_true "true",
 *                                  background color of the generated image.
 *                                  All color values must be in the format
 *                                  RRGGBB or AARRGGBB (to specify the alpha
 *                                  value). The default value is '00000000'.
 *                              <li>@ref gpudb::visualize_isochrone_text_color
 *                                  "visualize_isochrone_text_color": When @ref
 *                                  gpudb::visualize_isochrone_add_labels
 *                                  "add_labels" is set to @ref
 *                                  gpudb::visualize_isochrone_true "true",
 *                                  color for the labels. All color values must
 *                                  be in the format RRGGBB or AARRGGBB (to
 *                                  specify the alpha value). The default value
 *                                  is 'FF000000'.
 *                              <li>@ref gpudb::visualize_isochrone_colormap
 *                                  "visualize_isochrone_colormap": Colormap
 *                                  for contours or fill-in regions when
 *                                  applicable. All color values must be in the
 *                                  format RRGGBB or AARRGGBB (to specify the
 *                                  alpha value).
 *                                  Supported values:
 *                                  <ul>
 *                                      <li>@ref gpudb::visualize_isochrone_jet
 *                                          "visualize_isochrone_jet"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_accent
 *                                          "visualize_isochrone_accent"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_afmhot
 *                                          "visualize_isochrone_afmhot"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_autumn
 *                                          "visualize_isochrone_autumn"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_binary
 *                                          "visualize_isochrone_binary"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_blues
 *                                          "visualize_isochrone_blues"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_bone
 *                                          "visualize_isochrone_bone"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_brbg
 *                                          "visualize_isochrone_brbg"
 *                                      <li>@ref gpudb::visualize_isochrone_brg
 *                                          "visualize_isochrone_brg"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_bugn
 *                                          "visualize_isochrone_bugn"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_bupu
 *                                          "visualize_isochrone_bupu"
 *                                      <li>@ref gpudb::visualize_isochrone_bwr
 *                                          "visualize_isochrone_bwr"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_cmrmap
 *                                          "visualize_isochrone_cmrmap"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_cool
 *                                          "visualize_isochrone_cool"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_coolwarm
 *                                          "visualize_isochrone_coolwarm"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_copper
 *                                          "visualize_isochrone_copper"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_cubehelix
 *                                          "visualize_isochrone_cubehelix"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_dark2
 *                                          "visualize_isochrone_dark2"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_flag
 *                                          "visualize_isochrone_flag"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_earth
 *                                          "visualize_isochrone_gist_earth"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_gray
 *                                          "visualize_isochrone_gist_gray"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_heat
 *                                          "visualize_isochrone_gist_heat"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_ncar
 *                                          "visualize_isochrone_gist_ncar"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_rainbow
 *                                          "visualize_isochrone_gist_rainbow"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_stern
 *                                          "visualize_isochrone_gist_stern"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_yarg
 *                                          "visualize_isochrone_gist_yarg"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gnbu
 *                                          "visualize_isochrone_gnbu"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gnuplot2
 *                                          "visualize_isochrone_gnuplot2"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gnuplot
 *                                          "visualize_isochrone_gnuplot"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gray
 *                                          "visualize_isochrone_gray"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_greens
 *                                          "visualize_isochrone_greens"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_greys
 *                                          "visualize_isochrone_greys"
 *                                      <li>@ref gpudb::visualize_isochrone_hot
 *                                          "visualize_isochrone_hot"
 *                                      <li>@ref gpudb::visualize_isochrone_hsv
 *                                          "visualize_isochrone_hsv"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_inferno
 *                                          "visualize_isochrone_inferno"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_magma
 *                                          "visualize_isochrone_magma"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_nipy_spectral
 *                                          "visualize_isochrone_nipy_spectral"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_ocean
 *                                          "visualize_isochrone_ocean"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_oranges
 *                                          "visualize_isochrone_oranges"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_orrd
 *                                          "visualize_isochrone_orrd"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_paired
 *                                          "visualize_isochrone_paired"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_pastel1
 *                                          "visualize_isochrone_pastel1"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_pastel2
 *                                          "visualize_isochrone_pastel2"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_pink
 *                                          "visualize_isochrone_pink"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_piyg
 *                                          "visualize_isochrone_piyg"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_plasma
 *                                          "visualize_isochrone_plasma"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_prgn
 *                                          "visualize_isochrone_prgn"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_prism
 *                                          "visualize_isochrone_prism"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_pubu
 *                                          "visualize_isochrone_pubu"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_pubugn
 *                                          "visualize_isochrone_pubugn"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_puor
 *                                          "visualize_isochrone_puor"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_purd
 *                                          "visualize_isochrone_purd"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_purples
 *                                          "visualize_isochrone_purples"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_rainbow
 *                                          "visualize_isochrone_rainbow"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_rdbu
 *                                          "visualize_isochrone_rdbu"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_rdgy
 *                                          "visualize_isochrone_rdgy"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_rdpu
 *                                          "visualize_isochrone_rdpu"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_rdylbu
 *                                          "visualize_isochrone_rdylbu"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_rdylgn
 *                                          "visualize_isochrone_rdylgn"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_reds
 *                                          "visualize_isochrone_reds"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_seismic
 *                                          "visualize_isochrone_seismic"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_set1
 *                                          "visualize_isochrone_set1"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_set2
 *                                          "visualize_isochrone_set2"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_set3
 *                                          "visualize_isochrone_set3"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_spectral
 *                                          "visualize_isochrone_spectral"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_spring
 *                                          "visualize_isochrone_spring"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_summer
 *                                          "visualize_isochrone_summer"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_terrain
 *                                          "visualize_isochrone_terrain"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_viridis
 *                                          "visualize_isochrone_viridis"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_winter
 *                                          "visualize_isochrone_winter"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_wistia
 *                                          "visualize_isochrone_wistia"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_ylgn
 *                                          "visualize_isochrone_ylgn"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_ylgnbu
 *                                          "visualize_isochrone_ylgnbu"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_ylorbr
 *                                          "visualize_isochrone_ylorbr"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_ylorrd
 *                                          "visualize_isochrone_ylorrd"
 *                                  </ul>
 *                                  The default value is @ref
 *                                  gpudb::visualize_isochrone_jet
 *                                  "visualize_isochrone_jet".
 *                          </ul>
 * @param[in] solveOptions  Solver specific parameters.
 *                          <ul>
 *                              <li>@ref
 *                                  gpudb::visualize_isochrone_remove_previous_restrictions
 *                                  "visualize_isochrone_remove_previous_restrictions":
 *                                  Ignore the restrictions applied to the
 *                                  graph during the creation stage and only
 *                                  use the restrictions specified in this
 *                                  request if set to @ref
 *                                  gpudb::visualize_isochrone_true "true".
 *                                  Supported values:
 *                                  <ul>
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_true
 *                                          "visualize_isochrone_true"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_false
 *                                          "visualize_isochrone_false"
 *                                  </ul>
 *                                  The default value is @ref
 *                                  gpudb::visualize_isochrone_false
 *                                  "visualize_isochrone_false".
 *                              <li>@ref
 *                                  gpudb::visualize_isochrone_restriction_threshold_value
 *                                  "visualize_isochrone_restriction_threshold_value":
 *                                  Value-based restriction comparison. Any
 *                                  node or edge with a
 *                                  'RESTRICTIONS_VALUECOMPARED' value greater
 *                                  than the @ref
 *                                  gpudb::visualize_isochrone_restriction_threshold_value
 *                                  "restriction_threshold_value" will not be
 *                                  included in the solution.
 *                              <li>@ref
 *                                  gpudb::visualize_isochrone_uniform_weights
 *                                  "visualize_isochrone_uniform_weights": When
 *                                  specified, assigns the given value to all
 *                                  the edges in the graph. Note that weights
 *                                  provided in @a weightsOnEdges will override
 *                                  this value.
 *                          </ul>
 *                          The default value is an empty map.
 * @param[in] contourOptions  Solver specific parameters.
 *                            <ul>
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_projection
 *                                    "visualize_isochrone_projection": Spatial
 *                                    Reference System (i.e. EPSG Code).
 *                                    Supported values:
 *                                    <ul>
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_3857
 *                                            "visualize_isochrone_3857"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_102100
 *                                            "visualize_isochrone_102100"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_900913
 *                                            "visualize_isochrone_900913"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_EPSG_4326
 *                                            "visualize_isochrone_EPSG_4326"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_PLATE_CARREE
 *                                            "visualize_isochrone_PLATE_CARREE"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_EPSG_900913
 *                                            "visualize_isochrone_EPSG_900913"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_EPSG_102100
 *                                            "visualize_isochrone_EPSG_102100"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_EPSG_3857
 *                                            "visualize_isochrone_EPSG_3857"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_WEB_MERCATOR
 *                                            "visualize_isochrone_WEB_MERCATOR"
 *                                    </ul>
 *                                    The default value is @ref
 *                                    gpudb::visualize_isochrone_PLATE_CARREE
 *                                    "visualize_isochrone_PLATE_CARREE".
 *                                <li>@ref gpudb::visualize_isochrone_width
 *                                    "visualize_isochrone_width": When @a
 *                                    generateImage is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    width of the generated image. The default
 *                                    value is '512'.
 *                                <li>@ref gpudb::visualize_isochrone_height
 *                                    "visualize_isochrone_height": When @a
 *                                    generateImage is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    height of the generated image. If the
 *                                    default value is used, the @ref
 *                                    gpudb::visualize_isochrone_height
 *                                    "height" is set to the value resulting
 *                                    from multiplying the aspect ratio by the
 *                                    @ref gpudb::visualize_isochrone_width
 *                                    "width". The default value is '-1'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_search_radius
 *                                    "visualize_isochrone_search_radius": When
 *                                    interpolating the graph solution to
 *                                    generate the isochrone, neighborhood of
 *                                    influence of sample data (in percent of
 *                                    the image/grid). The default value is
 *                                    '20'.
 *                                <li>@ref gpudb::visualize_isochrone_grid_size
 *                                    "visualize_isochrone_grid_size": When
 *                                    interpolating the graph solution to
 *                                    generate the isochrone, number of
 *                                    subdivisions along the x axis when
 *                                    building the grid (the y is computed
 *                                    using the aspect ratio of the output
 *                                    image). The default value is '100'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_color_isolines
 *                                    "visualize_isochrone_color_isolines":
 *                                    Color each isoline according to the
 *                                    colormap; otherwise, use the foreground
 *                                    color.
 *                                    Supported values:
 *                                    <ul>
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_true
 *                                            "visualize_isochrone_true"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_false
 *                                            "visualize_isochrone_false"
 *                                    </ul>
 *                                    The default value is @ref
 *                                    gpudb::visualize_isochrone_true
 *                                    "visualize_isochrone_true".
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "visualize_isochrone_add_labels": If set
 *                                    to @ref gpudb::visualize_isochrone_true
 *                                    "true", add labels to the isolines.
 *                                    Supported values:
 *                                    <ul>
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_true
 *                                            "visualize_isochrone_true"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_false
 *                                            "visualize_isochrone_false"
 *                                    </ul>
 *                                    The default value is @ref
 *                                    gpudb::visualize_isochrone_false
 *                                    "visualize_isochrone_false".
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_labels_font_size
 *                                    "visualize_isochrone_labels_font_size":
 *                                    When @ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "add_labels" is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    size of the font (in pixels) to use for
 *                                    labels. The default value is '12'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_labels_font_family
 *                                    "visualize_isochrone_labels_font_family":
 *                                    When @ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "add_labels" is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    font name to be used when adding labels.
 *                                    The default value is 'arial'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_labels_search_window
 *                                    "visualize_isochrone_labels_search_window":
 *                                    When @ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "add_labels" is set to @ref
 *                                    gpudb::visualize_isochrone_true "true", a
 *                                    search window is used to rate the local
 *                                    quality of each isoline. Smooth,
 *                                    continuous, long stretches with
 *                                    relatively flat angles are favored. The
 *                                    provided value is multiplied by the @ref
 *                                    gpudb::visualize_isochrone_labels_font_size
 *                                    "labels_font_size" to calculate the final
 *                                    window size. The default value is '4'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_labels_intralevel_separation
 *                                    "visualize_isochrone_labels_intralevel_separation":
 *                                    When @ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "add_labels" is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    this value determines the  distance (in
 *                                    multiples of the @ref
 *                                    gpudb::visualize_isochrone_labels_font_size
 *                                    "labels_font_size") to use when
 *                                    separating labels of different values.
 *                                    The default value is '4'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_labels_interlevel_separation
 *                                    "visualize_isochrone_labels_interlevel_separation":
 *                                    When @ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "add_labels" is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    this value determines the distance (in
 *                                    percent of the total window size) to use
 *                                    when separating labels of the same value.
 *                                    The default value is '20'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_labels_max_angle
 *                                    "visualize_isochrone_labels_max_angle":
 *                                    When @ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "add_labels" is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    maximum angle (in degrees) from the
 *                                    vertical to use when adding labels. The
 *                                    default value is '60'.
 *                            </ul>
 *                            The default value is an empty map.
 * @param[in] options  Additional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::visualize_isochrone_solve_table
 *                             "visualize_isochrone_solve_table": Name of the
 *                             table to host intermediate solve results, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>.  This
 *                             table will contain the position and cost for
 *                             each vertex in the graph. If the default value
 *                             is used, a temporary table is created and
 *                             deleted once the solution is calculated. The
 *                             default value is ''.
 *                         <li>@ref gpudb::visualize_isochrone_is_replicated
 *                             "visualize_isochrone_is_replicated": If set to
 *                             @ref gpudb::visualize_isochrone_true "true",
 *                             replicate the @ref
 *                             gpudb::visualize_isochrone_solve_table
 *                             "solve_table".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::visualize_isochrone_true
 *                                     "visualize_isochrone_true"
 *                                 <li>@ref gpudb::visualize_isochrone_false
 *                                     "visualize_isochrone_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::visualize_isochrone_true
 *                             "visualize_isochrone_true".
 *                         <li>@ref gpudb::visualize_isochrone_data_min_x
 *                             "visualize_isochrone_data_min_x": Lower bound
 *                             for the x values. If not provided, it will be
 *                             computed from the bounds of the input data.
 *                         <li>@ref gpudb::visualize_isochrone_data_max_x
 *                             "visualize_isochrone_data_max_x": Upper bound
 *                             for the x values. If not provided, it will be
 *                             computed from the bounds of the input data.
 *                         <li>@ref gpudb::visualize_isochrone_data_min_y
 *                             "visualize_isochrone_data_min_y": Lower bound
 *                             for the y values. If not provided, it will be
 *                             computed from the bounds of the input data.
 *                         <li>@ref gpudb::visualize_isochrone_data_max_y
 *                             "visualize_isochrone_data_max_y": Upper bound
 *                             for the y values. If not provided, it will be
 *                             computed from the bounds of the input data.
 *                         <li>@ref gpudb::visualize_isochrone_concavity_level
 *                             "visualize_isochrone_concavity_level": Factor to
 *                             qualify the concavity of the isochrone curves.
 *                             The lower the value, the more convex (with '0'
 *                             being completely convex and '1' being the most
 *                             concave). The default value is '0.5'. The
 *                             minimum allowed value is '0'. The maximum
 *                             allowed value is '1'.
 *                         <li>@ref
 *                             gpudb::visualize_isochrone_use_priority_queue_solvers
 *                             "visualize_isochrone_use_priority_queue_solvers":
 *                             sets the solver methods explicitly if true.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::visualize_isochrone_true
 *                                     "visualize_isochrone_true": uses the
 *                                     solvers scheduled for 'shortest_path'
 *                                     and 'inverse_shortest_path' based on
 *                                     solve_direction
 *                                 <li>@ref gpudb::visualize_isochrone_false
 *                                     "visualize_isochrone_false": uses the
 *                                     solvers 'priority_queue' and
 *                                     'inverse_priority_queue' based on
 *                                     solve_direction
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::visualize_isochrone_false
 *                             "visualize_isochrone_false".
 *                         <li>@ref gpudb::visualize_isochrone_solve_direction
 *                             "visualize_isochrone_solve_direction": Specify
 *                             whether we are going to the source node, or
 *                             starting from it.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::visualize_isochrone_from_source
 *                                     "visualize_isochrone_from_source":
 *                                     Shortest path to get to the source
 *                                     (inverse Dijkstra)
 *                                 <li>@ref
 *                                     gpudb::visualize_isochrone_to_source
 *                                     "visualize_isochrone_to_source":
 *                                     Shortest path to source (Dijkstra)
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::visualize_isochrone_from_source
 *                             "visualize_isochrone_from_source".
 *                     </ul>
 *                     The default value is an empty map.
 *
 * @return @ref gpudb::VisualizeIsochroneResponse "Response" object containing
 *         the result of the operation.
 */
VisualizeIsochroneResponse visualizeIsochrone( const std::string& graphName,
                                               const std::string& sourceNode,
                                               const double maxSolutionRadius,
                                               const std::vector<std::string>& weightsOnEdges,
                                               const std::vector<std::string>& restrictions,
                                               const int32_t numLevels,
                                               const bool generateImage,
                                               const std::string& levelsTable,
                                               const std::map<std::string, std::string>& styleOptions,
                                               const std::map<std::string, std::string>& solveOptions,
                                               const std::map<std::string, std::string>& contourOptions,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Generate an image containing isolines for travel results using an existing
 * graph. Isolines represent curves of equal cost, with cost typically
 * referring to the time or distance assigned as the weights of the underlying
 * graph. See <a href="../../../graph_solver/network_graph_solver/"
 * target="_top">Graphs & Solvers</a> for more information on graphs.
 *
 * @param[in] graphName  Name of the graph on which the isochrone is to be
 *                       computed.
 * @param[in] sourceNode  Starting vertex on the underlying graph from/to which
 *                        the isochrones are created.
 * @param[in] maxSolutionRadius  Extent of the search radius around @a
 *                               sourceNode. Set to '-1.0' for unrestricted
 *                               search radius. The default value is -1.0.
 * @param[in] weightsOnEdges  Additional weights to apply to the edges of an
 *                            existing graph. Weights must be specified using
 *                            <a
 *                            href="../../../graph_solver/network_graph_solver/#identifiers"
 *                            target="_top">identifiers</a>; identifiers are
 *                            grouped as <a
 *                            href="../../../graph_solver/network_graph_solver/#id-combos"
 *                            target="_top">combinations</a>. Identifiers can
 *                            be used with existing column names, e.g.,
 *                            'table.column AS WEIGHTS_EDGE_ID', or
 *                            expressions, e.g., 'ST_LENGTH(wkt) AS
 *                            WEIGHTS_VALUESPECIFIED'. Any provided weights
 *                            will be added (in the case of
 *                            'WEIGHTS_VALUESPECIFIED') to or multiplied with
 *                            (in the case of 'WEIGHTS_FACTORSPECIFIED') the
 *                            existing weight(s). The default value is an empty
 *                            vector.
 * @param[in] restrictions  Additional restrictions to apply to the nodes/edges
 *                          of an existing graph. Restrictions must be
 *                          specified using <a
 *                          href="../../../graph_solver/network_graph_solver/#identifiers"
 *                          target="_top">identifiers</a>; identifiers are
 *                          grouped as <a
 *                          href="../../../graph_solver/network_graph_solver/#id-combos"
 *                          target="_top">combinations</a>. Identifiers can be
 *                          used with existing column names, e.g.,
 *                          'table.column AS RESTRICTIONS_EDGE_ID', or
 *                          expressions, e.g., 'column/2 AS
 *                          RESTRICTIONS_VALUECOMPARED'. If @ref
 *                          gpudb::visualize_isochrone_remove_previous_restrictions
 *                          "remove_previous_restrictions" is set to @ref
 *                          gpudb::visualize_isochrone_true "true", any
 *                          provided restrictions will replace the existing
 *                          restrictions. If @ref
 *                          gpudb::visualize_isochrone_remove_previous_restrictions
 *                          "remove_previous_restrictions" is set to @ref
 *                          gpudb::visualize_isochrone_false "false", any
 *                          provided restrictions will be added (in the case of
 *                          'RESTRICTIONS_VALUECOMPARED') to or replaced (in
 *                          the case of 'RESTRICTIONS_ONOFFCOMPARED'). The
 *                          default value is an empty vector.
 * @param[in] numLevels  Number of equally-separated isochrones to compute. The
 *                       default value is 1.
 * @param[in] generateImage  If set to @ref gpudb::visualize_isochrone_true
 *                           "true", generates a PNG image of the isochrones in
 *                           the response.
 *                           Supported values:
 *                           <ul>
 *                               <li>true
 *                               <li>false
 *                           </ul>
 *                           The default value is true.
 * @param[in] levelsTable  Name of the table to output the isochrones to, in
 *                         [schema_name.]table_name format, using standard <a
 *                         href="../../../concepts/tables/#table-name-resolution"
 *                         target="_top">name resolution rules</a> and meeting
 *                         <a
 *                         href="../../../concepts/tables/#table-naming-criteria"
 *                         target="_top">table naming criteria</a>.  The table
 *                         will contain levels and their corresponding WKT
 *                         geometry. If no value is provided, the table is not
 *                         generated. The default value is ''.
 * @param[in] styleOptions  Various style related options of the isochrone
 *                          image.
 *                          <ul>
 *                              <li>@ref gpudb::visualize_isochrone_line_size
 *                                  "visualize_isochrone_line_size": The width
 *                                  of the contour lines in pixels. The default
 *                                  value is '3'. The minimum allowed value is
 *                                  '0'. The maximum allowed value is '20'.
 *                              <li>@ref gpudb::visualize_isochrone_color
 *                                  "visualize_isochrone_color": Color of
 *                                  generated isolines. All color values must
 *                                  be in the format RRGGBB or AARRGGBB (to
 *                                  specify the alpha value). If alpha is
 *                                  specified and flooded contours are enabled,
 *                                  it will be used for as the transparency of
 *                                  the latter. The default value is
 *                                  'FF696969'.
 *                              <li>@ref gpudb::visualize_isochrone_bg_color
 *                                  "visualize_isochrone_bg_color": When @a
 *                                  generateImage is set to @ref
 *                                  gpudb::visualize_isochrone_true "true",
 *                                  background color of the generated image.
 *                                  All color values must be in the format
 *                                  RRGGBB or AARRGGBB (to specify the alpha
 *                                  value). The default value is '00000000'.
 *                              <li>@ref gpudb::visualize_isochrone_text_color
 *                                  "visualize_isochrone_text_color": When @ref
 *                                  gpudb::visualize_isochrone_add_labels
 *                                  "add_labels" is set to @ref
 *                                  gpudb::visualize_isochrone_true "true",
 *                                  color for the labels. All color values must
 *                                  be in the format RRGGBB or AARRGGBB (to
 *                                  specify the alpha value). The default value
 *                                  is 'FF000000'.
 *                              <li>@ref gpudb::visualize_isochrone_colormap
 *                                  "visualize_isochrone_colormap": Colormap
 *                                  for contours or fill-in regions when
 *                                  applicable. All color values must be in the
 *                                  format RRGGBB or AARRGGBB (to specify the
 *                                  alpha value).
 *                                  Supported values:
 *                                  <ul>
 *                                      <li>@ref gpudb::visualize_isochrone_jet
 *                                          "visualize_isochrone_jet"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_accent
 *                                          "visualize_isochrone_accent"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_afmhot
 *                                          "visualize_isochrone_afmhot"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_autumn
 *                                          "visualize_isochrone_autumn"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_binary
 *                                          "visualize_isochrone_binary"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_blues
 *                                          "visualize_isochrone_blues"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_bone
 *                                          "visualize_isochrone_bone"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_brbg
 *                                          "visualize_isochrone_brbg"
 *                                      <li>@ref gpudb::visualize_isochrone_brg
 *                                          "visualize_isochrone_brg"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_bugn
 *                                          "visualize_isochrone_bugn"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_bupu
 *                                          "visualize_isochrone_bupu"
 *                                      <li>@ref gpudb::visualize_isochrone_bwr
 *                                          "visualize_isochrone_bwr"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_cmrmap
 *                                          "visualize_isochrone_cmrmap"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_cool
 *                                          "visualize_isochrone_cool"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_coolwarm
 *                                          "visualize_isochrone_coolwarm"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_copper
 *                                          "visualize_isochrone_copper"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_cubehelix
 *                                          "visualize_isochrone_cubehelix"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_dark2
 *                                          "visualize_isochrone_dark2"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_flag
 *                                          "visualize_isochrone_flag"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_earth
 *                                          "visualize_isochrone_gist_earth"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_gray
 *                                          "visualize_isochrone_gist_gray"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_heat
 *                                          "visualize_isochrone_gist_heat"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_ncar
 *                                          "visualize_isochrone_gist_ncar"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_rainbow
 *                                          "visualize_isochrone_gist_rainbow"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_stern
 *                                          "visualize_isochrone_gist_stern"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gist_yarg
 *                                          "visualize_isochrone_gist_yarg"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gnbu
 *                                          "visualize_isochrone_gnbu"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gnuplot2
 *                                          "visualize_isochrone_gnuplot2"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gnuplot
 *                                          "visualize_isochrone_gnuplot"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_gray
 *                                          "visualize_isochrone_gray"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_greens
 *                                          "visualize_isochrone_greens"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_greys
 *                                          "visualize_isochrone_greys"
 *                                      <li>@ref gpudb::visualize_isochrone_hot
 *                                          "visualize_isochrone_hot"
 *                                      <li>@ref gpudb::visualize_isochrone_hsv
 *                                          "visualize_isochrone_hsv"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_inferno
 *                                          "visualize_isochrone_inferno"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_magma
 *                                          "visualize_isochrone_magma"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_nipy_spectral
 *                                          "visualize_isochrone_nipy_spectral"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_ocean
 *                                          "visualize_isochrone_ocean"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_oranges
 *                                          "visualize_isochrone_oranges"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_orrd
 *                                          "visualize_isochrone_orrd"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_paired
 *                                          "visualize_isochrone_paired"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_pastel1
 *                                          "visualize_isochrone_pastel1"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_pastel2
 *                                          "visualize_isochrone_pastel2"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_pink
 *                                          "visualize_isochrone_pink"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_piyg
 *                                          "visualize_isochrone_piyg"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_plasma
 *                                          "visualize_isochrone_plasma"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_prgn
 *                                          "visualize_isochrone_prgn"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_prism
 *                                          "visualize_isochrone_prism"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_pubu
 *                                          "visualize_isochrone_pubu"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_pubugn
 *                                          "visualize_isochrone_pubugn"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_puor
 *                                          "visualize_isochrone_puor"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_purd
 *                                          "visualize_isochrone_purd"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_purples
 *                                          "visualize_isochrone_purples"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_rainbow
 *                                          "visualize_isochrone_rainbow"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_rdbu
 *                                          "visualize_isochrone_rdbu"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_rdgy
 *                                          "visualize_isochrone_rdgy"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_rdpu
 *                                          "visualize_isochrone_rdpu"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_rdylbu
 *                                          "visualize_isochrone_rdylbu"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_rdylgn
 *                                          "visualize_isochrone_rdylgn"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_reds
 *                                          "visualize_isochrone_reds"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_seismic
 *                                          "visualize_isochrone_seismic"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_set1
 *                                          "visualize_isochrone_set1"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_set2
 *                                          "visualize_isochrone_set2"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_set3
 *                                          "visualize_isochrone_set3"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_spectral
 *                                          "visualize_isochrone_spectral"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_spring
 *                                          "visualize_isochrone_spring"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_summer
 *                                          "visualize_isochrone_summer"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_terrain
 *                                          "visualize_isochrone_terrain"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_viridis
 *                                          "visualize_isochrone_viridis"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_winter
 *                                          "visualize_isochrone_winter"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_wistia
 *                                          "visualize_isochrone_wistia"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_ylgn
 *                                          "visualize_isochrone_ylgn"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_ylgnbu
 *                                          "visualize_isochrone_ylgnbu"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_ylorbr
 *                                          "visualize_isochrone_ylorbr"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_ylorrd
 *                                          "visualize_isochrone_ylorrd"
 *                                  </ul>
 *                                  The default value is @ref
 *                                  gpudb::visualize_isochrone_jet
 *                                  "visualize_isochrone_jet".
 *                          </ul>
 * @param[in] solveOptions  Solver specific parameters.
 *                          <ul>
 *                              <li>@ref
 *                                  gpudb::visualize_isochrone_remove_previous_restrictions
 *                                  "visualize_isochrone_remove_previous_restrictions":
 *                                  Ignore the restrictions applied to the
 *                                  graph during the creation stage and only
 *                                  use the restrictions specified in this
 *                                  request if set to @ref
 *                                  gpudb::visualize_isochrone_true "true".
 *                                  Supported values:
 *                                  <ul>
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_true
 *                                          "visualize_isochrone_true"
 *                                      <li>@ref
 *                                          gpudb::visualize_isochrone_false
 *                                          "visualize_isochrone_false"
 *                                  </ul>
 *                                  The default value is @ref
 *                                  gpudb::visualize_isochrone_false
 *                                  "visualize_isochrone_false".
 *                              <li>@ref
 *                                  gpudb::visualize_isochrone_restriction_threshold_value
 *                                  "visualize_isochrone_restriction_threshold_value":
 *                                  Value-based restriction comparison. Any
 *                                  node or edge with a
 *                                  'RESTRICTIONS_VALUECOMPARED' value greater
 *                                  than the @ref
 *                                  gpudb::visualize_isochrone_restriction_threshold_value
 *                                  "restriction_threshold_value" will not be
 *                                  included in the solution.
 *                              <li>@ref
 *                                  gpudb::visualize_isochrone_uniform_weights
 *                                  "visualize_isochrone_uniform_weights": When
 *                                  specified, assigns the given value to all
 *                                  the edges in the graph. Note that weights
 *                                  provided in @a weightsOnEdges will override
 *                                  this value.
 *                          </ul>
 *                          The default value is an empty map.
 * @param[in] contourOptions  Solver specific parameters.
 *                            <ul>
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_projection
 *                                    "visualize_isochrone_projection": Spatial
 *                                    Reference System (i.e. EPSG Code).
 *                                    Supported values:
 *                                    <ul>
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_3857
 *                                            "visualize_isochrone_3857"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_102100
 *                                            "visualize_isochrone_102100"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_900913
 *                                            "visualize_isochrone_900913"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_EPSG_4326
 *                                            "visualize_isochrone_EPSG_4326"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_PLATE_CARREE
 *                                            "visualize_isochrone_PLATE_CARREE"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_EPSG_900913
 *                                            "visualize_isochrone_EPSG_900913"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_EPSG_102100
 *                                            "visualize_isochrone_EPSG_102100"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_EPSG_3857
 *                                            "visualize_isochrone_EPSG_3857"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_WEB_MERCATOR
 *                                            "visualize_isochrone_WEB_MERCATOR"
 *                                    </ul>
 *                                    The default value is @ref
 *                                    gpudb::visualize_isochrone_PLATE_CARREE
 *                                    "visualize_isochrone_PLATE_CARREE".
 *                                <li>@ref gpudb::visualize_isochrone_width
 *                                    "visualize_isochrone_width": When @a
 *                                    generateImage is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    width of the generated image. The default
 *                                    value is '512'.
 *                                <li>@ref gpudb::visualize_isochrone_height
 *                                    "visualize_isochrone_height": When @a
 *                                    generateImage is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    height of the generated image. If the
 *                                    default value is used, the @ref
 *                                    gpudb::visualize_isochrone_height
 *                                    "height" is set to the value resulting
 *                                    from multiplying the aspect ratio by the
 *                                    @ref gpudb::visualize_isochrone_width
 *                                    "width". The default value is '-1'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_search_radius
 *                                    "visualize_isochrone_search_radius": When
 *                                    interpolating the graph solution to
 *                                    generate the isochrone, neighborhood of
 *                                    influence of sample data (in percent of
 *                                    the image/grid). The default value is
 *                                    '20'.
 *                                <li>@ref gpudb::visualize_isochrone_grid_size
 *                                    "visualize_isochrone_grid_size": When
 *                                    interpolating the graph solution to
 *                                    generate the isochrone, number of
 *                                    subdivisions along the x axis when
 *                                    building the grid (the y is computed
 *                                    using the aspect ratio of the output
 *                                    image). The default value is '100'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_color_isolines
 *                                    "visualize_isochrone_color_isolines":
 *                                    Color each isoline according to the
 *                                    colormap; otherwise, use the foreground
 *                                    color.
 *                                    Supported values:
 *                                    <ul>
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_true
 *                                            "visualize_isochrone_true"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_false
 *                                            "visualize_isochrone_false"
 *                                    </ul>
 *                                    The default value is @ref
 *                                    gpudb::visualize_isochrone_true
 *                                    "visualize_isochrone_true".
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "visualize_isochrone_add_labels": If set
 *                                    to @ref gpudb::visualize_isochrone_true
 *                                    "true", add labels to the isolines.
 *                                    Supported values:
 *                                    <ul>
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_true
 *                                            "visualize_isochrone_true"
 *                                        <li>@ref
 *                                            gpudb::visualize_isochrone_false
 *                                            "visualize_isochrone_false"
 *                                    </ul>
 *                                    The default value is @ref
 *                                    gpudb::visualize_isochrone_false
 *                                    "visualize_isochrone_false".
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_labels_font_size
 *                                    "visualize_isochrone_labels_font_size":
 *                                    When @ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "add_labels" is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    size of the font (in pixels) to use for
 *                                    labels. The default value is '12'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_labels_font_family
 *                                    "visualize_isochrone_labels_font_family":
 *                                    When @ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "add_labels" is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    font name to be used when adding labels.
 *                                    The default value is 'arial'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_labels_search_window
 *                                    "visualize_isochrone_labels_search_window":
 *                                    When @ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "add_labels" is set to @ref
 *                                    gpudb::visualize_isochrone_true "true", a
 *                                    search window is used to rate the local
 *                                    quality of each isoline. Smooth,
 *                                    continuous, long stretches with
 *                                    relatively flat angles are favored. The
 *                                    provided value is multiplied by the @ref
 *                                    gpudb::visualize_isochrone_labels_font_size
 *                                    "labels_font_size" to calculate the final
 *                                    window size. The default value is '4'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_labels_intralevel_separation
 *                                    "visualize_isochrone_labels_intralevel_separation":
 *                                    When @ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "add_labels" is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    this value determines the  distance (in
 *                                    multiples of the @ref
 *                                    gpudb::visualize_isochrone_labels_font_size
 *                                    "labels_font_size") to use when
 *                                    separating labels of different values.
 *                                    The default value is '4'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_labels_interlevel_separation
 *                                    "visualize_isochrone_labels_interlevel_separation":
 *                                    When @ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "add_labels" is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    this value determines the distance (in
 *                                    percent of the total window size) to use
 *                                    when separating labels of the same value.
 *                                    The default value is '20'.
 *                                <li>@ref
 *                                    gpudb::visualize_isochrone_labels_max_angle
 *                                    "visualize_isochrone_labels_max_angle":
 *                                    When @ref
 *                                    gpudb::visualize_isochrone_add_labels
 *                                    "add_labels" is set to @ref
 *                                    gpudb::visualize_isochrone_true "true",
 *                                    maximum angle (in degrees) from the
 *                                    vertical to use when adding labels. The
 *                                    default value is '60'.
 *                            </ul>
 *                            The default value is an empty map.
 * @param[in] options  Additional parameters.
 *                     <ul>
 *                         <li>@ref gpudb::visualize_isochrone_solve_table
 *                             "visualize_isochrone_solve_table": Name of the
 *                             table to host intermediate solve results, in
 *                             [schema_name.]table_name format, using standard
 *                             <a
 *                             href="../../../concepts/tables/#table-name-resolution"
 *                             target="_top">name resolution rules</a> and
 *                             meeting <a
 *                             href="../../../concepts/tables/#table-naming-criteria"
 *                             target="_top">table naming criteria</a>.  This
 *                             table will contain the position and cost for
 *                             each vertex in the graph. If the default value
 *                             is used, a temporary table is created and
 *                             deleted once the solution is calculated. The
 *                             default value is ''.
 *                         <li>@ref gpudb::visualize_isochrone_is_replicated
 *                             "visualize_isochrone_is_replicated": If set to
 *                             @ref gpudb::visualize_isochrone_true "true",
 *                             replicate the @ref
 *                             gpudb::visualize_isochrone_solve_table
 *                             "solve_table".
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::visualize_isochrone_true
 *                                     "visualize_isochrone_true"
 *                                 <li>@ref gpudb::visualize_isochrone_false
 *                                     "visualize_isochrone_false"
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::visualize_isochrone_true
 *                             "visualize_isochrone_true".
 *                         <li>@ref gpudb::visualize_isochrone_data_min_x
 *                             "visualize_isochrone_data_min_x": Lower bound
 *                             for the x values. If not provided, it will be
 *                             computed from the bounds of the input data.
 *                         <li>@ref gpudb::visualize_isochrone_data_max_x
 *                             "visualize_isochrone_data_max_x": Upper bound
 *                             for the x values. If not provided, it will be
 *                             computed from the bounds of the input data.
 *                         <li>@ref gpudb::visualize_isochrone_data_min_y
 *                             "visualize_isochrone_data_min_y": Lower bound
 *                             for the y values. If not provided, it will be
 *                             computed from the bounds of the input data.
 *                         <li>@ref gpudb::visualize_isochrone_data_max_y
 *                             "visualize_isochrone_data_max_y": Upper bound
 *                             for the y values. If not provided, it will be
 *                             computed from the bounds of the input data.
 *                         <li>@ref gpudb::visualize_isochrone_concavity_level
 *                             "visualize_isochrone_concavity_level": Factor to
 *                             qualify the concavity of the isochrone curves.
 *                             The lower the value, the more convex (with '0'
 *                             being completely convex and '1' being the most
 *                             concave). The default value is '0.5'. The
 *                             minimum allowed value is '0'. The maximum
 *                             allowed value is '1'.
 *                         <li>@ref
 *                             gpudb::visualize_isochrone_use_priority_queue_solvers
 *                             "visualize_isochrone_use_priority_queue_solvers":
 *                             sets the solver methods explicitly if true.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref gpudb::visualize_isochrone_true
 *                                     "visualize_isochrone_true": uses the
 *                                     solvers scheduled for 'shortest_path'
 *                                     and 'inverse_shortest_path' based on
 *                                     solve_direction
 *                                 <li>@ref gpudb::visualize_isochrone_false
 *                                     "visualize_isochrone_false": uses the
 *                                     solvers 'priority_queue' and
 *                                     'inverse_priority_queue' based on
 *                                     solve_direction
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::visualize_isochrone_false
 *                             "visualize_isochrone_false".
 *                         <li>@ref gpudb::visualize_isochrone_solve_direction
 *                             "visualize_isochrone_solve_direction": Specify
 *                             whether we are going to the source node, or
 *                             starting from it.
 *                             Supported values:
 *                             <ul>
 *                                 <li>@ref
 *                                     gpudb::visualize_isochrone_from_source
 *                                     "visualize_isochrone_from_source":
 *                                     Shortest path to get to the source
 *                                     (inverse Dijkstra)
 *                                 <li>@ref
 *                                     gpudb::visualize_isochrone_to_source
 *                                     "visualize_isochrone_to_source":
 *                                     Shortest path to source (Dijkstra)
 *                             </ul>
 *                             The default value is @ref
 *                             gpudb::visualize_isochrone_from_source
 *                             "visualize_isochrone_from_source".
 *                     </ul>
 *                     The default value is an empty map.
 * @param[out] response_  @ref gpudb::VisualizeIsochroneResponse "Response"
 *                        object containing the results of the operation.
 *
 * @return @ref gpudb::VisualizeIsochroneResponse "Response" object containing
 *         the result of the operation (initially passed in by reference).
 */
VisualizeIsochroneResponse& visualizeIsochrone( const std::string& graphName,
                                                const std::string& sourceNode,
                                                const double maxSolutionRadius,
                                                const std::vector<std::string>& weightsOnEdges,
                                                const std::vector<std::string>& restrictions,
                                                const int32_t numLevels,
                                                const bool generateImage,
                                                const std::string& levelsTable,
                                                const std::map<std::string, std::string>& styleOptions,
                                                const std::map<std::string, std::string>& solveOptions,
                                                const std::map<std::string, std::string>& contourOptions,
                                                const std::map<std::string, std::string>& options,
                                                VisualizeIsochroneResponse& response_ ) const;
