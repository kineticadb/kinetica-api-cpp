/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_USER_H__
#define __ALTER_USER_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::alterUser(const AlterUserRequest&) const "GPUdb::alterUser".
     *
     * Alters a user.
     */
    struct AlterUserRequest
    {
        /**
         * Constructs an AlterUserRequest object with default parameters.
         */
        AlterUserRequest() :
            name(std::string()),
            action(std::string()),
            value(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterUserRequest object with the specified parameters.
         *
         * @param[in] name_  Name of the user to be altered. Must be an
         *                   existing user.
         * @param[in] action_  Modification operation to be applied to the
         *                     user.
         *                     Supported values:
         *                     <ul>
         *                         <li>@ref gpudb::alter_user_set_activated
         *                             "alter_user_set_activated": Is the user
         *                             allowed to login.
         *                         <li>@ref gpudb::alter_user_true
         *                             "alter_user_true": User may login
         *                         <li>@ref gpudb::alter_user_false
         *                             "alter_user_false": User may not login
         *                         <li>@ref gpudb::alter_user_set_comment
         *                             "alter_user_set_comment": Sets the
         *                             comment for an internal user.
         *                         <li>@ref
         *                             gpudb::alter_user_set_default_schema
         *                             "alter_user_set_default_schema": Set the
         *                             default_schema for an internal user. An
         *                             empty string means the user will have no
         *                             default schema.
         *                         <li>@ref gpudb::alter_user_set_password
         *                             "alter_user_set_password": Sets the
         *                             password of the user. The user must be
         *                             an internal user.
         *                         <li>@ref
         *                             gpudb::alter_user_set_resource_group
         *                             "alter_user_set_resource_group": Sets
         *                             the resource group for an internal user.
         *                             The resource group must exist,
         *                             otherwise, an empty string assigns the
         *                             user to the default resource group.
         *                     </ul>
         * @param[in] value_  The value of the modification, depending on @a
         *                    action_.
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        AlterUserRequest(const std::string& name_, const std::string& action_, const std::string& value_, const std::map<std::string, std::string>& options_):
            name( name_ ),
            action( action_ ),
            value( value_ ),
            options( options_ )
        {
        }

        /**
         * Name of the user to be altered. Must be an existing user.
         */
        std::string name;

        /**
         * Modification operation to be applied to the user.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::alter_user_set_activated
         *         "alter_user_set_activated": Is the user allowed to login.
         *     <li>@ref gpudb::alter_user_true "alter_user_true": User may
         *         login
         *     <li>@ref gpudb::alter_user_false "alter_user_false": User may
         *         not login
         *     <li>@ref gpudb::alter_user_set_comment "alter_user_set_comment":
         *         Sets the comment for an internal user.
         *     <li>@ref gpudb::alter_user_set_default_schema
         *         "alter_user_set_default_schema": Set the default_schema for
         *         an internal user. An empty string means the user will have
         *         no default schema.
         *     <li>@ref gpudb::alter_user_set_password
         *         "alter_user_set_password": Sets the password of the user.
         *         The user must be an internal user.
         *     <li>@ref gpudb::alter_user_set_resource_group
         *         "alter_user_set_resource_group": Sets the resource group for
         *         an internal user. The resource group must exist, otherwise,
         *         an empty string assigns the user to the default resource
         *         group.
         * </ul>
         */
        std::string action;

        /**
         * The value of the modification, depending on @ref action.
         */
        std::string value;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterUserRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterUserRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterUserRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::alterUser(const AlterUserRequest&) const "GPUdb::alterUser".
     */
    struct AlterUserResponse
    {
        /**
         * Constructs an AlterUserResponse object with default parameters.
         */
        AlterUserResponse() :
            name(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::AlterUserRequest::name "name".
         */
        std::string name;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterUserResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterUserResponse& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterUserResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ALTER_USER_H__
