/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __HAS_PROC_H__
#define __HAS_PROC_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref GPUdb::hasProc(const HasProcRequest&) const
     * "GPUdb::hasProc".
     *
     * Checks the existence of a proc with the given name.
     */
    struct HasProcRequest
    {
        /**
         * Constructs a HasProcRequest object with default parameters.
         */
        HasProcRequest() :
            procName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a HasProcRequest object with the specified parameters.
         *
         * @param[in] procName_  Name of the proc to check for existence.
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        HasProcRequest(const std::string& procName_, const std::map<std::string, std::string>& options_):
            procName( procName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the proc to check for existence.
         */
        std::string procName;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::HasProcRequest>
    {
        static void encode(Encoder& e, const gpudb::HasProcRequest& v)
        {
            ::avro::encode(e, v.procName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::HasProcRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::hasProc(const HasProcRequest&) const "GPUdb::hasProc".
     */
    struct HasProcResponse
    {
        /**
         * Constructs a HasProcResponse object with default parameters.
         */
        HasProcResponse() :
            procName(std::string()),
            procExists(bool()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::HasProcRequest::procName "procName"
         */
        std::string procName;

        /**
         * Indicates whether the proc exists or not.
         * Supported values:
         * <ul>
         *     <li>true
         *     <li>false
         * </ul>
         */
        bool procExists;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::HasProcResponse>
    {
        static void encode(Encoder& e, const gpudb::HasProcResponse& v)
        {
            ::avro::encode(e, v.procName);
            ::avro::encode(e, v.procExists);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::HasProcResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procName);
                            break;

                        case 1:
                            ::avro::decode(d, v.procExists);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procName);
                ::avro::decode(d, v.procExists);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __HAS_PROC_H__
