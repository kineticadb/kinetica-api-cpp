/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_MATERIALIZED_VIEW_H__
#define __CREATE_MATERIALIZED_VIEW_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::createMaterializedView(const CreateMaterializedViewRequest&) const
     * "GPUdb::createMaterializedView".
     *
     * Initiates the process of creating a materialized view, reserving the
     * view's name to prevent other views or tables from being created with
     * that name.
     *
     * For materialized view details and examples, see <a
     * href="../../../concepts/materialized_views/" target="_top">Materialized
     * Views</a>.
     *
     * The response contains @ref gpudb::CreateMaterializedViewResponse::viewId
     * "viewId", which is used to tag each subsequent operation (projection,
     * union, aggregation, filter, or join) that will compose the view.
     */
    struct CreateMaterializedViewRequest
    {
        /**
         * Constructs a CreateMaterializedViewRequest object with default
         * parameters.
         */
        CreateMaterializedViewRequest() :
            tableName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateMaterializedViewRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of the table to be created that is the
         *                        top-level table of the materialized view, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a> and
         *                        meeting <a
         *                        href="../../../concepts/tables/#table-naming-criteria"
         *                        target="_top">table naming criteria</a>.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::create_materialized_view_collection_name
         *                              "create_materialized_view_collection_name":
         *                              [DEPRECATED--please specify the
         *                              containing schema for the materialized
         *                              view as part of @a tableName_ and use
         *                              @ref
         *                              GPUdb::createSchema(const CreateSchemaRequest&) const
         *                              "GPUdb::createSchema" to create the
         *                              schema if non-existent]  Name of a
         *                              schema which is to contain the newly
         *                              created view. If the schema provided is
         *                              non-existent, it will be automatically
         *                              created.
         *                          <li>@ref
         *                              gpudb::create_materialized_view_execute_as
         *                              "create_materialized_view_execute_as":
         *                              User name to use to run the refresh job
         *                          <li>@ref
         *                              gpudb::create_materialized_view_build_materialized_view_policy
         *                              "create_materialized_view_build_materialized_view_policy":
         *                              Sets startup materialized view rebuild
         *                              scheme.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_materialized_view_always
         *                                      "create_materialized_view_always":
         *                                      Rebuild as many materialized
         *                                      views as possible before
         *                                      accepting requests.
         *                                  <li>@ref
         *                                      gpudb::create_materialized_view_lazy
         *                                      "create_materialized_view_lazy":
         *                                      Rebuild the necessary
         *                                      materialized views at start,
         *                                      and load the remainder lazily.
         *                                  <li>@ref
         *                                      gpudb::create_materialized_view_on_demand
         *                                      "create_materialized_view_on_demand":
         *                                      Rebuild materialized views as
         *                                      requests use them.
         *                                  <li>@ref
         *                                      gpudb::create_materialized_view_system
         *                                      "create_materialized_view_system":
         *                                      Rebuild materialized views
         *                                      using the system-configured
         *                                      default.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_materialized_view_system
         *                              "create_materialized_view_system".
         *                          <li>@ref
         *                              gpudb::create_materialized_view_persist
         *                              "create_materialized_view_persist": If
         *                              @ref
         *                              gpudb::create_materialized_view_true
         *                              "true", then the materialized view
         *                              specified in @a tableName_ will be
         *                              persisted and will not expire unless a
         *                              @ref
         *                              gpudb::create_materialized_view_ttl
         *                              "ttl" is specified.   If @ref
         *                              gpudb::create_materialized_view_false
         *                              "false", then the materialized view
         *                              will be an in-memory table and will
         *                              expire unless a @ref
         *                              gpudb::create_materialized_view_ttl
         *                              "ttl" is specified otherwise.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_materialized_view_true
         *                                      "create_materialized_view_true"
         *                                  <li>@ref
         *                                      gpudb::create_materialized_view_false
         *                                      "create_materialized_view_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_materialized_view_false
         *                              "create_materialized_view_false".
         *                          <li>@ref
         *                              gpudb::create_materialized_view_refresh_span
         *                              "create_materialized_view_refresh_span":
         *                              Sets the future time-offset(in seconds)
         *                              at which periodic refresh stops
         *                          <li>@ref
         *                              gpudb::create_materialized_view_refresh_stop_time
         *                              "create_materialized_view_refresh_stop_time":
         *                              When @ref
         *                              gpudb::create_materialized_view_refresh_method
         *                              "refresh_method" is @ref
         *                              gpudb::create_materialized_view_periodic
         *                              "periodic", specifies the time at which
         *                              a periodic refresh is stopped.  Value
         *                              is a datetime string with format
         *                              'YYYY-MM-DD HH:MM:SS'.
         *                          <li>@ref
         *                              gpudb::create_materialized_view_refresh_method
         *                              "create_materialized_view_refresh_method":
         *                              Method by which the join can be
         *                              refreshed when the data in underlying
         *                              member tables have changed.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_materialized_view_manual
         *                                      "create_materialized_view_manual":
         *                                      Refresh only occurs when
         *                                      manually requested by calling
         *                                      @ref
         *                                      GPUdb::alterTable(const AlterTableRequest&) const
         *                                      "GPUdb::alterTable" with an
         *                                      'action' of 'refresh'
         *                                  <li>@ref
         *                                      gpudb::create_materialized_view_on_query
         *                                      "create_materialized_view_on_query":
         *                                      Refresh any time the view is
         *                                      queried.
         *                                  <li>@ref
         *                                      gpudb::create_materialized_view_on_change
         *                                      "create_materialized_view_on_change":
         *                                      If possible, incrementally
         *                                      refresh (refresh just those
         *                                      records added) whenever an
         *                                      insert, update, delete or
         *                                      refresh of input table is done.
         *                                      A full refresh is done if an
         *                                      incremental refresh is not
         *                                      possible.
         *                                  <li>@ref
         *                                      gpudb::create_materialized_view_periodic
         *                                      "create_materialized_view_periodic":
         *                                      Refresh table periodically at
         *                                      rate specified by @ref
         *                                      gpudb::create_materialized_view_refresh_period
         *                                      "refresh_period"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_materialized_view_manual
         *                              "create_materialized_view_manual".
         *                          <li>@ref
         *                              gpudb::create_materialized_view_refresh_period
         *                              "create_materialized_view_refresh_period":
         *                              When @ref
         *                              gpudb::create_materialized_view_refresh_method
         *                              "refresh_method" is @ref
         *                              gpudb::create_materialized_view_periodic
         *                              "periodic", specifies the period in
         *                              seconds at which refresh occurs
         *                          <li>@ref
         *                              gpudb::create_materialized_view_refresh_start_time
         *                              "create_materialized_view_refresh_start_time":
         *                              When @ref
         *                              gpudb::create_materialized_view_refresh_method
         *                              "refresh_method" is @ref
         *                              gpudb::create_materialized_view_periodic
         *                              "periodic", specifies the first time at
         *                              which a refresh is to be done.  Value
         *                              is a datetime string with format
         *                              'YYYY-MM-DD HH:MM:SS'.
         *                          <li>@ref
         *                              gpudb::create_materialized_view_ttl
         *                              "create_materialized_view_ttl": Sets
         *                              the <a href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the table
         *                              specified in @a tableName_.
         *                      </ul>
         *                      The default value is an empty map.
         */
        CreateMaterializedViewRequest(const std::string& tableName_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the table to be created that is the top-level table of the
         * materialized view, in [ schema_name.\ ]table_name format, using
         * standard <a href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a> and meeting <a
         * href="../../../concepts/tables/#table-naming-criteria"
         * target="_top">table naming criteria</a>.
         */
        std::string tableName;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::create_materialized_view_collection_name
         *         "create_materialized_view_collection_name":
         *         [DEPRECATED--please specify the containing schema for the
         *         materialized view as part of @ref tableName and use @ref
         *         GPUdb::createSchema(const CreateSchemaRequest&) const
         *         "GPUdb::createSchema" to create the schema if non-existent]
         *         Name of a schema which is to contain the newly created view.
         *         If the schema provided is non-existent, it will be
         *         automatically created.
         *     <li>@ref gpudb::create_materialized_view_execute_as
         *         "create_materialized_view_execute_as": User name to use to
         *         run the refresh job
         *     <li>@ref
         *         gpudb::create_materialized_view_build_materialized_view_policy
         *         "create_materialized_view_build_materialized_view_policy":
         *         Sets startup materialized view rebuild scheme.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_materialized_view_always
         *                 "create_materialized_view_always": Rebuild as many
         *                 materialized views as possible before accepting
         *                 requests.
         *             <li>@ref gpudb::create_materialized_view_lazy
         *                 "create_materialized_view_lazy": Rebuild the
         *                 necessary materialized views at start, and load the
         *                 remainder lazily.
         *             <li>@ref gpudb::create_materialized_view_on_demand
         *                 "create_materialized_view_on_demand": Rebuild
         *                 materialized views as requests use them.
         *             <li>@ref gpudb::create_materialized_view_system
         *                 "create_materialized_view_system": Rebuild
         *                 materialized views using the system-configured
         *                 default.
         *         </ul>
         *         The default value is @ref
         *         gpudb::create_materialized_view_system
         *         "create_materialized_view_system".
         *     <li>@ref gpudb::create_materialized_view_persist
         *         "create_materialized_view_persist": If @ref
         *         gpudb::create_materialized_view_true "true", then the
         *         materialized view specified in @ref tableName will be
         *         persisted and will not expire unless a @ref
         *         gpudb::create_materialized_view_ttl "ttl" is specified.   If
         *         @ref gpudb::create_materialized_view_false "false", then the
         *         materialized view will be an in-memory table and will expire
         *         unless a @ref gpudb::create_materialized_view_ttl "ttl" is
         *         specified otherwise.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_materialized_view_true
         *                 "create_materialized_view_true"
         *             <li>@ref gpudb::create_materialized_view_false
         *                 "create_materialized_view_false"
         *         </ul>
         *         The default value is @ref
         *         gpudb::create_materialized_view_false
         *         "create_materialized_view_false".
         *     <li>@ref gpudb::create_materialized_view_refresh_span
         *         "create_materialized_view_refresh_span": Sets the future
         *         time-offset(in seconds) at which periodic refresh stops
         *     <li>@ref gpudb::create_materialized_view_refresh_stop_time
         *         "create_materialized_view_refresh_stop_time": When @ref
         *         gpudb::create_materialized_view_refresh_method
         *         "refresh_method" is @ref
         *         gpudb::create_materialized_view_periodic "periodic",
         *         specifies the time at which a periodic refresh is stopped.
         *         Value is a datetime string with format 'YYYY-MM-DD
         *         HH:MM:SS'.
         *     <li>@ref gpudb::create_materialized_view_refresh_method
         *         "create_materialized_view_refresh_method": Method by which
         *         the join can be refreshed when the data in underlying member
         *         tables have changed.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_materialized_view_manual
         *                 "create_materialized_view_manual": Refresh only
         *                 occurs when manually requested by calling @ref
         *                 GPUdb::alterTable(const AlterTableRequest&) const
         *                 "GPUdb::alterTable" with an 'action' of 'refresh'
         *             <li>@ref gpudb::create_materialized_view_on_query
         *                 "create_materialized_view_on_query": Refresh any
         *                 time the view is queried.
         *             <li>@ref gpudb::create_materialized_view_on_change
         *                 "create_materialized_view_on_change": If possible,
         *                 incrementally refresh (refresh just those records
         *                 added) whenever an insert, update, delete or refresh
         *                 of input table is done.  A full refresh is done if
         *                 an incremental refresh is not possible.
         *             <li>@ref gpudb::create_materialized_view_periodic
         *                 "create_materialized_view_periodic": Refresh table
         *                 periodically at rate specified by @ref
         *                 gpudb::create_materialized_view_refresh_period
         *                 "refresh_period"
         *         </ul>
         *         The default value is @ref
         *         gpudb::create_materialized_view_manual
         *         "create_materialized_view_manual".
         *     <li>@ref gpudb::create_materialized_view_refresh_period
         *         "create_materialized_view_refresh_period": When @ref
         *         gpudb::create_materialized_view_refresh_method
         *         "refresh_method" is @ref
         *         gpudb::create_materialized_view_periodic "periodic",
         *         specifies the period in seconds at which refresh occurs
         *     <li>@ref gpudb::create_materialized_view_refresh_start_time
         *         "create_materialized_view_refresh_start_time": When @ref
         *         gpudb::create_materialized_view_refresh_method
         *         "refresh_method" is @ref
         *         gpudb::create_materialized_view_periodic "periodic",
         *         specifies the first time at which a refresh is to be done.
         *         Value is a datetime string with format 'YYYY-MM-DD
         *         HH:MM:SS'.
         *     <li>@ref gpudb::create_materialized_view_ttl
         *         "create_materialized_view_ttl": Sets the <a
         *         href="../../../concepts/ttl/" target="_top">TTL</a> of the
         *         table specified in @ref tableName.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateMaterializedViewRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateMaterializedViewRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateMaterializedViewRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::createMaterializedView(const CreateMaterializedViewRequest&) const
     * "GPUdb::createMaterializedView".
     */
    struct CreateMaterializedViewResponse
    {
        /**
         * Constructs a CreateMaterializedViewResponse object with default
         * parameters.
         */
        CreateMaterializedViewResponse() :
            tableName(std::string()),
            viewId(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::CreateMaterializedViewRequest::tableName
         * "tableName".
         */
        std::string tableName;

        /**
         * Value of view_id.
         */
        std::string viewId;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::create_materialized_view_qualified_table_name
         *         "create_materialized_view_qualified_table_name": The fully
         *         qualified name of the result table (i.e. including the
         *         schema)
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateMaterializedViewResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateMaterializedViewResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.viewId);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateMaterializedViewResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.viewId);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.viewId);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __CREATE_MATERIALIZED_VIEW_H__
