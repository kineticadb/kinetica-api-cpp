/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __EXECUTE_SQL_H__
#define __EXECUTE_SQL_H__

#include "../GenericRecord.hpp"

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::executeSql(const ExecuteSqlRequest&) const "GPUdb::executeSql".
     *
     * Execute a SQL statement (query, DML, or DDL).
     *
     * See <a href="../../../sql/" target="_top">SQL Support</a> for the
     * complete set of supported SQL commands.
     */
    struct ExecuteSqlRequest
    {
        /**
         * Constructs an ExecuteSqlRequest object with default parameters.
         */
        ExecuteSqlRequest() :
            statement(std::string()),
            offset(int64_t()),
            limit(int64_t()),
            encoding(std::string("binary")),
            requestSchemaStr(std::string()),
            data(std::vector<std::vector<uint8_t> >()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an ExecuteSqlRequest object with the specified
         * parameters.
         *
         * @param[in] statement_  SQL statement (query, DML, or DDL) to be
         *                        executed
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results). The default value
         *                     is 0. The minimum allowed value is 0. The
         *                     maximum allowed value is MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned, or END_OF_SET (-9999)
         *                    to indicate that the maximum number of results
         *                    allowed by the server should be returned.  The
         *                    number of records returned will never exceed the
         *                    server's own limit, defined by the <a
         *                    href="../../../config/#config-main-general"
         *                    target="_top">max_get_records_size</a> parameter
         *                    in the server configuration. Use @ref
         *                    gpudb::RawExecuteSqlResponse::hasMoreRecords
         *                    "hasMoreRecords" to see if more records exist in
         *                    the result to be fetched, and @a offset_ & @a
         *                    limit_ to request subsequent pages of results.
         *                    The default value is -9999.
         * @param[in] requestSchemaStr_  Avro schema of @a data_. The default
         *                               value is ''.
         * @param[in] data_  An array of binary-encoded data for the records to
         *                   be binded to the SQL query.  Or use @ref
         *                   gpudb::execute_sql_query_parameters
         *                   "query_parameters" to pass the data in JSON
         *                   format. The default value is an empty vector.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::execute_sql_cost_based_optimization
         *                              "execute_sql_cost_based_optimization":
         *                              If @ref gpudb::execute_sql_false
         *                              "false", disables the cost-based
         *                              optimization of the given query.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref
         *                              gpudb::execute_sql_distributed_joins
         *                              "execute_sql_distributed_joins": If
         *                              @ref gpudb::execute_sql_true "true",
         *                              enables the use of distributed joins in
         *                              servicing the given query.  Any query
         *                              requiring a distributed join will
         *                              succeed, though hints can be used in
         *                              the query to change the distribution of
         *                              the source data to allow the query to
         *                              succeed.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref
         *                              gpudb::execute_sql_distributed_operations
         *                              "execute_sql_distributed_operations":
         *                              If @ref gpudb::execute_sql_true "true",
         *                              enables the use of distributed
         *                              operations in servicing the given
         *                              query.  Any query requiring a
         *                              distributed join will succeed, though
         *                              hints can be used in the query to
         *                              change the distribution of the source
         *                              data to allow the query to succeed.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref
         *                              gpudb::execute_sql_ignore_existing_pk
         *                              "execute_sql_ignore_existing_pk":
         *                              Specifies the record collision
         *                              error-suppression policy for inserting
         *                              into or updating a table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>, only
         *                              used when primary key record collisions
         *                              are rejected (@ref
         *                              gpudb::execute_sql_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::execute_sql_false "false").  If
         *                              set to @ref gpudb::execute_sql_true
         *                              "true", any record insert/update that
         *                              is rejected for resulting in a primary
         *                              key collision with an existing table
         *                              record will be ignored with no error
         *                              generated.  If @ref
         *                              gpudb::execute_sql_false "false", the
         *                              rejection of any insert/update for
         *                              resulting in a primary key collision
         *                              will cause an error to be reported.  If
         *                              the specified table does not have a
         *                              primary key or if @ref
         *                              gpudb::execute_sql_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::execute_sql_true "true", then
         *                              this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true": Ignore
         *                                      inserts/updates that result in
         *                                      primary key collisions with
         *                                      existing records
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false": Treat as
         *                                      errors any inserts/updates that
         *                                      result in primary key
         *                                      collisions with existing
         *                                      records
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref
         *                              gpudb::execute_sql_late_materialization
         *                              "execute_sql_late_materialization": If
         *                              @ref gpudb::execute_sql_true "true",
         *                              Joins/Filters results  will always be
         *                              materialized ( saved to result tables
         *                              format).
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref gpudb::execute_sql_paging_table
         *                              "execute_sql_paging_table": When empty
         *                              or the specified paging table not
         *                              exists, the system will create a paging
         *                              table and return when query output has
         *                              more records than the user asked. If
         *                              the paging table exists in the system,
         *                              the records from the paging table are
         *                              returned without evaluating the query.
         *                          <li>@ref
         *                              gpudb::execute_sql_paging_table_ttl
         *                              "execute_sql_paging_table_ttl": Sets
         *                              the <a href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the paging
         *                              table.
         *                          <li>@ref
         *                              gpudb::execute_sql_parallel_execution
         *                              "execute_sql_parallel_execution": If
         *                              @ref gpudb::execute_sql_false "false",
         *                              disables the parallel step execution of
         *                              the given query.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref gpudb::execute_sql_plan_cache
         *                              "execute_sql_plan_cache": If @ref
         *                              gpudb::execute_sql_false "false",
         *                              disables plan caching for the given
         *                              query.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref gpudb::execute_sql_prepare_mode
         *                              "execute_sql_prepare_mode": If @ref
         *                              gpudb::execute_sql_true "true",
         *                              compiles a query into an execution plan
         *                              and saves it in query cache. Query
         *                              execution is not performed and an empty
         *                              response will be returned to user.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref
         *                              gpudb::execute_sql_preserve_dict_encoding
         *                              "execute_sql_preserve_dict_encoding":
         *                              If @ref gpudb::execute_sql_true "true",
         *                              then columns that were dict encoded in
         *                              the source table will be dict encoded
         *                              in the projection table.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref
         *                              gpudb::execute_sql_query_parameters
         *                              "execute_sql_query_parameters": Query
         *                              parameters in JSON array or arrays (for
         *                              inserting multiple rows).  This can be
         *                              used instead of @a data_ and @a
         *                              requestSchemaStr_.
         *                          <li>@ref gpudb::execute_sql_results_caching
         *                              "execute_sql_results_caching": If @ref
         *                              gpudb::execute_sql_false "false",
         *                              disables caching of the results of the
         *                              given query.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref
         *                              gpudb::execute_sql_rule_based_optimization
         *                              "execute_sql_rule_based_optimization":
         *                              If @ref gpudb::execute_sql_false
         *                              "false", disables rule-based rewrite
         *                              optimizations for the given query.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref
         *                              gpudb::execute_sql_ssq_optimization
         *                              "execute_sql_ssq_optimization": If @ref
         *                              gpudb::execute_sql_false "false",
         *                              scalar subqueries will be translated
         *                              into joins.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref gpudb::execute_sql_ttl
         *                              "execute_sql_ttl": Sets the <a
         *                              href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the
         *                              intermediate result tables used in
         *                              query execution.
         *                          <li>@ref
         *                              gpudb::execute_sql_update_on_existing_pk
         *                              "execute_sql_update_on_existing_pk":
         *                              Specifies the record collision policy
         *                              for inserting into or updating a table
         *                              with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>. If set
         *                              to @ref gpudb::execute_sql_true "true",
         *                              any existing table record with primary
         *                              key values that match those of a record
         *                              being inserted or updated will be
         *                              replaced by that record. If set to @ref
         *                              gpudb::execute_sql_false "false", any
         *                              such primary key collision will result
         *                              in the insert/update being rejected and
         *                              the error handled as determined by @ref
         *                              gpudb::execute_sql_ignore_existing_pk
         *                              "ignore_existing_pk".  If the specified
         *                              table does not have a primary key, then
         *                              this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true": Replace the
         *                                      collided-into record with the
         *                                      record inserted or updated when
         *                                      a new/modified record causes a
         *                                      primary key collision with an
         *                                      existing record
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false": Reject the
         *                                      insert or update when it
         *                                      results in a primary key
         *                                      collision with an existing
         *                                      record
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref
         *                              gpudb::execute_sql_validate_change_column
         *                              "execute_sql_validate_change_column":
         *                              When changing a column using alter
         *                              table, validate the change before
         *                              applying it. If @ref
         *                              gpudb::execute_sql_true "true", then
         *                              validate all values. A value too large
         *                              (or too long) for the new type will
         *                              prevent any change. If @ref
         *                              gpudb::execute_sql_false "false", then
         *                              when a value is too large or long, it
         *                              will be truncated.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref gpudb::execute_sql_current_schema
         *                              "execute_sql_current_schema": Use the
         *                              supplied value as the <a
         *                              href="../../../concepts/schemas/#default-schema"
         *                              target="_top">default schema</a> when
         *                              processing this SQL command.
         *                      </ul>
         *                      The default value is an empty map.
         */
        ExecuteSqlRequest(const std::string& statement_, const int64_t offset_, const int64_t limit_, const std::string& requestSchemaStr_, const std::vector<std::vector<uint8_t> >& data_, const std::map<std::string, std::string>& options_):
            statement( statement_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( "binary" ),
            requestSchemaStr( requestSchemaStr_ ),
            data( data_ ),
            options( options_ )
        {
        }

        /**
         * Constructs an ExecuteSqlRequest object with the specified
         * parameters.
         *
         * @param[in] statement_  SQL statement (query, DML, or DDL) to be
         *                        executed
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results). The default value
         *                     is 0. The minimum allowed value is 0. The
         *                     maximum allowed value is MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned, or END_OF_SET (-9999)
         *                    to indicate that the maximum number of results
         *                    allowed by the server should be returned.  The
         *                    number of records returned will never exceed the
         *                    server's own limit, defined by the <a
         *                    href="../../../config/#config-main-general"
         *                    target="_top">max_get_records_size</a> parameter
         *                    in the server configuration. Use @ref
         *                    gpudb::RawExecuteSqlResponse::hasMoreRecords
         *                    "hasMoreRecords" to see if more records exist in
         *                    the result to be fetched, and @a offset_ & @a
         *                    limit_ to request subsequent pages of results.
         *                    The default value is -9999.
         * @param[in] encoding_  Specifies the encoding for returned records;
         *                       either 'binary' or 'json'.
         *                       Supported values:
         *                       <ul>
         *                           <li>@ref gpudb::execute_sql_binary
         *                               "execute_sql_binary"
         *                           <li>@ref gpudb::execute_sql_json
         *                               "execute_sql_json"
         *                       </ul>
         *                       The default value is @ref
         *                       gpudb::execute_sql_binary
         *                       "execute_sql_binary".
         * @param[in] requestSchemaStr_  Avro schema of @a data_. The default
         *                               value is ''.
         * @param[in] data_  An array of binary-encoded data for the records to
         *                   be binded to the SQL query.  Or use @ref
         *                   gpudb::execute_sql_query_parameters
         *                   "query_parameters" to pass the data in JSON
         *                   format. The default value is an empty vector.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::execute_sql_cost_based_optimization
         *                              "execute_sql_cost_based_optimization":
         *                              If @ref gpudb::execute_sql_false
         *                              "false", disables the cost-based
         *                              optimization of the given query.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref
         *                              gpudb::execute_sql_distributed_joins
         *                              "execute_sql_distributed_joins": If
         *                              @ref gpudb::execute_sql_true "true",
         *                              enables the use of distributed joins in
         *                              servicing the given query.  Any query
         *                              requiring a distributed join will
         *                              succeed, though hints can be used in
         *                              the query to change the distribution of
         *                              the source data to allow the query to
         *                              succeed.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref
         *                              gpudb::execute_sql_distributed_operations
         *                              "execute_sql_distributed_operations":
         *                              If @ref gpudb::execute_sql_true "true",
         *                              enables the use of distributed
         *                              operations in servicing the given
         *                              query.  Any query requiring a
         *                              distributed join will succeed, though
         *                              hints can be used in the query to
         *                              change the distribution of the source
         *                              data to allow the query to succeed.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref
         *                              gpudb::execute_sql_ignore_existing_pk
         *                              "execute_sql_ignore_existing_pk":
         *                              Specifies the record collision
         *                              error-suppression policy for inserting
         *                              into or updating a table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>, only
         *                              used when primary key record collisions
         *                              are rejected (@ref
         *                              gpudb::execute_sql_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::execute_sql_false "false").  If
         *                              set to @ref gpudb::execute_sql_true
         *                              "true", any record insert/update that
         *                              is rejected for resulting in a primary
         *                              key collision with an existing table
         *                              record will be ignored with no error
         *                              generated.  If @ref
         *                              gpudb::execute_sql_false "false", the
         *                              rejection of any insert/update for
         *                              resulting in a primary key collision
         *                              will cause an error to be reported.  If
         *                              the specified table does not have a
         *                              primary key or if @ref
         *                              gpudb::execute_sql_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::execute_sql_true "true", then
         *                              this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true": Ignore
         *                                      inserts/updates that result in
         *                                      primary key collisions with
         *                                      existing records
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false": Treat as
         *                                      errors any inserts/updates that
         *                                      result in primary key
         *                                      collisions with existing
         *                                      records
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref
         *                              gpudb::execute_sql_late_materialization
         *                              "execute_sql_late_materialization": If
         *                              @ref gpudb::execute_sql_true "true",
         *                              Joins/Filters results  will always be
         *                              materialized ( saved to result tables
         *                              format).
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref gpudb::execute_sql_paging_table
         *                              "execute_sql_paging_table": When empty
         *                              or the specified paging table not
         *                              exists, the system will create a paging
         *                              table and return when query output has
         *                              more records than the user asked. If
         *                              the paging table exists in the system,
         *                              the records from the paging table are
         *                              returned without evaluating the query.
         *                          <li>@ref
         *                              gpudb::execute_sql_paging_table_ttl
         *                              "execute_sql_paging_table_ttl": Sets
         *                              the <a href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the paging
         *                              table.
         *                          <li>@ref
         *                              gpudb::execute_sql_parallel_execution
         *                              "execute_sql_parallel_execution": If
         *                              @ref gpudb::execute_sql_false "false",
         *                              disables the parallel step execution of
         *                              the given query.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref gpudb::execute_sql_plan_cache
         *                              "execute_sql_plan_cache": If @ref
         *                              gpudb::execute_sql_false "false",
         *                              disables plan caching for the given
         *                              query.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref gpudb::execute_sql_prepare_mode
         *                              "execute_sql_prepare_mode": If @ref
         *                              gpudb::execute_sql_true "true",
         *                              compiles a query into an execution plan
         *                              and saves it in query cache. Query
         *                              execution is not performed and an empty
         *                              response will be returned to user.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref
         *                              gpudb::execute_sql_preserve_dict_encoding
         *                              "execute_sql_preserve_dict_encoding":
         *                              If @ref gpudb::execute_sql_true "true",
         *                              then columns that were dict encoded in
         *                              the source table will be dict encoded
         *                              in the projection table.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref
         *                              gpudb::execute_sql_query_parameters
         *                              "execute_sql_query_parameters": Query
         *                              parameters in JSON array or arrays (for
         *                              inserting multiple rows).  This can be
         *                              used instead of @a data_ and @a
         *                              requestSchemaStr_.
         *                          <li>@ref gpudb::execute_sql_results_caching
         *                              "execute_sql_results_caching": If @ref
         *                              gpudb::execute_sql_false "false",
         *                              disables caching of the results of the
         *                              given query.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref
         *                              gpudb::execute_sql_rule_based_optimization
         *                              "execute_sql_rule_based_optimization":
         *                              If @ref gpudb::execute_sql_false
         *                              "false", disables rule-based rewrite
         *                              optimizations for the given query.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref
         *                              gpudb::execute_sql_ssq_optimization
         *                              "execute_sql_ssq_optimization": If @ref
         *                              gpudb::execute_sql_false "false",
         *                              scalar subqueries will be translated
         *                              into joins.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref gpudb::execute_sql_ttl
         *                              "execute_sql_ttl": Sets the <a
         *                              href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the
         *                              intermediate result tables used in
         *                              query execution.
         *                          <li>@ref
         *                              gpudb::execute_sql_update_on_existing_pk
         *                              "execute_sql_update_on_existing_pk":
         *                              Specifies the record collision policy
         *                              for inserting into or updating a table
         *                              with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>. If set
         *                              to @ref gpudb::execute_sql_true "true",
         *                              any existing table record with primary
         *                              key values that match those of a record
         *                              being inserted or updated will be
         *                              replaced by that record. If set to @ref
         *                              gpudb::execute_sql_false "false", any
         *                              such primary key collision will result
         *                              in the insert/update being rejected and
         *                              the error handled as determined by @ref
         *                              gpudb::execute_sql_ignore_existing_pk
         *                              "ignore_existing_pk".  If the specified
         *                              table does not have a primary key, then
         *                              this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true": Replace the
         *                                      collided-into record with the
         *                                      record inserted or updated when
         *                                      a new/modified record causes a
         *                                      primary key collision with an
         *                                      existing record
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false": Reject the
         *                                      insert or update when it
         *                                      results in a primary key
         *                                      collision with an existing
         *                                      record
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_false
         *                              "execute_sql_false".
         *                          <li>@ref
         *                              gpudb::execute_sql_validate_change_column
         *                              "execute_sql_validate_change_column":
         *                              When changing a column using alter
         *                              table, validate the change before
         *                              applying it. If @ref
         *                              gpudb::execute_sql_true "true", then
         *                              validate all values. A value too large
         *                              (or too long) for the new type will
         *                              prevent any change. If @ref
         *                              gpudb::execute_sql_false "false", then
         *                              when a value is too large or long, it
         *                              will be truncated.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_sql_true
         *                                      "execute_sql_true"
         *                                  <li>@ref gpudb::execute_sql_false
         *                                      "execute_sql_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_sql_true
         *                              "execute_sql_true".
         *                          <li>@ref gpudb::execute_sql_current_schema
         *                              "execute_sql_current_schema": Use the
         *                              supplied value as the <a
         *                              href="../../../concepts/schemas/#default-schema"
         *                              target="_top">default schema</a> when
         *                              processing this SQL command.
         *                      </ul>
         *                      The default value is an empty map.
         */
        ExecuteSqlRequest(const std::string& statement_, const int64_t offset_, const int64_t limit_, const std::string& encoding_, const std::string& requestSchemaStr_, const std::vector<std::vector<uint8_t> >& data_, const std::map<std::string, std::string>& options_):
            statement( statement_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( encoding_ ),
            requestSchemaStr( requestSchemaStr_ ),
            data( data_ ),
            options( options_ )
        {
        }

        /**
         * SQL statement (query, DML, or DDL) to be executed
         */
        std::string statement;

        /**
         * A positive integer indicating the number of initial results to skip
         * (this can be useful for paging through the results). The default
         * value is 0. The minimum allowed value is 0. The maximum allowed
         * value is MAX_INT.
         */
        int64_t offset;

        /**
         * A positive integer indicating the maximum number of results to be
         * returned, or END_OF_SET (-9999) to indicate that the maximum number
         * of results allowed by the server should be returned.  The number of
         * records returned will never exceed the server's own limit, defined
         * by the <a href="../../../config/#config-main-general"
         * target="_top">max_get_records_size</a> parameter in the server
         * configuration. Use @ref gpudb::RawExecuteSqlResponse::hasMoreRecords
         * "hasMoreRecords" to see if more records exist in the result to be
         * fetched, and @ref offset & @ref limit to request subsequent pages of
         * results. The default value is -9999.
         */
        int64_t limit;

        /**
         * Specifies the encoding for returned records; either 'binary' or
         * 'json'.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::execute_sql_binary "execute_sql_binary"
         *     <li>@ref gpudb::execute_sql_json "execute_sql_json"
         * </ul>
         * The default value is @ref gpudb::execute_sql_binary
         * "execute_sql_binary".
         */
        std::string encoding;

        /**
         * Avro schema of @ref data. The default value is ''.
         */
        std::string requestSchemaStr;

        /**
         * An array of binary-encoded data for the records to be binded to the
         * SQL query.  Or use @ref gpudb::execute_sql_query_parameters
         * "query_parameters" to pass the data in JSON format. The default
         * value is an empty vector.
         */
        std::vector<std::vector<uint8_t> > data;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::execute_sql_cost_based_optimization
         *         "execute_sql_cost_based_optimization": If @ref
         *         gpudb::execute_sql_false "false", disables the cost-based
         *         optimization of the given query.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true"
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false"
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_false
         *         "execute_sql_false".
         *     <li>@ref gpudb::execute_sql_distributed_joins
         *         "execute_sql_distributed_joins": If @ref
         *         gpudb::execute_sql_true "true", enables the use of
         *         distributed joins in servicing the given query.  Any query
         *         requiring a distributed join will succeed, though hints can
         *         be used in the query to change the distribution of the
         *         source data to allow the query to succeed.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true"
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false"
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_false
         *         "execute_sql_false".
         *     <li>@ref gpudb::execute_sql_distributed_operations
         *         "execute_sql_distributed_operations": If @ref
         *         gpudb::execute_sql_true "true", enables the use of
         *         distributed operations in servicing the given query.  Any
         *         query requiring a distributed join will succeed, though
         *         hints can be used in the query to change the distribution of
         *         the source data to allow the query to succeed.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true"
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false"
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_false
         *         "execute_sql_false".
         *     <li>@ref gpudb::execute_sql_ignore_existing_pk
         *         "execute_sql_ignore_existing_pk": Specifies the record
         *         collision error-suppression policy for inserting into or
         *         updating a table with a <a
         *         href="../../../concepts/tables/#primary-keys"
         *         target="_top">primary key</a>, only used when primary key
         *         record collisions are rejected (@ref
         *         gpudb::execute_sql_update_on_existing_pk
         *         "update_on_existing_pk" is @ref gpudb::execute_sql_false
         *         "false").  If set to @ref gpudb::execute_sql_true "true",
         *         any record insert/update that is rejected for resulting in a
         *         primary key collision with an existing table record will be
         *         ignored with no error generated.  If @ref
         *         gpudb::execute_sql_false "false", the rejection of any
         *         insert/update for resulting in a primary key collision will
         *         cause an error to be reported.  If the specified table does
         *         not have a primary key or if @ref
         *         gpudb::execute_sql_update_on_existing_pk
         *         "update_on_existing_pk" is @ref gpudb::execute_sql_true
         *         "true", then this option has no effect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true":
         *                 Ignore inserts/updates that result in primary key
         *                 collisions with existing records
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false":
         *                 Treat as errors any inserts/updates that result in
         *                 primary key collisions with existing records
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_false
         *         "execute_sql_false".
         *     <li>@ref gpudb::execute_sql_late_materialization
         *         "execute_sql_late_materialization": If @ref
         *         gpudb::execute_sql_true "true", Joins/Filters results  will
         *         always be materialized ( saved to result tables format).
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true"
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false"
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_false
         *         "execute_sql_false".
         *     <li>@ref gpudb::execute_sql_paging_table
         *         "execute_sql_paging_table": When empty or the specified
         *         paging table not exists, the system will create a paging
         *         table and return when query output has more records than the
         *         user asked. If the paging table exists in the system, the
         *         records from the paging table are returned without
         *         evaluating the query.
         *     <li>@ref gpudb::execute_sql_paging_table_ttl
         *         "execute_sql_paging_table_ttl": Sets the <a
         *         href="../../../concepts/ttl/" target="_top">TTL</a> of the
         *         paging table.
         *     <li>@ref gpudb::execute_sql_parallel_execution
         *         "execute_sql_parallel_execution": If @ref
         *         gpudb::execute_sql_false "false", disables the parallel step
         *         execution of the given query.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true"
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false"
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_true
         *         "execute_sql_true".
         *     <li>@ref gpudb::execute_sql_plan_cache "execute_sql_plan_cache":
         *         If @ref gpudb::execute_sql_false "false", disables plan
         *         caching for the given query.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true"
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false"
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_true
         *         "execute_sql_true".
         *     <li>@ref gpudb::execute_sql_prepare_mode
         *         "execute_sql_prepare_mode": If @ref gpudb::execute_sql_true
         *         "true", compiles a query into an execution plan and saves it
         *         in query cache. Query execution is not performed and an
         *         empty response will be returned to user.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true"
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false"
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_false
         *         "execute_sql_false".
         *     <li>@ref gpudb::execute_sql_preserve_dict_encoding
         *         "execute_sql_preserve_dict_encoding": If @ref
         *         gpudb::execute_sql_true "true", then columns that were dict
         *         encoded in the source table will be dict encoded in the
         *         projection table.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true"
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false"
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_true
         *         "execute_sql_true".
         *     <li>@ref gpudb::execute_sql_query_parameters
         *         "execute_sql_query_parameters": Query parameters in JSON
         *         array or arrays (for inserting multiple rows).  This can be
         *         used instead of @ref data and @ref requestSchemaStr.
         *     <li>@ref gpudb::execute_sql_results_caching
         *         "execute_sql_results_caching": If @ref
         *         gpudb::execute_sql_false "false", disables caching of the
         *         results of the given query.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true"
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false"
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_true
         *         "execute_sql_true".
         *     <li>@ref gpudb::execute_sql_rule_based_optimization
         *         "execute_sql_rule_based_optimization": If @ref
         *         gpudb::execute_sql_false "false", disables rule-based
         *         rewrite optimizations for the given query.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true"
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false"
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_true
         *         "execute_sql_true".
         *     <li>@ref gpudb::execute_sql_ssq_optimization
         *         "execute_sql_ssq_optimization": If @ref
         *         gpudb::execute_sql_false "false", scalar subqueries will be
         *         translated into joins.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true"
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false"
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_true
         *         "execute_sql_true".
         *     <li>@ref gpudb::execute_sql_ttl "execute_sql_ttl": Sets the <a
         *         href="../../../concepts/ttl/" target="_top">TTL</a> of the
         *         intermediate result tables used in query execution.
         *     <li>@ref gpudb::execute_sql_update_on_existing_pk
         *         "execute_sql_update_on_existing_pk": Specifies the record
         *         collision policy for inserting into or updating a table with
         *         a <a href="../../../concepts/tables/#primary-keys"
         *         target="_top">primary key</a>. If set to @ref
         *         gpudb::execute_sql_true "true", any existing table record
         *         with primary key values that match those of a record being
         *         inserted or updated will be replaced by that record. If set
         *         to @ref gpudb::execute_sql_false "false", any such primary
         *         key collision will result in the insert/update being
         *         rejected and the error handled as determined by @ref
         *         gpudb::execute_sql_ignore_existing_pk "ignore_existing_pk".
         *         If the specified table does not have a primary key, then
         *         this option has no effect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true":
         *                 Replace the collided-into record with the record
         *                 inserted or updated when a new/modified record
         *                 causes a primary key collision with an existing
         *                 record
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false":
         *                 Reject the insert or update when it results in a
         *                 primary key collision with an existing record
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_false
         *         "execute_sql_false".
         *     <li>@ref gpudb::execute_sql_validate_change_column
         *         "execute_sql_validate_change_column": When changing a column
         *         using alter table, validate the change before applying it.
         *         If @ref gpudb::execute_sql_true "true", then validate all
         *         values. A value too large (or too long) for the new type
         *         will prevent any change. If @ref gpudb::execute_sql_false
         *         "false", then when a value is too large or long, it will be
         *         truncated.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_sql_true "execute_sql_true"
         *             <li>@ref gpudb::execute_sql_false "execute_sql_false"
         *         </ul>
         *         The default value is @ref gpudb::execute_sql_true
         *         "execute_sql_true".
         *     <li>@ref gpudb::execute_sql_current_schema
         *         "execute_sql_current_schema": Use the supplied value as the
         *         <a href="../../../concepts/schemas/#default-schema"
         *         target="_top">default schema</a> when processing this SQL
         *         command.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ExecuteSqlRequest>
    {
        static void encode(Encoder& e, const gpudb::ExecuteSqlRequest& v)
        {
            ::avro::encode(e, v.statement);
            ::avro::encode(e, v.offset);
            ::avro::encode(e, v.limit);
            ::avro::encode(e, v.encoding);
            ::avro::encode(e, v.requestSchemaStr);
            ::avro::encode(e, v.data);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ExecuteSqlRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.statement);
                            break;

                        case 1:
                            ::avro::decode(d, v.offset);
                            break;

                        case 2:
                            ::avro::decode(d, v.limit);
                            break;

                        case 3:
                            ::avro::decode(d, v.encoding);
                            break;

                        case 4:
                            ::avro::decode(d, v.requestSchemaStr);
                            break;

                        case 5:
                            ::avro::decode(d, v.data);
                            break;

                        case 6:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.statement);
                ::avro::decode(d, v.offset);
                ::avro::decode(d, v.limit);
                ::avro::decode(d, v.encoding);
                ::avro::decode(d, v.requestSchemaStr);
                ::avro::decode(d, v.data);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::executeSqlRaw(const ExecuteSqlRequest&) const
     * "GPUdb::executeSqlRaw".
     */
    struct RawExecuteSqlResponse
    {
        /**
         * Constructs a RawExecuteSqlResponse object with default parameters.
         */
        RawExecuteSqlResponse() :
            countAffected(int64_t()),
            responseSchemaStr(std::string()),
            binaryEncodedResponse(std::vector<uint8_t>()),
            jsonEncodedResponse(std::string()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool()),
            pagingTable(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * The number of objects/records affected.
         */
        int64_t countAffected;

        /**
         * Avro schema of @ref binaryEncodedResponse or @ref
         * jsonEncodedResponse.
         */
        std::string responseSchemaStr;

        /**
         * Avro binary encoded response.
         */
        std::vector<uint8_t> binaryEncodedResponse;

        /**
         * Avro JSON encoded response.
         */
        std::string jsonEncodedResponse;

        /**
         * Total/Filtered number of records.
         */
        int64_t totalNumberOfRecords;

        /**
         * Too many records. Returned a partial set.
         * Supported values:
         * <ul>
         *     <li>true
         *     <li>false
         * </ul>
         */
        bool hasMoreRecords;

        /**
         * Name of the table that has the result records of the query. Valid,
         * when @ref hasMoreRecords is @ref gpudb::execute_sql_true "true"
         * (Subject to config.paging_tables_enabled)
         */
        std::string pagingTable;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::execute_sql_count "execute_sql_count": Number of
         *         records in the final table
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RawExecuteSqlResponse>
    {
        static void encode(Encoder& e, const gpudb::RawExecuteSqlResponse& v)
        {
            ::avro::encode(e, v.countAffected);
            ::avro::encode(e, v.responseSchemaStr);
            ::avro::encode(e, v.binaryEncodedResponse);
            ::avro::encode(e, v.jsonEncodedResponse);
            ::avro::encode(e, v.totalNumberOfRecords);
            ::avro::encode(e, v.hasMoreRecords);
            ::avro::encode(e, v.pagingTable);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::RawExecuteSqlResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.countAffected);
                            break;

                        case 1:
                            ::avro::decode(d, v.responseSchemaStr);
                            break;

                        case 2:
                            ::avro::decode(d, v.binaryEncodedResponse);
                            break;

                        case 3:
                            ::avro::decode(d, v.jsonEncodedResponse);
                            break;

                        case 4:
                            ::avro::decode(d, v.totalNumberOfRecords);
                            break;

                        case 5:
                            ::avro::decode(d, v.hasMoreRecords);
                            break;

                        case 6:
                            ::avro::decode(d, v.pagingTable);
                            break;

                        case 7:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.countAffected);
                ::avro::decode(d, v.responseSchemaStr);
                ::avro::decode(d, v.binaryEncodedResponse);
                ::avro::decode(d, v.jsonEncodedResponse);
                ::avro::decode(d, v.totalNumberOfRecords);
                ::avro::decode(d, v.hasMoreRecords);
                ::avro::decode(d, v.pagingTable);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::executeSql(const ExecuteSqlRequest&) const "GPUdb::executeSql".
     */
    struct ExecuteSqlResponse
    {
        /**
         * Constructs an ExecuteSqlResponse object with default parameters.
         */
        ExecuteSqlResponse() :
            countAffected(int64_t()),
            responseSchemaStr(std::string()),
            data(std::vector<gpudb::GenericRecord>()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool()),
            pagingTable(std::string()),
            info(std::map<std::string, std::string>()),
            dataTypePtr((gpudb::Type*)NULL)
        {
        }

        /**
         * The number of objects/records affected.
         */
        int64_t countAffected;

        /**
         * Avro schema of @ref data or @a jsonEncodedResponse.
         */
        std::string responseSchemaStr;

        /**
         * Avro binary encoded response.
         */
        std::vector<gpudb::GenericRecord> data;

        /**
         * Total/Filtered number of records.
         */
        int64_t totalNumberOfRecords;

        /**
         * Too many records. Returned a partial set.
         * Supported values:
         * <ul>
         *     <li>true
         *     <li>false
         * </ul>
         */
        bool hasMoreRecords;

        /**
         * Name of the table that has the result records of the query. Valid,
         * when @ref hasMoreRecords is @ref gpudb::execute_sql_true "true"
         * (Subject to config.paging_tables_enabled)
         */
        std::string pagingTable;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::execute_sql_count "execute_sql_count": Number of
         *         records in the final table
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;

        gpudb_type_ptr_t dataTypePtr;
    };
} // end namespace gpudb

#endif // __EXECUTE_SQL_H__
