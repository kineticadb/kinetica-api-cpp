/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_DATASINK_H__
#define __ALTER_DATASINK_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::alterDatasink(const AlterDatasinkRequest&) const
     * "GPUdb::alterDatasink".
     *
     * Alters the properties of an existing <a
     * href="../../../concepts/data_sinks/" target="_top">data sink</a>
     */
    struct AlterDatasinkRequest
    {
        /**
         * Constructs an AlterDatasinkRequest object with default parameters.
         */
        AlterDatasinkRequest() :
            name(std::string()),
            datasinkUpdatesMap(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterDatasinkRequest object with the specified
         * parameters.
         *
         * @param[in] name_  Name of the data sink to be altered. Must be an
         *                   existing data sink.
         * @param[in] datasinkUpdatesMap_  Map containing the properties of the
         *                                 data sink to be updated. Error if
         *                                 empty.
         *                                 <ul>
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_destination
         *                                         "alter_datasink_destination":
         *                                         Destination for the output
         *                                         data in format
         *                                         'destination_type://path[:port]'.
         *                                         Supported destination types
         *                                         are 'azure', 'gcs', 'hdfs',
         *                                         'http', 'https', 'jdbc',
         *                                         'kafka', and 's3'.
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_connection_timeout
         *                                         "alter_datasink_connection_timeout":
         *                                         Timeout in seconds for
         *                                         connecting to this sink
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_wait_timeout
         *                                         "alter_datasink_wait_timeout":
         *                                         Timeout in seconds for
         *                                         waiting for a response from
         *                                         this sink
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_credential
         *                                         "alter_datasink_credential":
         *                                         Name of the <a
         *                                         href="../../../concepts/credentials/"
         *                                         target="_top">credential</a>
         *                                         object to be used in this
         *                                         data sink
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_s3_bucket_name
         *                                         "alter_datasink_s3_bucket_name":
         *                                         Name of the Amazon S3 bucket
         *                                         to use as the data sink
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_s3_region
         *                                         "alter_datasink_s3_region":
         *                                         Name of the Amazon S3 region
         *                                         where the given bucket is
         *                                         located
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_s3_verify_ssl
         *                                         "alter_datasink_s3_verify_ssl":
         *                                         Whether to verify SSL
         *                                         connections.
         *                                         Supported values:
         *                                         <ul>
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_true
         *                                                 "alter_datasink_true":
         *                                                 Connect with SSL
         *                                                 verification
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_false
         *                                                 "alter_datasink_false":
         *                                                 Connect without
         *                                                 verifying the SSL
         *                                                 connection; for
         *                                                 testing purposes,
         *                                                 bypassing TLS
         *                                                 errors, self-signed
         *                                                 certificates, etc.
         *                                         </ul>
         *                                         The default value is @ref
         *                                         gpudb::alter_datasink_true
         *                                         "alter_datasink_true".
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_s3_use_virtual_addressing
         *                                         "alter_datasink_s3_use_virtual_addressing":
         *                                         Whether to use virtual
         *                                         addressing when referencing
         *                                         the Amazon S3 sink.
         *                                         Supported values:
         *                                         <ul>
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_true
         *                                                 "alter_datasink_true":
         *                                                 The requests URI
         *                                                 should be specified
         *                                                 in
         *                                                 virtual-hosted-style
         *                                                 format where the
         *                                                 bucket name is part
         *                                                 of the domain name
         *                                                 in the URL.
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_false
         *                                                 "alter_datasink_false":
         *                                                 Use path-style URI
         *                                                 for requests.
         *                                         </ul>
         *                                         The default value is @ref
         *                                         gpudb::alter_datasink_true
         *                                         "alter_datasink_true".
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_s3_aws_role_arn
         *                                         "alter_datasink_s3_aws_role_arn":
         *                                         Amazon IAM Role ARN which
         *                                         has required S3 permissions
         *                                         that can be assumed for the
         *                                         given S3 IAM user
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_s3_encryption_customer_algorithm
         *                                         "alter_datasink_s3_encryption_customer_algorithm":
         *                                         Customer encryption
         *                                         algorithm used encrypting
         *                                         data
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_s3_encryption_customer_key
         *                                         "alter_datasink_s3_encryption_customer_key":
         *                                         Customer encryption key to
         *                                         encrypt or decrypt data
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_s3_encryption_type
         *                                         "alter_datasink_s3_encryption_type":
         *                                         Server side encryption type
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_s3_kms_key_id
         *                                         "alter_datasink_s3_kms_key_id":
         *                                         KMS key
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_hdfs_kerberos_keytab
         *                                         "alter_datasink_hdfs_kerberos_keytab":
         *                                         Kerberos keytab file
         *                                         location for the given HDFS
         *                                         user.  This may be a KIFS
         *                                         file.
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_hdfs_delegation_token
         *                                         "alter_datasink_hdfs_delegation_token":
         *                                         Delegation token for the
         *                                         given HDFS user
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_hdfs_use_kerberos
         *                                         "alter_datasink_hdfs_use_kerberos":
         *                                         Use kerberos authentication
         *                                         for the given HDFS cluster.
         *                                         Supported values:
         *                                         <ul>
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_true
         *                                                 "alter_datasink_true"
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_false
         *                                                 "alter_datasink_false"
         *                                         </ul>
         *                                         The default value is @ref
         *                                         gpudb::alter_datasink_false
         *                                         "alter_datasink_false".
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_azure_storage_account_name
         *                                         "alter_datasink_azure_storage_account_name":
         *                                         Name of the Azure storage
         *                                         account to use as the data
         *                                         sink, this is valid only if
         *                                         tenant_id is specified
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_azure_container_name
         *                                         "alter_datasink_azure_container_name":
         *                                         Name of the Azure storage
         *                                         container to use as the data
         *                                         sink
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_azure_tenant_id
         *                                         "alter_datasink_azure_tenant_id":
         *                                         Active Directory tenant ID
         *                                         (or directory ID)
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_azure_sas_token
         *                                         "alter_datasink_azure_sas_token":
         *                                         Shared access signature
         *                                         token for Azure storage
         *                                         account to use as the data
         *                                         sink
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_azure_oauth_token
         *                                         "alter_datasink_azure_oauth_token":
         *                                         Oauth token to access given
         *                                         storage container
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_gcs_bucket_name
         *                                         "alter_datasink_gcs_bucket_name":
         *                                         Name of the Google Cloud
         *                                         Storage bucket to use as the
         *                                         data sink
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_gcs_project_id
         *                                         "alter_datasink_gcs_project_id":
         *                                         Name of the Google Cloud
         *                                         project to use as the data
         *                                         sink
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_gcs_service_account_keys
         *                                         "alter_datasink_gcs_service_account_keys":
         *                                         Google Cloud service account
         *                                         keys to use for
         *                                         authenticating the data sink
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_jdbc_driver_jar_path
         *                                         "alter_datasink_jdbc_driver_jar_path":
         *                                         JDBC driver jar file
         *                                         location.  This may be a
         *                                         KIFS file.
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_jdbc_driver_class_name
         *                                         "alter_datasink_jdbc_driver_class_name":
         *                                         Name of the JDBC driver
         *                                         class
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_kafka_url
         *                                         "alter_datasink_kafka_url":
         *                                         The publicly-accessible full
         *                                         path URL to the kafka
         *                                         broker, e.g.,
         *                                         'http://172.123.45.67:9300'.
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_kafka_topic_name
         *                                         "alter_datasink_kafka_topic_name":
         *                                         Name of the Kafka topic to
         *                                         use for this data sink, if
         *                                         it references a Kafka broker
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_anonymous
         *                                         "alter_datasink_anonymous":
         *                                         Create an anonymous
         *                                         connection to the storage
         *                                         provider--DEPRECATED: this
         *                                         is now the default.  Specify
         *                                         use_managed_credentials for
         *                                         non-anonymous connection.
         *                                         Supported values:
         *                                         <ul>
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_true
         *                                                 "alter_datasink_true"
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_false
         *                                                 "alter_datasink_false"
         *                                         </ul>
         *                                         The default value is @ref
         *                                         gpudb::alter_datasink_true
         *                                         "alter_datasink_true".
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_use_managed_credentials
         *                                         "alter_datasink_use_managed_credentials":
         *                                         When no credentials are
         *                                         supplied, we use anonymous
         *                                         access by default.  If this
         *                                         is set, we will use cloud
         *                                         provider user settings.
         *                                         Supported values:
         *                                         <ul>
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_true
         *                                                 "alter_datasink_true"
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_false
         *                                                 "alter_datasink_false"
         *                                         </ul>
         *                                         The default value is @ref
         *                                         gpudb::alter_datasink_false
         *                                         "alter_datasink_false".
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_use_https
         *                                         "alter_datasink_use_https":
         *                                         Use https to connect to
         *                                         datasink if true, otherwise
         *                                         use http.
         *                                         Supported values:
         *                                         <ul>
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_true
         *                                                 "alter_datasink_true"
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_false
         *                                                 "alter_datasink_false"
         *                                         </ul>
         *                                         The default value is @ref
         *                                         gpudb::alter_datasink_true
         *                                         "alter_datasink_true".
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_max_batch_size
         *                                         "alter_datasink_max_batch_size":
         *                                         Maximum number of records
         *                                         per notification message.
         *                                         The default value is '1'.
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_max_message_size
         *                                         "alter_datasink_max_message_size":
         *                                         Maximum size in bytes of
         *                                         each notification message.
         *                                         The default value is
         *                                         '1000000'.
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_json_format
         *                                         "alter_datasink_json_format":
         *                                         The desired format of JSON
         *                                         encoded notifications
         *                                         message.
         *                                         Supported values:
         *                                         <ul>
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_flat
         *                                                 "alter_datasink_flat":
         *                                                 A single record is
         *                                                 returned per message
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_nested
         *                                                 "alter_datasink_nested":
         *                                                 Records are returned
         *                                                 as an array per
         *                                                 message
         *                                         </ul>
         *                                         The default value is @ref
         *                                         gpudb::alter_datasink_flat
         *                                         "alter_datasink_flat".
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_skip_validation
         *                                         "alter_datasink_skip_validation":
         *                                         Bypass validation of
         *                                         connection to this data
         *                                         sink.
         *                                         Supported values:
         *                                         <ul>
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_true
         *                                                 "alter_datasink_true"
         *                                             <li>@ref
         *                                                 gpudb::alter_datasink_false
         *                                                 "alter_datasink_false"
         *                                         </ul>
         *                                         The default value is @ref
         *                                         gpudb::alter_datasink_false
         *                                         "alter_datasink_false".
         *                                     <li>@ref
         *                                         gpudb::alter_datasink_schema_name
         *                                         "alter_datasink_schema_name":
         *                                         Updates the schema name.  If
         *                                         @ref
         *                                         gpudb::alter_datasink_schema_name
         *                                         "schema_name" doesn't exist,
         *                                         an error will be thrown. If
         *                                         @ref
         *                                         gpudb::alter_datasink_schema_name
         *                                         "schema_name" is empty, then
         *                                         the user's default schema
         *                                         will be used.
         *                                 </ul>
         * @param[in] options_  Optional parameters.
         */
        AlterDatasinkRequest(const std::string& name_, const std::map<std::string, std::string>& datasinkUpdatesMap_, const std::map<std::string, std::string>& options_):
            name( name_ ),
            datasinkUpdatesMap( datasinkUpdatesMap_ ),
            options( options_ )
        {
        }

        /**
         * Name of the data sink to be altered. Must be an existing data sink.
         */
        std::string name;

        /**
         * Map containing the properties of the data sink to be updated. Error
         * if empty.
         * <ul>
         *     <li>@ref gpudb::alter_datasink_destination
         *         "alter_datasink_destination": Destination for the output
         *         data in format 'destination_type://path[:port]'.  Supported
         *         destination types are 'azure', 'gcs', 'hdfs', 'http',
         *         'https', 'jdbc', 'kafka', and 's3'.
         *     <li>@ref gpudb::alter_datasink_connection_timeout
         *         "alter_datasink_connection_timeout": Timeout in seconds for
         *         connecting to this sink
         *     <li>@ref gpudb::alter_datasink_wait_timeout
         *         "alter_datasink_wait_timeout": Timeout in seconds for
         *         waiting for a response from this sink
         *     <li>@ref gpudb::alter_datasink_credential
         *         "alter_datasink_credential": Name of the <a
         *         href="../../../concepts/credentials/"
         *         target="_top">credential</a> object to be used in this data
         *         sink
         *     <li>@ref gpudb::alter_datasink_s3_bucket_name
         *         "alter_datasink_s3_bucket_name": Name of the Amazon S3
         *         bucket to use as the data sink
         *     <li>@ref gpudb::alter_datasink_s3_region
         *         "alter_datasink_s3_region": Name of the Amazon S3 region
         *         where the given bucket is located
         *     <li>@ref gpudb::alter_datasink_s3_verify_ssl
         *         "alter_datasink_s3_verify_ssl": Whether to verify SSL
         *         connections.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_datasink_true
         *                 "alter_datasink_true": Connect with SSL verification
         *             <li>@ref gpudb::alter_datasink_false
         *                 "alter_datasink_false": Connect without verifying
         *                 the SSL connection; for testing purposes, bypassing
         *                 TLS errors, self-signed certificates, etc.
         *         </ul>
         *         The default value is @ref gpudb::alter_datasink_true
         *         "alter_datasink_true".
         *     <li>@ref gpudb::alter_datasink_s3_use_virtual_addressing
         *         "alter_datasink_s3_use_virtual_addressing": Whether to use
         *         virtual addressing when referencing the Amazon S3 sink.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_datasink_true
         *                 "alter_datasink_true": The requests URI should be
         *                 specified in virtual-hosted-style format where the
         *                 bucket name is part of the domain name in the URL.
         *             <li>@ref gpudb::alter_datasink_false
         *                 "alter_datasink_false": Use path-style URI for
         *                 requests.
         *         </ul>
         *         The default value is @ref gpudb::alter_datasink_true
         *         "alter_datasink_true".
         *     <li>@ref gpudb::alter_datasink_s3_aws_role_arn
         *         "alter_datasink_s3_aws_role_arn": Amazon IAM Role ARN which
         *         has required S3 permissions that can be assumed for the
         *         given S3 IAM user
         *     <li>@ref gpudb::alter_datasink_s3_encryption_customer_algorithm
         *         "alter_datasink_s3_encryption_customer_algorithm": Customer
         *         encryption algorithm used encrypting data
         *     <li>@ref gpudb::alter_datasink_s3_encryption_customer_key
         *         "alter_datasink_s3_encryption_customer_key": Customer
         *         encryption key to encrypt or decrypt data
         *     <li>@ref gpudb::alter_datasink_s3_encryption_type
         *         "alter_datasink_s3_encryption_type": Server side encryption
         *         type
         *     <li>@ref gpudb::alter_datasink_s3_kms_key_id
         *         "alter_datasink_s3_kms_key_id": KMS key
         *     <li>@ref gpudb::alter_datasink_hdfs_kerberos_keytab
         *         "alter_datasink_hdfs_kerberos_keytab": Kerberos keytab file
         *         location for the given HDFS user.  This may be a KIFS file.
         *     <li>@ref gpudb::alter_datasink_hdfs_delegation_token
         *         "alter_datasink_hdfs_delegation_token": Delegation token for
         *         the given HDFS user
         *     <li>@ref gpudb::alter_datasink_hdfs_use_kerberos
         *         "alter_datasink_hdfs_use_kerberos": Use kerberos
         *         authentication for the given HDFS cluster.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_datasink_true
         *                 "alter_datasink_true"
         *             <li>@ref gpudb::alter_datasink_false
         *                 "alter_datasink_false"
         *         </ul>
         *         The default value is @ref gpudb::alter_datasink_false
         *         "alter_datasink_false".
         *     <li>@ref gpudb::alter_datasink_azure_storage_account_name
         *         "alter_datasink_azure_storage_account_name": Name of the
         *         Azure storage account to use as the data sink, this is valid
         *         only if tenant_id is specified
         *     <li>@ref gpudb::alter_datasink_azure_container_name
         *         "alter_datasink_azure_container_name": Name of the Azure
         *         storage container to use as the data sink
         *     <li>@ref gpudb::alter_datasink_azure_tenant_id
         *         "alter_datasink_azure_tenant_id": Active Directory tenant ID
         *         (or directory ID)
         *     <li>@ref gpudb::alter_datasink_azure_sas_token
         *         "alter_datasink_azure_sas_token": Shared access signature
         *         token for Azure storage account to use as the data sink
         *     <li>@ref gpudb::alter_datasink_azure_oauth_token
         *         "alter_datasink_azure_oauth_token": Oauth token to access
         *         given storage container
         *     <li>@ref gpudb::alter_datasink_gcs_bucket_name
         *         "alter_datasink_gcs_bucket_name": Name of the Google Cloud
         *         Storage bucket to use as the data sink
         *     <li>@ref gpudb::alter_datasink_gcs_project_id
         *         "alter_datasink_gcs_project_id": Name of the Google Cloud
         *         project to use as the data sink
         *     <li>@ref gpudb::alter_datasink_gcs_service_account_keys
         *         "alter_datasink_gcs_service_account_keys": Google Cloud
         *         service account keys to use for authenticating the data sink
         *     <li>@ref gpudb::alter_datasink_jdbc_driver_jar_path
         *         "alter_datasink_jdbc_driver_jar_path": JDBC driver jar file
         *         location.  This may be a KIFS file.
         *     <li>@ref gpudb::alter_datasink_jdbc_driver_class_name
         *         "alter_datasink_jdbc_driver_class_name": Name of the JDBC
         *         driver class
         *     <li>@ref gpudb::alter_datasink_kafka_url
         *         "alter_datasink_kafka_url": The publicly-accessible full
         *         path URL to the kafka broker, e.g.,
         *         'http://172.123.45.67:9300'.
         *     <li>@ref gpudb::alter_datasink_kafka_topic_name
         *         "alter_datasink_kafka_topic_name": Name of the Kafka topic
         *         to use for this data sink, if it references a Kafka broker
         *     <li>@ref gpudb::alter_datasink_anonymous
         *         "alter_datasink_anonymous": Create an anonymous connection
         *         to the storage provider--DEPRECATED: this is now the
         *         default.  Specify use_managed_credentials for non-anonymous
         *         connection.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_datasink_true
         *                 "alter_datasink_true"
         *             <li>@ref gpudb::alter_datasink_false
         *                 "alter_datasink_false"
         *         </ul>
         *         The default value is @ref gpudb::alter_datasink_true
         *         "alter_datasink_true".
         *     <li>@ref gpudb::alter_datasink_use_managed_credentials
         *         "alter_datasink_use_managed_credentials": When no
         *         credentials are supplied, we use anonymous access by
         *         default.  If this is set, we will use cloud provider user
         *         settings.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_datasink_true
         *                 "alter_datasink_true"
         *             <li>@ref gpudb::alter_datasink_false
         *                 "alter_datasink_false"
         *         </ul>
         *         The default value is @ref gpudb::alter_datasink_false
         *         "alter_datasink_false".
         *     <li>@ref gpudb::alter_datasink_use_https
         *         "alter_datasink_use_https": Use https to connect to datasink
         *         if true, otherwise use http.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_datasink_true
         *                 "alter_datasink_true"
         *             <li>@ref gpudb::alter_datasink_false
         *                 "alter_datasink_false"
         *         </ul>
         *         The default value is @ref gpudb::alter_datasink_true
         *         "alter_datasink_true".
         *     <li>@ref gpudb::alter_datasink_max_batch_size
         *         "alter_datasink_max_batch_size": Maximum number of records
         *         per notification message. The default value is '1'.
         *     <li>@ref gpudb::alter_datasink_max_message_size
         *         "alter_datasink_max_message_size": Maximum size in bytes of
         *         each notification message. The default value is '1000000'.
         *     <li>@ref gpudb::alter_datasink_json_format
         *         "alter_datasink_json_format": The desired format of JSON
         *         encoded notifications message.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_datasink_flat
         *                 "alter_datasink_flat": A single record is returned
         *                 per message
         *             <li>@ref gpudb::alter_datasink_nested
         *                 "alter_datasink_nested": Records are returned as an
         *                 array per message
         *         </ul>
         *         The default value is @ref gpudb::alter_datasink_flat
         *         "alter_datasink_flat".
         *     <li>@ref gpudb::alter_datasink_skip_validation
         *         "alter_datasink_skip_validation": Bypass validation of
         *         connection to this data sink.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_datasink_true
         *                 "alter_datasink_true"
         *             <li>@ref gpudb::alter_datasink_false
         *                 "alter_datasink_false"
         *         </ul>
         *         The default value is @ref gpudb::alter_datasink_false
         *         "alter_datasink_false".
         *     <li>@ref gpudb::alter_datasink_schema_name
         *         "alter_datasink_schema_name": Updates the schema name.  If
         *         @ref gpudb::alter_datasink_schema_name "schema_name" doesn't
         *         exist, an error will be thrown. If @ref
         *         gpudb::alter_datasink_schema_name "schema_name" is empty,
         *         then the user's default schema will be used.
         * </ul>
         */
        std::map<std::string, std::string> datasinkUpdatesMap;

        /**
         * Optional parameters.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterDatasinkRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterDatasinkRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.datasinkUpdatesMap);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterDatasinkRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.datasinkUpdatesMap);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.datasinkUpdatesMap);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::alterDatasink(const AlterDatasinkRequest&) const
     * "GPUdb::alterDatasink".
     */
    struct AlterDatasinkResponse
    {
        /**
         * Constructs an AlterDatasinkResponse object with default parameters.
         */
        AlterDatasinkResponse() :
            updatedPropertiesMap(std::map<std::string, std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Map of values updated
         */
        std::map<std::string, std::string> updatedPropertiesMap;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterDatasinkResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterDatasinkResponse& v)
        {
            ::avro::encode(e, v.updatedPropertiesMap);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterDatasinkResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.updatedPropertiesMap);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.updatedPropertiesMap);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ALTER_DATASINK_H__
