/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __HAS_ROLE_H__
#define __HAS_ROLE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref GPUdb::hasRole(const HasRoleRequest&) const
     * "GPUdb::hasRole".
     *
     * Checks if the specified user has the specified role.
     */
    struct HasRoleRequest
    {
        /**
         * Constructs a HasRoleRequest object with default parameters.
         */
        HasRoleRequest() :
            principal(std::string()),
            role(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a HasRoleRequest object with the specified parameters.
         *
         * @param[in] principal_  Name of the user for which role membersih is
         *                        being checked. Must be an existing user. If
         *                        blank, will use the current user. The default
         *                        value is ''.
         * @param[in] role_  Name of role to check for membership.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::has_role_no_error_if_not_exists
         *                              "has_role_no_error_if_not_exists": If
         *                              @ref gpudb::has_role_false "false" will
         *                              return an error if the provided @a
         *                              role_ does not exist or is blank. If
         *                              @ref gpudb::has_role_true "true" then
         *                              it will return @ref
         *                              gpudb::has_role_false "false" for @ref
         *                              gpudb::HasRoleResponse::hasRole
         *                              "hasRole".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::has_role_true
         *                                      "has_role_true"
         *                                  <li>@ref gpudb::has_role_false
         *                                      "has_role_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::has_role_false "has_role_false".
         *                          <li>@ref gpudb::has_role_only_direct
         *                              "has_role_only_direct": If @ref
         *                              gpudb::has_role_false "false" will
         *                              search recursively if the @a principal_
         *                              is a member of @a role_.  If @ref
         *                              gpudb::has_role_true "true" then @a
         *                              principal_ must directly be a member of
         *                              @a role_.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::has_role_true
         *                                      "has_role_true"
         *                                  <li>@ref gpudb::has_role_false
         *                                      "has_role_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::has_role_false "has_role_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        HasRoleRequest(const std::string& principal_, const std::string& role_, const std::map<std::string, std::string>& options_):
            principal( principal_ ),
            role( role_ ),
            options( options_ )
        {
        }

        /**
         * Name of the user for which role membersih is being checked. Must be
         * an existing user. If blank, will use the current user. The default
         * value is ''.
         */
        std::string principal;

        /**
         * Name of role to check for membership.
         */
        std::string role;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::has_role_no_error_if_not_exists
         *         "has_role_no_error_if_not_exists": If @ref
         *         gpudb::has_role_false "false" will return an error if the
         *         provided @ref role does not exist or is blank. If @ref
         *         gpudb::has_role_true "true" then it will return @ref
         *         gpudb::has_role_false "false" for @ref
         *         gpudb::HasRoleResponse::hasRole "hasRole".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::has_role_true "has_role_true"
         *             <li>@ref gpudb::has_role_false "has_role_false"
         *         </ul>
         *         The default value is @ref gpudb::has_role_false
         *         "has_role_false".
         *     <li>@ref gpudb::has_role_only_direct "has_role_only_direct": If
         *         @ref gpudb::has_role_false "false" will search recursively
         *         if the @ref principal is a member of @ref role.  If @ref
         *         gpudb::has_role_true "true" then @ref principal must
         *         directly be a member of @ref role.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::has_role_true "has_role_true"
         *             <li>@ref gpudb::has_role_false "has_role_false"
         *         </ul>
         *         The default value is @ref gpudb::has_role_false
         *         "has_role_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::HasRoleRequest>
    {
        static void encode(Encoder& e, const gpudb::HasRoleRequest& v)
        {
            ::avro::encode(e, v.principal);
            ::avro::encode(e, v.role);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::HasRoleRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.principal);
                            break;

                        case 1:
                            ::avro::decode(d, v.role);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.principal);
                ::avro::decode(d, v.role);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::hasRole(const HasRoleRequest&) const "GPUdb::hasRole".
     */
    struct HasRoleResponse
    {
        /**
         * Constructs a HasRoleResponse object with default parameters.
         */
        HasRoleResponse() :
            principal(std::string()),
            role(std::string()),
            hasRole(bool()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::HasRoleRequest::principal "principal"
         */
        std::string principal;

        /**
         * @ref gpudb::HasRoleRequest::role "role" for which membership is
         * being checked
         */
        std::string role;

        /**
         * Indicates whether the specified user has membership in the specified
         * target @ref gpudb::HasRoleRequest::role "role".
         * Supported values:
         * <ul>
         *     <li>true: User has membership in the role
         *     <li>false: User does not have membership in the role
         * </ul>
         */
        bool hasRole;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::has_role_direct "has_role_direct": @ref
         *         gpudb::has_role_true "true" when principal is directly a
         *         member of the role.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::has_role_true "has_role_true"
         *             <li>@ref gpudb::has_role_false "has_role_false"
         *         </ul>
         *         The default value is @ref gpudb::has_role_false
         *         "has_role_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::HasRoleResponse>
    {
        static void encode(Encoder& e, const gpudb::HasRoleResponse& v)
        {
            ::avro::encode(e, v.principal);
            ::avro::encode(e, v.role);
            ::avro::encode(e, v.hasRole);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::HasRoleResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.principal);
                            break;

                        case 1:
                            ::avro::decode(d, v.role);
                            break;

                        case 2:
                            ::avro::decode(d, v.hasRole);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.principal);
                ::avro::decode(d, v.role);
                ::avro::decode(d, v.hasRole);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __HAS_ROLE_H__
