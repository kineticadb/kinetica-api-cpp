/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __HAS_PERMISSION_H__
#define __HAS_PERMISSION_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::hasPermission(const HasPermissionRequest&) const
     * "GPUdb::hasPermission".
     *
     * Checks if the specified user has the specified permission on the
     * specified object.
     */
    struct HasPermissionRequest
    {
        /**
         * Constructs a HasPermissionRequest object with default parameters.
         */
        HasPermissionRequest() :
            principal(std::string()),
            object(std::string()),
            objectType(std::string()),
            permission(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a HasPermissionRequest object with the specified
         * parameters.
         *
         * @param[in] principal_  Name of the user for which the permission is
         *                        being checked. Must be an existing user. If
         *                        blank, will use the current user. The default
         *                        value is ''.
         * @param[in] object_  Name of object to check for the requested
         *                     permission.  It is recommended to use a
         *                     fully-qualified name when possible.
         * @param[in] objectType_  The type of object being checked.
         *                         Supported values:
         *                         <ul>
         *                             <li>@ref gpudb::has_permission_context
         *                                 "has_permission_context": Context
         *                             <li>@ref
         *                                 gpudb::has_permission_credential
         *                                 "has_permission_credential":
         *                                 Credential
         *                             <li>@ref gpudb::has_permission_datasink
         *                                 "has_permission_datasink": Data Sink
         *                             <li>@ref
         *                                 gpudb::has_permission_datasource
         *                                 "has_permission_datasource": Data
         *                                 Source
         *                             <li>@ref gpudb::has_permission_directory
         *                                 "has_permission_directory": KiFS
         *                                 File Directory
         *                             <li>@ref gpudb::has_permission_graph
         *                                 "has_permission_graph": A Graph
         *                                 object
         *                             <li>@ref gpudb::has_permission_proc
         *                                 "has_permission_proc": UDF Procedure
         *                             <li>@ref gpudb::has_permission_schema
         *                                 "has_permission_schema": Schema
         *                             <li>@ref gpudb::has_permission_sql_proc
         *                                 "has_permission_sql_proc": SQL
         *                                 Procedure
         *                             <li>@ref gpudb::has_permission_system
         *                                 "has_permission_system":
         *                                 System-level access
         *                             <li>@ref gpudb::has_permission_table
         *                                 "has_permission_table": Database
         *                                 Table
         *                             <li>@ref
         *                                 gpudb::has_permission_table_monitor
         *                                 "has_permission_table_monitor":
         *                                 Table monitor
         *                         </ul>
         * @param[in] permission_  Permission to check for.
         *                         Supported values:
         *                         <ul>
         *                             <li>@ref gpudb::has_permission_admin
         *                                 "has_permission_admin": Full
         *                                 read/write and administrative access
         *                                 on the object.
         *                             <li>@ref gpudb::has_permission_connect
         *                                 "has_permission_connect": Connect
         *                                 access on the given data source or
         *                                 data sink.
         *                             <li>@ref gpudb::has_permission_create
         *                                 "has_permission_create": Ability to
         *                                 create new objects of this type.
         *                             <li>@ref gpudb::has_permission_delete
         *                                 "has_permission_delete": Delete rows
         *                                 from tables.
         *                             <li>@ref gpudb::has_permission_execute
         *                                 "has_permission_execute": Ability to
         *                                 Execute the Procedure object.
         *                             <li>@ref gpudb::has_permission_insert
         *                                 "has_permission_insert": Insert
         *                                 access to tables.
         *                             <li>@ref gpudb::has_permission_read
         *                                 "has_permission_read": Ability to
         *                                 read, list and use the object.
         *                             <li>@ref gpudb::has_permission_update
         *                                 "has_permission_update": Update
         *                                 access to the table.
         *                             <li>@ref
         *                                 gpudb::has_permission_user_admin
         *                                 "has_permission_user_admin": Access
         *                                 to administer users and roles that
         *                                 do not have system_admin permission.
         *                             <li>@ref gpudb::has_permission_write
         *                                 "has_permission_write": Access to
         *                                 write, change and delete objects.
         *                         </ul>
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::has_permission_no_error_if_not_exists
         *                              "has_permission_no_error_if_not_exists":
         *                              If @ref gpudb::has_permission_false
         *                              "false" will return an error if the
         *                              provided @a object_ does not exist or
         *                              is blank. If @ref
         *                              gpudb::has_permission_true "true" then
         *                              it will return @ref
         *                              gpudb::has_permission_false "false" for
         *                              @ref
         *                              gpudb::HasPermissionResponse::hasPermission
         *                              "hasPermission".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::has_permission_true
         *                                      "has_permission_true"
         *                                  <li>@ref
         *                                      gpudb::has_permission_false
         *                                      "has_permission_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::has_permission_false
         *                              "has_permission_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        HasPermissionRequest(const std::string& principal_, const std::string& object_, const std::string& objectType_, const std::string& permission_, const std::map<std::string, std::string>& options_):
            principal( principal_ ),
            object( object_ ),
            objectType( objectType_ ),
            permission( permission_ ),
            options( options_ )
        {
        }

        /**
         * Name of the user for which the permission is being checked. Must be
         * an existing user. If blank, will use the current user. The default
         * value is ''.
         */
        std::string principal;

        /**
         * Name of object to check for the requested permission.  It is
         * recommended to use a fully-qualified name when possible.
         */
        std::string object;

        /**
         * The type of object being checked.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::has_permission_context "has_permission_context":
         *         Context
         *     <li>@ref gpudb::has_permission_credential
         *         "has_permission_credential": Credential
         *     <li>@ref gpudb::has_permission_datasink
         *         "has_permission_datasink": Data Sink
         *     <li>@ref gpudb::has_permission_datasource
         *         "has_permission_datasource": Data Source
         *     <li>@ref gpudb::has_permission_directory
         *         "has_permission_directory": KiFS File Directory
         *     <li>@ref gpudb::has_permission_graph "has_permission_graph": A
         *         Graph object
         *     <li>@ref gpudb::has_permission_proc "has_permission_proc": UDF
         *         Procedure
         *     <li>@ref gpudb::has_permission_schema "has_permission_schema":
         *         Schema
         *     <li>@ref gpudb::has_permission_sql_proc
         *         "has_permission_sql_proc": SQL Procedure
         *     <li>@ref gpudb::has_permission_system "has_permission_system":
         *         System-level access
         *     <li>@ref gpudb::has_permission_table "has_permission_table":
         *         Database Table
         *     <li>@ref gpudb::has_permission_table_monitor
         *         "has_permission_table_monitor": Table monitor
         * </ul>
         */
        std::string objectType;

        /**
         * Permission to check for.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::has_permission_admin "has_permission_admin":
         *         Full read/write and administrative access on the object.
         *     <li>@ref gpudb::has_permission_connect "has_permission_connect":
         *         Connect access on the given data source or data sink.
         *     <li>@ref gpudb::has_permission_create "has_permission_create":
         *         Ability to create new objects of this type.
         *     <li>@ref gpudb::has_permission_delete "has_permission_delete":
         *         Delete rows from tables.
         *     <li>@ref gpudb::has_permission_execute "has_permission_execute":
         *         Ability to Execute the Procedure object.
         *     <li>@ref gpudb::has_permission_insert "has_permission_insert":
         *         Insert access to tables.
         *     <li>@ref gpudb::has_permission_read "has_permission_read":
         *         Ability to read, list and use the object.
         *     <li>@ref gpudb::has_permission_update "has_permission_update":
         *         Update access to the table.
         *     <li>@ref gpudb::has_permission_user_admin
         *         "has_permission_user_admin": Access to administer users and
         *         roles that do not have system_admin permission.
         *     <li>@ref gpudb::has_permission_write "has_permission_write":
         *         Access to write, change and delete objects.
         * </ul>
         */
        std::string permission;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::has_permission_no_error_if_not_exists
         *         "has_permission_no_error_if_not_exists": If @ref
         *         gpudb::has_permission_false "false" will return an error if
         *         the provided @ref object does not exist or is blank. If @ref
         *         gpudb::has_permission_true "true" then it will return @ref
         *         gpudb::has_permission_false "false" for @ref
         *         gpudb::HasPermissionResponse::hasPermission "hasPermission".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::has_permission_true
         *                 "has_permission_true"
         *             <li>@ref gpudb::has_permission_false
         *                 "has_permission_false"
         *         </ul>
         *         The default value is @ref gpudb::has_permission_false
         *         "has_permission_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::HasPermissionRequest>
    {
        static void encode(Encoder& e, const gpudb::HasPermissionRequest& v)
        {
            ::avro::encode(e, v.principal);
            ::avro::encode(e, v.object);
            ::avro::encode(e, v.objectType);
            ::avro::encode(e, v.permission);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::HasPermissionRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.principal);
                            break;

                        case 1:
                            ::avro::decode(d, v.object);
                            break;

                        case 2:
                            ::avro::decode(d, v.objectType);
                            break;

                        case 3:
                            ::avro::decode(d, v.permission);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.principal);
                ::avro::decode(d, v.object);
                ::avro::decode(d, v.objectType);
                ::avro::decode(d, v.permission);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::hasPermission(const HasPermissionRequest&) const
     * "GPUdb::hasPermission".
     */
    struct HasPermissionResponse
    {
        /**
         * Constructs a HasPermissionResponse object with default parameters.
         */
        HasPermissionResponse() :
            principal(std::string()),
            object(std::string()),
            objectType(std::string()),
            permission(std::string()),
            hasPermission(bool()),
            filters(std::map<std::string, std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::HasPermissionRequest::principal "principal"
         */
        std::string principal;

        /**
         * Fully-qualified value of @ref gpudb::HasPermissionRequest::object
         * "object"
         */
        std::string object;

        /**
         * Value of @ref gpudb::HasPermissionRequest::objectType "objectType"
         */
        std::string objectType;

        /**
         * Value of @ref gpudb::HasPermissionRequest::permission "permission"
         */
        std::string permission;

        /**
         * Indicates whether the specified user has the specified permission on
         * the specified target.
         * Supported values:
         * <ul>
         *     <li>true: User has the effective queried permission
         *     <li>false: User does not have the queried permission
         * </ul>
         */
        bool hasPermission;

        /**
         * Map of column/filters that have been granted.
         */
        std::map<std::string, std::string> filters;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::HasPermissionResponse>
    {
        static void encode(Encoder& e, const gpudb::HasPermissionResponse& v)
        {
            ::avro::encode(e, v.principal);
            ::avro::encode(e, v.object);
            ::avro::encode(e, v.objectType);
            ::avro::encode(e, v.permission);
            ::avro::encode(e, v.hasPermission);
            ::avro::encode(e, v.filters);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::HasPermissionResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.principal);
                            break;

                        case 1:
                            ::avro::decode(d, v.object);
                            break;

                        case 2:
                            ::avro::decode(d, v.objectType);
                            break;

                        case 3:
                            ::avro::decode(d, v.permission);
                            break;

                        case 4:
                            ::avro::decode(d, v.hasPermission);
                            break;

                        case 5:
                            ::avro::decode(d, v.filters);
                            break;

                        case 6:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.principal);
                ::avro::decode(d, v.object);
                ::avro::decode(d, v.objectType);
                ::avro::decode(d, v.permission);
                ::avro::decode(d, v.hasPermission);
                ::avro::decode(d, v.filters);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __HAS_PERMISSION_H__
