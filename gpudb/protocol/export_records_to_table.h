/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __EXPORT_RECORDS_TO_TABLE_H__
#define __EXPORT_RECORDS_TO_TABLE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #exportRecordsToTable(const ExportRecordsToTableRequest&) const}.
     * <p>
     * Exports records from source table to the specified target table in an
     * external database
     */
    struct ExportRecordsToTableRequest
    {

        /**
         * Constructs an ExportRecordsToTableRequest object with default
         * parameter values.
         */
        ExportRecordsToTableRequest() :
            tableName(std::string()),
            remoteQuery(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an ExportRecordsToTableRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the table from which the data will be
         *                        exported to remote database, in
         *                        [schema_name.]table_name format, using
         *                        standard
         *                        <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         * @param[in] remoteQuery_  Parameterized insert query to export gpudb
         *                          table data into remote database
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::export_records_to_table_batch_size:
         *                      Batch size, which determines how many rows to
         *                      export per round trip.  The default value is
         *                      '200000'.
         *                              <li>
         *                      gpudb::export_records_to_table_datasink_name:
         *                      Name of an existing external data sink to which
         *                      table name specified in @a tableName will be
         *                      exported
         *                              <li>
         *                      gpudb::export_records_to_table_jdbc_session_init_statement:
         *                      Executes the statement per each jdbc session
         *                      before doing actual load.  The default value is
         *                      ''.
         *                              <li>
         *                      gpudb::export_records_to_table_jdbc_connection_init_statement:
         *                      Executes the statement once before doing actual
         *                      load.  The default value is ''.
         *                              <li>
         *                      gpudb::export_records_to_table_remote_table:
         *                      Name of the target table to which source table
         *                      is exported. When this option is specified
         *                      remote_query cannot be specified.  The default
         *                      value is ''.
         *                              <li>
         *                      gpudb::export_records_to_table_use_st_geomfrom_casts:
         *                      Wraps parametrized variables with
         *                      st_geomfromtext or st_geomfromwkb based on
         *                      source column type
         *                      <ul>
         *                              <li>
         *                      gpudb::export_records_to_table_true
         *                              <li>
         *                      gpudb::export_records_to_table_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::export_records_to_table_false.
         *                              <li>
         *                      gpudb::export_records_to_table_use_indexed_parameters:
         *                      Uses $n style syntax when generating insert
         *                      query for remote_table option
         *                      <ul>
         *                              <li>
         *                      gpudb::export_records_to_table_true
         *                              <li>
         *                      gpudb::export_records_to_table_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::export_records_to_table_true.
         *                      </ul>
         * 
         */
        ExportRecordsToTableRequest(const std::string& tableName_, const std::string& remoteQuery_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            remoteQuery( remoteQuery_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::string remoteQuery;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ExportRecordsToTableRequest>
    {
        static void encode(Encoder& e, const gpudb::ExportRecordsToTableRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.remoteQuery);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ExportRecordsToTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.remoteQuery);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.remoteQuery);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #exportRecordsToTable(const ExportRecordsToTableRequest&) const}.
     * <p>
     * Exports records from source table to the specified target table in an
     * external database
     */
    struct ExportRecordsToTableResponse
    {

        /**
         * Constructs an ExportRecordsToTableResponse object with default
         * parameter values.
         */
        ExportRecordsToTableResponse() :
            tableName(std::string()),
            countInserted(int64_t()),
            countSkipped(int64_t()),
            countUpdated(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string tableName;
        int64_t countInserted;
        int64_t countSkipped;
        int64_t countUpdated;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ExportRecordsToTableResponse>
    {
        static void encode(Encoder& e, const gpudb::ExportRecordsToTableResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.countInserted);
            ::avro::encode(e, v.countSkipped);
            ::avro::encode(e, v.countUpdated);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ExportRecordsToTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.countInserted);
                            break;

                        case 2:
                            ::avro::decode(d, v.countSkipped);
                            break;

                        case 3:
                            ::avro::decode(d, v.countUpdated);
                            break;

                        case 4:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.countInserted);
                ::avro::decode(d, v.countSkipped);
                ::avro::decode(d, v.countUpdated);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
