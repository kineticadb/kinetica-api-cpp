/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_TABLE_H__
#define __SHOW_TABLE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::showTable(const ShowTableRequest&) const "GPUdb::showTable".
     *
     * Retrieves detailed information about a table, view, or schema, specified
     * in @ref tableName. If the supplied @ref tableName is a schema the call
     * can return information about either the schema itself or the tables and
     * views it contains. If @ref tableName is empty, information about all
     * schemas will be returned.
     *
     * If the option @ref gpudb::show_table_get_sizes "get_sizes" is set to
     * @ref gpudb::show_table_true "true", then the number of records in each
     * table is returned (in @ref gpudb::ShowTableResponse::sizes "sizes" and
     * @ref gpudb::ShowTableResponse::fullSizes "fullSizes"), along with the
     * total number of objects across all requested tables (in @ref
     * gpudb::ShowTableResponse::totalSize "totalSize" and @ref
     * gpudb::ShowTableResponse::totalFullSize "totalFullSize").
     *
     * For a schema, setting the @ref gpudb::show_table_show_children
     * "show_children" option to @ref gpudb::show_table_false "false" returns
     * only information about the schema itself; setting @ref
     * gpudb::show_table_show_children "show_children" to @ref
     * gpudb::show_table_true "true" returns a list of tables and views
     * contained in the schema, along with their corresponding detail.
     *
     * To retrieve a list of every table, view, and schema in the database, set
     * @ref tableName to '*' and @ref gpudb::show_table_show_children
     * "show_children" to @ref gpudb::show_table_true "true".  When doing this,
     * the returned @ref gpudb::ShowTableResponse::totalSize "totalSize" and
     * @ref gpudb::ShowTableResponse::totalFullSize "totalFullSize" will not
     * include the sizes of non-base tables (e.g., filters, views, joins,
     * etc.).
     */
    struct ShowTableRequest
    {
        /**
         * Constructs a ShowTableRequest object with default parameters.
         */
        ShowTableRequest() :
            tableName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowTableRequest object with the specified parameters.
         *
         * @param[in] tableName_  Name of the table for which to retrieve the
         *                        information, in [schema_name.]table_name
         *                        format, using standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.  If
         *                        blank, then returns information about all
         *                        tables and views.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::show_table_dependencies
         *                              "show_table_dependencies": Include view
         *                              dependencies in the output.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::show_table_true
         *                                      "show_table_true"
         *                                  <li>@ref gpudb::show_table_false
         *                                      "show_table_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_table_false
         *                              "show_table_false".
         *                          <li>@ref
         *                              gpudb::show_table_force_synchronous
         *                              "show_table_force_synchronous": If @ref
         *                              gpudb::show_table_true "true" then the
         *                              table sizes will wait for read lock
         *                              before returning.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::show_table_true
         *                                      "show_table_true"
         *                                  <li>@ref gpudb::show_table_false
         *                                      "show_table_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_table_true
         *                              "show_table_true".
         *                          <li>@ref gpudb::show_table_get_cached_sizes
         *                              "show_table_get_cached_sizes": If @ref
         *                              gpudb::show_table_true "true" then the
         *                              number of records in each table, along
         *                              with a cumulative count, will be
         *                              returned; blank, otherwise. This
         *                              version will return the sizes cached at
         *                              rank 0, which may be stale if there is
         *                              a multihead insert occuring.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::show_table_true
         *                                      "show_table_true"
         *                                  <li>@ref gpudb::show_table_false
         *                                      "show_table_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_table_false
         *                              "show_table_false".
         *                          <li>@ref gpudb::show_table_get_sizes
         *                              "show_table_get_sizes": If @ref
         *                              gpudb::show_table_true "true" then the
         *                              number of records in each table, along
         *                              with a cumulative count, will be
         *                              returned; blank, otherwise.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::show_table_true
         *                                      "show_table_true"
         *                                  <li>@ref gpudb::show_table_false
         *                                      "show_table_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_table_false
         *                              "show_table_false".
         *                          <li>@ref
         *                              gpudb::show_table_no_error_if_not_exists
         *                              "show_table_no_error_if_not_exists": If
         *                              @ref gpudb::show_table_false "false"
         *                              will return an error if the provided @a
         *                              tableName_ does not exist. If @ref
         *                              gpudb::show_table_true "true" then it
         *                              will return an empty result.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::show_table_true
         *                                      "show_table_true"
         *                                  <li>@ref gpudb::show_table_false
         *                                      "show_table_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_table_false
         *                              "show_table_false".
         *                          <li>@ref gpudb::show_table_show_children
         *                              "show_table_show_children": If @a
         *                              tableName_ is a schema, then @ref
         *                              gpudb::show_table_true "true" will
         *                              return information about the tables and
         *                              views in the schema, and @ref
         *                              gpudb::show_table_false "false" will
         *                              return information about the schema
         *                              itself. If @a tableName_ is a table or
         *                              view, @ref
         *                              gpudb::show_table_show_children
         *                              "show_children" must be @ref
         *                              gpudb::show_table_false "false". If @a
         *                              tableName_ is empty, then @ref
         *                              gpudb::show_table_show_children
         *                              "show_children" must be @ref
         *                              gpudb::show_table_true "true".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::show_table_true
         *                                      "show_table_true"
         *                                  <li>@ref gpudb::show_table_false
         *                                      "show_table_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_table_true
         *                              "show_table_true".
         *                          <li>@ref gpudb::show_table_get_column_info
         *                              "show_table_get_column_info": If @ref
         *                              gpudb::show_table_true "true" then
         *                              column info (memory usage, etc) will be
         *                              returned.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::show_table_true
         *                                      "show_table_true"
         *                                  <li>@ref gpudb::show_table_false
         *                                      "show_table_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_table_false
         *                              "show_table_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        ShowTableRequest(const std::string& tableName_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the table for which to retrieve the information, in [
         * schema_name.\ ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.  If blank, then returns
         * information about all tables and views.
         */
        std::string tableName;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::show_table_dependencies
         *         "show_table_dependencies": Include view dependencies in the
         *         output.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_table_true "show_table_true"
         *             <li>@ref gpudb::show_table_false "show_table_false"
         *         </ul>
         *         The default value is @ref gpudb::show_table_false
         *         "show_table_false".
         *     <li>@ref gpudb::show_table_force_synchronous
         *         "show_table_force_synchronous": If @ref
         *         gpudb::show_table_true "true" then the table sizes will wait
         *         for read lock before returning.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_table_true "show_table_true"
         *             <li>@ref gpudb::show_table_false "show_table_false"
         *         </ul>
         *         The default value is @ref gpudb::show_table_true
         *         "show_table_true".
         *     <li>@ref gpudb::show_table_get_cached_sizes
         *         "show_table_get_cached_sizes": If @ref
         *         gpudb::show_table_true "true" then the number of records in
         *         each table, along with a cumulative count, will be returned;
         *         blank, otherwise. This version will return the sizes cached
         *         at rank 0, which may be stale if there is a multihead insert
         *         occuring.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_table_true "show_table_true"
         *             <li>@ref gpudb::show_table_false "show_table_false"
         *         </ul>
         *         The default value is @ref gpudb::show_table_false
         *         "show_table_false".
         *     <li>@ref gpudb::show_table_get_sizes "show_table_get_sizes": If
         *         @ref gpudb::show_table_true "true" then the number of
         *         records in each table, along with a cumulative count, will
         *         be returned; blank, otherwise.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_table_true "show_table_true"
         *             <li>@ref gpudb::show_table_false "show_table_false"
         *         </ul>
         *         The default value is @ref gpudb::show_table_false
         *         "show_table_false".
         *     <li>@ref gpudb::show_table_no_error_if_not_exists
         *         "show_table_no_error_if_not_exists": If @ref
         *         gpudb::show_table_false "false" will return an error if the
         *         provided @ref tableName does not exist. If @ref
         *         gpudb::show_table_true "true" then it will return an empty
         *         result.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_table_true "show_table_true"
         *             <li>@ref gpudb::show_table_false "show_table_false"
         *         </ul>
         *         The default value is @ref gpudb::show_table_false
         *         "show_table_false".
         *     <li>@ref gpudb::show_table_show_children
         *         "show_table_show_children": If @ref tableName is a schema,
         *         then @ref gpudb::show_table_true "true" will return
         *         information about the tables and views in the schema, and
         *         @ref gpudb::show_table_false "false" will return information
         *         about the schema itself. If @ref tableName is a table or
         *         view, @ref gpudb::show_table_show_children "show_children"
         *         must be @ref gpudb::show_table_false "false". If @ref
         *         tableName is empty, then @ref
         *         gpudb::show_table_show_children "show_children" must be @ref
         *         gpudb::show_table_true "true".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_table_true "show_table_true"
         *             <li>@ref gpudb::show_table_false "show_table_false"
         *         </ul>
         *         The default value is @ref gpudb::show_table_true
         *         "show_table_true".
         *     <li>@ref gpudb::show_table_get_column_info
         *         "show_table_get_column_info": If @ref gpudb::show_table_true
         *         "true" then column info (memory usage, etc) will be
         *         returned.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_table_true "show_table_true"
         *             <li>@ref gpudb::show_table_false "show_table_false"
         *         </ul>
         *         The default value is @ref gpudb::show_table_false
         *         "show_table_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowTableRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowTableRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::showTable(const ShowTableRequest&) const "GPUdb::showTable".
     */
    struct ShowTableResponse
    {
        /**
         * Constructs a ShowTableResponse object with default parameters.
         */
        ShowTableResponse() :
            tableName(std::string()),
            tableNames(std::vector<std::string>()),
            tableDescriptions(std::vector<std::vector<std::string> >()),
            typeIds(std::vector<std::string>()),
            typeSchemas(std::vector<std::string>()),
            typeLabels(std::vector<std::string>()),
            properties(std::vector<std::map<std::string, std::vector<std::string> > >()),
            additionalInfo(std::vector<std::map<std::string, std::string> >()),
            sizes(std::vector<int64_t>()),
            fullSizes(std::vector<int64_t>()),
            joinSizes(std::vector<double>()),
            totalSize(int64_t()),
            totalFullSize(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::ShowTableRequest::tableName "tableName".
         */
        std::string tableName;

        /**
         * If @ref gpudb::ShowTableRequest::tableName "tableName" is a table or
         * view, then the single element of the array is @ref
         * gpudb::ShowTableRequest::tableName "tableName". If @ref
         * gpudb::ShowTableRequest::tableName "tableName" is a schema and @ref
         * gpudb::show_table_show_children "show_children" is set to @ref
         * gpudb::show_table_true "true", then this array is populated with the
         * names of all tables and views in the given schema; if @ref
         * gpudb::show_table_show_children "show_children" is @ref
         * gpudb::show_table_false "false", then this array will only include
         * the schema name itself. If @ref gpudb::ShowTableRequest::tableName
         * "tableName" is an empty string, then the array contains the names of
         * all tables in the user's default schema.
         */
        std::vector<std::string> tableNames;

        /**
         * List of descriptions for the respective tables in @ref tableNames.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::show_table_COLLECTION "show_table_COLLECTION"
         *     <li>@ref gpudb::show_table_JOIN "show_table_JOIN"
         *     <li>@ref gpudb::show_table_LOGICAL_EXTERNAL_TABLE
         *         "show_table_LOGICAL_EXTERNAL_TABLE"
         *     <li>@ref gpudb::show_table_LOGICAL_VIEW
         *         "show_table_LOGICAL_VIEW"
         *     <li>@ref gpudb::show_table_MATERIALIZED_EXTERNAL_TABLE
         *         "show_table_MATERIALIZED_EXTERNAL_TABLE"
         *     <li>@ref gpudb::show_table_MATERIALIZED_VIEW
         *         "show_table_MATERIALIZED_VIEW"
         *     <li>@ref gpudb::show_table_MATERIALIZED_VIEW_MEMBER
         *         "show_table_MATERIALIZED_VIEW_MEMBER"
         *     <li>@ref gpudb::show_table_MATERIALIZED_VIEW_UNDER_CONSTRUCTION
         *         "show_table_MATERIALIZED_VIEW_UNDER_CONSTRUCTION"
         *     <li>@ref gpudb::show_table_REPLICATED "show_table_REPLICATED"
         *     <li>@ref gpudb::show_table_RESULT_TABLE
         *         "show_table_RESULT_TABLE"
         *     <li>@ref gpudb::show_table_SCHEMA "show_table_SCHEMA"
         *     <li>@ref gpudb::show_table_VIEW "show_table_VIEW"
         * </ul>
         */
        std::vector<std::vector<std::string> > tableDescriptions;

        /**
         * Type ids of the respective tables in @ref tableNames.
         */
        std::vector<std::string> typeIds;

        /**
         * Type schemas of the respective tables in @ref tableNames.
         */
        std::vector<std::string> typeSchemas;

        /**
         * Type labels of the respective tables in @ref tableNames.
         */
        std::vector<std::string> typeLabels;

        /**
         * Property maps of the respective tables in @ref tableNames.
         */
        std::vector<std::map<std::string, std::vector<std::string> > > properties;

        /**
         * Additional information about the respective tables in @ref
         * tableNames.
         * <ul>
         *     <li>@ref gpudb::show_table_request_avro_type
         *         "show_table_request_avro_type": Method by which this table
         *         was created.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_table_create_table
         *                 "show_table_create_table"
         *             <li>@ref gpudb::show_table_create_projection
         *                 "show_table_create_projection"
         *             <li>@ref gpudb::show_table_create_union
         *                 "show_table_create_union"
         *         </ul>
         *     <li>@ref gpudb::show_table_request_avro_json
         *         "show_table_request_avro_json": The JSON representation of
         *         request creating this table. The default value is ''.
         *     <li>@ref gpudb::show_table_protected "show_table_protected": No
         *         longer used.  Indicated whether the respective table was
         *         protected or not.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_table_true "show_table_true"
         *             <li>@ref gpudb::show_table_false "show_table_false"
         *         </ul>
         *     <li>@ref gpudb::show_table_record_bytes
         *         "show_table_record_bytes": The number of in-memory bytes per
         *         record which is the sum of the byte sizes of all columns
         *         with property  'data'.
         *     <li>@ref gpudb::show_table_total_bytes "show_table_total_bytes":
         *         The total size in bytes of all data stored in the table.
         *     <li>@ref gpudb::show_table_collection_names
         *         "show_table_collection_names": [DEPRECATED--use schema_name
         *         instead]  This will now contain the name of the schema for
         *         the table.  There can only be one schema for a table.
         *     <li>@ref gpudb::show_table_schema_name "show_table_schema_name":
         *         The name of the schema for the table.  There can only be one
         *         schema for a table.
         *     <li>@ref gpudb::show_table_table_ttl "show_table_table_ttl": The
         *         value of the <a href="../../../concepts/ttl/"
         *         target="_top">time-to-live</a> setting.  Not present for
         *         schemas.
         *     <li>@ref gpudb::show_table_remaining_table_ttl
         *         "show_table_remaining_table_ttl": The remaining <a
         *         href="../../../concepts/ttl/"
         *         target="_top">time-to-live</a>, in minutes, before the
         *         respective table expires (-1 if it will never expire).  Not
         *         present for schemas.
         *     <li>@ref gpudb::show_table_primary_key_type
         *         "show_table_primary_key_type": The primary key type of the
         *         table (if it has a primary key).
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_table_memory "show_table_memory":
         *                 In-memory primary key
         *             <li>@ref gpudb::show_table_disk "show_table_disk":
         *                 On-disk primary key
         *         </ul>
         *     <li>@ref gpudb::show_table_foreign_keys
         *         "show_table_foreign_keys": Semicolon-separated list of <a
         *         href="../../../concepts/tables/#foreign-key"
         *         target="_top">foreign keys</a>, of the format 'source_column
         *         references target_table(primary_key_column)'. Not present
         *         for schemas. The default value is ''.
         *     <li>@ref gpudb::show_table_foreign_shard_key
         *         "show_table_foreign_shard_key": Foreign shard key
         *         description of the format: &lt;fk_foreign_key&gt; references
         *         &lt;pk_column_name&gt; from
         *         &lt;pk_table_name&gt;(&lt;pk_primary_key&gt;). Not present
         *         for schemas. The default value is ''.
         *     <li>@ref gpudb::show_table_partition_type
         *         "show_table_partition_type": <a
         *         href="../../../concepts/tables/#partitioning"
         *         target="_top">Partitioning</a> scheme used for this table.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_table_RANGE "show_table_RANGE":
         *                 Using <a
         *                 href="../../../concepts/tables/#partitioning-by-range"
         *                 target="_top">range partitioning</a>
         *             <li>@ref gpudb::show_table_INTERVAL
         *                 "show_table_INTERVAL": Using <a
         *                 href="../../../concepts/tables/#partitioning-by-interval"
         *                 target="_top">interval partitioning</a>
         *             <li>@ref gpudb::show_table_LIST "show_table_LIST": Using
         *                 <a
         *                 href="../../../concepts/tables/#partitioning-by-list-manual"
         *                 target="_top">manual list partitioning</a>
         *             <li>@ref gpudb::show_table_HASH "show_table_HASH": Using
         *                 <a
         *                 href="../../../concepts/tables/#partitioning-by-hash"
         *                 target="_top">hash partitioning</a>.
         *             <li>@ref gpudb::show_table_SERIES "show_table_SERIES":
         *                 Using <a
         *                 href="../../../concepts/tables/#partitioning-by-series"
         *                 target="_top">series partitioning</a>.
         *             <li>@ref gpudb::show_table_NONE "show_table_NONE": Using
         *                 no partitioning
         *         </ul>
         *         The default value is @ref gpudb::show_table_NONE
         *         "show_table_NONE".
         *     <li>@ref gpudb::show_table_partition_keys
         *         "show_table_partition_keys": Comma-separated list of
         *         partition keys. The default value is ''.
         *     <li>@ref gpudb::show_table_partition_definitions
         *         "show_table_partition_definitions": Comma-separated list of
         *         partition definitions, whose format depends on the
         *         partition_type.  See <a
         *         href="../../../concepts/tables/#partitioning"
         *         target="_top">partitioning</a> documentation for details.
         *         The default value is ''.
         *     <li>@ref gpudb::show_table_is_automatic_partition
         *         "show_table_is_automatic_partition": True if partitions will
         *         be created for LIST VALUES which don't fall into existing
         *         partitions. The default value is ''.
         *     <li>@ref gpudb::show_table_attribute_indexes
         *         "show_table_attribute_indexes": Semicolon-separated list of
         *         indexes. For <a
         *         href="../../../concepts/indexes/#column-index"
         *         target="_top">column (attribute) indexes</a>, only the
         *         indexed column name will be listed. For other index types,
         *         the index type will be listed with the colon-delimited
         *         indexed column(s) and the comma-delimited index option(s)
         *         using the form:
         *         &lt;index_type&gt;@&lt;column_list&gt;@&lt;column_options&gt;.
         *         Not present for schemas. The default value is ''.
         *     <li>@ref gpudb::show_table_compressed_columns
         *         "show_table_compressed_columns": No longer supported. The
         *         default value is ''.
         *     <li>@ref gpudb::show_table_column_info "show_table_column_info":
         *         JSON-encoded string representing a map of column name to
         *         information including memory usage if the @ref
         *         gpudb::show_table_get_column_info "get_column_info" option
         *         is @ref gpudb::show_table_true "true". The default value is
         *         ''.
         *     <li>@ref gpudb::show_table_global_access_mode
         *         "show_table_global_access_mode": Returns the global access
         *         mode (i.e. lock status) for the table.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_table_no_access
         *                 "show_table_no_access": No read/write operations are
         *                 allowed on this table.
         *             <li>@ref gpudb::show_table_read_only
         *                 "show_table_read_only": Only read operations are
         *                 allowed on this table.
         *             <li>@ref gpudb::show_table_write_only
         *                 "show_table_write_only": Only write operations are
         *                 allowed on this table.
         *             <li>@ref gpudb::show_table_read_write
         *                 "show_table_read_write": All read/write operations
         *                 are allowed on this table.
         *         </ul>
         *     <li>@ref gpudb::show_table_view_table_name
         *         "show_table_view_table_name": For materialized view the name
         *         of the view this member table is part of - if same as the
         *         table_name then this is the root of the view. The default
         *         value is ''.
         *     <li>@ref gpudb::show_table_is_view_persisted
         *         "show_table_is_view_persisted": True if the view named
         *         view_table_name is persisted - reported for each view
         *         member.  Means method of recreating this member is saved -
         *         not the members data. The default value is ''.
         *     <li>@ref gpudb::show_table_is_dirty "show_table_is_dirty": True
         *         if some input table of the materialized view that affects
         *         this member table has been modified since the last refresh.
         *         The default value is ''.
         *     <li>@ref gpudb::show_table_refresh_method
         *         "show_table_refresh_method": For materialized view current
         *         refresh_method - one of manual, periodic, on_change. The
         *         default value is ''.
         *     <li>@ref gpudb::show_table_refresh_start_time
         *         "show_table_refresh_start_time": For materialized view with
         *         periodic refresh_method the current intial datetime string
         *         that periodic refreshes began. The default value is ''.
         *     <li>@ref gpudb::show_table_refresh_stop_time
         *         "show_table_refresh_stop_time": Time at which the periodic
         *         view refresh stops. The default value is ''.
         *     <li>@ref gpudb::show_table_refresh_period
         *         "show_table_refresh_period": For materialized view with
         *         periodic refresh_method the current refresh period in
         *         seconds. The default value is ''.
         *     <li>@ref gpudb::show_table_last_refresh_time
         *         "show_table_last_refresh_time": For materialized view the a
         *         datatime string indicating the last time the view was
         *         refreshed. The default value is ''.
         *     <li>@ref gpudb::show_table_next_refresh_time
         *         "show_table_next_refresh_time": For materialized view with
         *         periodic refresh_method a datetime string indicating the
         *         next time the view is to be refreshed. The default value is
         *         ''.
         *     <li>@ref gpudb::show_table_user_chunk_size
         *         "show_table_user_chunk_size": User-specified number of
         *         records per chunk, if provided at table creation time. The
         *         default value is ''.
         *     <li>@ref gpudb::show_table_user_chunk_column_max_memory
         *         "show_table_user_chunk_column_max_memory": User-specified
         *         target max bytes per column in a chunk, if provided at table
         *         creation time. The default value is ''.
         *     <li>@ref gpudb::show_table_user_chunk_max_memory
         *         "show_table_user_chunk_max_memory": User-specified target
         *         max bytes for all columns in a chunk, if provided at table
         *         creation time. The default value is ''.
         *     <li>@ref gpudb::show_table_owner_resource_group
         *         "show_table_owner_resource_group": Name of the owner
         *         resource group. The default value is ''.
         *     <li>@ref gpudb::show_table_alternate_shard_keys
         *         "show_table_alternate_shard_keys": Semicolon-separated list
         *         of shard keys that were equated in joins (applicable for
         *         join tables). The default value is ''.
         *     <li>@ref gpudb::show_table_datasource_subscriptions
         *         "show_table_datasource_subscriptions": Semicolon-separated
         *         list of datasource names the table has subscribed to. The
         *         default value is ''.
         *     <li>@ref gpudb::show_table_null_modifying_columns
         *         "show_table_null_modifying_columns": Comma-separated list of
         *         null modifying column names. The default value is ''.
         * </ul>
         */
        std::vector<std::map<std::string, std::string> > additionalInfo;

        /**
         * If @ref gpudb::show_table_get_sizes "get_sizes" is @ref
         * gpudb::show_table_true "true", an array containing the number of
         * records of each corresponding table in @ref tableNames.  Otherwise,
         * an empty array.
         */
        std::vector<int64_t> sizes;

        /**
         * If @ref gpudb::show_table_get_sizes "get_sizes" is @ref
         * gpudb::show_table_true "true", an array containing the number of
         * records of each corresponding table in @ref tableNames (same values
         * as @ref sizes).  Otherwise, an empty array.
         */
        std::vector<int64_t> fullSizes;

        /**
         * If @ref gpudb::show_table_get_sizes "get_sizes" is @ref
         * gpudb::show_table_true "true", an array containing the number of
         * unfiltered records in the cross product of the sub-tables of each
         * corresponding join-table in @ref tableNames. For simple tables, this
         * number will be the same as @ref sizes.  For join-tables, this value
         * gives the number of joined-table rows that must be processed by any
         * aggregate functions operating on the table.  Otherwise, (if @ref
         * gpudb::show_table_get_sizes "get_sizes" is @ref
         * gpudb::show_table_false "false"), an empty array.
         */
        std::vector<double> joinSizes;

        /**
         * If @ref gpudb::show_table_get_sizes "get_sizes" is @ref
         * gpudb::show_table_true "true", the sum of the elements of @ref
         * sizes.  Otherwise, -1.
         */
        int64_t totalSize;

        /**
         * If @ref gpudb::show_table_get_sizes "get_sizes" is @ref
         * gpudb::show_table_true "true", the sum of the elements of @ref
         * fullSizes (same value as @ref totalSize).  Otherwise, -1.
         */
        int64_t totalFullSize;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowTableResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowTableResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.tableDescriptions);
            ::avro::encode(e, v.typeIds);
            ::avro::encode(e, v.typeSchemas);
            ::avro::encode(e, v.typeLabels);
            ::avro::encode(e, v.properties);
            ::avro::encode(e, v.additionalInfo);
            ::avro::encode(e, v.sizes);
            ::avro::encode(e, v.fullSizes);
            ::avro::encode(e, v.joinSizes);
            ::avro::encode(e, v.totalSize);
            ::avro::encode(e, v.totalFullSize);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.tableDescriptions);
                            break;

                        case 3:
                            ::avro::decode(d, v.typeIds);
                            break;

                        case 4:
                            ::avro::decode(d, v.typeSchemas);
                            break;

                        case 5:
                            ::avro::decode(d, v.typeLabels);
                            break;

                        case 6:
                            ::avro::decode(d, v.properties);
                            break;

                        case 7:
                            ::avro::decode(d, v.additionalInfo);
                            break;

                        case 8:
                            ::avro::decode(d, v.sizes);
                            break;

                        case 9:
                            ::avro::decode(d, v.fullSizes);
                            break;

                        case 10:
                            ::avro::decode(d, v.joinSizes);
                            break;

                        case 11:
                            ::avro::decode(d, v.totalSize);
                            break;

                        case 12:
                            ::avro::decode(d, v.totalFullSize);
                            break;

                        case 13:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.tableDescriptions);
                ::avro::decode(d, v.typeIds);
                ::avro::decode(d, v.typeSchemas);
                ::avro::decode(d, v.typeLabels);
                ::avro::decode(d, v.properties);
                ::avro::decode(d, v.additionalInfo);
                ::avro::decode(d, v.sizes);
                ::avro::decode(d, v.fullSizes);
                ::avro::decode(d, v.joinSizes);
                ::avro::decode(d, v.totalSize);
                ::avro::decode(d, v.totalFullSize);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __SHOW_TABLE_H__
