/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __VISUALIZE_ISOCHRONE_H__
#define __VISUALIZE_ISOCHRONE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::visualizeIsochrone(const VisualizeIsochroneRequest&) const
     * "GPUdb::visualizeIsochrone".
     *
     * Generate an image containing isolines for travel results using an
     * existing graph. Isolines represent curves of equal cost, with cost
     * typically referring to the time or distance assigned as the weights of
     * the underlying graph. See <a
     * href="../../../graph_solver/network_graph_solver/" target="_top">Graphs
     * & Solvers</a> for more information on graphs.
     */
    struct VisualizeIsochroneRequest
    {
        /**
         * Constructs a VisualizeIsochroneRequest object with default
         * parameters.
         */
        VisualizeIsochroneRequest() :
            graphName(std::string()),
            sourceNode(std::string()),
            maxSolutionRadius(double()),
            weightsOnEdges(std::vector<std::string>()),
            restrictions(std::vector<std::string>()),
            numLevels(int32_t()),
            generateImage(bool()),
            levelsTable(std::string()),
            styleOptions(std::map<std::string, std::string>()),
            solveOptions(std::map<std::string, std::string>()),
            contourOptions(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a VisualizeIsochroneRequest object with the specified
         * parameters.
         *
         * @param[in] graphName_  Name of the graph on which the isochrone is
         *                        to be computed.
         * @param[in] sourceNode_  Starting vertex on the underlying graph
         *                         from/to which the isochrones are created.
         * @param[in] maxSolutionRadius_  Extent of the search radius around @a
         *                                sourceNode_. Set to '-1.0' for
         *                                unrestricted search radius. The
         *                                default value is -1.0.
         * @param[in] weightsOnEdges_  Additional weights to apply to the edges
         *                             of an existing graph. Weights must be
         *                             specified using <a
         *                             href="../../../graph_solver/network_graph_solver/#identifiers"
         *                             target="_top">identifiers</a>;
         *                             identifiers are grouped as <a
         *                             href="../../../graph_solver/network_graph_solver/#id-combos"
         *                             target="_top">combinations</a>.
         *                             Identifiers can be used with existing
         *                             column names, e.g., 'table.column AS
         *                             WEIGHTS_EDGE_ID', or expressions, e.g.,
         *                             'ST_LENGTH(wkt) AS
         *                             WEIGHTS_VALUESPECIFIED'. Any provided
         *                             weights will be added (in the case of
         *                             'WEIGHTS_VALUESPECIFIED') to or
         *                             multiplied with (in the case of
         *                             'WEIGHTS_FACTORSPECIFIED') the existing
         *                             weight(s). The default value is an empty
         *                             vector.
         * @param[in] restrictions_  Additional restrictions to apply to the
         *                           nodes/edges of an existing graph.
         *                           Restrictions must be specified using <a
         *                           href="../../../graph_solver/network_graph_solver/#identifiers"
         *                           target="_top">identifiers</a>; identifiers
         *                           are grouped as <a
         *                           href="../../../graph_solver/network_graph_solver/#id-combos"
         *                           target="_top">combinations</a>.
         *                           Identifiers can be used with existing
         *                           column names, e.g., 'table.column AS
         *                           RESTRICTIONS_EDGE_ID', or expressions,
         *                           e.g., 'column/2 AS
         *                           RESTRICTIONS_VALUECOMPARED'. If @ref
         *                           gpudb::visualize_isochrone_remove_previous_restrictions
         *                           "remove_previous_restrictions" is set to
         *                           @ref gpudb::visualize_isochrone_true
         *                           "true", any provided restrictions will
         *                           replace the existing restrictions. If @ref
         *                           gpudb::visualize_isochrone_remove_previous_restrictions
         *                           "remove_previous_restrictions" is set to
         *                           @ref gpudb::visualize_isochrone_false
         *                           "false", any provided restrictions will be
         *                           added (in the case of
         *                           'RESTRICTIONS_VALUECOMPARED') to or
         *                           replaced (in the case of
         *                           'RESTRICTIONS_ONOFFCOMPARED'). The default
         *                           value is an empty vector.
         * @param[in] numLevels_  Number of equally-separated isochrones to
         *                        compute. The default value is 1.
         * @param[in] generateImage_  If set to @ref
         *                            gpudb::visualize_isochrone_true "true",
         *                            generates a PNG image of the isochrones
         *                            in the response.
         *                            Supported values:
         *                            <ul>
         *                                <li>true
         *                                <li>false
         *                            </ul>
         *                            The default value is true.
         * @param[in] levelsTable_  Name of the table to output the isochrones
         *                          to, in [schema_name.]table_name format,
         *                          using standard <a
         *                          href="../../../concepts/tables/#table-name-resolution"
         *                          target="_top">name resolution rules</a> and
         *                          meeting <a
         *                          href="../../../concepts/tables/#table-naming-criteria"
         *                          target="_top">table naming criteria</a>.
         *                          The table will contain levels and their
         *                          corresponding WKT geometry. If no value is
         *                          provided, the table is not generated. The
         *                          default value is ''.
         * @param[in] styleOptions_  Various style related options of the
         *                           isochrone image.
         *                           <ul>
         *                               <li>@ref
         *                                   gpudb::visualize_isochrone_line_size
         *                                   "visualize_isochrone_line_size":
         *                                   The width of the contour lines in
         *                                   pixels. The default value is '3'.
         *                                   The minimum allowed value is '0'.
         *                                   The maximum allowed value is '20'.
         *                               <li>@ref
         *                                   gpudb::visualize_isochrone_color
         *                                   "visualize_isochrone_color": Color
         *                                   of generated isolines. All color
         *                                   values must be in the format
         *                                   RRGGBB or AARRGGBB (to specify the
         *                                   alpha value). If alpha is
         *                                   specified and flooded contours are
         *                                   enabled, it will be used for as
         *                                   the transparency of the latter.
         *                                   The default value is 'FF696969'.
         *                               <li>@ref
         *                                   gpudb::visualize_isochrone_bg_color
         *                                   "visualize_isochrone_bg_color":
         *                                   When @a generateImage_ is set to
         *                                   @ref
         *                                   gpudb::visualize_isochrone_true
         *                                   "true", background color of the
         *                                   generated image. All color values
         *                                   must be in the format RRGGBB or
         *                                   AARRGGBB (to specify the alpha
         *                                   value). The default value is
         *                                   '00000000'.
         *                               <li>@ref
         *                                   gpudb::visualize_isochrone_text_color
         *                                   "visualize_isochrone_text_color":
         *                                   When @ref
         *                                   gpudb::visualize_isochrone_add_labels
         *                                   "add_labels" is set to @ref
         *                                   gpudb::visualize_isochrone_true
         *                                   "true", color for the labels. All
         *                                   color values must be in the format
         *                                   RRGGBB or AARRGGBB (to specify the
         *                                   alpha value). The default value is
         *                                   'FF000000'.
         *                               <li>@ref
         *                                   gpudb::visualize_isochrone_colormap
         *                                   "visualize_isochrone_colormap":
         *                                   Colormap for contours or fill-in
         *                                   regions when applicable. All color
         *                                   values must be in the format
         *                                   RRGGBB or AARRGGBB (to specify the
         *                                   alpha value).
         *                                   Supported values:
         *                                   <ul>
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_jet
         *                                           "visualize_isochrone_jet"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_accent
         *                                           "visualize_isochrone_accent"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_afmhot
         *                                           "visualize_isochrone_afmhot"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_autumn
         *                                           "visualize_isochrone_autumn"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_binary
         *                                           "visualize_isochrone_binary"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_blues
         *                                           "visualize_isochrone_blues"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_bone
         *                                           "visualize_isochrone_bone"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_brbg
         *                                           "visualize_isochrone_brbg"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_brg
         *                                           "visualize_isochrone_brg"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_bugn
         *                                           "visualize_isochrone_bugn"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_bupu
         *                                           "visualize_isochrone_bupu"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_bwr
         *                                           "visualize_isochrone_bwr"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_cmrmap
         *                                           "visualize_isochrone_cmrmap"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_cool
         *                                           "visualize_isochrone_cool"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_coolwarm
         *                                           "visualize_isochrone_coolwarm"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_copper
         *                                           "visualize_isochrone_copper"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_cubehelix
         *                                           "visualize_isochrone_cubehelix"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_dark2
         *                                           "visualize_isochrone_dark2"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_flag
         *                                           "visualize_isochrone_flag"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_gist_earth
         *                                           "visualize_isochrone_gist_earth"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_gist_gray
         *                                           "visualize_isochrone_gist_gray"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_gist_heat
         *                                           "visualize_isochrone_gist_heat"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_gist_ncar
         *                                           "visualize_isochrone_gist_ncar"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_gist_rainbow
         *                                           "visualize_isochrone_gist_rainbow"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_gist_stern
         *                                           "visualize_isochrone_gist_stern"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_gist_yarg
         *                                           "visualize_isochrone_gist_yarg"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_gnbu
         *                                           "visualize_isochrone_gnbu"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_gnuplot2
         *                                           "visualize_isochrone_gnuplot2"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_gnuplot
         *                                           "visualize_isochrone_gnuplot"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_gray
         *                                           "visualize_isochrone_gray"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_greens
         *                                           "visualize_isochrone_greens"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_greys
         *                                           "visualize_isochrone_greys"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_hot
         *                                           "visualize_isochrone_hot"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_hsv
         *                                           "visualize_isochrone_hsv"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_inferno
         *                                           "visualize_isochrone_inferno"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_magma
         *                                           "visualize_isochrone_magma"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_nipy_spectral
         *                                           "visualize_isochrone_nipy_spectral"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_ocean
         *                                           "visualize_isochrone_ocean"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_oranges
         *                                           "visualize_isochrone_oranges"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_orrd
         *                                           "visualize_isochrone_orrd"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_paired
         *                                           "visualize_isochrone_paired"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_pastel1
         *                                           "visualize_isochrone_pastel1"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_pastel2
         *                                           "visualize_isochrone_pastel2"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_pink
         *                                           "visualize_isochrone_pink"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_piyg
         *                                           "visualize_isochrone_piyg"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_plasma
         *                                           "visualize_isochrone_plasma"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_prgn
         *                                           "visualize_isochrone_prgn"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_prism
         *                                           "visualize_isochrone_prism"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_pubu
         *                                           "visualize_isochrone_pubu"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_pubugn
         *                                           "visualize_isochrone_pubugn"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_puor
         *                                           "visualize_isochrone_puor"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_purd
         *                                           "visualize_isochrone_purd"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_purples
         *                                           "visualize_isochrone_purples"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_rainbow
         *                                           "visualize_isochrone_rainbow"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_rdbu
         *                                           "visualize_isochrone_rdbu"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_rdgy
         *                                           "visualize_isochrone_rdgy"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_rdpu
         *                                           "visualize_isochrone_rdpu"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_rdylbu
         *                                           "visualize_isochrone_rdylbu"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_rdylgn
         *                                           "visualize_isochrone_rdylgn"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_reds
         *                                           "visualize_isochrone_reds"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_seismic
         *                                           "visualize_isochrone_seismic"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_set1
         *                                           "visualize_isochrone_set1"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_set2
         *                                           "visualize_isochrone_set2"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_set3
         *                                           "visualize_isochrone_set3"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_spectral
         *                                           "visualize_isochrone_spectral"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_spring
         *                                           "visualize_isochrone_spring"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_summer
         *                                           "visualize_isochrone_summer"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_terrain
         *                                           "visualize_isochrone_terrain"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_viridis
         *                                           "visualize_isochrone_viridis"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_winter
         *                                           "visualize_isochrone_winter"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_wistia
         *                                           "visualize_isochrone_wistia"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_ylgn
         *                                           "visualize_isochrone_ylgn"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_ylgnbu
         *                                           "visualize_isochrone_ylgnbu"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_ylorbr
         *                                           "visualize_isochrone_ylorbr"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_ylorrd
         *                                           "visualize_isochrone_ylorrd"
         *                                   </ul>
         *                                   The default value is @ref
         *                                   gpudb::visualize_isochrone_jet
         *                                   "visualize_isochrone_jet".
         *                           </ul>
         * @param[in] solveOptions_  Solver specific parameters.
         *                           <ul>
         *                               <li>@ref
         *                                   gpudb::visualize_isochrone_remove_previous_restrictions
         *                                   "visualize_isochrone_remove_previous_restrictions":
         *                                   Ignore the restrictions applied to
         *                                   the graph during the creation
         *                                   stage and only use the
         *                                   restrictions specified in this
         *                                   request if set to @ref
         *                                   gpudb::visualize_isochrone_true
         *                                   "true".
         *                                   Supported values:
         *                                   <ul>
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_true
         *                                           "visualize_isochrone_true"
         *                                       <li>@ref
         *                                           gpudb::visualize_isochrone_false
         *                                           "visualize_isochrone_false"
         *                                   </ul>
         *                                   The default value is @ref
         *                                   gpudb::visualize_isochrone_false
         *                                   "visualize_isochrone_false".
         *                               <li>@ref
         *                                   gpudb::visualize_isochrone_restriction_threshold_value
         *                                   "visualize_isochrone_restriction_threshold_value":
         *                                   Value-based restriction
         *                                   comparison. Any node or edge with
         *                                   a 'RESTRICTIONS_VALUECOMPARED'
         *                                   value greater than the @ref
         *                                   gpudb::visualize_isochrone_restriction_threshold_value
         *                                   "restriction_threshold_value" will
         *                                   not be included in the solution.
         *                               <li>@ref
         *                                   gpudb::visualize_isochrone_uniform_weights
         *                                   "visualize_isochrone_uniform_weights":
         *                                   When specified, assigns the given
         *                                   value to all the edges in the
         *                                   graph. Note that weights provided
         *                                   in @a weightsOnEdges_ will
         *                                   override this value.
         *                           </ul>
         *                           The default value is an empty map.
         * @param[in] contourOptions_  Solver specific parameters.
         *                             <ul>
         *                                 <li>@ref
         *                                     gpudb::visualize_isochrone_projection
         *                                     "visualize_isochrone_projection":
         *                                     Spatial Reference System (i.e.
         *                                     EPSG Code).
         *                                     Supported values:
         *                                     <ul>
         *                                         <li>@ref
         *                                             gpudb::visualize_isochrone_3857
         *                                             "visualize_isochrone_3857"
         *                                         <li>@ref
         *                                             gpudb::visualize_isochrone_102100
         *                                             "visualize_isochrone_102100"
         *                                         <li>@ref
         *                                             gpudb::visualize_isochrone_900913
         *                                             "visualize_isochrone_900913"
         *                                         <li>@ref
         *                                             gpudb::visualize_isochrone_EPSG_4326
         *                                             "visualize_isochrone_EPSG_4326"
         *                                         <li>@ref
         *                                             gpudb::visualize_isochrone_PLATE_CARREE
         *                                             "visualize_isochrone_PLATE_CARREE"
         *                                         <li>@ref
         *                                             gpudb::visualize_isochrone_EPSG_900913
         *                                             "visualize_isochrone_EPSG_900913"
         *                                         <li>@ref
         *                                             gpudb::visualize_isochrone_EPSG_102100
         *                                             "visualize_isochrone_EPSG_102100"
         *                                         <li>@ref
         *                                             gpudb::visualize_isochrone_EPSG_3857
         *                                             "visualize_isochrone_EPSG_3857"
         *                                         <li>@ref
         *                                             gpudb::visualize_isochrone_WEB_MERCATOR
         *                                             "visualize_isochrone_WEB_MERCATOR"
         *                                     </ul>
         *                                     The default value is @ref
         *                                     gpudb::visualize_isochrone_PLATE_CARREE
         *                                     "visualize_isochrone_PLATE_CARREE".
         *                                 <li>@ref
         *                                     gpudb::visualize_isochrone_width
         *                                     "visualize_isochrone_width":
         *                                     When @a generateImage_ is set to
         *                                     @ref
         *                                     gpudb::visualize_isochrone_true
         *                                     "true", width of the generated
         *                                     image. The default value is
         *                                     '512'.
         *                                 <li>@ref
         *                                     gpudb::visualize_isochrone_height
         *                                     "visualize_isochrone_height":
         *                                     When @a generateImage_ is set to
         *                                     @ref
         *                                     gpudb::visualize_isochrone_true
         *                                     "true", height of the generated
         *                                     image. If the default value is
         *                                     used, the @ref
         *                                     gpudb::visualize_isochrone_height
         *                                     "height" is set to the value
         *                                     resulting from multiplying the
         *                                     aspect ratio by the @ref
         *                                     gpudb::visualize_isochrone_width
         *                                     "width". The default value is
         *                                     '-1'.
         *                                 <li>@ref
         *                                     gpudb::visualize_isochrone_search_radius
         *                                     "visualize_isochrone_search_radius":
         *                                     When interpolating the graph
         *                                     solution to generate the
         *                                     isochrone, neighborhood of
         *                                     influence of sample data (in
         *                                     percent of the image/grid). The
         *                                     default value is '20'.
         *                                 <li>@ref
         *                                     gpudb::visualize_isochrone_grid_size
         *                                     "visualize_isochrone_grid_size":
         *                                     When interpolating the graph
         *                                     solution to generate the
         *                                     isochrone, number of
         *                                     subdivisions along the x axis
         *                                     when building the grid (the y is
         *                                     computed using the aspect ratio
         *                                     of the output image). The
         *                                     default value is '100'.
         *                                 <li>@ref
         *                                     gpudb::visualize_isochrone_color_isolines
         *                                     "visualize_isochrone_color_isolines":
         *                                     Color each isoline according to
         *                                     the colormap; otherwise, use the
         *                                     foreground color.
         *                                     Supported values:
         *                                     <ul>
         *                                         <li>@ref
         *                                             gpudb::visualize_isochrone_true
         *                                             "visualize_isochrone_true"
         *                                         <li>@ref
         *                                             gpudb::visualize_isochrone_false
         *                                             "visualize_isochrone_false"
         *                                     </ul>
         *                                     The default value is @ref
         *                                     gpudb::visualize_isochrone_true
         *                                     "visualize_isochrone_true".
         *                                 <li>@ref
         *                                     gpudb::visualize_isochrone_add_labels
         *                                     "visualize_isochrone_add_labels":
         *                                     If set to @ref
         *                                     gpudb::visualize_isochrone_true
         *                                     "true", add labels to the
         *                                     isolines.
         *                                     Supported values:
         *                                     <ul>
         *                                         <li>@ref
         *                                             gpudb::visualize_isochrone_true
         *                                             "visualize_isochrone_true"
         *                                         <li>@ref
         *                                             gpudb::visualize_isochrone_false
         *                                             "visualize_isochrone_false"
         *                                     </ul>
         *                                     The default value is @ref
         *                                     gpudb::visualize_isochrone_false
         *                                     "visualize_isochrone_false".
         *                                 <li>@ref
         *                                     gpudb::visualize_isochrone_labels_font_size
         *                                     "visualize_isochrone_labels_font_size":
         *                                     When @ref
         *                                     gpudb::visualize_isochrone_add_labels
         *                                     "add_labels" is set to @ref
         *                                     gpudb::visualize_isochrone_true
         *                                     "true", size of the font (in
         *                                     pixels) to use for labels. The
         *                                     default value is '12'.
         *                                 <li>@ref
         *                                     gpudb::visualize_isochrone_labels_font_family
         *                                     "visualize_isochrone_labels_font_family":
         *                                     When @ref
         *                                     gpudb::visualize_isochrone_add_labels
         *                                     "add_labels" is set to @ref
         *                                     gpudb::visualize_isochrone_true
         *                                     "true", font name to be used
         *                                     when adding labels. The default
         *                                     value is 'arial'.
         *                                 <li>@ref
         *                                     gpudb::visualize_isochrone_labels_search_window
         *                                     "visualize_isochrone_labels_search_window":
         *                                     When @ref
         *                                     gpudb::visualize_isochrone_add_labels
         *                                     "add_labels" is set to @ref
         *                                     gpudb::visualize_isochrone_true
         *                                     "true", a search window is used
         *                                     to rate the local quality of
         *                                     each isoline. Smooth,
         *                                     continuous, long stretches with
         *                                     relatively flat angles are
         *                                     favored. The provided value is
         *                                     multiplied by the @ref
         *                                     gpudb::visualize_isochrone_labels_font_size
         *                                     "labels_font_size" to calculate
         *                                     the final window size. The
         *                                     default value is '4'.
         *                                 <li>@ref
         *                                     gpudb::visualize_isochrone_labels_intralevel_separation
         *                                     "visualize_isochrone_labels_intralevel_separation":
         *                                     When @ref
         *                                     gpudb::visualize_isochrone_add_labels
         *                                     "add_labels" is set to @ref
         *                                     gpudb::visualize_isochrone_true
         *                                     "true", this value determines
         *                                     the  distance (in multiples of
         *                                     the @ref
         *                                     gpudb::visualize_isochrone_labels_font_size
         *                                     "labels_font_size") to use when
         *                                     separating labels of different
         *                                     values. The default value is
         *                                     '4'.
         *                                 <li>@ref
         *                                     gpudb::visualize_isochrone_labels_interlevel_separation
         *                                     "visualize_isochrone_labels_interlevel_separation":
         *                                     When @ref
         *                                     gpudb::visualize_isochrone_add_labels
         *                                     "add_labels" is set to @ref
         *                                     gpudb::visualize_isochrone_true
         *                                     "true", this value determines
         *                                     the distance (in percent of the
         *                                     total window size) to use when
         *                                     separating labels of the same
         *                                     value. The default value is
         *                                     '20'.
         *                                 <li>@ref
         *                                     gpudb::visualize_isochrone_labels_max_angle
         *                                     "visualize_isochrone_labels_max_angle":
         *                                     When @ref
         *                                     gpudb::visualize_isochrone_add_labels
         *                                     "add_labels" is set to @ref
         *                                     gpudb::visualize_isochrone_true
         *                                     "true", maximum angle (in
         *                                     degrees) from the vertical to
         *                                     use when adding labels. The
         *                                     default value is '60'.
         *                             </ul>
         *                             The default value is an empty map.
         * @param[in] options_  Additional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::visualize_isochrone_solve_table
         *                              "visualize_isochrone_solve_table": Name
         *                              of the table to host intermediate solve
         *                              results, in [schema_name.]table_name
         *                              format, using standard <a
         *                              href="../../../concepts/tables/#table-name-resolution"
         *                              target="_top">name resolution rules</a>
         *                              and meeting <a
         *                              href="../../../concepts/tables/#table-naming-criteria"
         *                              target="_top">table naming
         *                              criteria</a>.  This table will contain
         *                              the position and cost for each vertex
         *                              in the graph. If the default value is
         *                              used, a temporary table is created and
         *                              deleted once the solution is
         *                              calculated. The default value is ''.
         *                          <li>@ref
         *                              gpudb::visualize_isochrone_is_replicated
         *                              "visualize_isochrone_is_replicated": If
         *                              set to @ref
         *                              gpudb::visualize_isochrone_true "true",
         *                              replicate the @ref
         *                              gpudb::visualize_isochrone_solve_table
         *                              "solve_table".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::visualize_isochrone_true
         *                                      "visualize_isochrone_true"
         *                                  <li>@ref
         *                                      gpudb::visualize_isochrone_false
         *                                      "visualize_isochrone_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::visualize_isochrone_true
         *                              "visualize_isochrone_true".
         *                          <li>@ref
         *                              gpudb::visualize_isochrone_data_min_x
         *                              "visualize_isochrone_data_min_x": Lower
         *                              bound for the x values. If not
         *                              provided, it will be computed from the
         *                              bounds of the input data.
         *                          <li>@ref
         *                              gpudb::visualize_isochrone_data_max_x
         *                              "visualize_isochrone_data_max_x": Upper
         *                              bound for the x values. If not
         *                              provided, it will be computed from the
         *                              bounds of the input data.
         *                          <li>@ref
         *                              gpudb::visualize_isochrone_data_min_y
         *                              "visualize_isochrone_data_min_y": Lower
         *                              bound for the y values. If not
         *                              provided, it will be computed from the
         *                              bounds of the input data.
         *                          <li>@ref
         *                              gpudb::visualize_isochrone_data_max_y
         *                              "visualize_isochrone_data_max_y": Upper
         *                              bound for the y values. If not
         *                              provided, it will be computed from the
         *                              bounds of the input data.
         *                          <li>@ref
         *                              gpudb::visualize_isochrone_concavity_level
         *                              "visualize_isochrone_concavity_level":
         *                              Factor to qualify the concavity of the
         *                              isochrone curves. The lower the value,
         *                              the more convex (with '0' being
         *                              completely convex and '1' being the
         *                              most concave). The default value is
         *                              '0.5'. The minimum allowed value is
         *                              '0'. The maximum allowed value is '1'.
         *                          <li>@ref
         *                              gpudb::visualize_isochrone_use_priority_queue_solvers
         *                              "visualize_isochrone_use_priority_queue_solvers":
         *                              sets the solver methods explicitly if
         *                              true.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::visualize_isochrone_true
         *                                      "visualize_isochrone_true":
         *                                      uses the solvers scheduled for
         *                                      'shortest_path' and
         *                                      'inverse_shortest_path' based
         *                                      on solve_direction
         *                                  <li>@ref
         *                                      gpudb::visualize_isochrone_false
         *                                      "visualize_isochrone_false":
         *                                      uses the solvers
         *                                      'priority_queue' and
         *                                      'inverse_priority_queue' based
         *                                      on solve_direction
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::visualize_isochrone_false
         *                              "visualize_isochrone_false".
         *                          <li>@ref
         *                              gpudb::visualize_isochrone_solve_direction
         *                              "visualize_isochrone_solve_direction":
         *                              Specify whether we are going to the
         *                              source node, or starting from it.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::visualize_isochrone_from_source
         *                                      "visualize_isochrone_from_source":
         *                                      Shortest path to get to the
         *                                      source (inverse Dijkstra)
         *                                  <li>@ref
         *                                      gpudb::visualize_isochrone_to_source
         *                                      "visualize_isochrone_to_source":
         *                                      Shortest path to source
         *                                      (Dijkstra)
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::visualize_isochrone_from_source
         *                              "visualize_isochrone_from_source".
         *                      </ul>
         *                      The default value is an empty map.
         */
        VisualizeIsochroneRequest(const std::string& graphName_, const std::string& sourceNode_, const double maxSolutionRadius_, const std::vector<std::string>& weightsOnEdges_, const std::vector<std::string>& restrictions_, const int32_t numLevels_, const bool generateImage_, const std::string& levelsTable_, const std::map<std::string, std::string>& styleOptions_, const std::map<std::string, std::string>& solveOptions_, const std::map<std::string, std::string>& contourOptions_, const std::map<std::string, std::string>& options_):
            graphName( graphName_ ),
            sourceNode( sourceNode_ ),
            maxSolutionRadius( maxSolutionRadius_ ),
            weightsOnEdges( weightsOnEdges_ ),
            restrictions( restrictions_ ),
            numLevels( numLevels_ ),
            generateImage( generateImage_ ),
            levelsTable( levelsTable_ ),
            styleOptions( styleOptions_ ),
            solveOptions( solveOptions_ ),
            contourOptions( contourOptions_ ),
            options( options_ )
        {
        }

        /**
         * Name of the graph on which the isochrone is to be computed.
         */
        std::string graphName;

        /**
         * Starting vertex on the underlying graph from/to which the isochrones
         * are created.
         */
        std::string sourceNode;

        /**
         * Extent of the search radius around @ref sourceNode. Set to '-1.0'
         * for unrestricted search radius. The default value is -1.0.
         */
        double maxSolutionRadius;

        /**
         * Additional weights to apply to the edges of an existing graph.
         * Weights must be specified using <a
         * href="../../../graph_solver/network_graph_solver/#identifiers"
         * target="_top">identifiers</a>; identifiers are grouped as <a
         * href="../../../graph_solver/network_graph_solver/#id-combos"
         * target="_top">combinations</a>. Identifiers can be used with
         * existing column names, e.g., 'table.column AS WEIGHTS_EDGE_ID', or
         * expressions, e.g., 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED'. Any
         * provided weights will be added (in the case of
         * 'WEIGHTS_VALUESPECIFIED') to or multiplied with (in the case of
         * 'WEIGHTS_FACTORSPECIFIED') the existing weight(s). The default value
         * is an empty vector.
         */
        std::vector<std::string> weightsOnEdges;

        /**
         * Additional restrictions to apply to the nodes/edges of an existing
         * graph. Restrictions must be specified using <a
         * href="../../../graph_solver/network_graph_solver/#identifiers"
         * target="_top">identifiers</a>; identifiers are grouped as <a
         * href="../../../graph_solver/network_graph_solver/#id-combos"
         * target="_top">combinations</a>. Identifiers can be used with
         * existing column names, e.g., 'table.column AS RESTRICTIONS_EDGE_ID',
         * or expressions, e.g., 'column/2 AS RESTRICTIONS_VALUECOMPARED'. If
         * @ref gpudb::visualize_isochrone_remove_previous_restrictions
         * "remove_previous_restrictions" is set to @ref
         * gpudb::visualize_isochrone_true "true", any provided restrictions
         * will replace the existing restrictions. If @ref
         * gpudb::visualize_isochrone_remove_previous_restrictions
         * "remove_previous_restrictions" is set to @ref
         * gpudb::visualize_isochrone_false "false", any provided restrictions
         * will be added (in the case of 'RESTRICTIONS_VALUECOMPARED') to or
         * replaced (in the case of 'RESTRICTIONS_ONOFFCOMPARED'). The default
         * value is an empty vector.
         */
        std::vector<std::string> restrictions;

        /**
         * Number of equally-separated isochrones to compute. The default value
         * is 1.
         */
        int32_t numLevels;

        /**
         * If set to @ref gpudb::visualize_isochrone_true "true", generates a
         * PNG image of the isochrones in the response.
         * Supported values:
         * <ul>
         *     <li>true
         *     <li>false
         * </ul>
         * The default value is true.
         */
        bool generateImage;

        /**
         * Name of the table to output the isochrones to, in [ schema_name.\
         * ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a> and meeting <a
         * href="../../../concepts/tables/#table-naming-criteria"
         * target="_top">table naming criteria</a>.  The table will contain
         * levels and their corresponding WKT geometry. If no value is
         * provided, the table is not generated. The default value is ''.
         */
        std::string levelsTable;

        /**
         * Various style related options of the isochrone image.
         * <ul>
         *     <li>@ref gpudb::visualize_isochrone_line_size
         *         "visualize_isochrone_line_size": The width of the contour
         *         lines in pixels. The default value is '3'. The minimum
         *         allowed value is '0'. The maximum allowed value is '20'.
         *     <li>@ref gpudb::visualize_isochrone_color
         *         "visualize_isochrone_color": Color of generated isolines.
         *         All color values must be in the format RRGGBB or AARRGGBB
         *         (to specify the alpha value). If alpha is specified and
         *         flooded contours are enabled, it will be used for as the
         *         transparency of the latter. The default value is 'FF696969'.
         *     <li>@ref gpudb::visualize_isochrone_bg_color
         *         "visualize_isochrone_bg_color": When @ref generateImage is
         *         set to @ref gpudb::visualize_isochrone_true "true",
         *         background color of the generated image. All color values
         *         must be in the format RRGGBB or AARRGGBB (to specify the
         *         alpha value). The default value is '00000000'.
         *     <li>@ref gpudb::visualize_isochrone_text_color
         *         "visualize_isochrone_text_color": When @ref
         *         gpudb::visualize_isochrone_add_labels "add_labels" is set to
         *         @ref gpudb::visualize_isochrone_true "true", color for the
         *         labels. All color values must be in the format RRGGBB or
         *         AARRGGBB (to specify the alpha value). The default value is
         *         'FF000000'.
         *     <li>@ref gpudb::visualize_isochrone_colormap
         *         "visualize_isochrone_colormap": Colormap for contours or
         *         fill-in regions when applicable. All color values must be in
         *         the format RRGGBB or AARRGGBB (to specify the alpha value).
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::visualize_isochrone_jet
         *                 "visualize_isochrone_jet"
         *             <li>@ref gpudb::visualize_isochrone_accent
         *                 "visualize_isochrone_accent"
         *             <li>@ref gpudb::visualize_isochrone_afmhot
         *                 "visualize_isochrone_afmhot"
         *             <li>@ref gpudb::visualize_isochrone_autumn
         *                 "visualize_isochrone_autumn"
         *             <li>@ref gpudb::visualize_isochrone_binary
         *                 "visualize_isochrone_binary"
         *             <li>@ref gpudb::visualize_isochrone_blues
         *                 "visualize_isochrone_blues"
         *             <li>@ref gpudb::visualize_isochrone_bone
         *                 "visualize_isochrone_bone"
         *             <li>@ref gpudb::visualize_isochrone_brbg
         *                 "visualize_isochrone_brbg"
         *             <li>@ref gpudb::visualize_isochrone_brg
         *                 "visualize_isochrone_brg"
         *             <li>@ref gpudb::visualize_isochrone_bugn
         *                 "visualize_isochrone_bugn"
         *             <li>@ref gpudb::visualize_isochrone_bupu
         *                 "visualize_isochrone_bupu"
         *             <li>@ref gpudb::visualize_isochrone_bwr
         *                 "visualize_isochrone_bwr"
         *             <li>@ref gpudb::visualize_isochrone_cmrmap
         *                 "visualize_isochrone_cmrmap"
         *             <li>@ref gpudb::visualize_isochrone_cool
         *                 "visualize_isochrone_cool"
         *             <li>@ref gpudb::visualize_isochrone_coolwarm
         *                 "visualize_isochrone_coolwarm"
         *             <li>@ref gpudb::visualize_isochrone_copper
         *                 "visualize_isochrone_copper"
         *             <li>@ref gpudb::visualize_isochrone_cubehelix
         *                 "visualize_isochrone_cubehelix"
         *             <li>@ref gpudb::visualize_isochrone_dark2
         *                 "visualize_isochrone_dark2"
         *             <li>@ref gpudb::visualize_isochrone_flag
         *                 "visualize_isochrone_flag"
         *             <li>@ref gpudb::visualize_isochrone_gist_earth
         *                 "visualize_isochrone_gist_earth"
         *             <li>@ref gpudb::visualize_isochrone_gist_gray
         *                 "visualize_isochrone_gist_gray"
         *             <li>@ref gpudb::visualize_isochrone_gist_heat
         *                 "visualize_isochrone_gist_heat"
         *             <li>@ref gpudb::visualize_isochrone_gist_ncar
         *                 "visualize_isochrone_gist_ncar"
         *             <li>@ref gpudb::visualize_isochrone_gist_rainbow
         *                 "visualize_isochrone_gist_rainbow"
         *             <li>@ref gpudb::visualize_isochrone_gist_stern
         *                 "visualize_isochrone_gist_stern"
         *             <li>@ref gpudb::visualize_isochrone_gist_yarg
         *                 "visualize_isochrone_gist_yarg"
         *             <li>@ref gpudb::visualize_isochrone_gnbu
         *                 "visualize_isochrone_gnbu"
         *             <li>@ref gpudb::visualize_isochrone_gnuplot2
         *                 "visualize_isochrone_gnuplot2"
         *             <li>@ref gpudb::visualize_isochrone_gnuplot
         *                 "visualize_isochrone_gnuplot"
         *             <li>@ref gpudb::visualize_isochrone_gray
         *                 "visualize_isochrone_gray"
         *             <li>@ref gpudb::visualize_isochrone_greens
         *                 "visualize_isochrone_greens"
         *             <li>@ref gpudb::visualize_isochrone_greys
         *                 "visualize_isochrone_greys"
         *             <li>@ref gpudb::visualize_isochrone_hot
         *                 "visualize_isochrone_hot"
         *             <li>@ref gpudb::visualize_isochrone_hsv
         *                 "visualize_isochrone_hsv"
         *             <li>@ref gpudb::visualize_isochrone_inferno
         *                 "visualize_isochrone_inferno"
         *             <li>@ref gpudb::visualize_isochrone_magma
         *                 "visualize_isochrone_magma"
         *             <li>@ref gpudb::visualize_isochrone_nipy_spectral
         *                 "visualize_isochrone_nipy_spectral"
         *             <li>@ref gpudb::visualize_isochrone_ocean
         *                 "visualize_isochrone_ocean"
         *             <li>@ref gpudb::visualize_isochrone_oranges
         *                 "visualize_isochrone_oranges"
         *             <li>@ref gpudb::visualize_isochrone_orrd
         *                 "visualize_isochrone_orrd"
         *             <li>@ref gpudb::visualize_isochrone_paired
         *                 "visualize_isochrone_paired"
         *             <li>@ref gpudb::visualize_isochrone_pastel1
         *                 "visualize_isochrone_pastel1"
         *             <li>@ref gpudb::visualize_isochrone_pastel2
         *                 "visualize_isochrone_pastel2"
         *             <li>@ref gpudb::visualize_isochrone_pink
         *                 "visualize_isochrone_pink"
         *             <li>@ref gpudb::visualize_isochrone_piyg
         *                 "visualize_isochrone_piyg"
         *             <li>@ref gpudb::visualize_isochrone_plasma
         *                 "visualize_isochrone_plasma"
         *             <li>@ref gpudb::visualize_isochrone_prgn
         *                 "visualize_isochrone_prgn"
         *             <li>@ref gpudb::visualize_isochrone_prism
         *                 "visualize_isochrone_prism"
         *             <li>@ref gpudb::visualize_isochrone_pubu
         *                 "visualize_isochrone_pubu"
         *             <li>@ref gpudb::visualize_isochrone_pubugn
         *                 "visualize_isochrone_pubugn"
         *             <li>@ref gpudb::visualize_isochrone_puor
         *                 "visualize_isochrone_puor"
         *             <li>@ref gpudb::visualize_isochrone_purd
         *                 "visualize_isochrone_purd"
         *             <li>@ref gpudb::visualize_isochrone_purples
         *                 "visualize_isochrone_purples"
         *             <li>@ref gpudb::visualize_isochrone_rainbow
         *                 "visualize_isochrone_rainbow"
         *             <li>@ref gpudb::visualize_isochrone_rdbu
         *                 "visualize_isochrone_rdbu"
         *             <li>@ref gpudb::visualize_isochrone_rdgy
         *                 "visualize_isochrone_rdgy"
         *             <li>@ref gpudb::visualize_isochrone_rdpu
         *                 "visualize_isochrone_rdpu"
         *             <li>@ref gpudb::visualize_isochrone_rdylbu
         *                 "visualize_isochrone_rdylbu"
         *             <li>@ref gpudb::visualize_isochrone_rdylgn
         *                 "visualize_isochrone_rdylgn"
         *             <li>@ref gpudb::visualize_isochrone_reds
         *                 "visualize_isochrone_reds"
         *             <li>@ref gpudb::visualize_isochrone_seismic
         *                 "visualize_isochrone_seismic"
         *             <li>@ref gpudb::visualize_isochrone_set1
         *                 "visualize_isochrone_set1"
         *             <li>@ref gpudb::visualize_isochrone_set2
         *                 "visualize_isochrone_set2"
         *             <li>@ref gpudb::visualize_isochrone_set3
         *                 "visualize_isochrone_set3"
         *             <li>@ref gpudb::visualize_isochrone_spectral
         *                 "visualize_isochrone_spectral"
         *             <li>@ref gpudb::visualize_isochrone_spring
         *                 "visualize_isochrone_spring"
         *             <li>@ref gpudb::visualize_isochrone_summer
         *                 "visualize_isochrone_summer"
         *             <li>@ref gpudb::visualize_isochrone_terrain
         *                 "visualize_isochrone_terrain"
         *             <li>@ref gpudb::visualize_isochrone_viridis
         *                 "visualize_isochrone_viridis"
         *             <li>@ref gpudb::visualize_isochrone_winter
         *                 "visualize_isochrone_winter"
         *             <li>@ref gpudb::visualize_isochrone_wistia
         *                 "visualize_isochrone_wistia"
         *             <li>@ref gpudb::visualize_isochrone_ylgn
         *                 "visualize_isochrone_ylgn"
         *             <li>@ref gpudb::visualize_isochrone_ylgnbu
         *                 "visualize_isochrone_ylgnbu"
         *             <li>@ref gpudb::visualize_isochrone_ylorbr
         *                 "visualize_isochrone_ylorbr"
         *             <li>@ref gpudb::visualize_isochrone_ylorrd
         *                 "visualize_isochrone_ylorrd"
         *         </ul>
         *         The default value is @ref gpudb::visualize_isochrone_jet
         *         "visualize_isochrone_jet".
         * </ul>
         */
        std::map<std::string, std::string> styleOptions;

        /**
         * Solver specific parameters.
         * <ul>
         *     <li>@ref gpudb::visualize_isochrone_remove_previous_restrictions
         *         "visualize_isochrone_remove_previous_restrictions": Ignore
         *         the restrictions applied to the graph during the creation
         *         stage and only use the restrictions specified in this
         *         request if set to @ref gpudb::visualize_isochrone_true
         *         "true".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::visualize_isochrone_true
         *                 "visualize_isochrone_true"
         *             <li>@ref gpudb::visualize_isochrone_false
         *                 "visualize_isochrone_false"
         *         </ul>
         *         The default value is @ref gpudb::visualize_isochrone_false
         *         "visualize_isochrone_false".
         *     <li>@ref gpudb::visualize_isochrone_restriction_threshold_value
         *         "visualize_isochrone_restriction_threshold_value":
         *         Value-based restriction comparison. Any node or edge with a
         *         'RESTRICTIONS_VALUECOMPARED' value greater than the @ref
         *         gpudb::visualize_isochrone_restriction_threshold_value
         *         "restriction_threshold_value" will not be included in the
         *         solution.
         *     <li>@ref gpudb::visualize_isochrone_uniform_weights
         *         "visualize_isochrone_uniform_weights": When specified,
         *         assigns the given value to all the edges in the graph. Note
         *         that weights provided in @ref weightsOnEdges will override
         *         this value.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> solveOptions;

        /**
         * Solver specific parameters.
         * <ul>
         *     <li>@ref gpudb::visualize_isochrone_projection
         *         "visualize_isochrone_projection": Spatial Reference System
         *         (i.e. EPSG Code).
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::visualize_isochrone_3857
         *                 "visualize_isochrone_3857"
         *             <li>@ref gpudb::visualize_isochrone_102100
         *                 "visualize_isochrone_102100"
         *             <li>@ref gpudb::visualize_isochrone_900913
         *                 "visualize_isochrone_900913"
         *             <li>@ref gpudb::visualize_isochrone_EPSG_4326
         *                 "visualize_isochrone_EPSG_4326"
         *             <li>@ref gpudb::visualize_isochrone_PLATE_CARREE
         *                 "visualize_isochrone_PLATE_CARREE"
         *             <li>@ref gpudb::visualize_isochrone_EPSG_900913
         *                 "visualize_isochrone_EPSG_900913"
         *             <li>@ref gpudb::visualize_isochrone_EPSG_102100
         *                 "visualize_isochrone_EPSG_102100"
         *             <li>@ref gpudb::visualize_isochrone_EPSG_3857
         *                 "visualize_isochrone_EPSG_3857"
         *             <li>@ref gpudb::visualize_isochrone_WEB_MERCATOR
         *                 "visualize_isochrone_WEB_MERCATOR"
         *         </ul>
         *         The default value is @ref
         *         gpudb::visualize_isochrone_PLATE_CARREE
         *         "visualize_isochrone_PLATE_CARREE".
         *     <li>@ref gpudb::visualize_isochrone_width
         *         "visualize_isochrone_width": When @ref generateImage is set
         *         to @ref gpudb::visualize_isochrone_true "true", width of the
         *         generated image. The default value is '512'.
         *     <li>@ref gpudb::visualize_isochrone_height
         *         "visualize_isochrone_height": When @ref generateImage is set
         *         to @ref gpudb::visualize_isochrone_true "true", height of
         *         the generated image. If the default value is used, the @ref
         *         gpudb::visualize_isochrone_height "height" is set to the
         *         value resulting from multiplying the aspect ratio by the
         *         @ref gpudb::visualize_isochrone_width "width". The default
         *         value is '-1'.
         *     <li>@ref gpudb::visualize_isochrone_search_radius
         *         "visualize_isochrone_search_radius": When interpolating the
         *         graph solution to generate the isochrone, neighborhood of
         *         influence of sample data (in percent of the image/grid). The
         *         default value is '20'.
         *     <li>@ref gpudb::visualize_isochrone_grid_size
         *         "visualize_isochrone_grid_size": When interpolating the
         *         graph solution to generate the isochrone, number of
         *         subdivisions along the x axis when building the grid (the y
         *         is computed using the aspect ratio of the output image). The
         *         default value is '100'.
         *     <li>@ref gpudb::visualize_isochrone_color_isolines
         *         "visualize_isochrone_color_isolines": Color each isoline
         *         according to the colormap; otherwise, use the foreground
         *         color.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::visualize_isochrone_true
         *                 "visualize_isochrone_true"
         *             <li>@ref gpudb::visualize_isochrone_false
         *                 "visualize_isochrone_false"
         *         </ul>
         *         The default value is @ref gpudb::visualize_isochrone_true
         *         "visualize_isochrone_true".
         *     <li>@ref gpudb::visualize_isochrone_add_labels
         *         "visualize_isochrone_add_labels": If set to @ref
         *         gpudb::visualize_isochrone_true "true", add labels to the
         *         isolines.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::visualize_isochrone_true
         *                 "visualize_isochrone_true"
         *             <li>@ref gpudb::visualize_isochrone_false
         *                 "visualize_isochrone_false"
         *         </ul>
         *         The default value is @ref gpudb::visualize_isochrone_false
         *         "visualize_isochrone_false".
         *     <li>@ref gpudb::visualize_isochrone_labels_font_size
         *         "visualize_isochrone_labels_font_size": When @ref
         *         gpudb::visualize_isochrone_add_labels "add_labels" is set to
         *         @ref gpudb::visualize_isochrone_true "true", size of the
         *         font (in pixels) to use for labels. The default value is
         *         '12'.
         *     <li>@ref gpudb::visualize_isochrone_labels_font_family
         *         "visualize_isochrone_labels_font_family": When @ref
         *         gpudb::visualize_isochrone_add_labels "add_labels" is set to
         *         @ref gpudb::visualize_isochrone_true "true", font name to be
         *         used when adding labels. The default value is 'arial'.
         *     <li>@ref gpudb::visualize_isochrone_labels_search_window
         *         "visualize_isochrone_labels_search_window": When @ref
         *         gpudb::visualize_isochrone_add_labels "add_labels" is set to
         *         @ref gpudb::visualize_isochrone_true "true", a search window
         *         is used to rate the local quality of each isoline. Smooth,
         *         continuous, long stretches with relatively flat angles are
         *         favored. The provided value is multiplied by the @ref
         *         gpudb::visualize_isochrone_labels_font_size
         *         "labels_font_size" to calculate the final window size. The
         *         default value is '4'.
         *     <li>@ref gpudb::visualize_isochrone_labels_intralevel_separation
         *         "visualize_isochrone_labels_intralevel_separation": When
         *         @ref gpudb::visualize_isochrone_add_labels "add_labels" is
         *         set to @ref gpudb::visualize_isochrone_true "true", this
         *         value determines the  distance (in multiples of the @ref
         *         gpudb::visualize_isochrone_labels_font_size
         *         "labels_font_size") to use when separating labels of
         *         different values. The default value is '4'.
         *     <li>@ref gpudb::visualize_isochrone_labels_interlevel_separation
         *         "visualize_isochrone_labels_interlevel_separation": When
         *         @ref gpudb::visualize_isochrone_add_labels "add_labels" is
         *         set to @ref gpudb::visualize_isochrone_true "true", this
         *         value determines the distance (in percent of the total
         *         window size) to use when separating labels of the same
         *         value. The default value is '20'.
         *     <li>@ref gpudb::visualize_isochrone_labels_max_angle
         *         "visualize_isochrone_labels_max_angle": When @ref
         *         gpudb::visualize_isochrone_add_labels "add_labels" is set to
         *         @ref gpudb::visualize_isochrone_true "true", maximum angle
         *         (in degrees) from the vertical to use when adding labels.
         *         The default value is '60'.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> contourOptions;

        /**
         * Additional parameters.
         * <ul>
         *     <li>@ref gpudb::visualize_isochrone_solve_table
         *         "visualize_isochrone_solve_table": Name of the table to host
         *         intermediate solve results, in [schema_name.]table_name
         *         format, using standard <a
         *         href="../../../concepts/tables/#table-name-resolution"
         *         target="_top">name resolution rules</a> and meeting <a
         *         href="../../../concepts/tables/#table-naming-criteria"
         *         target="_top">table naming criteria</a>.  This table will
         *         contain the position and cost for each vertex in the graph.
         *         If the default value is used, a temporary table is created
         *         and deleted once the solution is calculated. The default
         *         value is ''.
         *     <li>@ref gpudb::visualize_isochrone_is_replicated
         *         "visualize_isochrone_is_replicated": If set to @ref
         *         gpudb::visualize_isochrone_true "true", replicate the @ref
         *         gpudb::visualize_isochrone_solve_table "solve_table".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::visualize_isochrone_true
         *                 "visualize_isochrone_true"
         *             <li>@ref gpudb::visualize_isochrone_false
         *                 "visualize_isochrone_false"
         *         </ul>
         *         The default value is @ref gpudb::visualize_isochrone_true
         *         "visualize_isochrone_true".
         *     <li>@ref gpudb::visualize_isochrone_data_min_x
         *         "visualize_isochrone_data_min_x": Lower bound for the x
         *         values. If not provided, it will be computed from the bounds
         *         of the input data.
         *     <li>@ref gpudb::visualize_isochrone_data_max_x
         *         "visualize_isochrone_data_max_x": Upper bound for the x
         *         values. If not provided, it will be computed from the bounds
         *         of the input data.
         *     <li>@ref gpudb::visualize_isochrone_data_min_y
         *         "visualize_isochrone_data_min_y": Lower bound for the y
         *         values. If not provided, it will be computed from the bounds
         *         of the input data.
         *     <li>@ref gpudb::visualize_isochrone_data_max_y
         *         "visualize_isochrone_data_max_y": Upper bound for the y
         *         values. If not provided, it will be computed from the bounds
         *         of the input data.
         *     <li>@ref gpudb::visualize_isochrone_concavity_level
         *         "visualize_isochrone_concavity_level": Factor to qualify the
         *         concavity of the isochrone curves. The lower the value, the
         *         more convex (with '0' being completely convex and '1' being
         *         the most concave). The default value is '0.5'. The minimum
         *         allowed value is '0'. The maximum allowed value is '1'.
         *     <li>@ref gpudb::visualize_isochrone_use_priority_queue_solvers
         *         "visualize_isochrone_use_priority_queue_solvers": sets the
         *         solver methods explicitly if true.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::visualize_isochrone_true
         *                 "visualize_isochrone_true": uses the solvers
         *                 scheduled for 'shortest_path' and
         *                 'inverse_shortest_path' based on solve_direction
         *             <li>@ref gpudb::visualize_isochrone_false
         *                 "visualize_isochrone_false": uses the solvers
         *                 'priority_queue' and 'inverse_priority_queue' based
         *                 on solve_direction
         *         </ul>
         *         The default value is @ref gpudb::visualize_isochrone_false
         *         "visualize_isochrone_false".
         *     <li>@ref gpudb::visualize_isochrone_solve_direction
         *         "visualize_isochrone_solve_direction": Specify whether we
         *         are going to the source node, or starting from it.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::visualize_isochrone_from_source
         *                 "visualize_isochrone_from_source": Shortest path to
         *                 get to the source (inverse Dijkstra)
         *             <li>@ref gpudb::visualize_isochrone_to_source
         *                 "visualize_isochrone_to_source": Shortest path to
         *                 source (Dijkstra)
         *         </ul>
         *         The default value is @ref
         *         gpudb::visualize_isochrone_from_source
         *         "visualize_isochrone_from_source".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeIsochroneRequest>
    {
        static void encode(Encoder& e, const gpudb::VisualizeIsochroneRequest& v)
        {
            ::avro::encode(e, v.graphName);
            ::avro::encode(e, v.sourceNode);
            ::avro::encode(e, v.maxSolutionRadius);
            ::avro::encode(e, v.weightsOnEdges);
            ::avro::encode(e, v.restrictions);
            ::avro::encode(e, v.numLevels);
            ::avro::encode(e, v.generateImage);
            ::avro::encode(e, v.levelsTable);
            ::avro::encode(e, v.styleOptions);
            ::avro::encode(e, v.solveOptions);
            ::avro::encode(e, v.contourOptions);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::VisualizeIsochroneRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.graphName);
                            break;

                        case 1:
                            ::avro::decode(d, v.sourceNode);
                            break;

                        case 2:
                            ::avro::decode(d, v.maxSolutionRadius);
                            break;

                        case 3:
                            ::avro::decode(d, v.weightsOnEdges);
                            break;

                        case 4:
                            ::avro::decode(d, v.restrictions);
                            break;

                        case 5:
                            ::avro::decode(d, v.numLevels);
                            break;

                        case 6:
                            ::avro::decode(d, v.generateImage);
                            break;

                        case 7:
                            ::avro::decode(d, v.levelsTable);
                            break;

                        case 8:
                            ::avro::decode(d, v.styleOptions);
                            break;

                        case 9:
                            ::avro::decode(d, v.solveOptions);
                            break;

                        case 10:
                            ::avro::decode(d, v.contourOptions);
                            break;

                        case 11:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.graphName);
                ::avro::decode(d, v.sourceNode);
                ::avro::decode(d, v.maxSolutionRadius);
                ::avro::decode(d, v.weightsOnEdges);
                ::avro::decode(d, v.restrictions);
                ::avro::decode(d, v.numLevels);
                ::avro::decode(d, v.generateImage);
                ::avro::decode(d, v.levelsTable);
                ::avro::decode(d, v.styleOptions);
                ::avro::decode(d, v.solveOptions);
                ::avro::decode(d, v.contourOptions);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::visualizeIsochrone(const VisualizeIsochroneRequest&) const
     * "GPUdb::visualizeIsochrone".
     */
    struct VisualizeIsochroneResponse
    {
        /**
         * Constructs a VisualizeIsochroneResponse object with default
         * parameters.
         */
        VisualizeIsochroneResponse() :
            width(int32_t()),
            height(int32_t()),
            bgColor(int64_t()),
            imageData(std::vector<uint8_t>()),
            info(std::map<std::string, std::string>()),
            solveInfo(std::map<std::string, std::string>()),
            contourInfo(std::map<std::string, std::string>())
        {
        }

        /**
         * Width of the image as provided in @ref
         * gpudb::visualize_isochrone_width "width".
         */
        int32_t width;

        /**
         * Height of the image as provided in @ref
         * gpudb::visualize_isochrone_height "height".
         */
        int32_t height;

        /**
         * Background color of the image as provided in @ref
         * gpudb::visualize_isochrone_bg_color "bg_color".
         */
        int64_t bgColor;

        /**
         * Generated contour image data.
         */
        std::vector<uint8_t> imageData;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> solveInfo;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> contourInfo;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeIsochroneResponse>
    {
        static void encode(Encoder& e, const gpudb::VisualizeIsochroneResponse& v)
        {
            ::avro::encode(e, v.width);
            ::avro::encode(e, v.height);
            ::avro::encode(e, v.bgColor);
            ::avro::encode(e, v.imageData);
            ::avro::encode(e, v.info);
            ::avro::encode(e, v.solveInfo);
            ::avro::encode(e, v.contourInfo);
        }

        static void decode(Decoder& d, gpudb::VisualizeIsochroneResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.width);
                            break;

                        case 1:
                            ::avro::decode(d, v.height);
                            break;

                        case 2:
                            ::avro::decode(d, v.bgColor);
                            break;

                        case 3:
                            ::avro::decode(d, v.imageData);
                            break;

                        case 4:
                            ::avro::decode(d, v.info);
                            break;

                        case 5:
                            ::avro::decode(d, v.solveInfo);
                            break;

                        case 6:
                            ::avro::decode(d, v.contourInfo);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.width);
                ::avro::decode(d, v.height);
                ::avro::decode(d, v.bgColor);
                ::avro::decode(d, v.imageData);
                ::avro::decode(d, v.info);
                ::avro::decode(d, v.solveInfo);
                ::avro::decode(d, v.contourInfo);
            }
        }
    };
} // end namespace avro

#endif // __VISUALIZE_ISOCHRONE_H__
