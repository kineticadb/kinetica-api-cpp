/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

#include "EndpointKeywords.h"

namespace gpudb
{
    // Keywords for /admin/add/host request
    const std::string admin_add_host_accepts_failover       ( "accepts_failover"        );
    const std::string admin_add_host_dry_run                ( "dry_run"                 );
    const std::string admin_add_host_false                  ( "false"                   );
    const std::string admin_add_host_gpus                   ( "gpus"                    );
    const std::string admin_add_host_host_manager_public_url( "host_manager_public_url" );
    const std::string admin_add_host_public_address         ( "public_address"          );
    const std::string admin_add_host_ram_limit              ( "ram_limit"               );
    const std::string admin_add_host_true                   ( "true"                    );

    // Keywords for /admin/add/ranks request
    const std::string admin_add_ranks_dry_run( "dry_run" );
    const std::string admin_add_ranks_false  ( "false"   );
    const std::string admin_add_ranks_true   ( "true"    );

    // Keywords for /admin/alter/host request
    const std::string admin_alter_host_accepts_failover( "accepts_failover" );
    const std::string admin_alter_host_false           ( "false"            );
    const std::string admin_alter_host_true            ( "true"             );

    // Keywords for /admin/alter/jobs request
    const std::string admin_alter_jobs_cancel ( "cancel"  );
    const std::string admin_alter_jobs_job_tag( "job_tag" );

    // Keywords for /admin/offline request
    const std::string admin_offline_false        ( "false"         );
    const std::string admin_offline_flush_to_disk( "flush_to_disk" );
    const std::string admin_offline_true         ( "true"          );

    // Keywords for /admin/rebalance request
    const std::string admin_rebalance_aggressiveness                 ( "aggressiveness"                  );
    const std::string admin_rebalance_compact_after_rebalance        ( "compact_after_rebalance"         );
    const std::string admin_rebalance_compact_only                   ( "compact_only"                    );
    const std::string admin_rebalance_false                          ( "false"                           );
    const std::string admin_rebalance_rebalance_sharded_data         ( "rebalance_sharded_data"          );
    const std::string admin_rebalance_rebalance_unsharded_data       ( "rebalance_unsharded_data"        );
    const std::string admin_rebalance_repair_incorrectly_sharded_data( "repair_incorrectly_sharded_data" );
    const std::string admin_rebalance_table_excludes                 ( "table_excludes"                  );
    const std::string admin_rebalance_table_includes                 ( "table_includes"                  );
    const std::string admin_rebalance_true                           ( "true"                            );

    // Keywords for /admin/remove/host request
    const std::string admin_remove_host_dry_run( "dry_run" );
    const std::string admin_remove_host_false  ( "false"   );
    const std::string admin_remove_host_true   ( "true"    );

    // Keywords for /admin/remove/ranks request
    const std::string admin_remove_ranks_aggressiveness          ( "aggressiveness"           );
    const std::string admin_remove_ranks_false                   ( "false"                    );
    const std::string admin_remove_ranks_rebalance_sharded_data  ( "rebalance_sharded_data"   );
    const std::string admin_remove_ranks_rebalance_unsharded_data( "rebalance_unsharded_data" );
    const std::string admin_remove_ranks_true                    ( "true"                     );

    // Keywords for /admin/repair/table request
    const std::string admin_repair_table_delete_chunks ( "delete_chunks"  );
    const std::string admin_repair_table_false         ( "false"          );
    const std::string admin_repair_table_repair_policy ( "repair_policy"  );
    const std::string admin_repair_table_replay_wal    ( "replay_wal"     );
    const std::string admin_repair_table_shrink_columns( "shrink_columns" );
    const std::string admin_repair_table_true          ( "true"           );
    const std::string admin_repair_table_verify_all    ( "verify_all"     );

    // Keywords for /admin/show/cluster/operations response
    const std::string admin_show_cluster_operations_COMPLETED_OK( "COMPLETED_OK" );
    const std::string admin_show_cluster_operations_ERROR       ( "ERROR"        );
    const std::string admin_show_cluster_operations_INTERRUPTED ( "INTERRUPTED"  );
    const std::string admin_show_cluster_operations_IN_PROGRESS ( "IN_PROGRESS"  );
    const std::string admin_show_cluster_operations_NOT_STARTED ( "NOT_STARTED"  );
    const std::string admin_show_cluster_operations_OK          ( "OK"           );
    const std::string admin_show_cluster_operations_false       ( "false"        );
    const std::string admin_show_cluster_operations_true        ( "true"         );

    // Keywords for /admin/show/jobs request
    const std::string admin_show_jobs_false           ( "false"            );
    const std::string admin_show_jobs_show_async_jobs ( "show_async_jobs"  );
    const std::string admin_show_jobs_show_worker_info( "show_worker_info" );
    const std::string admin_show_jobs_true            ( "true"             );

    // Keywords for /admin/show/jobs response
    const std::string admin_show_jobs_job_tag    ( "job_tag"     );
    const std::string admin_show_jobs_worker_info( "worker_info" );

    // Keywords for /admin/switchover request
    const std::string admin_switchover_dry_run( "dry_run" );
    const std::string admin_switchover_false  ( "false"   );
    const std::string admin_switchover_true   ( "true"    );

    // Keywords for /admin/verifydb request
    const std::string admin_verify_db_concurrent_safe            ( "concurrent_safe"             );
    const std::string admin_verify_db_delete_orphaned_tables     ( "delete_orphaned_tables"      );
    const std::string admin_verify_db_false                      ( "false"                       );
    const std::string admin_verify_db_rebuild_on_error           ( "rebuild_on_error"            );
    const std::string admin_verify_db_true                       ( "true"                        );
    const std::string admin_verify_db_verify_nulls               ( "verify_nulls"                );
    const std::string admin_verify_db_verify_orphaned_tables_only( "verify_orphaned_tables_only" );
    const std::string admin_verify_db_verify_persist             ( "verify_persist"              );
    const std::string admin_verify_db_verify_rank0               ( "verify_rank0"                );

    // Keywords for /aggregate/groupby request
    const std::string aggregate_group_by_ascending                    ( "ascending"                     );
    const std::string aggregate_group_by_binary                       ( "binary"                        );
    const std::string aggregate_group_by_chunk_column_max_memory      ( "chunk_column_max_memory"       );
    const std::string aggregate_group_by_chunk_max_memory             ( "chunk_max_memory"              );
    const std::string aggregate_group_by_chunk_size                   ( "chunk_size"                    );
    const std::string aggregate_group_by_chunked_expression_evaluation( "chunked_expression_evaluation" );
    const std::string aggregate_group_by_collection_name              ( "collection_name"               );
    const std::string aggregate_group_by_create_indexes               ( "create_indexes"                );
    const std::string aggregate_group_by_create_temp_table            ( "create_temp_table"             );
    const std::string aggregate_group_by_cube                         ( "cube"                          );
    const std::string aggregate_group_by_descending                   ( "descending"                    );
    const std::string aggregate_group_by_expression                   ( "expression"                    );
    const std::string aggregate_group_by_false                        ( "false"                         );
    const std::string aggregate_group_by_grouping_sets                ( "grouping_sets"                 );
    const std::string aggregate_group_by_having                       ( "having"                        );
    const std::string aggregate_group_by_json                         ( "json"                          );
    const std::string aggregate_group_by_key                          ( "key"                           );
    const std::string aggregate_group_by_order_by                     ( "order_by"                      );
    const std::string aggregate_group_by_pivot                        ( "pivot"                         );
    const std::string aggregate_group_by_pivot_values                 ( "pivot_values"                  );
    const std::string aggregate_group_by_result_table                 ( "result_table"                  );
    const std::string aggregate_group_by_result_table_force_replicated( "result_table_force_replicated" );
    const std::string aggregate_group_by_result_table_generate_pk     ( "result_table_generate_pk"      );
    const std::string aggregate_group_by_result_table_persist         ( "result_table_persist"          );
    const std::string aggregate_group_by_rollup                       ( "rollup"                        );
    const std::string aggregate_group_by_shard_key                    ( "shard_key"                     );
    const std::string aggregate_group_by_sort_by                      ( "sort_by"                       );
    const std::string aggregate_group_by_sort_order                   ( "sort_order"                    );
    const std::string aggregate_group_by_strategy_definition          ( "strategy_definition"           );
    const std::string aggregate_group_by_true                         ( "true"                          );
    const std::string aggregate_group_by_ttl                          ( "ttl"                           );
    const std::string aggregate_group_by_value                        ( "value"                         );
    const std::string aggregate_group_by_view_id                      ( "view_id"                       );

    // Keywords for /aggregate/groupby response
    const std::string aggregate_group_by_qualified_result_table_name( "qualified_result_table_name" );

    // Keywords for /aggregate/histogram request
    const std::string aggregate_histogram_value_column( "value_column" );

    // Keywords for /aggregate/kmeans request
    const std::string aggregate_k_means_create_temp_table   ( "create_temp_table"    );
    const std::string aggregate_k_means_false               ( "false"                );
    const std::string aggregate_k_means_max_iters           ( "max_iters"            );
    const std::string aggregate_k_means_num_tries           ( "num_tries"            );
    const std::string aggregate_k_means_result_table        ( "result_table"         );
    const std::string aggregate_k_means_result_table_persist( "result_table_persist" );
    const std::string aggregate_k_means_true                ( "true"                 );
    const std::string aggregate_k_means_ttl                 ( "ttl"                  );
    const std::string aggregate_k_means_whiten              ( "whiten"               );

    // Keywords for /aggregate/kmeans response
    const std::string aggregate_k_means_qualified_result_table_name( "qualified_result_table_name" );

    // Keywords for /aggregate/statistics request
    const std::string aggregate_statistics_additional_column_names( "additional_column_names" );
    const std::string aggregate_statistics_cardinality            ( "cardinality"             );
    const std::string aggregate_statistics_count                  ( "count"                   );
    const std::string aggregate_statistics_estimated_cardinality  ( "estimated_cardinality"   );
    const std::string aggregate_statistics_kurtosis               ( "kurtosis"                );
    const std::string aggregate_statistics_max                    ( "max"                     );
    const std::string aggregate_statistics_mean                   ( "mean"                    );
    const std::string aggregate_statistics_min                    ( "min"                     );
    const std::string aggregate_statistics_percentile             ( "percentile"              );
    const std::string aggregate_statistics_percentile_rank        ( "percentile_rank"         );
    const std::string aggregate_statistics_skew                   ( "skew"                    );
    const std::string aggregate_statistics_stdv                   ( "stdv"                    );
    const std::string aggregate_statistics_sum                    ( "sum"                     );
    const std::string aggregate_statistics_variance               ( "variance"                );
    const std::string aggregate_statistics_weight_column_name     ( "weight_column_name"      );
    const std::string aggregate_statistics_weighted_average       ( "weighted_average"        );

    // Keywords for /aggregate/statistics/byrange request
    const std::string aggregate_statistics_by_range_additional_column_names( "additional_column_names" );
    const std::string aggregate_statistics_by_range_bin_values             ( "bin_values"              );
    const std::string aggregate_statistics_by_range_order_column_name      ( "order_column_name"       );
    const std::string aggregate_statistics_by_range_weight_column_name     ( "weight_column_name"      );

    // Keywords for /aggregate/unique request
    const std::string aggregate_unique_ascending                    ( "ascending"                     );
    const std::string aggregate_unique_binary                       ( "binary"                        );
    const std::string aggregate_unique_chunk_column_max_memory      ( "chunk_column_max_memory"       );
    const std::string aggregate_unique_chunk_max_memory             ( "chunk_max_memory"              );
    const std::string aggregate_unique_chunk_size                   ( "chunk_size"                    );
    const std::string aggregate_unique_collection_name              ( "collection_name"               );
    const std::string aggregate_unique_create_temp_table            ( "create_temp_table"             );
    const std::string aggregate_unique_descending                   ( "descending"                    );
    const std::string aggregate_unique_expression                   ( "expression"                    );
    const std::string aggregate_unique_false                        ( "false"                         );
    const std::string aggregate_unique_json                         ( "json"                          );
    const std::string aggregate_unique_order_by                     ( "order_by"                      );
    const std::string aggregate_unique_result_table                 ( "result_table"                  );
    const std::string aggregate_unique_result_table_force_replicated( "result_table_force_replicated" );
    const std::string aggregate_unique_result_table_generate_pk     ( "result_table_generate_pk"      );
    const std::string aggregate_unique_result_table_persist         ( "result_table_persist"          );
    const std::string aggregate_unique_sort_order                   ( "sort_order"                    );
    const std::string aggregate_unique_true                         ( "true"                          );
    const std::string aggregate_unique_ttl                          ( "ttl"                           );
    const std::string aggregate_unique_view_id                      ( "view_id"                       );

    // Keywords for /aggregate/unique response
    const std::string aggregate_unique_qualified_result_table_name( "qualified_result_table_name" );

    // Keywords for /aggregate/unpivot request
    const std::string aggregate_unpivot_binary                       ( "binary"                        );
    const std::string aggregate_unpivot_chunk_column_max_memory      ( "chunk_column_max_memory"       );
    const std::string aggregate_unpivot_chunk_max_memory             ( "chunk_max_memory"              );
    const std::string aggregate_unpivot_chunk_size                   ( "chunk_size"                    );
    const std::string aggregate_unpivot_collection_name              ( "collection_name"               );
    const std::string aggregate_unpivot_create_indexes               ( "create_indexes"                );
    const std::string aggregate_unpivot_create_temp_table            ( "create_temp_table"             );
    const std::string aggregate_unpivot_expression                   ( "expression"                    );
    const std::string aggregate_unpivot_false                        ( "false"                         );
    const std::string aggregate_unpivot_json                         ( "json"                          );
    const std::string aggregate_unpivot_limit                        ( "limit"                         );
    const std::string aggregate_unpivot_order_by                     ( "order_by"                      );
    const std::string aggregate_unpivot_result_table                 ( "result_table"                  );
    const std::string aggregate_unpivot_result_table_force_replicated( "result_table_force_replicated" );
    const std::string aggregate_unpivot_result_table_persist         ( "result_table_persist"          );
    const std::string aggregate_unpivot_true                         ( "true"                          );
    const std::string aggregate_unpivot_ttl                          ( "ttl"                           );
    const std::string aggregate_unpivot_view_id                      ( "view_id"                       );

    // Keywords for /aggregate/unpivot response
    const std::string aggregate_unpivot_qualified_result_table_name( "qualified_result_table_name" );

    // Keywords for /alter/credential request
    const std::string alter_credential_aws_access_key          ( "aws_access_key"           );
    const std::string alter_credential_aws_iam_role            ( "aws_iam_role"             );
    const std::string alter_credential_azure_ad                ( "azure_ad"                 );
    const std::string alter_credential_azure_oauth             ( "azure_oauth"              );
    const std::string alter_credential_azure_sas               ( "azure_sas"                );
    const std::string alter_credential_azure_storage_key       ( "azure_storage_key"        );
    const std::string alter_credential_docker                  ( "docker"                   );
    const std::string alter_credential_gcs_service_account_id  ( "gcs_service_account_id"   );
    const std::string alter_credential_gcs_service_account_keys( "gcs_service_account_keys" );
    const std::string alter_credential_hdfs                    ( "hdfs"                     );
    const std::string alter_credential_identity                ( "identity"                 );
    const std::string alter_credential_kafka                   ( "kafka"                    );
    const std::string alter_credential_schema_name             ( "schema_name"              );
    const std::string alter_credential_secret                  ( "secret"                   );
    const std::string alter_credential_type                    ( "type"                     );

    // Keywords for /alter/datasink request
    const std::string alter_datasink_anonymous                       ( "anonymous"                        );
    const std::string alter_datasink_azure_container_name            ( "azure_container_name"             );
    const std::string alter_datasink_azure_oauth_token               ( "azure_oauth_token"                );
    const std::string alter_datasink_azure_sas_token                 ( "azure_sas_token"                  );
    const std::string alter_datasink_azure_storage_account_name      ( "azure_storage_account_name"       );
    const std::string alter_datasink_azure_tenant_id                 ( "azure_tenant_id"                  );
    const std::string alter_datasink_connection_timeout              ( "connection_timeout"               );
    const std::string alter_datasink_credential                      ( "credential"                       );
    const std::string alter_datasink_destination                     ( "destination"                      );
    const std::string alter_datasink_false                           ( "false"                            );
    const std::string alter_datasink_flat                            ( "flat"                             );
    const std::string alter_datasink_gcs_bucket_name                 ( "gcs_bucket_name"                  );
    const std::string alter_datasink_gcs_project_id                  ( "gcs_project_id"                   );
    const std::string alter_datasink_gcs_service_account_keys        ( "gcs_service_account_keys"         );
    const std::string alter_datasink_hdfs_delegation_token           ( "hdfs_delegation_token"            );
    const std::string alter_datasink_hdfs_kerberos_keytab            ( "hdfs_kerberos_keytab"             );
    const std::string alter_datasink_hdfs_use_kerberos               ( "hdfs_use_kerberos"                );
    const std::string alter_datasink_jdbc_driver_class_name          ( "jdbc_driver_class_name"           );
    const std::string alter_datasink_jdbc_driver_jar_path            ( "jdbc_driver_jar_path"             );
    const std::string alter_datasink_json_format                     ( "json_format"                      );
    const std::string alter_datasink_kafka_topic_name                ( "kafka_topic_name"                 );
    const std::string alter_datasink_kafka_url                       ( "kafka_url"                        );
    const std::string alter_datasink_max_batch_size                  ( "max_batch_size"                   );
    const std::string alter_datasink_max_message_size                ( "max_message_size"                 );
    const std::string alter_datasink_nested                          ( "nested"                           );
    const std::string alter_datasink_s3_aws_role_arn                 ( "s3_aws_role_arn"                  );
    const std::string alter_datasink_s3_bucket_name                  ( "s3_bucket_name"                   );
    const std::string alter_datasink_s3_encryption_customer_algorithm( "s3_encryption_customer_algorithm" );
    const std::string alter_datasink_s3_encryption_customer_key      ( "s3_encryption_customer_key"       );
    const std::string alter_datasink_s3_encryption_type              ( "s3_encryption_type"               );
    const std::string alter_datasink_s3_kms_key_id                   ( "s3_kms_key_id"                    );
    const std::string alter_datasink_s3_region                       ( "s3_region"                        );
    const std::string alter_datasink_s3_use_virtual_addressing       ( "s3_use_virtual_addressing"        );
    const std::string alter_datasink_s3_verify_ssl                   ( "s3_verify_ssl"                    );
    const std::string alter_datasink_schema_name                     ( "schema_name"                      );
    const std::string alter_datasink_skip_validation                 ( "skip_validation"                  );
    const std::string alter_datasink_true                            ( "true"                             );
    const std::string alter_datasink_use_https                       ( "use_https"                        );
    const std::string alter_datasink_use_managed_credentials         ( "use_managed_credentials"          );
    const std::string alter_datasink_wait_timeout                    ( "wait_timeout"                     );

    // Keywords for /alter/datasource request
    const std::string alter_datasource_anonymous                       ( "anonymous"                        );
    const std::string alter_datasource_azure_container_name            ( "azure_container_name"             );
    const std::string alter_datasource_azure_oauth_token               ( "azure_oauth_token"                );
    const std::string alter_datasource_azure_sas_token                 ( "azure_sas_token"                  );
    const std::string alter_datasource_azure_storage_account_name      ( "azure_storage_account_name"       );
    const std::string alter_datasource_azure_tenant_id                 ( "azure_tenant_id"                  );
    const std::string alter_datasource_connection_timeout              ( "connection_timeout"               );
    const std::string alter_datasource_credential                      ( "credential"                       );
    const std::string alter_datasource_false                           ( "false"                            );
    const std::string alter_datasource_gcs_bucket_name                 ( "gcs_bucket_name"                  );
    const std::string alter_datasource_gcs_project_id                  ( "gcs_project_id"                   );
    const std::string alter_datasource_gcs_service_account_keys        ( "gcs_service_account_keys"         );
    const std::string alter_datasource_hdfs_delegation_token           ( "hdfs_delegation_token"            );
    const std::string alter_datasource_hdfs_kerberos_keytab            ( "hdfs_kerberos_keytab"             );
    const std::string alter_datasource_hdfs_use_kerberos               ( "hdfs_use_kerberos"                );
    const std::string alter_datasource_jdbc_driver_class_name          ( "jdbc_driver_class_name"           );
    const std::string alter_datasource_jdbc_driver_jar_path            ( "jdbc_driver_jar_path"             );
    const std::string alter_datasource_kafka_topic_name                ( "kafka_topic_name"                 );
    const std::string alter_datasource_kafka_url                       ( "kafka_url"                        );
    const std::string alter_datasource_location                        ( "location"                         );
    const std::string alter_datasource_password                        ( "password"                         );
    const std::string alter_datasource_s3_aws_role_arn                 ( "s3_aws_role_arn"                  );
    const std::string alter_datasource_s3_bucket_name                  ( "s3_bucket_name"                   );
    const std::string alter_datasource_s3_encryption_customer_algorithm( "s3_encryption_customer_algorithm" );
    const std::string alter_datasource_s3_encryption_customer_key      ( "s3_encryption_customer_key"       );
    const std::string alter_datasource_s3_region                       ( "s3_region"                        );
    const std::string alter_datasource_s3_use_virtual_addressing       ( "s3_use_virtual_addressing"        );
    const std::string alter_datasource_s3_verify_ssl                   ( "s3_verify_ssl"                    );
    const std::string alter_datasource_schema_name                     ( "schema_name"                      );
    const std::string alter_datasource_schema_registry_credential      ( "schema_registry_credential"       );
    const std::string alter_datasource_schema_registry_location        ( "schema_registry_location"         );
    const std::string alter_datasource_schema_registry_port            ( "schema_registry_port"             );
    const std::string alter_datasource_skip_validation                 ( "skip_validation"                  );
    const std::string alter_datasource_true                            ( "true"                             );
    const std::string alter_datasource_use_https                       ( "use_https"                        );
    const std::string alter_datasource_use_managed_credentials         ( "use_managed_credentials"          );
    const std::string alter_datasource_user_name                       ( "user_name"                        );
    const std::string alter_datasource_wait_timeout                    ( "wait_timeout"                     );

    // Keywords for /alter/directory request
    const std::string alter_directory_data_limit( "data_limit" );

    // Keywords for /alter/environment request
    const std::string alter_environment_datasource_name       ( "datasource_name"        );
    const std::string alter_environment_install_package       ( "install_package"        );
    const std::string alter_environment_install_requirements  ( "install_requirements"   );
    const std::string alter_environment_rebuild               ( "rebuild"                );
    const std::string alter_environment_reset                 ( "reset"                  );
    const std::string alter_environment_uninstall_package     ( "uninstall_package"      );
    const std::string alter_environment_uninstall_requirements( "uninstall_requirements" );

    // Keywords for /alter/graph request
    const std::string alter_graph_add_table_monitor( "add_table_monitor" );
    const std::string alter_graph_alter_logger     ( "alter_logger"      );
    const std::string alter_graph_cancel_task      ( "cancel_task"       );
    const std::string alter_graph_collect_graphs   ( "collect_graphs"    );
    const std::string alter_graph_delete_all       ( "delete_all"        );
    const std::string alter_graph_reset_client     ( "reset_client"      );
    const std::string alter_graph_reset_server     ( "reset_server"      );
    const std::string alter_graph_restore_graphs   ( "restore_graphs"    );
    const std::string alter_graph_server_id        ( "server_id"         );
    const std::string alter_graph_status           ( "status"            );

    // Keywords for /alter/model request
    const std::string alter_model_container                 ( "container"                  );
    const std::string alter_model_credential                ( "credential"                 );
    const std::string alter_model_refresh                   ( "refresh"                    );
    const std::string alter_model_registry                  ( "registry"                   );
    const std::string alter_model_remote_model_location     ( "remote_model_location"      );
    const std::string alter_model_remote_model_name         ( "remote_model_name"          );
    const std::string alter_model_remote_model_provider_type( "remote_model_provider_type" );
    const std::string alter_model_remote_model_type         ( "remote_model_type"          );
    const std::string alter_model_stop_deployment           ( "stop_deployment"            );

    // Keywords for /alter/resourcegroup request
    const std::string alter_resource_group_empty_string           ( ""                        );
    const std::string alter_resource_group_after                  ( "after"                   );
    const std::string alter_resource_group_before                 ( "before"                  );
    const std::string alter_resource_group_false                  ( "false"                   );
    const std::string alter_resource_group_first                  ( "first"                   );
    const std::string alter_resource_group_is_default_group       ( "is_default_group"        );
    const std::string alter_resource_group_last                   ( "last"                    );
    const std::string alter_resource_group_max_cpu_concurrency    ( "max_cpu_concurrency"     );
    const std::string alter_resource_group_max_data               ( "max_data"                );
    const std::string alter_resource_group_max_memory             ( "max_memory"              );
    const std::string alter_resource_group_max_scheduling_priority( "max_scheduling_priority" );
    const std::string alter_resource_group_max_tier_priority      ( "max_tier_priority"       );
    const std::string alter_resource_group_persist                ( "persist"                 );
    const std::string alter_resource_group_true                   ( "true"                    );

    // Keywords for /alter/role request
    const std::string alter_role_set_comment       ( "set_comment"        );
    const std::string alter_role_set_resource_group( "set_resource_group" );

    // Keywords for /alter/schema request
    const std::string alter_schema_add_comment  ( "add_comment"   );
    const std::string alter_schema_rename_schema( "rename_schema" );

    // Keywords for /alter/system/properties request
    const std::string alter_system_properties_ai_api_connection_timeout             ( "ai_api_connection_timeout"              );
    const std::string alter_system_properties_ai_api_embeddings_model               ( "ai_api_embeddings_model"                );
    const std::string alter_system_properties_ai_api_key                            ( "ai_api_key"                             );
    const std::string alter_system_properties_ai_api_provider                       ( "ai_api_provider"                        );
    const std::string alter_system_properties_ai_api_url                            ( "ai_api_url"                             );
    const std::string alter_system_properties_ai_enable_rag                         ( "ai_enable_rag"                          );
    const std::string alter_system_properties_audit_body                            ( "audit_body"                             );
    const std::string alter_system_properties_audit_data                            ( "audit_data"                             );
    const std::string alter_system_properties_audit_headers                         ( "audit_headers"                          );
    const std::string alter_system_properties_audit_response                        ( "audit_response"                         );
    const std::string alter_system_properties_chunk_column_max_memory               ( "chunk_column_max_memory"                );
    const std::string alter_system_properties_chunk_max_memory                      ( "chunk_max_memory"                       );
    const std::string alter_system_properties_chunk_size                            ( "chunk_size"                             );
    const std::string alter_system_properties_clear_cache                           ( "clear_cache"                            );
    const std::string alter_system_properties_communicator_test                     ( "communicator_test"                      );
    const std::string alter_system_properties_concurrent_kernel_execution           ( "concurrent_kernel_execution"            );
    const std::string alter_system_properties_egress_parquet_compression            ( "egress_parquet_compression"             );
    const std::string alter_system_properties_egress_single_file_max_size           ( "egress_single_file_max_size"            );
    const std::string alter_system_properties_enable_audit                          ( "enable_audit"                           );
    const std::string alter_system_properties_enable_one_step_compound_equi_join    ( "enable_one_step_compound_equi_join"     );
    const std::string alter_system_properties_enable_overlapped_equi_join           ( "enable_overlapped_equi_join"            );
    const std::string alter_system_properties_evict_columns                         ( "evict_columns"                          );
    const std::string alter_system_properties_evict_to_cold                         ( "evict_to_cold"                          );
    const std::string alter_system_properties_execution_mode                        ( "execution_mode"                         );
    const std::string alter_system_properties_external_files_directory              ( "external_files_directory"               );
    const std::string alter_system_properties_false                                 ( "false"                                  );
    const std::string alter_system_properties_flush_to_disk                         ( "flush_to_disk"                          );
    const std::string alter_system_properties_gzip                                  ( "gzip"                                   );
    const std::string alter_system_properties_kafka_batch_size                      ( "kafka_batch_size"                       );
    const std::string alter_system_properties_kafka_poll_timeout                    ( "kafka_poll_timeout"                     );
    const std::string alter_system_properties_kafka_wait_time                       ( "kafka_wait_time"                        );
    const std::string alter_system_properties_kifs_directory_data_limit             ( "kifs_directory_data_limit"              );
    const std::string alter_system_properties_max_concurrent_kernels                ( "max_concurrent_kernels"                 );
    const std::string alter_system_properties_max_get_records_size                  ( "max_get_records_size"                   );
    const std::string alter_system_properties_max_grbc_batch_size                   ( "max_grbc_batch_size"                    );
    const std::string alter_system_properties_network_speed                         ( "network_speed"                          );
    const std::string alter_system_properties_persist                               ( "persist"                                );
    const std::string alter_system_properties_postgres_proxy_idle_connection_timeout( "postgres_proxy_idle_connection_timeout" );
    const std::string alter_system_properties_postgres_proxy_keep_alive             ( "postgres_proxy_keep_alive"              );
    const std::string alter_system_properties_request_timeout                       ( "request_timeout"                        );
    const std::string alter_system_properties_shadow_agg_size                       ( "shadow_agg_size"                        );
    const std::string alter_system_properties_shadow_filter_size                    ( "shadow_filter_size"                     );
    const std::string alter_system_properties_snappy                                ( "snappy"                                 );
    const std::string alter_system_properties_subtask_concurrency_limit             ( "subtask_concurrency_limit"              );
    const std::string alter_system_properties_synchronous_compression               ( "synchronous_compression"                );
    const std::string alter_system_properties_system_metadata_retention_period      ( "system_metadata_retention_period"       );
    const std::string alter_system_properties_tcs_per_tom                           ( "tcs_per_tom"                            );
    const std::string alter_system_properties_telm_persist_query_metrics            ( "telm_persist_query_metrics"             );
    const std::string alter_system_properties_tps_per_tom                           ( "tps_per_tom"                            );
    const std::string alter_system_properties_true                                  ( "true"                                   );
    const std::string alter_system_properties_uncompressed                          ( "uncompressed"                           );

    // Keywords for /alter/table request
    const std::string alter_table_action                            ( "action"                             );
    const std::string alter_table_add_column                        ( "add_column"                         );
    const std::string alter_table_add_column_expression             ( "add_column_expression"              );
    const std::string alter_table_add_comment                       ( "add_comment"                        );
    const std::string alter_table_add_partition                     ( "add_partition"                      );
    const std::string alter_table_allow_homogeneous_tables          ( "allow_homogeneous_tables"           );
    const std::string alter_table_cagra                             ( "cagra"                              );
    const std::string alter_table_cancel_datasource_subscription    ( "cancel_datasource_subscription"     );
    const std::string alter_table_change_column                     ( "change_column"                      );
    const std::string alter_table_change_owner                      ( "change_owner"                       );
    const std::string alter_table_chunk_skip                        ( "chunk_skip"                         );
    const std::string alter_table_column                            ( "column"                             );
    const std::string alter_table_column_default_value              ( "column_default_value"               );
    const std::string alter_table_column_name                       ( "column_name"                        );
    const std::string alter_table_column_properties                 ( "column_properties"                  );
    const std::string alter_table_column_type                       ( "column_type"                        );
    const std::string alter_table_compression_type                  ( "compression_type"                   );
    const std::string alter_table_copy_values_from_column           ( "copy_values_from_column"            );
    const std::string alter_table_create_foreign_key                ( "create_foreign_key"                 );
    const std::string alter_table_create_index                      ( "create_index"                       );
    const std::string alter_table_delete_column                     ( "delete_column"                      );
    const std::string alter_table_delete_foreign_key                ( "delete_foreign_key"                 );
    const std::string alter_table_delete_index                      ( "delete_index"                       );
    const std::string alter_table_delete_partition                  ( "delete_partition"                   );
    const std::string alter_table_false                             ( "false"                              );
    const std::string alter_table_geospatial                        ( "geospatial"                         );
    const std::string alter_table_hnsw                              ( "hnsw"                               );
    const std::string alter_table_index_options                     ( "index_options"                      );
    const std::string alter_table_index_type                        ( "index_type"                         );
    const std::string alter_table_low_cardinality                   ( "low_cardinality"                    );
    const std::string alter_table_lz4                               ( "lz4"                                );
    const std::string alter_table_lz4hc                             ( "lz4hc"                              );
    const std::string alter_table_move_to_collection                ( "move_to_collection"                 );
    const std::string alter_table_move_to_schema                    ( "move_to_schema"                     );
    const std::string alter_table_none                              ( "none"                               );
    const std::string alter_table_pause_datasource_subscription     ( "pause_datasource_subscription"      );
    const std::string alter_table_protected                         ( "protected"                          );
    const std::string alter_table_refresh                           ( "refresh"                            );
    const std::string alter_table_refresh_index                     ( "refresh_index"                      );
    const std::string alter_table_remove_partition                  ( "remove_partition"                   );
    const std::string alter_table_remove_shard_keys                 ( "remove_shard_keys"                  );
    const std::string alter_table_remove_text_search_attributes     ( "remove_text_search_attributes"      );
    const std::string alter_table_rename_column                     ( "rename_column"                      );
    const std::string alter_table_rename_table                      ( "rename_table"                       );
    const std::string alter_table_resume_datasource_subscription    ( "resume_datasource_subscription"     );
    const std::string alter_table_set_build_materialized_view_policy( "set_build_materialized_view_policy" );
    const std::string alter_table_set_build_pk_index_policy         ( "set_build_pk_index_policy"          );
    const std::string alter_table_set_column_compression            ( "set_column_compression"             );
    const std::string alter_table_set_global_access_mode            ( "set_global_access_mode"             );
    const std::string alter_table_set_load_vectors_policy           ( "set_load_vectors_policy"            );
    const std::string alter_table_set_refresh_execute_as            ( "set_refresh_execute_as"             );
    const std::string alter_table_set_refresh_method                ( "set_refresh_method"                 );
    const std::string alter_table_set_refresh_period                ( "set_refresh_period"                 );
    const std::string alter_table_set_refresh_span                  ( "set_refresh_span"                   );
    const std::string alter_table_set_refresh_start_time            ( "set_refresh_start_time"             );
    const std::string alter_table_set_refresh_stop_time             ( "set_refresh_stop_time"              );
    const std::string alter_table_set_strategy_definition           ( "set_strategy_definition"            );
    const std::string alter_table_snappy                            ( "snappy"                             );
    const std::string alter_table_strategy_definition               ( "strategy_definition"                );
    const std::string alter_table_table_name                        ( "table_name"                         );
    const std::string alter_table_true                              ( "true"                               );
    const std::string alter_table_ttl                               ( "ttl"                                );
    const std::string alter_table_update_last_access_time           ( "update_last_access_time"            );
    const std::string alter_table_validate_change_column            ( "validate_change_column"             );

    // Keywords for /alter/tablemonitor request
    const std::string alter_table_monitor_schema_name( "schema_name" );

    // Keywords for /alter/tier request
    const std::string alter_tier_capacity      ( "capacity"       );
    const std::string alter_tier_false         ( "false"          );
    const std::string alter_tier_high_watermark( "high_watermark" );
    const std::string alter_tier_low_watermark ( "low_watermark"  );
    const std::string alter_tier_persist       ( "persist"        );
    const std::string alter_tier_rank          ( "rank"           );
    const std::string alter_tier_true          ( "true"           );
    const std::string alter_tier_wait_timeout  ( "wait_timeout"   );

    // Keywords for /alter/user request
    const std::string alter_user_false             ( "false"              );
    const std::string alter_user_set_activated     ( "set_activated"      );
    const std::string alter_user_set_comment       ( "set_comment"        );
    const std::string alter_user_set_default_schema( "set_default_schema" );
    const std::string alter_user_set_password      ( "set_password"       );
    const std::string alter_user_set_resource_group( "set_resource_group" );
    const std::string alter_user_true              ( "true"               );

    // Keywords for /alter/video request
    const std::string alter_video_ttl( "ttl" );

    // Keywords for /alter/wal request
    const std::string alter_wal_background             ( "background"              );
    const std::string alter_wal_checksum               ( "checksum"                );
    const std::string alter_wal_false                  ( "false"                   );
    const std::string alter_wal_flush                  ( "flush"                   );
    const std::string alter_wal_flush_frequency        ( "flush_frequency"         );
    const std::string alter_wal_fsync                  ( "fsync"                   );
    const std::string alter_wal_max_segment_size       ( "max_segment_size"        );
    const std::string alter_wal_none                   ( "none"                    );
    const std::string alter_wal_override_non_default   ( "override_non_default"    );
    const std::string alter_wal_persist                ( "persist"                 );
    const std::string alter_wal_restore_system_settings( "restore_system_settings" );
    const std::string alter_wal_segment_count          ( "segment_count"           );
    const std::string alter_wal_sync_policy            ( "sync_policy"             );
    const std::string alter_wal_true                   ( "true"                    );

    // Keywords for /append/records request
    const std::string append_records_expression           ( "expression"            );
    const std::string append_records_false                ( "false"                 );
    const std::string append_records_ignore_existing_pk   ( "ignore_existing_pk"    );
    const std::string append_records_limit                ( "limit"                 );
    const std::string append_records_offset               ( "offset"                );
    const std::string append_records_order_by             ( "order_by"              );
    const std::string append_records_true                 ( "true"                  );
    const std::string append_records_truncate_strings     ( "truncate_strings"      );
    const std::string append_records_update_on_existing_pk( "update_on_existing_pk" );

    // Keywords for /clear/table request
    const std::string clear_table_false                 ( "false"                  );
    const std::string clear_table_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string clear_table_true                  ( "true"                   );

    // Keywords for /clear/tablemonitor request
    const std::string clear_table_monitor_clear_all_references   ( "clear_all_references"    );
    const std::string clear_table_monitor_false                  ( "false"                   );
    const std::string clear_table_monitor_keep_autogenerated_sink( "keep_autogenerated_sink" );
    const std::string clear_table_monitor_true                   ( "true"                    );

    // Keywords for /create/container/registry request
    const std::string create_container_registry_email    ( "email"     );
    const std::string create_container_registry_password ( "password"  );
    const std::string create_container_registry_user_name( "user_name" );

    // Keywords for /create/container/registry response
    const std::string create_container_registry_kml_response( "kml_response" );

    // Keywords for /create/credential request
    const std::string create_credential_aws_access_key          ( "aws_access_key"           );
    const std::string create_credential_aws_iam_role            ( "aws_iam_role"             );
    const std::string create_credential_azure_ad                ( "azure_ad"                 );
    const std::string create_credential_azure_oauth             ( "azure_oauth"              );
    const std::string create_credential_azure_sas               ( "azure_sas"                );
    const std::string create_credential_azure_storage_key       ( "azure_storage_key"        );
    const std::string create_credential_confluent               ( "confluent"                );
    const std::string create_credential_docker                  ( "docker"                   );
    const std::string create_credential_gcs_service_account_id  ( "gcs_service_account_id"   );
    const std::string create_credential_gcs_service_account_keys( "gcs_service_account_keys" );
    const std::string create_credential_hdfs                    ( "hdfs"                     );
    const std::string create_credential_jdbc                    ( "jdbc"                     );
    const std::string create_credential_kafka                   ( "kafka"                    );
    const std::string create_credential_nvidia_api_key          ( "nvidia_api_key"           );
    const std::string create_credential_openai_api_key          ( "openai_api_key"           );

    // Keywords for /create/datasink request
    const std::string create_datasink_azure_container_name            ( "azure_container_name"             );
    const std::string create_datasink_azure_oauth_token               ( "azure_oauth_token"                );
    const std::string create_datasink_azure_sas_token                 ( "azure_sas_token"                  );
    const std::string create_datasink_azure_storage_account_name      ( "azure_storage_account_name"       );
    const std::string create_datasink_azure_tenant_id                 ( "azure_tenant_id"                  );
    const std::string create_datasink_connection_timeout              ( "connection_timeout"               );
    const std::string create_datasink_credential                      ( "credential"                       );
    const std::string create_datasink_false                           ( "false"                            );
    const std::string create_datasink_flat                            ( "flat"                             );
    const std::string create_datasink_gcs_bucket_name                 ( "gcs_bucket_name"                  );
    const std::string create_datasink_gcs_project_id                  ( "gcs_project_id"                   );
    const std::string create_datasink_gcs_service_account_keys        ( "gcs_service_account_keys"         );
    const std::string create_datasink_hdfs_delegation_token           ( "hdfs_delegation_token"            );
    const std::string create_datasink_hdfs_kerberos_keytab            ( "hdfs_kerberos_keytab"             );
    const std::string create_datasink_hdfs_use_kerberos               ( "hdfs_use_kerberos"                );
    const std::string create_datasink_jdbc_driver_class_name          ( "jdbc_driver_class_name"           );
    const std::string create_datasink_jdbc_driver_jar_path            ( "jdbc_driver_jar_path"             );
    const std::string create_datasink_json_format                     ( "json_format"                      );
    const std::string create_datasink_kafka_topic_name                ( "kafka_topic_name"                 );
    const std::string create_datasink_max_batch_size                  ( "max_batch_size"                   );
    const std::string create_datasink_max_message_size                ( "max_message_size"                 );
    const std::string create_datasink_nested                          ( "nested"                           );
    const std::string create_datasink_s3_aws_role_arn                 ( "s3_aws_role_arn"                  );
    const std::string create_datasink_s3_bucket_name                  ( "s3_bucket_name"                   );
    const std::string create_datasink_s3_encryption_customer_algorithm( "s3_encryption_customer_algorithm" );
    const std::string create_datasink_s3_encryption_customer_key      ( "s3_encryption_customer_key"       );
    const std::string create_datasink_s3_encryption_type              ( "s3_encryption_type"               );
    const std::string create_datasink_s3_kms_key_id                   ( "s3_kms_key_id"                    );
    const std::string create_datasink_s3_region                       ( "s3_region"                        );
    const std::string create_datasink_s3_use_virtual_addressing       ( "s3_use_virtual_addressing"        );
    const std::string create_datasink_s3_verify_ssl                   ( "s3_verify_ssl"                    );
    const std::string create_datasink_skip_validation                 ( "skip_validation"                  );
    const std::string create_datasink_true                            ( "true"                             );
    const std::string create_datasink_use_https                       ( "use_https"                        );
    const std::string create_datasink_use_managed_credentials         ( "use_managed_credentials"          );
    const std::string create_datasink_wait_timeout                    ( "wait_timeout"                     );

    // Keywords for /create/datasource request
    const std::string create_datasource_anonymous                       ( "anonymous"                        );
    const std::string create_datasource_azure_container_name            ( "azure_container_name"             );
    const std::string create_datasource_azure_oauth_token               ( "azure_oauth_token"                );
    const std::string create_datasource_azure_sas_token                 ( "azure_sas_token"                  );
    const std::string create_datasource_azure_storage_account_name      ( "azure_storage_account_name"       );
    const std::string create_datasource_azure_tenant_id                 ( "azure_tenant_id"                  );
    const std::string create_datasource_connection_timeout              ( "connection_timeout"               );
    const std::string create_datasource_credential                      ( "credential"                       );
    const std::string create_datasource_false                           ( "false"                            );
    const std::string create_datasource_gcs_bucket_name                 ( "gcs_bucket_name"                  );
    const std::string create_datasource_gcs_project_id                  ( "gcs_project_id"                   );
    const std::string create_datasource_gcs_service_account_keys        ( "gcs_service_account_keys"         );
    const std::string create_datasource_hdfs_delegation_token           ( "hdfs_delegation_token"            );
    const std::string create_datasource_hdfs_kerberos_keytab            ( "hdfs_kerberos_keytab"             );
    const std::string create_datasource_hdfs_use_kerberos               ( "hdfs_use_kerberos"                );
    const std::string create_datasource_is_stream                       ( "is_stream"                        );
    const std::string create_datasource_jdbc_driver_class_name          ( "jdbc_driver_class_name"           );
    const std::string create_datasource_jdbc_driver_jar_path            ( "jdbc_driver_jar_path"             );
    const std::string create_datasource_kafka_topic_name                ( "kafka_topic_name"                 );
    const std::string create_datasource_s3_aws_role_arn                 ( "s3_aws_role_arn"                  );
    const std::string create_datasource_s3_bucket_name                  ( "s3_bucket_name"                   );
    const std::string create_datasource_s3_encryption_customer_algorithm( "s3_encryption_customer_algorithm" );
    const std::string create_datasource_s3_encryption_customer_key      ( "s3_encryption_customer_key"       );
    const std::string create_datasource_s3_region                       ( "s3_region"                        );
    const std::string create_datasource_s3_use_virtual_addressing       ( "s3_use_virtual_addressing"        );
    const std::string create_datasource_s3_verify_ssl                   ( "s3_verify_ssl"                    );
    const std::string create_datasource_schema_registry_credential      ( "schema_registry_credential"       );
    const std::string create_datasource_schema_registry_location        ( "schema_registry_location"         );
    const std::string create_datasource_schema_registry_port            ( "schema_registry_port"             );
    const std::string create_datasource_skip_validation                 ( "skip_validation"                  );
    const std::string create_datasource_true                            ( "true"                             );
    const std::string create_datasource_use_https                       ( "use_https"                        );
    const std::string create_datasource_use_managed_credentials         ( "use_managed_credentials"          );
    const std::string create_datasource_wait_timeout                    ( "wait_timeout"                     );

    // Keywords for /create/directory request
    const std::string create_directory_create_home_directory( "create_home_directory" );
    const std::string create_directory_data_limit           ( "data_limit"            );
    const std::string create_directory_false                ( "false"                 );
    const std::string create_directory_no_error_if_exists   ( "no_error_if_exists"    );
    const std::string create_directory_true                 ( "true"                  );

    // Keywords for /create/graph request
    const std::string create_graph_add_table_monitor   ( "add_table_monitor"    );
    const std::string create_graph_add_turns           ( "add_turns"            );
    const std::string create_graph_allow_multiple_edges( "allow_multiple_edges" );
    const std::string create_graph_embedding_table     ( "embedding_table"      );
    const std::string create_graph_false               ( "false"                );
    const std::string create_graph_graph_table         ( "graph_table"          );
    const std::string create_graph_is_partitioned      ( "is_partitioned"       );
    const std::string create_graph_label_delimiter     ( "label_delimiter"      );
    const std::string create_graph_merge_tolerance     ( "merge_tolerance"      );
    const std::string create_graph_recreate            ( "recreate"             );
    const std::string create_graph_save_persist        ( "save_persist"         );
    const std::string create_graph_server_id           ( "server_id"            );
    const std::string create_graph_true                ( "true"                 );
    const std::string create_graph_use_rtree           ( "use_rtree"            );

    // Keywords for /create/job request
    const std::string create_job_binary                ( "binary"                 );
    const std::string create_job_false                 ( "false"                  );
    const std::string create_job_json                  ( "json"                   );
    const std::string create_job_remove_job_on_complete( "remove_job_on_complete" );
    const std::string create_job_snappy                ( "snappy"                 );
    const std::string create_job_true                  ( "true"                   );

    // Keywords for /create/job request and response
    const std::string create_job_job_tag( "job_tag" );

    // Keywords for /create/jointable request
    const std::string create_join_table_chunk_size             ( "chunk_size"              );
    const std::string create_join_table_collection_name        ( "collection_name"         );
    const std::string create_join_table_create_temp_table      ( "create_temp_table"       );
    const std::string create_join_table_enable_pk_equi_join    ( "enable_pk_equi_join"     );
    const std::string create_join_table_enable_virtual_chunking( "enable_virtual_chunking" );
    const std::string create_join_table_false                  ( "false"                   );
    const std::string create_join_table_max_query_dimensions   ( "max_query_dimensions"    );
    const std::string create_join_table_no_count               ( "no_count"                );
    const std::string create_join_table_optimize_lookups       ( "optimize_lookups"        );
    const std::string create_join_table_strategy_definition    ( "strategy_definition"     );
    const std::string create_join_table_true                   ( "true"                    );
    const std::string create_join_table_ttl                    ( "ttl"                     );
    const std::string create_join_table_view_id                ( "view_id"                 );

    // Keywords for /create/jointable response
    const std::string create_join_table_qualified_join_table_name( "qualified_join_table_name" );

    // Keywords for /create/materializedview request
    const std::string create_materialized_view_always                        ( "always"                         );
    const std::string create_materialized_view_build_materialized_view_policy( "build_materialized_view_policy" );
    const std::string create_materialized_view_collection_name               ( "collection_name"                );
    const std::string create_materialized_view_execute_as                    ( "execute_as"                     );
    const std::string create_materialized_view_false                         ( "false"                          );
    const std::string create_materialized_view_lazy                          ( "lazy"                           );
    const std::string create_materialized_view_manual                        ( "manual"                         );
    const std::string create_materialized_view_on_change                     ( "on_change"                      );
    const std::string create_materialized_view_on_demand                     ( "on_demand"                      );
    const std::string create_materialized_view_on_query                      ( "on_query"                       );
    const std::string create_materialized_view_periodic                      ( "periodic"                       );
    const std::string create_materialized_view_persist                       ( "persist"                        );
    const std::string create_materialized_view_refresh_method                ( "refresh_method"                 );
    const std::string create_materialized_view_refresh_period                ( "refresh_period"                 );
    const std::string create_materialized_view_refresh_span                  ( "refresh_span"                   );
    const std::string create_materialized_view_refresh_start_time            ( "refresh_start_time"             );
    const std::string create_materialized_view_refresh_stop_time             ( "refresh_stop_time"              );
    const std::string create_materialized_view_system                        ( "system"                         );
    const std::string create_materialized_view_true                          ( "true"                           );
    const std::string create_materialized_view_ttl                           ( "ttl"                            );

    // Keywords for /create/materializedview response
    const std::string create_materialized_view_qualified_table_name( "qualified_table_name" );

    // Keywords for /create/proc request
    const std::string create_proc_distributed             ( "distributed"              );
    const std::string create_proc_max_concurrency_per_node( "max_concurrency_per_node" );
    const std::string create_proc_nondistributed          ( "nondistributed"           );
    const std::string create_proc_set_environment         ( "set_environment"          );

    // Keywords for /create/projection request
    const std::string create_projection_HASH                           ( "HASH"                            );
    const std::string create_projection_INTERVAL                       ( "INTERVAL"                        );
    const std::string create_projection_LIST                           ( "LIST"                            );
    const std::string create_projection_RANGE                          ( "RANGE"                           );
    const std::string create_projection_SERIES                         ( "SERIES"                          );
    const std::string create_projection_chunk_column_max_memory        ( "chunk_column_max_memory"         );
    const std::string create_projection_chunk_max_memory               ( "chunk_max_memory"                );
    const std::string create_projection_chunk_size                     ( "chunk_size"                      );
    const std::string create_projection_collection_name                ( "collection_name"                 );
    const std::string create_projection_create_indexes                 ( "create_indexes"                  );
    const std::string create_projection_create_temp_table              ( "create_temp_table"               );
    const std::string create_projection_expression                     ( "expression"                      );
    const std::string create_projection_false                          ( "false"                           );
    const std::string create_projection_is_automatic_partition         ( "is_automatic_partition"          );
    const std::string create_projection_is_replicated                  ( "is_replicated"                   );
    const std::string create_projection_join_window_functions          ( "join_window_functions"           );
    const std::string create_projection_join_window_functions_threshold( "join_window_functions_threshold" );
    const std::string create_projection_limit                          ( "limit"                           );
    const std::string create_projection_offset                         ( "offset"                          );
    const std::string create_projection_order_by                       ( "order_by"                        );
    const std::string create_projection_partition_definitions          ( "partition_definitions"           );
    const std::string create_projection_partition_keys                 ( "partition_keys"                  );
    const std::string create_projection_partition_type                 ( "partition_type"                  );
    const std::string create_projection_persist                        ( "persist"                         );
    const std::string create_projection_preserve_dict_encoding         ( "preserve_dict_encoding"          );
    const std::string create_projection_retain_partitions              ( "retain_partitions"               );
    const std::string create_projection_shard_key                      ( "shard_key"                       );
    const std::string create_projection_strategy_definition            ( "strategy_definition"             );
    const std::string create_projection_true                           ( "true"                            );
    const std::string create_projection_ttl                            ( "ttl"                             );
    const std::string create_projection_view_id                        ( "view_id"                         );

    // Keywords for /create/projection response
    const std::string create_projection_count                    ( "count"                     );
    const std::string create_projection_qualified_projection_name( "qualified_projection_name" );

    // Keywords for /create/resourcegroup request
    const std::string create_resource_group_after                  ( "after"                   );
    const std::string create_resource_group_before                 ( "before"                  );
    const std::string create_resource_group_first                  ( "first"                   );
    const std::string create_resource_group_last                   ( "last"                    );
    const std::string create_resource_group_max_cpu_concurrency    ( "max_cpu_concurrency"     );
    const std::string create_resource_group_max_data               ( "max_data"                );
    const std::string create_resource_group_max_memory             ( "max_memory"              );
    const std::string create_resource_group_max_scheduling_priority( "max_scheduling_priority" );
    const std::string create_resource_group_max_tier_priority      ( "max_tier_priority"       );

    // Keywords for /create/role request
    const std::string create_role_resource_group( "resource_group" );

    // Keywords for /create/schema request
    const std::string create_schema_false             ( "false"              );
    const std::string create_schema_no_error_if_exists( "no_error_if_exists" );
    const std::string create_schema_true              ( "true"               );

    // Keywords for /create/table request
    const std::string create_table_HASH                       ( "HASH"                        );
    const std::string create_table_INTERVAL                   ( "INTERVAL"                    );
    const std::string create_table_LIST                       ( "LIST"                        );
    const std::string create_table_RANGE                      ( "RANGE"                       );
    const std::string create_table_SERIES                     ( "SERIES"                      );
    const std::string create_table_always                     ( "always"                      );
    const std::string create_table_build_pk_index_policy      ( "build_pk_index_policy"       );
    const std::string create_table_chunk_column_max_memory    ( "chunk_column_max_memory"     );
    const std::string create_table_chunk_max_memory           ( "chunk_max_memory"            );
    const std::string create_table_chunk_size                 ( "chunk_size"                  );
    const std::string create_table_collection_name            ( "collection_name"             );
    const std::string create_table_create_temp_table          ( "create_temp_table"           );
    const std::string create_table_disallow_homogeneous_tables( "disallow_homogeneous_tables" );
    const std::string create_table_false                      ( "false"                       );
    const std::string create_table_foreign_keys               ( "foreign_keys"                );
    const std::string create_table_foreign_shard_key          ( "foreign_shard_key"           );
    const std::string create_table_is_automatic_partition     ( "is_automatic_partition"      );
    const std::string create_table_is_collection              ( "is_collection"               );
    const std::string create_table_is_replicated              ( "is_replicated"               );
    const std::string create_table_is_result_table            ( "is_result_table"             );
    const std::string create_table_lazy                       ( "lazy"                        );
    const std::string create_table_load_vectors_policy        ( "load_vectors_policy"         );
    const std::string create_table_no_error_if_exists         ( "no_error_if_exists"          );
    const std::string create_table_on_demand                  ( "on_demand"                   );
    const std::string create_table_partition_definitions      ( "partition_definitions"       );
    const std::string create_table_partition_keys             ( "partition_keys"              );
    const std::string create_table_partition_type             ( "partition_type"              );
    const std::string create_table_strategy_definition        ( "strategy_definition"         );
    const std::string create_table_system                     ( "system"                      );
    const std::string create_table_true                       ( "true"                        );
    const std::string create_table_ttl                        ( "ttl"                         );

    // Keywords for /create/table response
    const std::string create_table_qualified_table_name( "qualified_table_name" );

    // Keywords for /create/table/external request
    const std::string create_table_external_HASH                              ( "HASH"                               );
    const std::string create_table_external_INTERVAL                          ( "INTERVAL"                           );
    const std::string create_table_external_LIST                              ( "LIST"                               );
    const std::string create_table_external_RANGE                             ( "RANGE"                              );
    const std::string create_table_external_SERIES                            ( "SERIES"                             );
    const std::string create_table_external_abort                             ( "abort"                              );
    const std::string create_table_external_accuracy                          ( "accuracy"                           );
    const std::string create_table_external_auto                              ( "auto"                               );
    const std::string create_table_external_avro                              ( "avro"                               );
    const std::string create_table_external_bad_record_table_limit            ( "bad_record_table_limit"             );
    const std::string create_table_external_bad_record_table_limit_per_input  ( "bad_record_table_limit_per_input"   );
    const std::string create_table_external_bad_record_table_name             ( "bad_record_table_name"              );
    const std::string create_table_external_batch_size                        ( "batch_size"                         );
    const std::string create_table_external_bzip2                             ( "bzip2"                              );
    const std::string create_table_external_chunk_column_max_memory           ( "chunk_column_max_memory"            );
    const std::string create_table_external_chunk_max_memory                  ( "chunk_max_memory"                   );
    const std::string create_table_external_chunk_size                        ( "chunk_size"                         );
    const std::string create_table_external_column_formats                    ( "column_formats"                     );
    const std::string create_table_external_columns_to_load                   ( "columns_to_load"                    );
    const std::string create_table_external_columns_to_skip                   ( "columns_to_skip"                    );
    const std::string create_table_external_compression_type                  ( "compression_type"                   );
    const std::string create_table_external_datasource_name                   ( "datasource_name"                    );
    const std::string create_table_external_default_column_formats            ( "default_column_formats"             );
    const std::string create_table_external_delimited_text                    ( "delimited_text"                     );
    const std::string create_table_external_distributed_local                 ( "distributed_local"                  );
    const std::string create_table_external_distributed_shared                ( "distributed_shared"                 );
    const std::string create_table_external_dry_run                           ( "dry_run"                            );
    const std::string create_table_external_earliest                          ( "earliest"                           );
    const std::string create_table_external_error_handling                    ( "error_handling"                     );
    const std::string create_table_external_external_table_type               ( "external_table_type"                );
    const std::string create_table_external_false                             ( "false"                              );
    const std::string create_table_external_file_type                         ( "file_type"                          );
    const std::string create_table_external_flatten_columns                   ( "flatten_columns"                    );
    const std::string create_table_external_foreign_keys                      ( "foreign_keys"                       );
    const std::string create_table_external_foreign_shard_key                 ( "foreign_shard_key"                  );
    const std::string create_table_external_full                              ( "full"                               );
    const std::string create_table_external_gdal_configuration_options        ( "gdal_configuration_options"         );
    const std::string create_table_external_gdb                               ( "gdb"                                );
    const std::string create_table_external_gzip                              ( "gzip"                               );
    const std::string create_table_external_head                              ( "head"                               );
    const std::string create_table_external_ignore_bad_records                ( "ignore_bad_records"                 );
    const std::string create_table_external_ignore_existing_pk                ( "ignore_existing_pk"                 );
    const std::string create_table_external_ingestion_mode                    ( "ingestion_mode"                     );
    const std::string create_table_external_is_automatic_partition            ( "is_automatic_partition"             );
    const std::string create_table_external_is_replicated                     ( "is_replicated"                      );
    const std::string create_table_external_is_result_table                   ( "is_result_table"                    );
    const std::string create_table_external_jdbc_fetch_size                   ( "jdbc_fetch_size"                    );
    const std::string create_table_external_json                              ( "json"                               );
    const std::string create_table_external_kafka_consumers_per_rank          ( "kafka_consumers_per_rank"           );
    const std::string create_table_external_kafka_group_id                    ( "kafka_group_id"                     );
    const std::string create_table_external_kafka_offset_reset_policy         ( "kafka_offset_reset_policy"          );
    const std::string create_table_external_kafka_optimistic_ingest           ( "kafka_optimistic_ingest"            );
    const std::string create_table_external_kafka_subscription_cancel_after   ( "kafka_subscription_cancel_after"    );
    const std::string create_table_external_kafka_type_inference_fetch_timeout( "kafka_type_inference_fetch_timeout" );
    const std::string create_table_external_latest                            ( "latest"                             );
    const std::string create_table_external_layer                             ( "layer"                              );
    const std::string create_table_external_loading_mode                      ( "loading_mode"                       );
    const std::string create_table_external_local_time_offset                 ( "local_time_offset"                  );
    const std::string create_table_external_logical                           ( "logical"                            );
    const std::string create_table_external_manual                            ( "manual"                             );
    const std::string create_table_external_materialized                      ( "materialized"                       );
    const std::string create_table_external_max_records_to_load               ( "max_records_to_load"                );
    const std::string create_table_external_no_error_if_exists                ( "no_error_if_exists"                 );
    const std::string create_table_external_none                              ( "none"                               );
    const std::string create_table_external_num_tasks_per_rank                ( "num_tasks_per_rank"                 );
    const std::string create_table_external_on_start                          ( "on_start"                           );
    const std::string create_table_external_parquet                           ( "parquet"                            );
    const std::string create_table_external_partition_definitions             ( "partition_definitions"              );
    const std::string create_table_external_partition_keys                    ( "partition_keys"                     );
    const std::string create_table_external_partition_type                    ( "partition_type"                     );
    const std::string create_table_external_permissive                        ( "permissive"                         );
    const std::string create_table_external_poll_interval                     ( "poll_interval"                      );
    const std::string create_table_external_primary_keys                      ( "primary_keys"                       );
    const std::string create_table_external_refresh_method                    ( "refresh_method"                     );
    const std::string create_table_external_remote_query                      ( "remote_query"                       );
    const std::string create_table_external_remote_query_filter_column        ( "remote_query_filter_column"         );
    const std::string create_table_external_remote_query_increasing_column    ( "remote_query_increasing_column"     );
    const std::string create_table_external_remote_query_partition_column     ( "remote_query_partition_column"      );
    const std::string create_table_external_schema_registry_schema_name       ( "schema_registry_schema_name"        );
    const std::string create_table_external_shapefile                         ( "shapefile"                          );
    const std::string create_table_external_shard_keys                        ( "shard_keys"                         );
    const std::string create_table_external_single                            ( "single"                             );
    const std::string create_table_external_skip_lines                        ( "skip_lines"                         );
    const std::string create_table_external_speed                             ( "speed"                              );
    const std::string create_table_external_start_offsets                     ( "start_offsets"                      );
    const std::string create_table_external_strategy_definition               ( "strategy_definition"                );
    const std::string create_table_external_subscribe                         ( "subscribe"                          );
    const std::string create_table_external_table_insert_mode                 ( "table_insert_mode"                  );
    const std::string create_table_external_table_per_file                    ( "table_per_file"                     );
    const std::string create_table_external_text_comment_string               ( "text_comment_string"                );
    const std::string create_table_external_text_delimiter                    ( "text_delimiter"                     );
    const std::string create_table_external_text_escape_character             ( "text_escape_character"              );
    const std::string create_table_external_text_has_header                   ( "text_has_header"                    );
    const std::string create_table_external_text_header_property_delimiter    ( "text_header_property_delimiter"     );
    const std::string create_table_external_text_null_string                  ( "text_null_string"                   );
    const std::string create_table_external_text_quote_character              ( "text_quote_character"               );
    const std::string create_table_external_text_search_columns               ( "text_search_columns"                );
    const std::string create_table_external_text_search_min_column_length     ( "text_search_min_column_length"      );
    const std::string create_table_external_true                              ( "true"                               );
    const std::string create_table_external_truncate_strings                  ( "truncate_strings"                   );
    const std::string create_table_external_truncate_table                    ( "truncate_table"                     );
    const std::string create_table_external_ttl                               ( "ttl"                                );
    const std::string create_table_external_type_id                           ( "type_id"                            );
    const std::string create_table_external_type_inference_mode               ( "type_inference_mode"                );
    const std::string create_table_external_type_inference_only               ( "type_inference_only"                );
    const std::string create_table_external_update_on_existing_pk             ( "update_on_existing_pk"              );

    // Keywords for /create/tablemonitor request
    const std::string create_table_monitor_datasink_name     ( "datasink_name"      );
    const std::string create_table_monitor_delete            ( "delete"             );
    const std::string create_table_monitor_destination       ( "destination"        );
    const std::string create_table_monitor_event             ( "event"              );
    const std::string create_table_monitor_expression        ( "expression"         );
    const std::string create_table_monitor_increasing_column ( "increasing_column"  );
    const std::string create_table_monitor_insert            ( "insert"             );
    const std::string create_table_monitor_kafka_topic_name  ( "kafka_topic_name"   );
    const std::string create_table_monitor_monitor_id        ( "monitor_id"         );
    const std::string create_table_monitor_on_change         ( "on_change"          );
    const std::string create_table_monitor_periodic          ( "periodic"           );
    const std::string create_table_monitor_refresh_method    ( "refresh_method"     );
    const std::string create_table_monitor_refresh_period    ( "refresh_period"     );
    const std::string create_table_monitor_refresh_start_time( "refresh_start_time" );
    const std::string create_table_monitor_update            ( "update"             );

    // Keywords for /create/tablemonitor response
    const std::string create_table_monitor_delete_topic_id   ( "delete_topic_id"    );
    const std::string create_table_monitor_delete_type_schema( "delete_type_schema" );
    const std::string create_table_monitor_insert_topic_id   ( "insert_topic_id"    );
    const std::string create_table_monitor_insert_type_schema( "insert_type_schema" );
    const std::string create_table_monitor_ttl               ( "ttl"                );
    const std::string create_table_monitor_update_topic_id   ( "update_topic_id"    );
    const std::string create_table_monitor_update_type_schema( "update_type_schema" );

    // Keywords for /create/type request
    const std::string create_type_array           ( "array"            );
    const std::string create_type_boolean         ( "boolean"          );
    const std::string create_type_char1           ( "char1"            );
    const std::string create_type_char128         ( "char128"          );
    const std::string create_type_char16          ( "char16"           );
    const std::string create_type_char2           ( "char2"            );
    const std::string create_type_char256         ( "char256"          );
    const std::string create_type_char32          ( "char32"           );
    const std::string create_type_char4           ( "char4"            );
    const std::string create_type_char64          ( "char64"           );
    const std::string create_type_char8           ( "char8"            );
    const std::string create_type_data            ( "data"             );
    const std::string create_type_date            ( "date"             );
    const std::string create_type_datetime        ( "datetime"         );
    const std::string create_type_decimal         ( "decimal"          );
    const std::string create_type_dict            ( "dict"             );
    const std::string create_type_disk_optimized  ( "disk_optimized"   );
    const std::string create_type_init_with_now   ( "init_with_now"    );
    const std::string create_type_init_with_uuid  ( "init_with_uuid"   );
    const std::string create_type_int16           ( "int16"            );
    const std::string create_type_int8            ( "int8"             );
    const std::string create_type_ipv4            ( "ipv4"             );
    const std::string create_type_json            ( "json"             );
    const std::string create_type_nullable        ( "nullable"         );
    const std::string create_type_primary_key     ( "primary_key"      );
    const std::string create_type_shard_key       ( "shard_key"        );
    const std::string create_type_soft_primary_key( "soft_primary_key" );
    const std::string create_type_store_only      ( "store_only"       );
    const std::string create_type_text_search     ( "text_search"      );
    const std::string create_type_time            ( "time"             );
    const std::string create_type_timestamp       ( "timestamp"        );
    const std::string create_type_ulong           ( "ulong"            );
    const std::string create_type_update_with_now ( "update_with_now"  );
    const std::string create_type_uuid            ( "uuid"             );
    const std::string create_type_vector          ( "vector"           );
    const std::string create_type_wkt             ( "wkt"              );

    // Keywords for /create/union request
    const std::string create_union_chunk_column_max_memory( "chunk_column_max_memory" );
    const std::string create_union_chunk_max_memory       ( "chunk_max_memory"        );
    const std::string create_union_chunk_size             ( "chunk_size"              );
    const std::string create_union_collection_name        ( "collection_name"         );
    const std::string create_union_create_indexes         ( "create_indexes"          );
    const std::string create_union_create_temp_table      ( "create_temp_table"       );
    const std::string create_union_except                 ( "except"                  );
    const std::string create_union_except_all             ( "except_all"              );
    const std::string create_union_false                  ( "false"                   );
    const std::string create_union_force_replicated       ( "force_replicated"        );
    const std::string create_union_intersect              ( "intersect"               );
    const std::string create_union_intersect_all          ( "intersect_all"           );
    const std::string create_union_merge_views            ( "merge_views"             );
    const std::string create_union_mode                   ( "mode"                    );
    const std::string create_union_persist                ( "persist"                 );
    const std::string create_union_strategy_definition    ( "strategy_definition"     );
    const std::string create_union_true                   ( "true"                    );
    const std::string create_union_ttl                    ( "ttl"                     );
    const std::string create_union_union                  ( "union"                   );
    const std::string create_union_union_all              ( "union_all"               );
    const std::string create_union_union_distinct         ( "union_distinct"          );
    const std::string create_union_view_id                ( "view_id"                 );

    // Keywords for /create/union response
    const std::string create_union_count               ( "count"                );
    const std::string create_union_qualified_table_name( "qualified_table_name" );

    // Keywords for /create/user/external request
    const std::string create_user_external_activated            ( "activated"             );
    const std::string create_user_external_create_home_directory( "create_home_directory" );
    const std::string create_user_external_default_schema       ( "default_schema"        );
    const std::string create_user_external_directory_data_limit ( "directory_data_limit"  );
    const std::string create_user_external_false                ( "false"                 );
    const std::string create_user_external_resource_group       ( "resource_group"        );
    const std::string create_user_external_true                 ( "true"                  );

    // Keywords for /create/user/internal request
    const std::string create_user_internal_activated            ( "activated"             );
    const std::string create_user_internal_create_home_directory( "create_home_directory" );
    const std::string create_user_internal_default_schema       ( "default_schema"        );
    const std::string create_user_internal_directory_data_limit ( "directory_data_limit"  );
    const std::string create_user_internal_false                ( "false"                 );
    const std::string create_user_internal_resource_group       ( "resource_group"        );
    const std::string create_user_internal_true                 ( "true"                  );

    // Keywords for /create/video request
    const std::string create_video_chart             ( "chart"              );
    const std::string create_video_classbreak        ( "classbreak"         );
    const std::string create_video_contour           ( "contour"            );
    const std::string create_video_false             ( "false"              );
    const std::string create_video_heatmap           ( "heatmap"            );
    const std::string create_video_labels            ( "labels"             );
    const std::string create_video_no_error_if_exists( "no_error_if_exists" );
    const std::string create_video_raster            ( "raster"             );
    const std::string create_video_replace_if_exists ( "replace_if_exists"  );
    const std::string create_video_true              ( "true"               );
    const std::string create_video_ttl               ( "ttl"                );
    const std::string create_video_window            ( "window"             );

    // Keywords for /delete/directory request
    const std::string delete_directory_false                 ( "false"                  );
    const std::string delete_directory_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string delete_directory_recursive             ( "recursive"              );
    const std::string delete_directory_true                  ( "true"                   );

    // Keywords for /delete/files request
    const std::string delete_files_false                 ( "false"                  );
    const std::string delete_files_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string delete_files_true                  ( "true"                   );

    // Keywords for /delete/graph request
    const std::string delete_graph_delete_persist( "delete_persist" );
    const std::string delete_graph_false         ( "false"          );
    const std::string delete_graph_server_id     ( "server_id"      );
    const std::string delete_graph_true          ( "true"           );

    // Keywords for /delete/records request
    const std::string delete_records_delete_all_records( "delete_all_records" );
    const std::string delete_records_false             ( "false"              );
    const std::string delete_records_global_expression ( "global_expression"  );
    const std::string delete_records_record_id         ( "record_id"          );
    const std::string delete_records_true              ( "true"               );

    // Keywords for /delete/resourcegroup request
    const std::string delete_resource_group_cascade_delete( "cascade_delete" );
    const std::string delete_resource_group_false         ( "false"          );
    const std::string delete_resource_group_true          ( "true"           );

    // Keywords for /download/files request
    const std::string download_files_base64       ( "base64"        );
    const std::string download_files_file_encoding( "file_encoding" );
    const std::string download_files_none         ( "none"          );

    // Keywords for /drop/container/registry response
    const std::string drop_container_registry_kml_response( "kml_response" );

    // Keywords for /drop/datasink request
    const std::string drop_datasink_clear_table_monitors( "clear_table_monitors" );
    const std::string drop_datasink_false               ( "false"                );
    const std::string drop_datasink_true                ( "true"                 );

    // Keywords for /drop/environment request
    const std::string drop_environment_false                 ( "false"                  );
    const std::string drop_environment_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string drop_environment_true                  ( "true"                   );

    // Keywords for /drop/model response
    const std::string drop_model_kml_response( "kml_response" );

    // Keywords for /drop/schema request
    const std::string drop_schema_cascade               ( "cascade"                );
    const std::string drop_schema_false                 ( "false"                  );
    const std::string drop_schema_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string drop_schema_true                  ( "true"                   );

    // Keywords for /execute/proc request
    const std::string execute_proc_cache_input          ( "cache_input"           );
    const std::string execute_proc_execute_at_startup   ( "execute_at_startup"    );
    const std::string execute_proc_execute_at_startup_as( "execute_at_startup_as" );
    const std::string execute_proc_false                ( "false"                 );
    const std::string execute_proc_max_output_lines     ( "max_output_lines"      );
    const std::string execute_proc_run_tag              ( "run_tag"               );
    const std::string execute_proc_true                 ( "true"                  );
    const std::string execute_proc_use_cached_input     ( "use_cached_input"      );

    // Keywords for /execute/sql request
    const std::string execute_sql_binary                 ( "binary"                  );
    const std::string execute_sql_cost_based_optimization( "cost_based_optimization" );
    const std::string execute_sql_current_schema         ( "current_schema"          );
    const std::string execute_sql_distributed_joins      ( "distributed_joins"       );
    const std::string execute_sql_distributed_operations ( "distributed_operations"  );
    const std::string execute_sql_ignore_existing_pk     ( "ignore_existing_pk"      );
    const std::string execute_sql_json                   ( "json"                    );
    const std::string execute_sql_late_materialization   ( "late_materialization"    );
    const std::string execute_sql_paging_table           ( "paging_table"            );
    const std::string execute_sql_paging_table_ttl       ( "paging_table_ttl"        );
    const std::string execute_sql_parallel_execution     ( "parallel_execution"      );
    const std::string execute_sql_plan_cache             ( "plan_cache"              );
    const std::string execute_sql_prepare_mode           ( "prepare_mode"            );
    const std::string execute_sql_preserve_dict_encoding ( "preserve_dict_encoding"  );
    const std::string execute_sql_query_parameters       ( "query_parameters"        );
    const std::string execute_sql_results_caching        ( "results_caching"         );
    const std::string execute_sql_rule_based_optimization( "rule_based_optimization" );
    const std::string execute_sql_ssq_optimization       ( "ssq_optimization"        );
    const std::string execute_sql_ttl                    ( "ttl"                     );
    const std::string execute_sql_update_on_existing_pk  ( "update_on_existing_pk"   );
    const std::string execute_sql_validate_change_column ( "validate_change_column"  );

    // Keywords for /execute/sql response
    const std::string execute_sql_count( "count" );

    // Keywords for /execute/sql request and response
    const std::string execute_sql_false( "false" );
    const std::string execute_sql_true ( "true"  );

    // Keywords for /export/query/metrics request
    const std::string export_query_metrics_expression      ( "expression"       );
    const std::string export_query_metrics_filepath        ( "filepath"         );
    const std::string export_query_metrics_format          ( "format"           );
    const std::string export_query_metrics_job_id          ( "job_id"           );
    const std::string export_query_metrics_json            ( "json"             );
    const std::string export_query_metrics_json_trace_event( "json_trace_event" );
    const std::string export_query_metrics_limit           ( "limit"            );

    // Keywords for /export/query/metrics response
    const std::string export_query_metrics_exported_files( "exported_files" );
    const std::string export_query_metrics_output        ( "output"         );

    // Keywords for /export/records/tofiles request
    const std::string export_records_to_files_batch_size               ( "batch_size"                );
    const std::string export_records_to_files_column_formats           ( "column_formats"            );
    const std::string export_records_to_files_columns_to_export        ( "columns_to_export"         );
    const std::string export_records_to_files_columns_to_skip          ( "columns_to_skip"           );
    const std::string export_records_to_files_compression_type         ( "compression_type"          );
    const std::string export_records_to_files_datasink_name            ( "datasink_name"             );
    const std::string export_records_to_files_default_column_formats   ( "default_column_formats"    );
    const std::string export_records_to_files_delimited_text           ( "delimited_text"            );
    const std::string export_records_to_files_export_ddl               ( "export_ddl"                );
    const std::string export_records_to_files_false                    ( "false"                     );
    const std::string export_records_to_files_file_extension           ( "file_extension"            );
    const std::string export_records_to_files_file_type                ( "file_type"                 );
    const std::string export_records_to_files_gzip                     ( "gzip"                      );
    const std::string export_records_to_files_kinetica_header          ( "kinetica_header"           );
    const std::string export_records_to_files_kinetica_header_delimiter( "kinetica_header_delimiter" );
    const std::string export_records_to_files_overwrite                ( "overwrite"                 );
    const std::string export_records_to_files_parquet                  ( "parquet"                   );
    const std::string export_records_to_files_single_file              ( "single_file"               );
    const std::string export_records_to_files_single_file_max_size     ( "single_file_max_size"      );
    const std::string export_records_to_files_snappy                   ( "snappy"                    );
    const std::string export_records_to_files_text_delimiter           ( "text_delimiter"            );
    const std::string export_records_to_files_text_has_header          ( "text_has_header"           );
    const std::string export_records_to_files_text_null_string         ( "text_null_string"          );
    const std::string export_records_to_files_true                     ( "true"                      );
    const std::string export_records_to_files_uncompressed             ( "uncompressed"              );

    // Keywords for /export/records/totable request
    const std::string export_records_to_table_batch_size                    ( "batch_size"                     );
    const std::string export_records_to_table_datasink_name                 ( "datasink_name"                  );
    const std::string export_records_to_table_false                         ( "false"                          );
    const std::string export_records_to_table_jdbc_connection_init_statement( "jdbc_connection_init_statement" );
    const std::string export_records_to_table_jdbc_session_init_statement   ( "jdbc_session_init_statement"    );
    const std::string export_records_to_table_remote_table                  ( "remote_table"                   );
    const std::string export_records_to_table_true                          ( "true"                           );
    const std::string export_records_to_table_use_indexed_parameters        ( "use_indexed_parameters"         );
    const std::string export_records_to_table_use_st_geomfrom_casts         ( "use_st_geomfrom_casts"          );

    // Keywords for /filter request
    const std::string filter_collection_name  ( "collection_name"   );
    const std::string filter_create_temp_table( "create_temp_table" );
    const std::string filter_false            ( "false"             );
    const std::string filter_true             ( "true"              );
    const std::string filter_ttl              ( "ttl"               );
    const std::string filter_view_id          ( "view_id"           );

    // Keywords for /filter response
    const std::string filter_qualified_view_name( "qualified_view_name" );

    // Keywords for /filter/byarea request
    const std::string filter_by_area_collection_name  ( "collection_name"   );
    const std::string filter_by_area_create_temp_table( "create_temp_table" );
    const std::string filter_by_area_false            ( "false"             );
    const std::string filter_by_area_true             ( "true"              );

    // Keywords for /filter/byarea response
    const std::string filter_by_area_qualified_view_name( "qualified_view_name" );

    // Keywords for /filter/byarea/geometry request
    const std::string filter_by_area_geometry_collection_name  ( "collection_name"   );
    const std::string filter_by_area_geometry_create_temp_table( "create_temp_table" );
    const std::string filter_by_area_geometry_false            ( "false"             );
    const std::string filter_by_area_geometry_true             ( "true"              );

    // Keywords for /filter/byarea/geometry response
    const std::string filter_by_area_geometry_qualified_view_name( "qualified_view_name" );

    // Keywords for /filter/bybox request
    const std::string filter_by_box_collection_name  ( "collection_name"   );
    const std::string filter_by_box_create_temp_table( "create_temp_table" );
    const std::string filter_by_box_false            ( "false"             );
    const std::string filter_by_box_true             ( "true"              );

    // Keywords for /filter/bybox response
    const std::string filter_by_box_qualified_view_name( "qualified_view_name" );

    // Keywords for /filter/bybox/geometry request
    const std::string filter_by_box_geometry_collection_name  ( "collection_name"   );
    const std::string filter_by_box_geometry_create_temp_table( "create_temp_table" );
    const std::string filter_by_box_geometry_false            ( "false"             );
    const std::string filter_by_box_geometry_true             ( "true"              );

    // Keywords for /filter/bybox/geometry response
    const std::string filter_by_box_geometry_qualified_view_name( "qualified_view_name" );

    // Keywords for /filter/bygeometry request
    const std::string filter_by_geometry_collection_name  ( "collection_name"   );
    const std::string filter_by_geometry_contains         ( "contains"          );
    const std::string filter_by_geometry_create_temp_table( "create_temp_table" );
    const std::string filter_by_geometry_crosses          ( "crosses"           );
    const std::string filter_by_geometry_disjoint         ( "disjoint"          );
    const std::string filter_by_geometry_equals           ( "equals"            );
    const std::string filter_by_geometry_false            ( "false"             );
    const std::string filter_by_geometry_intersects       ( "intersects"        );
    const std::string filter_by_geometry_overlaps         ( "overlaps"          );
    const std::string filter_by_geometry_touches          ( "touches"           );
    const std::string filter_by_geometry_true             ( "true"              );
    const std::string filter_by_geometry_within           ( "within"            );

    // Keywords for /filter/bygeometry response
    const std::string filter_by_geometry_qualified_view_name( "qualified_view_name" );

    // Keywords for /filter/bylist request
    const std::string filter_by_list_collection_name  ( "collection_name"   );
    const std::string filter_by_list_create_temp_table( "create_temp_table" );
    const std::string filter_by_list_false            ( "false"             );
    const std::string filter_by_list_filter_mode      ( "filter_mode"       );
    const std::string filter_by_list_in_list          ( "in_list"           );
    const std::string filter_by_list_not_in_list      ( "not_in_list"       );
    const std::string filter_by_list_true             ( "true"              );

    // Keywords for /filter/bylist response
    const std::string filter_by_list_qualified_view_name( "qualified_view_name" );

    // Keywords for /filter/byradius request
    const std::string filter_by_radius_collection_name  ( "collection_name"   );
    const std::string filter_by_radius_create_temp_table( "create_temp_table" );
    const std::string filter_by_radius_false            ( "false"             );
    const std::string filter_by_radius_true             ( "true"              );

    // Keywords for /filter/byradius response
    const std::string filter_by_radius_qualified_view_name( "qualified_view_name" );

    // Keywords for /filter/byradius/geometry request
    const std::string filter_by_radius_geometry_collection_name  ( "collection_name"   );
    const std::string filter_by_radius_geometry_create_temp_table( "create_temp_table" );
    const std::string filter_by_radius_geometry_false            ( "false"             );
    const std::string filter_by_radius_geometry_true             ( "true"              );

    // Keywords for /filter/byradius/geometry response
    const std::string filter_by_radius_geometry_qualified_view_name( "qualified_view_name" );

    // Keywords for /filter/byrange request
    const std::string filter_by_range_collection_name  ( "collection_name"   );
    const std::string filter_by_range_create_temp_table( "create_temp_table" );
    const std::string filter_by_range_false            ( "false"             );
    const std::string filter_by_range_true             ( "true"              );

    // Keywords for /filter/byrange response
    const std::string filter_by_range_qualified_view_name( "qualified_view_name" );

    // Keywords for /filter/byseries request
    const std::string filter_by_series_collection_name        ( "collection_name"         );
    const std::string filter_by_series_create_temp_table      ( "create_temp_table"       );
    const std::string filter_by_series_euclidean              ( "euclidean"               );
    const std::string filter_by_series_false                  ( "false"                   );
    const std::string filter_by_series_great_circle           ( "great_circle"            );
    const std::string filter_by_series_spatial_distance_metric( "spatial_distance_metric" );
    const std::string filter_by_series_spatial_radius         ( "spatial_radius"          );
    const std::string filter_by_series_time_radius            ( "time_radius"             );
    const std::string filter_by_series_true                   ( "true"                    );

    // Keywords for /filter/byseries response
    const std::string filter_by_series_qualified_view_name( "qualified_view_name" );

    // Keywords for /filter/bystring request
    const std::string filter_by_string_case_sensitive   ( "case_sensitive"    );
    const std::string filter_by_string_collection_name  ( "collection_name"   );
    const std::string filter_by_string_contains         ( "contains"          );
    const std::string filter_by_string_create_temp_table( "create_temp_table" );
    const std::string filter_by_string_equals           ( "equals"            );
    const std::string filter_by_string_false            ( "false"             );
    const std::string filter_by_string_regex            ( "regex"             );
    const std::string filter_by_string_search           ( "search"            );
    const std::string filter_by_string_starts_with      ( "starts_with"       );
    const std::string filter_by_string_true             ( "true"              );

    // Keywords for /filter/bystring response
    const std::string filter_by_string_qualified_view_name( "qualified_view_name" );

    // Keywords for /filter/bytable request
    const std::string filter_by_table_buffer             ( "buffer"              );
    const std::string filter_by_table_buffer_method      ( "buffer_method"       );
    const std::string filter_by_table_collection_name    ( "collection_name"     );
    const std::string filter_by_table_create_temp_table  ( "create_temp_table"   );
    const std::string filter_by_table_false              ( "false"               );
    const std::string filter_by_table_filter_mode        ( "filter_mode"         );
    const std::string filter_by_table_geos               ( "geos"                );
    const std::string filter_by_table_in_table           ( "in_table"            );
    const std::string filter_by_table_max_partition_score( "max_partition_score" );
    const std::string filter_by_table_max_partition_size ( "max_partition_size"  );
    const std::string filter_by_table_mode               ( "mode"                );
    const std::string filter_by_table_normal             ( "normal"              );
    const std::string filter_by_table_not_in_table       ( "not_in_table"        );
    const std::string filter_by_table_spatial            ( "spatial"             );
    const std::string filter_by_table_true               ( "true"                );
    const std::string filter_by_table_x_column_name      ( "x_column_name"       );
    const std::string filter_by_table_y_column_name      ( "y_column_name"       );

    // Keywords for /filter/bytable response
    const std::string filter_by_table_qualified_view_name( "qualified_view_name" );

    // Keywords for /filter/byvalue request
    const std::string filter_by_value_collection_name  ( "collection_name"   );
    const std::string filter_by_value_create_temp_table( "create_temp_table" );
    const std::string filter_by_value_false            ( "false"             );
    const std::string filter_by_value_true             ( "true"              );

    // Keywords for /filter/byvalue response
    const std::string filter_by_value_qualified_view_name( "qualified_view_name" );

    // Keywords for /get/job request
    const std::string get_job_job_tag( "job_tag" );

    // Keywords for /get/job response
    const std::string get_job_CANCELLED    ( "CANCELLED"     );
    const std::string get_job_DONE         ( "DONE"          );
    const std::string get_job_ERROR        ( "ERROR"         );
    const std::string get_job_RUNNING      ( "RUNNING"       );
    const std::string get_job_binary       ( "binary"        );
    const std::string get_job_error_message( "error_message" );
    const std::string get_job_json         ( "json"          );

    // Keywords for /get/records request
    const std::string get_records_ascending        ( "ascending"         );
    const std::string get_records_binary           ( "binary"            );
    const std::string get_records_descending       ( "descending"        );
    const std::string get_records_expression       ( "expression"        );
    const std::string get_records_false            ( "false"             );
    const std::string get_records_fast_index_lookup( "fast_index_lookup" );
    const std::string get_records_geojson          ( "geojson"           );
    const std::string get_records_json             ( "json"              );
    const std::string get_records_sort_by          ( "sort_by"           );
    const std::string get_records_sort_order       ( "sort_order"        );
    const std::string get_records_true             ( "true"              );

    // Keywords for /get/records/bycolumn request
    const std::string get_records_by_column_ascending           ( "ascending"            );
    const std::string get_records_by_column_binary              ( "binary"               );
    const std::string get_records_by_column_convert_wkts_to_wkbs( "convert_wkts_to_wkbs" );
    const std::string get_records_by_column_descending          ( "descending"           );
    const std::string get_records_by_column_expression          ( "expression"           );
    const std::string get_records_by_column_false               ( "false"                );
    const std::string get_records_by_column_json                ( "json"                 );
    const std::string get_records_by_column_order_by            ( "order_by"             );
    const std::string get_records_by_column_route_to_tom        ( "route_to_tom"         );
    const std::string get_records_by_column_sort_by             ( "sort_by"              );
    const std::string get_records_by_column_sort_order          ( "sort_order"           );
    const std::string get_records_by_column_true                ( "true"                 );

    // Keywords for /get/records/byseries request
    const std::string get_records_by_series_binary( "binary" );
    const std::string get_records_by_series_json  ( "json"   );

    // Keywords for /get/records/fromcollection request
    const std::string get_records_from_collection_binary           ( "binary"            );
    const std::string get_records_from_collection_expression       ( "expression"        );
    const std::string get_records_from_collection_json             ( "json"              );
    const std::string get_records_from_collection_return_record_ids( "return_record_ids" );

    // Keywords for /get/records/fromcollection response
    const std::string get_records_from_collection_has_more_records       ( "has_more_records"        );
    const std::string get_records_from_collection_total_number_of_records( "total_number_of_records" );

    // Keywords for /get/records/fromcollection request and response
    const std::string get_records_from_collection_false( "false" );
    const std::string get_records_from_collection_true ( "true"  );

    // Keywords for /grant/permission request
    const std::string grant_permission_admin            ( "admin"             );
    const std::string grant_permission_columns          ( "columns"           );
    const std::string grant_permission_connect          ( "connect"           );
    const std::string grant_permission_context          ( "context"           );
    const std::string grant_permission_create           ( "create"            );
    const std::string grant_permission_credential       ( "credential"        );
    const std::string grant_permission_datasink         ( "datasink"          );
    const std::string grant_permission_datasource       ( "datasource"        );
    const std::string grant_permission_delete           ( "delete"            );
    const std::string grant_permission_directory        ( "directory"         );
    const std::string grant_permission_execute          ( "execute"           );
    const std::string grant_permission_false            ( "false"             );
    const std::string grant_permission_filter_expression( "filter_expression" );
    const std::string grant_permission_graph            ( "graph"             );
    const std::string grant_permission_insert           ( "insert"            );
    const std::string grant_permission_proc             ( "proc"              );
    const std::string grant_permission_read             ( "read"              );
    const std::string grant_permission_schema           ( "schema"            );
    const std::string grant_permission_sql_proc         ( "sql_proc"          );
    const std::string grant_permission_system           ( "system"            );
    const std::string grant_permission_table            ( "table"             );
    const std::string grant_permission_table_monitor    ( "table_monitor"     );
    const std::string grant_permission_true             ( "true"              );
    const std::string grant_permission_update           ( "update"            );
    const std::string grant_permission_user_admin       ( "user_admin"        );
    const std::string grant_permission_with_grant_option( "with_grant_option" );
    const std::string grant_permission_write            ( "write"             );

    // Keywords for /grant/permission/credential request
    const std::string grant_permission_credential_credential_admin( "credential_admin" );
    const std::string grant_permission_credential_credential_read ( "credential_read"  );

    // Keywords for /grant/permission/datasource request
    const std::string grant_permission_datasource_admin  ( "admin"   );
    const std::string grant_permission_datasource_connect( "connect" );

    // Keywords for /grant/permission/directory request
    const std::string grant_permission_directory_directory_read ( "directory_read"  );
    const std::string grant_permission_directory_directory_write( "directory_write" );

    // Keywords for /grant/permission/proc request
    const std::string grant_permission_proc_proc_admin  ( "proc_admin"   );
    const std::string grant_permission_proc_proc_execute( "proc_execute" );

    // Keywords for /grant/permission/system request
    const std::string grant_permission_system_system_admin     ( "system_admin"      );
    const std::string grant_permission_system_system_read      ( "system_read"       );
    const std::string grant_permission_system_system_user_admin( "system_user_admin" );
    const std::string grant_permission_system_system_write     ( "system_write"      );

    // Keywords for /grant/permission/table request
    const std::string grant_permission_table_columns     ( "columns"      );
    const std::string grant_permission_table_table_admin ( "table_admin"  );
    const std::string grant_permission_table_table_delete( "table_delete" );
    const std::string grant_permission_table_table_insert( "table_insert" );
    const std::string grant_permission_table_table_read  ( "table_read"   );
    const std::string grant_permission_table_table_update( "table_update" );

    // Keywords for /has/permission request
    const std::string has_permission_admin                 ( "admin"                  );
    const std::string has_permission_connect               ( "connect"                );
    const std::string has_permission_context               ( "context"                );
    const std::string has_permission_create                ( "create"                 );
    const std::string has_permission_credential            ( "credential"             );
    const std::string has_permission_datasink              ( "datasink"               );
    const std::string has_permission_datasource            ( "datasource"             );
    const std::string has_permission_delete                ( "delete"                 );
    const std::string has_permission_directory             ( "directory"              );
    const std::string has_permission_execute               ( "execute"                );
    const std::string has_permission_graph                 ( "graph"                  );
    const std::string has_permission_insert                ( "insert"                 );
    const std::string has_permission_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string has_permission_proc                  ( "proc"                   );
    const std::string has_permission_read                  ( "read"                   );
    const std::string has_permission_schema                ( "schema"                 );
    const std::string has_permission_sql_proc              ( "sql_proc"               );
    const std::string has_permission_system                ( "system"                 );
    const std::string has_permission_table                 ( "table"                  );
    const std::string has_permission_table_monitor         ( "table_monitor"          );
    const std::string has_permission_update                ( "update"                 );
    const std::string has_permission_user_admin            ( "user_admin"             );
    const std::string has_permission_write                 ( "write"                  );

    // Keywords for /has/permission request and response
    const std::string has_permission_false( "false" );
    const std::string has_permission_true ( "true"  );

    // Keywords for /has/proc response
    const std::string has_proc_false( "false" );
    const std::string has_proc_true ( "true"  );

    // Keywords for /has/role request
    const std::string has_role_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string has_role_only_direct           ( "only_direct"            );

    // Keywords for /has/role response
    const std::string has_role_direct( "direct" );

    // Keywords for /has/role request and response
    const std::string has_role_false( "false" );
    const std::string has_role_true ( "true"  );

    // Keywords for /has/schema response
    const std::string has_schema_false( "false" );
    const std::string has_schema_true ( "true"  );

    // Keywords for /has/table response
    const std::string has_table_false( "false" );
    const std::string has_table_true ( "true"  );

    // Keywords for /has/type response
    const std::string has_type_false( "false" );
    const std::string has_type_true ( "true"  );

    // Keywords for /import/model request
    const std::string import_model_credential                ( "credential"                 );
    const std::string import_model_embedding                 ( "embedding"                  );
    const std::string import_model_memory_limit              ( "memory_limit"               );
    const std::string import_model_nvidia                    ( "nvidia"                     );
    const std::string import_model_openai                    ( "openai"                     );
    const std::string import_model_remote_model_location     ( "remote_model_location"      );
    const std::string import_model_remote_model_name         ( "remote_model_name"          );
    const std::string import_model_remote_model_provider_type( "remote_model_provider_type" );
    const std::string import_model_remote_model_type         ( "remote_model_type"          );
    const std::string import_model_sqlgpt                    ( "sqlgpt"                     );

    // Keywords for /import/model response
    const std::string import_model_kml_response( "kml_response" );

    // Keywords for /insert/records request
    const std::string insert_records_allow_partial_batch     ( "allow_partial_batch"      );
    const std::string insert_records_binary                  ( "binary"                   );
    const std::string insert_records_dry_run                 ( "dry_run"                  );
    const std::string insert_records_false                   ( "false"                    );
    const std::string insert_records_ignore_existing_pk      ( "ignore_existing_pk"       );
    const std::string insert_records_json                    ( "json"                     );
    const std::string insert_records_return_individual_errors( "return_individual_errors" );
    const std::string insert_records_return_record_ids       ( "return_record_ids"        );
    const std::string insert_records_true                    ( "true"                     );
    const std::string insert_records_truncate_strings        ( "truncate_strings"         );
    const std::string insert_records_update_on_existing_pk   ( "update_on_existing_pk"    );

    // Keywords for /insert/records response
    const std::string insert_records_bad_record_indices( "bad_record_indices" );
    const std::string insert_records_error_N           ( "error_N"            );

    // Keywords for /insert/records/fromfiles request
    const std::string insert_records_from_files_HASH                              ( "HASH"                               );
    const std::string insert_records_from_files_INTERVAL                          ( "INTERVAL"                           );
    const std::string insert_records_from_files_LIST                              ( "LIST"                               );
    const std::string insert_records_from_files_RANGE                             ( "RANGE"                              );
    const std::string insert_records_from_files_SERIES                            ( "SERIES"                             );
    const std::string insert_records_from_files_abort                             ( "abort"                              );
    const std::string insert_records_from_files_accuracy                          ( "accuracy"                           );
    const std::string insert_records_from_files_auto                              ( "auto"                               );
    const std::string insert_records_from_files_avro                              ( "avro"                               );
    const std::string insert_records_from_files_bad_record_table_limit            ( "bad_record_table_limit"             );
    const std::string insert_records_from_files_bad_record_table_limit_per_input  ( "bad_record_table_limit_per_input"   );
    const std::string insert_records_from_files_bad_record_table_name             ( "bad_record_table_name"              );
    const std::string insert_records_from_files_batch_size                        ( "batch_size"                         );
    const std::string insert_records_from_files_bzip2                             ( "bzip2"                              );
    const std::string insert_records_from_files_chunk_column_max_memory           ( "chunk_column_max_memory"            );
    const std::string insert_records_from_files_chunk_max_memory                  ( "chunk_max_memory"                   );
    const std::string insert_records_from_files_chunk_size                        ( "chunk_size"                         );
    const std::string insert_records_from_files_column_formats                    ( "column_formats"                     );
    const std::string insert_records_from_files_columns_to_load                   ( "columns_to_load"                    );
    const std::string insert_records_from_files_columns_to_skip                   ( "columns_to_skip"                    );
    const std::string insert_records_from_files_compression_type                  ( "compression_type"                   );
    const std::string insert_records_from_files_datasource_name                   ( "datasource_name"                    );
    const std::string insert_records_from_files_default_column_formats            ( "default_column_formats"             );
    const std::string insert_records_from_files_delimited_text                    ( "delimited_text"                     );
    const std::string insert_records_from_files_distributed_local                 ( "distributed_local"                  );
    const std::string insert_records_from_files_distributed_shared                ( "distributed_shared"                 );
    const std::string insert_records_from_files_dry_run                           ( "dry_run"                            );
    const std::string insert_records_from_files_earliest                          ( "earliest"                           );
    const std::string insert_records_from_files_error_handling                    ( "error_handling"                     );
    const std::string insert_records_from_files_false                             ( "false"                              );
    const std::string insert_records_from_files_file_type                         ( "file_type"                          );
    const std::string insert_records_from_files_flatten_columns                   ( "flatten_columns"                    );
    const std::string insert_records_from_files_foreign_keys                      ( "foreign_keys"                       );
    const std::string insert_records_from_files_foreign_shard_key                 ( "foreign_shard_key"                  );
    const std::string insert_records_from_files_full                              ( "full"                               );
    const std::string insert_records_from_files_gdal_configuration_options        ( "gdal_configuration_options"         );
    const std::string insert_records_from_files_gdb                               ( "gdb"                                );
    const std::string insert_records_from_files_gzip                              ( "gzip"                               );
    const std::string insert_records_from_files_head                              ( "head"                               );
    const std::string insert_records_from_files_ignore_bad_records                ( "ignore_bad_records"                 );
    const std::string insert_records_from_files_ignore_existing_pk                ( "ignore_existing_pk"                 );
    const std::string insert_records_from_files_ingestion_mode                    ( "ingestion_mode"                     );
    const std::string insert_records_from_files_is_automatic_partition            ( "is_automatic_partition"             );
    const std::string insert_records_from_files_is_replicated                     ( "is_replicated"                      );
    const std::string insert_records_from_files_is_result_table                   ( "is_result_table"                    );
    const std::string insert_records_from_files_json                              ( "json"                               );
    const std::string insert_records_from_files_kafka_consumers_per_rank          ( "kafka_consumers_per_rank"           );
    const std::string insert_records_from_files_kafka_group_id                    ( "kafka_group_id"                     );
    const std::string insert_records_from_files_kafka_offset_reset_policy         ( "kafka_offset_reset_policy"          );
    const std::string insert_records_from_files_kafka_optimistic_ingest           ( "kafka_optimistic_ingest"            );
    const std::string insert_records_from_files_kafka_subscription_cancel_after   ( "kafka_subscription_cancel_after"    );
    const std::string insert_records_from_files_kafka_type_inference_fetch_timeout( "kafka_type_inference_fetch_timeout" );
    const std::string insert_records_from_files_latest                            ( "latest"                             );
    const std::string insert_records_from_files_layer                             ( "layer"                              );
    const std::string insert_records_from_files_loading_mode                      ( "loading_mode"                       );
    const std::string insert_records_from_files_local_time_offset                 ( "local_time_offset"                  );
    const std::string insert_records_from_files_max_records_to_load               ( "max_records_to_load"                );
    const std::string insert_records_from_files_no_error_if_exists                ( "no_error_if_exists"                 );
    const std::string insert_records_from_files_none                              ( "none"                               );
    const std::string insert_records_from_files_num_tasks_per_rank                ( "num_tasks_per_rank"                 );
    const std::string insert_records_from_files_parquet                           ( "parquet"                            );
    const std::string insert_records_from_files_partition_definitions             ( "partition_definitions"              );
    const std::string insert_records_from_files_partition_keys                    ( "partition_keys"                     );
    const std::string insert_records_from_files_partition_type                    ( "partition_type"                     );
    const std::string insert_records_from_files_permissive                        ( "permissive"                         );
    const std::string insert_records_from_files_poll_interval                     ( "poll_interval"                      );
    const std::string insert_records_from_files_primary_keys                      ( "primary_keys"                       );
    const std::string insert_records_from_files_schema_registry_schema_name       ( "schema_registry_schema_name"        );
    const std::string insert_records_from_files_shapefile                         ( "shapefile"                          );
    const std::string insert_records_from_files_shard_keys                        ( "shard_keys"                         );
    const std::string insert_records_from_files_single                            ( "single"                             );
    const std::string insert_records_from_files_skip_lines                        ( "skip_lines"                         );
    const std::string insert_records_from_files_speed                             ( "speed"                              );
    const std::string insert_records_from_files_start_offsets                     ( "start_offsets"                      );
    const std::string insert_records_from_files_strategy_definition               ( "strategy_definition"                );
    const std::string insert_records_from_files_subscribe                         ( "subscribe"                          );
    const std::string insert_records_from_files_table_insert_mode                 ( "table_insert_mode"                  );
    const std::string insert_records_from_files_table_per_file                    ( "table_per_file"                     );
    const std::string insert_records_from_files_text_comment_string               ( "text_comment_string"                );
    const std::string insert_records_from_files_text_delimiter                    ( "text_delimiter"                     );
    const std::string insert_records_from_files_text_escape_character             ( "text_escape_character"              );
    const std::string insert_records_from_files_text_has_header                   ( "text_has_header"                    );
    const std::string insert_records_from_files_text_header_property_delimiter    ( "text_header_property_delimiter"     );
    const std::string insert_records_from_files_text_null_string                  ( "text_null_string"                   );
    const std::string insert_records_from_files_text_quote_character              ( "text_quote_character"               );
    const std::string insert_records_from_files_text_search_columns               ( "text_search_columns"                );
    const std::string insert_records_from_files_text_search_min_column_length     ( "text_search_min_column_length"      );
    const std::string insert_records_from_files_true                              ( "true"                               );
    const std::string insert_records_from_files_truncate_strings                  ( "truncate_strings"                   );
    const std::string insert_records_from_files_truncate_table                    ( "truncate_table"                     );
    const std::string insert_records_from_files_ttl                               ( "ttl"                                );
    const std::string insert_records_from_files_type_id                           ( "type_id"                            );
    const std::string insert_records_from_files_type_inference_mode               ( "type_inference_mode"                );
    const std::string insert_records_from_files_type_inference_only               ( "type_inference_only"                );
    const std::string insert_records_from_files_update_on_existing_pk             ( "update_on_existing_pk"              );

    // Keywords for /insert/records/frompayload request
    const std::string insert_records_from_payload_HASH                            ( "HASH"                             );
    const std::string insert_records_from_payload_INTERVAL                        ( "INTERVAL"                         );
    const std::string insert_records_from_payload_LIST                            ( "LIST"                             );
    const std::string insert_records_from_payload_RANGE                           ( "RANGE"                            );
    const std::string insert_records_from_payload_SERIES                          ( "SERIES"                           );
    const std::string insert_records_from_payload_abort                           ( "abort"                            );
    const std::string insert_records_from_payload_accuracy                        ( "accuracy"                         );
    const std::string insert_records_from_payload_auto                            ( "auto"                             );
    const std::string insert_records_from_payload_avro                            ( "avro"                             );
    const std::string insert_records_from_payload_avro_header_bytes               ( "avro_header_bytes"                );
    const std::string insert_records_from_payload_avro_num_records                ( "avro_num_records"                 );
    const std::string insert_records_from_payload_avro_schema                     ( "avro_schema"                      );
    const std::string insert_records_from_payload_avro_schemaless                 ( "avro_schemaless"                  );
    const std::string insert_records_from_payload_bad_record_table_limit          ( "bad_record_table_limit"           );
    const std::string insert_records_from_payload_bad_record_table_limit_per_input( "bad_record_table_limit_per_input" );
    const std::string insert_records_from_payload_bad_record_table_name           ( "bad_record_table_name"            );
    const std::string insert_records_from_payload_batch_size                      ( "batch_size"                       );
    const std::string insert_records_from_payload_bzip2                           ( "bzip2"                            );
    const std::string insert_records_from_payload_chunk_column_max_memory         ( "chunk_column_max_memory"          );
    const std::string insert_records_from_payload_chunk_max_memory                ( "chunk_max_memory"                 );
    const std::string insert_records_from_payload_chunk_size                      ( "chunk_size"                       );
    const std::string insert_records_from_payload_column_formats                  ( "column_formats"                   );
    const std::string insert_records_from_payload_columns_to_load                 ( "columns_to_load"                  );
    const std::string insert_records_from_payload_columns_to_skip                 ( "columns_to_skip"                  );
    const std::string insert_records_from_payload_compression_type                ( "compression_type"                 );
    const std::string insert_records_from_payload_default_column_formats          ( "default_column_formats"           );
    const std::string insert_records_from_payload_delimited_text                  ( "delimited_text"                   );
    const std::string insert_records_from_payload_distributed_local               ( "distributed_local"                );
    const std::string insert_records_from_payload_distributed_shared              ( "distributed_shared"               );
    const std::string insert_records_from_payload_dry_run                         ( "dry_run"                          );
    const std::string insert_records_from_payload_error_handling                  ( "error_handling"                   );
    const std::string insert_records_from_payload_false                           ( "false"                            );
    const std::string insert_records_from_payload_file_type                       ( "file_type"                        );
    const std::string insert_records_from_payload_flatten_columns                 ( "flatten_columns"                  );
    const std::string insert_records_from_payload_foreign_keys                    ( "foreign_keys"                     );
    const std::string insert_records_from_payload_foreign_shard_key               ( "foreign_shard_key"                );
    const std::string insert_records_from_payload_full                            ( "full"                             );
    const std::string insert_records_from_payload_gdal_configuration_options      ( "gdal_configuration_options"       );
    const std::string insert_records_from_payload_gdb                             ( "gdb"                              );
    const std::string insert_records_from_payload_gzip                            ( "gzip"                             );
    const std::string insert_records_from_payload_head                            ( "head"                             );
    const std::string insert_records_from_payload_ignore_bad_records              ( "ignore_bad_records"               );
    const std::string insert_records_from_payload_ignore_existing_pk              ( "ignore_existing_pk"               );
    const std::string insert_records_from_payload_ingestion_mode                  ( "ingestion_mode"                   );
    const std::string insert_records_from_payload_is_automatic_partition          ( "is_automatic_partition"           );
    const std::string insert_records_from_payload_is_replicated                   ( "is_replicated"                    );
    const std::string insert_records_from_payload_is_result_table                 ( "is_result_table"                  );
    const std::string insert_records_from_payload_json                            ( "json"                             );
    const std::string insert_records_from_payload_layer                           ( "layer"                            );
    const std::string insert_records_from_payload_loading_mode                    ( "loading_mode"                     );
    const std::string insert_records_from_payload_local_time_offset               ( "local_time_offset"                );
    const std::string insert_records_from_payload_max_records_to_load             ( "max_records_to_load"              );
    const std::string insert_records_from_payload_no_error_if_exists              ( "no_error_if_exists"               );
    const std::string insert_records_from_payload_none                            ( "none"                             );
    const std::string insert_records_from_payload_num_tasks_per_rank              ( "num_tasks_per_rank"               );
    const std::string insert_records_from_payload_parquet                         ( "parquet"                          );
    const std::string insert_records_from_payload_partition_definitions           ( "partition_definitions"            );
    const std::string insert_records_from_payload_partition_keys                  ( "partition_keys"                   );
    const std::string insert_records_from_payload_partition_type                  ( "partition_type"                   );
    const std::string insert_records_from_payload_permissive                      ( "permissive"                       );
    const std::string insert_records_from_payload_poll_interval                   ( "poll_interval"                    );
    const std::string insert_records_from_payload_primary_keys                    ( "primary_keys"                     );
    const std::string insert_records_from_payload_schema_registry_schema_id       ( "schema_registry_schema_id"        );
    const std::string insert_records_from_payload_schema_registry_schema_name     ( "schema_registry_schema_name"      );
    const std::string insert_records_from_payload_schema_registry_schema_version  ( "schema_registry_schema_version"   );
    const std::string insert_records_from_payload_shapefile                       ( "shapefile"                        );
    const std::string insert_records_from_payload_shard_keys                      ( "shard_keys"                       );
    const std::string insert_records_from_payload_single                          ( "single"                           );
    const std::string insert_records_from_payload_skip_lines                      ( "skip_lines"                       );
    const std::string insert_records_from_payload_speed                           ( "speed"                            );
    const std::string insert_records_from_payload_strategy_definition             ( "strategy_definition"              );
    const std::string insert_records_from_payload_subscribe                       ( "subscribe"                        );
    const std::string insert_records_from_payload_table_insert_mode               ( "table_insert_mode"                );
    const std::string insert_records_from_payload_table_per_file                  ( "table_per_file"                   );
    const std::string insert_records_from_payload_text_comment_string             ( "text_comment_string"              );
    const std::string insert_records_from_payload_text_delimiter                  ( "text_delimiter"                   );
    const std::string insert_records_from_payload_text_escape_character           ( "text_escape_character"            );
    const std::string insert_records_from_payload_text_has_header                 ( "text_has_header"                  );
    const std::string insert_records_from_payload_text_header_property_delimiter  ( "text_header_property_delimiter"   );
    const std::string insert_records_from_payload_text_null_string                ( "text_null_string"                 );
    const std::string insert_records_from_payload_text_quote_character            ( "text_quote_character"             );
    const std::string insert_records_from_payload_text_search_columns             ( "text_search_columns"              );
    const std::string insert_records_from_payload_text_search_min_column_length   ( "text_search_min_column_length"    );
    const std::string insert_records_from_payload_true                            ( "true"                             );
    const std::string insert_records_from_payload_truncate_strings                ( "truncate_strings"                 );
    const std::string insert_records_from_payload_truncate_table                  ( "truncate_table"                   );
    const std::string insert_records_from_payload_ttl                             ( "ttl"                              );
    const std::string insert_records_from_payload_type_id                         ( "type_id"                          );
    const std::string insert_records_from_payload_type_inference_mode             ( "type_inference_mode"              );
    const std::string insert_records_from_payload_type_inference_only             ( "type_inference_only"              );
    const std::string insert_records_from_payload_update_on_existing_pk           ( "update_on_existing_pk"            );

    // Keywords for /insert/records/fromquery request
    const std::string insert_records_from_query_HASH                          ( "HASH"                           );
    const std::string insert_records_from_query_INTERVAL                      ( "INTERVAL"                       );
    const std::string insert_records_from_query_LIST                          ( "LIST"                           );
    const std::string insert_records_from_query_RANGE                         ( "RANGE"                          );
    const std::string insert_records_from_query_SERIES                        ( "SERIES"                         );
    const std::string insert_records_from_query_abort                         ( "abort"                          );
    const std::string insert_records_from_query_bad_record_table_limit        ( "bad_record_table_limit"         );
    const std::string insert_records_from_query_bad_record_table_name         ( "bad_record_table_name"          );
    const std::string insert_records_from_query_batch_size                    ( "batch_size"                     );
    const std::string insert_records_from_query_chunk_size                    ( "chunk_size"                     );
    const std::string insert_records_from_query_datasource_name               ( "datasource_name"                );
    const std::string insert_records_from_query_dry_run                       ( "dry_run"                        );
    const std::string insert_records_from_query_error_handling                ( "error_handling"                 );
    const std::string insert_records_from_query_false                         ( "false"                          );
    const std::string insert_records_from_query_foreign_keys                  ( "foreign_keys"                   );
    const std::string insert_records_from_query_foreign_shard_key             ( "foreign_shard_key"              );
    const std::string insert_records_from_query_full                          ( "full"                           );
    const std::string insert_records_from_query_ignore_bad_records            ( "ignore_bad_records"             );
    const std::string insert_records_from_query_ignore_existing_pk            ( "ignore_existing_pk"             );
    const std::string insert_records_from_query_ingestion_mode                ( "ingestion_mode"                 );
    const std::string insert_records_from_query_is_automatic_partition        ( "is_automatic_partition"         );
    const std::string insert_records_from_query_is_replicated                 ( "is_replicated"                  );
    const std::string insert_records_from_query_is_result_table               ( "is_result_table"                );
    const std::string insert_records_from_query_jdbc_fetch_size               ( "jdbc_fetch_size"                );
    const std::string insert_records_from_query_jdbc_session_init_statement   ( "jdbc_session_init_statement"    );
    const std::string insert_records_from_query_no_error_if_exists            ( "no_error_if_exists"             );
    const std::string insert_records_from_query_num_splits_per_rank           ( "num_splits_per_rank"            );
    const std::string insert_records_from_query_num_tasks_per_rank            ( "num_tasks_per_rank"             );
    const std::string insert_records_from_query_partition_definitions         ( "partition_definitions"          );
    const std::string insert_records_from_query_partition_keys                ( "partition_keys"                 );
    const std::string insert_records_from_query_partition_type                ( "partition_type"                 );
    const std::string insert_records_from_query_permissive                    ( "permissive"                     );
    const std::string insert_records_from_query_primary_keys                  ( "primary_keys"                   );
    const std::string insert_records_from_query_remote_query                  ( "remote_query"                   );
    const std::string insert_records_from_query_remote_query_filter_column    ( "remote_query_filter_column"     );
    const std::string insert_records_from_query_remote_query_increasing_column( "remote_query_increasing_column" );
    const std::string insert_records_from_query_remote_query_order_by         ( "remote_query_order_by"          );
    const std::string insert_records_from_query_remote_query_partition_column ( "remote_query_partition_column"  );
    const std::string insert_records_from_query_shard_keys                    ( "shard_keys"                     );
    const std::string insert_records_from_query_strategy_definition           ( "strategy_definition"            );
    const std::string insert_records_from_query_subscribe                     ( "subscribe"                      );
    const std::string insert_records_from_query_true                          ( "true"                           );
    const std::string insert_records_from_query_truncate_strings              ( "truncate_strings"               );
    const std::string insert_records_from_query_truncate_table                ( "truncate_table"                 );
    const std::string insert_records_from_query_ttl                           ( "ttl"                            );
    const std::string insert_records_from_query_type_id                       ( "type_id"                        );
    const std::string insert_records_from_query_type_inference_only           ( "type_inference_only"            );
    const std::string insert_records_from_query_update_on_existing_pk         ( "update_on_existing_pk"          );

    // Keywords for /insert/records/random request
    const std::string insert_records_random_all            ( "all"             );
    const std::string insert_records_random_attr_name      ( "attr_name"       );
    const std::string insert_records_random_cardinality    ( "cardinality"     );
    const std::string insert_records_random_interval       ( "interval"        );
    const std::string insert_records_random_max            ( "max"             );
    const std::string insert_records_random_min            ( "min"             );
    const std::string insert_records_random_null_percentage( "null_percentage" );
    const std::string insert_records_random_seed           ( "seed"            );
    const std::string insert_records_random_track_length   ( "track_length"    );
    const std::string insert_records_random_value          ( "value"           );

    // Keywords for /insert/symbol request
    const std::string insert_symbol_color   ( "color"    );
    const std::string insert_symbol_svg     ( "svg"      );
    const std::string insert_symbol_svg_path( "svg_path" );

    // Keywords for /kill/proc request
    const std::string kill_proc_clear_execute_at_startup( "clear_execute_at_startup" );
    const std::string kill_proc_false                   ( "false"                    );
    const std::string kill_proc_run_tag                 ( "run_tag"                  );
    const std::string kill_proc_true                    ( "true"                     );

    // Keywords for /lock/table request
    const std::string lock_table_no_access ( "no_access"  );
    const std::string lock_table_read_only ( "read_only"  );
    const std::string lock_table_read_write( "read_write" );
    const std::string lock_table_status    ( "status"     );
    const std::string lock_table_write_only( "write_only" );

    // Keywords for /match/graph request
    const std::string match_graph_aggregated_output           ( "aggregated_output"            );
    const std::string match_graph_batch_tsm_mode              ( "batch_tsm_mode"               );
    const std::string match_graph_chain_width                 ( "chain_width"                  );
    const std::string match_graph_charging_candidates         ( "charging_candidates"          );
    const std::string match_graph_charging_capacity           ( "charging_capacity"            );
    const std::string match_graph_charging_penalty            ( "charging_penalty"             );
    const std::string match_graph_cluster_quality_metric      ( "cluster_quality_metric"       );
    const std::string match_graph_destination                 ( "destination"                  );
    const std::string match_graph_embedding_weights           ( "embedding_weights"            );
    const std::string match_graph_enable_reuse                ( "enable_reuse"                 );
    const std::string match_graph_even                        ( "even"                         );
    const std::string match_graph_false                       ( "false"                        );
    const std::string match_graph_filter_folding_paths        ( "filter_folding_paths"         );
    const std::string match_graph_force_undirected            ( "force_undirected"             );
    const std::string match_graph_girvan                      ( "girvan"                       );
    const std::string match_graph_gps_noise                   ( "gps_noise"                    );
    const std::string match_graph_intersection_penalty        ( "intersection_penalty"         );
    const std::string match_graph_inverse_solve               ( "inverse_solve"                );
    const std::string match_graph_left_turn_penalty           ( "left_turn_penalty"            );
    const std::string match_graph_markov_chain                ( "markov_chain"                 );
    const std::string match_graph_match_batch_solves          ( "match_batch_solves"           );
    const std::string match_graph_match_charging_stations     ( "match_charging_stations"      );
    const std::string match_graph_match_clusters              ( "match_clusters"               );
    const std::string match_graph_match_embedding             ( "match_embedding"              );
    const std::string match_graph_match_isochrone             ( "match_isochrone"              );
    const std::string match_graph_match_loops                 ( "match_loops"                  );
    const std::string match_graph_match_od_pairs              ( "match_od_pairs"               );
    const std::string match_graph_match_pattern               ( "match_pattern"                );
    const std::string match_graph_match_pickup_dropoff        ( "match_pickup_dropoff"         );
    const std::string match_graph_match_similarity            ( "match_similarity"             );
    const std::string match_graph_match_supply_demand         ( "match_supply_demand"          );
    const std::string match_graph_max_combinations            ( "max_combinations"             );
    const std::string match_graph_max_hops                    ( "max_hops"                     );
    const std::string match_graph_max_loop_level              ( "max_loop_level"               );
    const std::string match_graph_max_num_clusters            ( "max_num_clusters"             );
    const std::string match_graph_max_num_threads             ( "max_num_threads"              );
    const std::string match_graph_max_radius                  ( "max_radius"                   );
    const std::string match_graph_max_stops                   ( "max_stops"                    );
    const std::string match_graph_max_supply_combinations     ( "max_supply_combinations"      );
    const std::string match_graph_max_trip_cost               ( "max_trip_cost"                );
    const std::string match_graph_max_vector_dimension        ( "max_vector_dimension"         );
    const std::string match_graph_min_loop_level              ( "min_loop_level"               );
    const std::string match_graph_none                        ( "none"                         );
    const std::string match_graph_num_cycles                  ( "num_cycles"                   );
    const std::string match_graph_num_loops_per_cycle         ( "num_loops_per_cycle"          );
    const std::string match_graph_num_output_clusters         ( "num_output_clusters"          );
    const std::string match_graph_num_segments                ( "num_segments"                 );
    const std::string match_graph_odd                         ( "odd"                          );
    const std::string match_graph_optimization_error_tolerance( "optimization_error_tolerance" );
    const std::string match_graph_optimization_iteration_rate ( "optimization_iteration_rate"  );
    const std::string match_graph_optimization_max_iterations ( "optimization_max_iterations"  );
    const std::string match_graph_optimization_sampling_size  ( "optimization_sampling_size"   );
    const std::string match_graph_optimize_embedding_weights  ( "optimize_embedding_weights"   );
    const std::string match_graph_output_batch_size           ( "output_batch_size"            );
    const std::string match_graph_output_tracks               ( "output_tracks"                );
    const std::string match_graph_paired_similarity           ( "paired_similarity"            );
    const std::string match_graph_partial_loading             ( "partial_loading"              );
    const std::string match_graph_permute_supplies            ( "permute_supplies"             );
    const std::string match_graph_restricted_type             ( "restricted_type"              );
    const std::string match_graph_right_turn_penalty          ( "right_turn_penalty"           );
    const std::string match_graph_round_trip                  ( "round_trip"                   );
    const std::string match_graph_search_limit                ( "search_limit"                 );
    const std::string match_graph_search_radius               ( "search_radius"                );
    const std::string match_graph_server_id                   ( "server_id"                    );
    const std::string match_graph_service_limit               ( "service_limit"                );
    const std::string match_graph_service_radius              ( "service_radius"               );
    const std::string match_graph_sharp_turn_penalty          ( "sharp_turn_penalty"           );
    const std::string match_graph_source                      ( "source"                       );
    const std::string match_graph_spectral                    ( "spectral"                     );
    const std::string match_graph_traversal_node_limit        ( "traversal_node_limit"         );
    const std::string match_graph_true                        ( "true"                         );
    const std::string match_graph_unit_unloading_cost         ( "unit_unloading_cost"          );

    // Keywords for /merge/records request
    const std::string merge_records_chunk_column_max_memory( "chunk_column_max_memory" );
    const std::string merge_records_chunk_max_memory       ( "chunk_max_memory"        );
    const std::string merge_records_chunk_size             ( "chunk_size"              );
    const std::string merge_records_collection_name        ( "collection_name"         );
    const std::string merge_records_create_temp_table      ( "create_temp_table"       );
    const std::string merge_records_false                  ( "false"                   );
    const std::string merge_records_is_replicated          ( "is_replicated"           );
    const std::string merge_records_persist                ( "persist"                 );
    const std::string merge_records_true                   ( "true"                    );
    const std::string merge_records_ttl                    ( "ttl"                     );
    const std::string merge_records_view_id                ( "view_id"                 );

    // Keywords for /merge/records response
    const std::string merge_records_qualified_table_name( "qualified_table_name" );

    // Keywords for /modify/graph request
    const std::string modify_graph_add_table_monitor          ( "add_table_monitor"           );
    const std::string modify_graph_add_turns                  ( "add_turns"                   );
    const std::string modify_graph_allow_multiple_edges       ( "allow_multiple_edges"        );
    const std::string modify_graph_embedding_table            ( "embedding_table"             );
    const std::string modify_graph_enable_graph_draw          ( "enable_graph_draw"           );
    const std::string modify_graph_export_create_results      ( "export_create_results"       );
    const std::string modify_graph_false                      ( "false"                       );
    const std::string modify_graph_graph_table                ( "graph_table"                 );
    const std::string modify_graph_label_delimiter            ( "label_delimiter"             );
    const std::string modify_graph_remove_label_only          ( "remove_label_only"           );
    const std::string modify_graph_restriction_threshold_value( "restriction_threshold_value" );
    const std::string modify_graph_save_persist               ( "save_persist"                );
    const std::string modify_graph_true                       ( "true"                        );
    const std::string modify_graph_turn_angle                 ( "turn_angle"                  );
    const std::string modify_graph_use_rtree                  ( "use_rtree"                   );

    // Keywords for /query/graph request
    const std::string query_graph_and_labels         ( "and_labels"          );
    const std::string query_graph_false              ( "false"               );
    const std::string query_graph_find_common_labels ( "find_common_labels"  );
    const std::string query_graph_force_undirected   ( "force_undirected"    );
    const std::string query_graph_limit              ( "limit"               );
    const std::string query_graph_output_charn_length( "output_charn_length" );
    const std::string query_graph_output_wkt_path    ( "output_wkt_path"     );
    const std::string query_graph_server_id          ( "server_id"           );
    const std::string query_graph_true               ( "true"                );

    // Keywords for /repartition/graph request
    const std::string repartition_graph_new_graph_name       ( "new_graph_name"        );
    const std::string repartition_graph_source_node          ( "source_node"           );
    const std::string repartition_graph_sql_request_avro_json( "sql_request_avro_json" );

    // Keywords for /reserve/resource request
    const std::string reserve_resource_change_owner   ( "change_owner"    );
    const std::string reserve_resource_delete         ( "delete"          );
    const std::string reserve_resource_evict          ( "evict"           );
    const std::string reserve_resource_get_size       ( "get_size"        );
    const std::string reserve_resource_notify_untiered( "notify_untiered" );
    const std::string reserve_resource_tier           ( "tier"            );

    // Keywords for /revoke/permission request
    const std::string revoke_permission_admin        ( "admin"         );
    const std::string revoke_permission_columns      ( "columns"       );
    const std::string revoke_permission_connect      ( "connect"       );
    const std::string revoke_permission_context      ( "context"       );
    const std::string revoke_permission_create       ( "create"        );
    const std::string revoke_permission_credential   ( "credential"    );
    const std::string revoke_permission_datasink     ( "datasink"      );
    const std::string revoke_permission_datasource   ( "datasource"    );
    const std::string revoke_permission_delete       ( "delete"        );
    const std::string revoke_permission_directory    ( "directory"     );
    const std::string revoke_permission_execute      ( "execute"       );
    const std::string revoke_permission_graph        ( "graph"         );
    const std::string revoke_permission_insert       ( "insert"        );
    const std::string revoke_permission_proc         ( "proc"          );
    const std::string revoke_permission_read         ( "read"          );
    const std::string revoke_permission_schema       ( "schema"        );
    const std::string revoke_permission_sql_proc     ( "sql_proc"      );
    const std::string revoke_permission_system       ( "system"        );
    const std::string revoke_permission_table        ( "table"         );
    const std::string revoke_permission_table_monitor( "table_monitor" );
    const std::string revoke_permission_update       ( "update"        );
    const std::string revoke_permission_user_admin   ( "user_admin"    );
    const std::string revoke_permission_write        ( "write"         );

    // Keywords for /revoke/permission/credential request
    const std::string revoke_permission_credential_credential_admin( "credential_admin" );
    const std::string revoke_permission_credential_credential_read ( "credential_read"  );

    // Keywords for /revoke/permission/datasource request
    const std::string revoke_permission_datasource_admin  ( "admin"   );
    const std::string revoke_permission_datasource_connect( "connect" );

    // Keywords for /revoke/permission/directory request
    const std::string revoke_permission_directory_directory_read ( "directory_read"  );
    const std::string revoke_permission_directory_directory_write( "directory_write" );

    // Keywords for /revoke/permission/proc request
    const std::string revoke_permission_proc_proc_admin  ( "proc_admin"   );
    const std::string revoke_permission_proc_proc_execute( "proc_execute" );

    // Keywords for /revoke/permission/system request
    const std::string revoke_permission_system_system_admin     ( "system_admin"      );
    const std::string revoke_permission_system_system_read      ( "system_read"       );
    const std::string revoke_permission_system_system_user_admin( "system_user_admin" );
    const std::string revoke_permission_system_system_write     ( "system_write"      );

    // Keywords for /revoke/permission/table request
    const std::string revoke_permission_table_columns     ( "columns"      );
    const std::string revoke_permission_table_table_admin ( "table_admin"  );
    const std::string revoke_permission_table_table_delete( "table_delete" );
    const std::string revoke_permission_table_table_insert( "table_insert" );
    const std::string revoke_permission_table_table_read  ( "table_read"   );
    const std::string revoke_permission_table_table_update( "table_update" );

    // Keywords for /show/container/registry response
    const std::string show_container_registry_kml_response( "kml_response" );

    // Keywords for /show/datasink response
    const std::string show_datasink_destination     ( "destination"      );
    const std::string show_datasink_kafka_topic_name( "kafka_topic_name" );
    const std::string show_datasink_user_name       ( "user_name"        );

    // Keywords for /show/datasource response
    const std::string show_datasource_hdfs                ( "hdfs"                 );
    const std::string show_datasource_hdfs_kerberos_keytab( "hdfs_kerberos_keytab" );
    const std::string show_datasource_location            ( "location"             );
    const std::string show_datasource_s3                  ( "s3"                   );
    const std::string show_datasource_s3_bucket_name      ( "s3_bucket_name"       );
    const std::string show_datasource_s3_region           ( "s3_region"            );
    const std::string show_datasource_user_name           ( "user_name"            );

    // Keywords for /show/environment request
    const std::string show_environment_false                 ( "false"                  );
    const std::string show_environment_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string show_environment_true                  ( "true"                   );

    // Keywords for /show/files response
    const std::string show_files_multipart_uploads( "multipart_uploads" );

    // Keywords for /show/functions request
    const std::string show_functions_false                      ( "false"                       );
    const std::string show_functions_properties                 ( "properties"                  );
    const std::string show_functions_show_aggregate_functions   ( "show_aggregate_functions"    );
    const std::string show_functions_show_cast_functions        ( "show_cast_functions"         );
    const std::string show_functions_show_scalar_functions      ( "show_scalar_functions"       );
    const std::string show_functions_show_sql_procedures        ( "show_sql_procedures"         );
    const std::string show_functions_show_user_defined_functions( "show_user_defined_functions" );
    const std::string show_functions_true                       ( "true"                        );

    // Keywords for /show/functions response
    const std::string show_functions_aggregate       ( "aggregate"        );
    const std::string show_functions_cast            ( "cast"             );
    const std::string show_functions_nondeterministic( "nondeterministic" );
    const std::string show_functions_scalar          ( "scalar"           );
    const std::string show_functions_sql             ( "sql"              );
    const std::string show_functions_udf             ( "udf"              );

    // Keywords for /show/graph request
    const std::string show_graph_false                ( "false"                 );
    const std::string show_graph_server_id            ( "server_id"             );
    const std::string show_graph_show_original_request( "show_original_request" );
    const std::string show_graph_true                 ( "true"                  );

    // Keywords for /show/model response
    const std::string show_model_kml_response( "kml_response" );

    // Keywords for /show/proc request
    const std::string show_proc_false        ( "false"         );
    const std::string show_proc_include_files( "include_files" );
    const std::string show_proc_true         ( "true"          );

    // Keywords for /show/proc response
    const std::string show_proc_distributed   ( "distributed"    );
    const std::string show_proc_nondistributed( "nondistributed" );

    // Keywords for /show/proc/status request
    const std::string show_proc_status_clear_complete( "clear_complete" );
    const std::string show_proc_status_false         ( "false"          );
    const std::string show_proc_status_run_tag       ( "run_tag"        );
    const std::string show_proc_status_true          ( "true"           );

    // Keywords for /show/proc/status response
    const std::string show_proc_status_complete( "complete" );
    const std::string show_proc_status_error   ( "error"    );
    const std::string show_proc_status_killed  ( "killed"   );
    const std::string show_proc_status_none    ( "none"     );
    const std::string show_proc_status_running ( "running"  );
    const std::string show_proc_status_stderr  ( "stderr"   );
    const std::string show_proc_status_stdout  ( "stdout"   );

    // Keywords for /show/resource/objects request
    const std::string show_resource_objects_evictable           ( "evictable"            );
    const std::string show_resource_objects_expression          ( "expression"           );
    const std::string show_resource_objects_id                  ( "id"                   );
    const std::string show_resource_objects_limit               ( "limit"                );
    const std::string show_resource_objects_order_by            ( "order_by"             );
    const std::string show_resource_objects_owner_resource_group( "owner_resource_group" );
    const std::string show_resource_objects_priority            ( "priority"             );
    const std::string show_resource_objects_size                ( "size"                 );
    const std::string show_resource_objects_table_names         ( "table_names"          );
    const std::string show_resource_objects_tier                ( "tier"                 );
    const std::string show_resource_objects_tiers               ( "tiers"                );

    // Keywords for /show/resourcegroups request
    const std::string show_resource_groups_false              ( "false"               );
    const std::string show_resource_groups_show_default_group ( "show_default_group"  );
    const std::string show_resource_groups_show_default_values( "show_default_values" );
    const std::string show_resource_groups_show_tier_usage    ( "show_tier_usage"     );
    const std::string show_resource_groups_true               ( "true"                );

    // Keywords for /show/schema request
    const std::string show_schema_false                 ( "false"                  );
    const std::string show_schema_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string show_schema_true                  ( "true"                   );

    // Keywords for /show/security request
    const std::string show_security_false            ( "false"             );
    const std::string show_security_show_current_user( "show_current_user" );
    const std::string show_security_true             ( "true"              );

    // Keywords for /show/security response
    const std::string show_security_external_user( "external_user" );
    const std::string show_security_internal_user( "internal_user" );
    const std::string show_security_role         ( "role"          );

    // Keywords for /show/sql/proc request
    const std::string show_sql_proc_false                 ( "false"                  );
    const std::string show_sql_proc_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string show_sql_proc_true                  ( "true"                   );

    // Keywords for /show/sql/proc response
    const std::string show_sql_proc_execute_as        ( "execute_as"         );
    const std::string show_sql_proc_execute_interval  ( "execute_interval"   );
    const std::string show_sql_proc_execute_start_time( "execute_start_time" );
    const std::string show_sql_proc_execute_stop_time ( "execute_stop_time"  );

    // Keywords for /show/statistics request
    const std::string show_statistics_false                 ( "false"                  );
    const std::string show_statistics_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string show_statistics_true                  ( "true"                   );

    // Keywords for /show/system/properties request
    const std::string show_system_properties_properties( "properties" );

    // Keywords for /show/system/properties response
    const std::string show_system_properties_FALSE                          ( "FALSE"                           );
    const std::string show_system_properties_TRUE                           ( "TRUE"                            );
    const std::string show_system_properties_conf_enable_ha                 ( "conf.enable_ha"                  );
    const std::string show_system_properties_conf_enable_worker_http_servers( "conf.enable_worker_http_servers" );
    const std::string show_system_properties_conf_ha_ring_head_nodes        ( "conf.ha_ring_head_nodes"         );
    const std::string show_system_properties_conf_hm_http_port              ( "conf.hm_http_port"               );
    const std::string show_system_properties_conf_worker_http_server_ips    ( "conf.worker_http_server_ips"     );
    const std::string show_system_properties_conf_worker_http_server_ports  ( "conf.worker_http_server_ports"   );

    // Keywords for /show/table request
    const std::string show_table_dependencies          ( "dependencies"           );
    const std::string show_table_force_synchronous     ( "force_synchronous"      );
    const std::string show_table_get_cached_sizes      ( "get_cached_sizes"       );
    const std::string show_table_get_column_info       ( "get_column_info"        );
    const std::string show_table_get_sizes             ( "get_sizes"              );
    const std::string show_table_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string show_table_show_children         ( "show_children"          );

    // Keywords for /show/table response
    const std::string show_table_COLLECTION                          ( "COLLECTION"                           );
    const std::string show_table_HASH                                ( "HASH"                                 );
    const std::string show_table_INTERVAL                            ( "INTERVAL"                             );
    const std::string show_table_JOIN                                ( "JOIN"                                 );
    const std::string show_table_LIST                                ( "LIST"                                 );
    const std::string show_table_LOGICAL_EXTERNAL_TABLE              ( "LOGICAL_EXTERNAL_TABLE"               );
    const std::string show_table_LOGICAL_VIEW                        ( "LOGICAL_VIEW"                         );
    const std::string show_table_MATERIALIZED_EXTERNAL_TABLE         ( "MATERIALIZED_EXTERNAL_TABLE"          );
    const std::string show_table_MATERIALIZED_VIEW                   ( "MATERIALIZED_VIEW"                    );
    const std::string show_table_MATERIALIZED_VIEW_MEMBER            ( "MATERIALIZED_VIEW_MEMBER"             );
    const std::string show_table_MATERIALIZED_VIEW_UNDER_CONSTRUCTION( "MATERIALIZED_VIEW_UNDER_CONSTRUCTION" );
    const std::string show_table_NONE                                ( "NONE"                                 );
    const std::string show_table_RANGE                               ( "RANGE"                                );
    const std::string show_table_REPLICATED                          ( "REPLICATED"                           );
    const std::string show_table_RESULT_TABLE                        ( "RESULT_TABLE"                         );
    const std::string show_table_SCHEMA                              ( "SCHEMA"                               );
    const std::string show_table_SERIES                              ( "SERIES"                               );
    const std::string show_table_VIEW                                ( "VIEW"                                 );
    const std::string show_table_alternate_shard_keys                ( "alternate_shard_keys"                 );
    const std::string show_table_attribute_indexes                   ( "attribute_indexes"                    );
    const std::string show_table_collection_names                    ( "collection_names"                     );
    const std::string show_table_column_info                         ( "column_info"                          );
    const std::string show_table_compressed_columns                  ( "compressed_columns"                   );
    const std::string show_table_create_projection                   ( "create_projection"                    );
    const std::string show_table_create_table                        ( "create_table"                         );
    const std::string show_table_create_union                        ( "create_union"                         );
    const std::string show_table_datasource_subscriptions            ( "datasource_subscriptions"             );
    const std::string show_table_disk                                ( "disk"                                 );
    const std::string show_table_foreign_keys                        ( "foreign_keys"                         );
    const std::string show_table_foreign_shard_key                   ( "foreign_shard_key"                    );
    const std::string show_table_global_access_mode                  ( "global_access_mode"                   );
    const std::string show_table_is_automatic_partition              ( "is_automatic_partition"               );
    const std::string show_table_is_dirty                            ( "is_dirty"                             );
    const std::string show_table_is_view_persisted                   ( "is_view_persisted"                    );
    const std::string show_table_last_refresh_time                   ( "last_refresh_time"                    );
    const std::string show_table_memory                              ( "memory"                               );
    const std::string show_table_next_refresh_time                   ( "next_refresh_time"                    );
    const std::string show_table_no_access                           ( "no_access"                            );
    const std::string show_table_null_modifying_columns              ( "null_modifying_columns"               );
    const std::string show_table_owner_resource_group                ( "owner_resource_group"                 );
    const std::string show_table_partition_definitions               ( "partition_definitions"                );
    const std::string show_table_partition_keys                      ( "partition_keys"                       );
    const std::string show_table_partition_type                      ( "partition_type"                       );
    const std::string show_table_primary_key_type                    ( "primary_key_type"                     );
    const std::string show_table_protected                           ( "protected"                            );
    const std::string show_table_read_only                           ( "read_only"                            );
    const std::string show_table_read_write                          ( "read_write"                           );
    const std::string show_table_record_bytes                        ( "record_bytes"                         );
    const std::string show_table_refresh_method                      ( "refresh_method"                       );
    const std::string show_table_refresh_period                      ( "refresh_period"                       );
    const std::string show_table_refresh_start_time                  ( "refresh_start_time"                   );
    const std::string show_table_refresh_stop_time                   ( "refresh_stop_time"                    );
    const std::string show_table_remaining_table_ttl                 ( "remaining_table_ttl"                  );
    const std::string show_table_request_avro_json                   ( "request_avro_json"                    );
    const std::string show_table_request_avro_type                   ( "request_avro_type"                    );
    const std::string show_table_schema_name                         ( "schema_name"                          );
    const std::string show_table_table_ttl                           ( "table_ttl"                            );
    const std::string show_table_total_bytes                         ( "total_bytes"                          );
    const std::string show_table_user_chunk_column_max_memory        ( "user_chunk_column_max_memory"         );
    const std::string show_table_user_chunk_max_memory               ( "user_chunk_max_memory"                );
    const std::string show_table_user_chunk_size                     ( "user_chunk_size"                      );
    const std::string show_table_view_table_name                     ( "view_table_name"                      );
    const std::string show_table_write_only                          ( "write_only"                           );

    // Keywords for /show/table request and response
    const std::string show_table_false( "false" );
    const std::string show_table_true ( "true"  );

    // Keywords for /show/tablemonitors response
    const std::string show_table_monitors_datasink_json                        ( "datasink_json"                         );
    const std::string show_table_monitors_materialized_view_for_change_detector( "materialized_view_for_change_detector" );
    const std::string show_table_monitors_materialized_view_for_filter         ( "materialized_view_for_filter"          );
    const std::string show_table_monitors_monitor_type                         ( "monitor_type"                          );
    const std::string show_table_monitors_references                           ( "references"                            );
    const std::string show_table_monitors_type_schema                          ( "type_schema"                           );

    // Keywords for /show/types request
    const std::string show_types_false        ( "false"         );
    const std::string show_types_no_join_types( "no_join_types" );
    const std::string show_types_true         ( "true"          );

    // Keywords for /show/wal request
    const std::string show_wal_false        ( "false"         );
    const std::string show_wal_show_settings( "show_settings" );
    const std::string show_wal_true         ( "true"          );

    // Keywords for /solve/graph request
    const std::string solve_graph_ALLPATHS             ( "ALLPATHS"              );
    const std::string solve_graph_BACKHAUL_ROUTING     ( "BACKHAUL_ROUTING"      );
    const std::string solve_graph_CENTRALITY           ( "CENTRALITY"            );
    const std::string solve_graph_CLOSENESS            ( "CLOSENESS"             );
    const std::string solve_graph_INVERSE_SHORTEST_PATH( "INVERSE_SHORTEST_PATH" );
    const std::string solve_graph_MULTIPLE_ROUTING     ( "MULTIPLE_ROUTING"      );
    const std::string solve_graph_PAGE_RANK            ( "PAGE_RANK"             );
    const std::string solve_graph_PROBABILITY_RANK     ( "PROBABILITY_RANK"      );
    const std::string solve_graph_SHORTEST_PATH        ( "SHORTEST_PATH"         );
    const std::string solve_graph_STATS_ALL            ( "STATS_ALL"             );
    const std::string solve_graph_astar                ( "astar"                 );
    const std::string solve_graph_astar_radius         ( "astar_radius"          );
    const std::string solve_graph_convergence_limit    ( "convergence_limit"     );
    const std::string solve_graph_false                ( "false"                 );
    const std::string solve_graph_intersection_penalty ( "intersection_penalty"  );
    const std::string solve_graph_left_turn_penalty    ( "left_turn_penalty"     );
    const std::string solve_graph_max_iterations       ( "max_iterations"        );
    const std::string solve_graph_max_num_combinations ( "max_num_combinations"  );
    const std::string solve_graph_max_runs             ( "max_runs"              );
    const std::string solve_graph_max_solution_radius  ( "max_solution_radius"   );
    const std::string solve_graph_max_solution_targets ( "max_solution_targets"  );
    const std::string solve_graph_min_solution_radius  ( "min_solution_radius"   );
    const std::string solve_graph_none                 ( "none"                  );
    const std::string solve_graph_num_best_paths       ( "num_best_paths"        );
    const std::string solve_graph_output_clusters      ( "output_clusters"       );
    const std::string solve_graph_output_edge_path     ( "output_edge_path"      );
    const std::string solve_graph_output_wkt_path      ( "output_wkt_path"       );
    const std::string solve_graph_right_turn_penalty   ( "right_turn_penalty"    );
    const std::string solve_graph_server_id            ( "server_id"             );
    const std::string solve_graph_sharp_turn_penalty   ( "sharp_turn_penalty"    );
    const std::string solve_graph_solve_heuristic      ( "solve_heuristic"       );
    const std::string solve_graph_true                 ( "true"                  );
    const std::string solve_graph_uniform_weights      ( "uniform_weights"       );

    // Keywords for /update/records request
    const std::string update_records_binary                            ( "binary"                             );
    const std::string update_records_bypass_safety_checks              ( "bypass_safety_checks"               );
    const std::string update_records_false                             ( "false"                              );
    const std::string update_records_global_expression                 ( "global_expression"                  );
    const std::string update_records_ignore_existing_pk                ( "ignore_existing_pk"                 );
    const std::string update_records_json                              ( "json"                               );
    const std::string update_records_record_id                         ( "record_id"                          );
    const std::string update_records_true                              ( "true"                               );
    const std::string update_records_truncate_strings                  ( "truncate_strings"                   );
    const std::string update_records_update_on_existing_pk             ( "update_on_existing_pk"              );
    const std::string update_records_update_partition                  ( "update_partition"                   );
    const std::string update_records_use_expressions_in_new_values_maps( "use_expressions_in_new_values_maps" );

    // Keywords for /upload/files request
    const std::string upload_files_base64                      ( "base64"                       );
    const std::string upload_files_cancel                      ( "cancel"                       );
    const std::string upload_files_complete                    ( "complete"                     );
    const std::string upload_files_delete_if_exists            ( "delete_if_exists"             );
    const std::string upload_files_false                       ( "false"                        );
    const std::string upload_files_file_encoding               ( "file_encoding"                );
    const std::string upload_files_init                        ( "init"                         );
    const std::string upload_files_multipart_operation         ( "multipart_operation"          );
    const std::string upload_files_multipart_upload_part_number( "multipart_upload_part_number" );
    const std::string upload_files_multipart_upload_uuid       ( "multipart_upload_uuid"        );
    const std::string upload_files_none                        ( "none"                         );
    const std::string upload_files_true                        ( "true"                         );
    const std::string upload_files_upload_part                 ( "upload_part"                  );

    // Keywords for /visualize/getfeatureinfo request
    const std::string visualize_get_feature_info_auto_column_selection( "auto_column_selection" );
    const std::string visualize_get_feature_info_binary               ( "binary"                );
    const std::string visualize_get_feature_info_false                ( "false"                 );
    const std::string visualize_get_feature_info_geojson              ( "geojson"               );
    const std::string visualize_get_feature_info_html                 ( "html"                  );
    const std::string visualize_get_feature_info_json                 ( "json"                  );
    const std::string visualize_get_feature_info_plate_carree         ( "plate_carree"          );
    const std::string visualize_get_feature_info_true                 ( "true"                  );
    const std::string visualize_get_feature_info_web_mercator         ( "web_mercator"          );

    // Keywords for /visualize/image request
    const std::string visualize_image_102100                        ( "102100"                         );
    const std::string visualize_image_3857                          ( "3857"                           );
    const std::string visualize_image_900913                        ( "900913"                         );
    const std::string visualize_image_EPSG_102100                   ( "EPSG:102100"                    );
    const std::string visualize_image_EPSG_3857                     ( "EPSG:3857"                      );
    const std::string visualize_image_EPSG_4326                     ( "EPSG:4326"                      );
    const std::string visualize_image_EPSG_900913                   ( "EPSG:900913"                    );
    const std::string visualize_image_PLATE_CARREE                  ( "PLATE_CARREE"                   );
    const std::string visualize_image_WEB_MERCATOR                  ( "WEB_MERCATOR"                   );
    const std::string visualize_image_alpha_blending                ( "alpha_blending"                 );
    const std::string visualize_image_antialiasing                  ( "antialiasing"                   );
    const std::string visualize_image_circle                        ( "circle"                         );
    const std::string visualize_image_dash                          ( "dash"                           );
    const std::string visualize_image_diamond                       ( "diamond"                        );
    const std::string visualize_image_do_points                     ( "do_points"                      );
    const std::string visualize_image_do_shapes                     ( "do_shapes"                      );
    const std::string visualize_image_do_symbology                  ( "do_symbology"                   );
    const std::string visualize_image_do_tracks                     ( "do_tracks"                      );
    const std::string visualize_image_dot                           ( "dot"                            );
    const std::string visualize_image_false                         ( "false"                          );
    const std::string visualize_image_feather                       ( "feather"                        );
    const std::string visualize_image_hashlineangles                ( "hashlineangles"                 );
    const std::string visualize_image_hashlinecolors                ( "hashlinecolors"                 );
    const std::string visualize_image_hashlineintervals             ( "hashlineintervals"              );
    const std::string visualize_image_hashlinelens                  ( "hashlinelens"                   );
    const std::string visualize_image_hashlinewidths                ( "hashlinewidths"                 );
    const std::string visualize_image_hollowcircle                  ( "hollowcircle"                   );
    const std::string visualize_image_hollowdiamond                 ( "hollowdiamond"                  );
    const std::string visualize_image_hollowsquare                  ( "hollowsquare"                   );
    const std::string visualize_image_hollowsquarewithplus          ( "hollowsquarewithplus"           );
    const std::string visualize_image_none                          ( "none"                           );
    const std::string visualize_image_order_classes                 ( "order_classes"                  );
    const std::string visualize_image_order_layers                  ( "order_layers"                   );
    const std::string visualize_image_oriented_arrow                ( "oriented_arrow"                 );
    const std::string visualize_image_oriented_triangle             ( "oriented_triangle"              );
    const std::string visualize_image_pipe                          ( "pipe"                           );
    const std::string visualize_image_plus                          ( "plus"                           );
    const std::string visualize_image_pointcolor_attr               ( "pointcolor_attr"                );
    const std::string visualize_image_pointcolors                   ( "pointcolors"                    );
    const std::string visualize_image_pointoffset_x                 ( "pointoffset_x"                  );
    const std::string visualize_image_pointoffset_y                 ( "pointoffset_y"                  );
    const std::string visualize_image_pointshapes                   ( "pointshapes"                    );
    const std::string visualize_image_pointsizes                    ( "pointsizes"                     );
    const std::string visualize_image_shape_renderer                ( "shape_renderer"                 );
    const std::string visualize_image_shapefillcolor_attr           ( "shapefillcolor_attr"            );
    const std::string visualize_image_shapefillcolors               ( "shapefillcolors"                );
    const std::string visualize_image_shapelinecolors               ( "shapelinecolors"                );
    const std::string visualize_image_shapelinepatternlen           ( "shapelinepatternlen"            );
    const std::string visualize_image_shapelinepatterns             ( "shapelinepatterns"              );
    const std::string visualize_image_shapelinewidths               ( "shapelinewidths"                );
    const std::string visualize_image_square                        ( "square"                         );
    const std::string visualize_image_symbolcode                    ( "symbolcode"                     );
    const std::string visualize_image_symbolrotations               ( "symbolrotations"                );
    const std::string visualize_image_track_id_column_name          ( "track_id_column_name"           );
    const std::string visualize_image_track_order_column_name       ( "track_order_column_name"        );
    const std::string visualize_image_track_simplification_threshold( "track_simplification_threshold" );
    const std::string visualize_image_trackheadcolors               ( "trackheadcolors"                );
    const std::string visualize_image_trackheadshapes               ( "trackheadshapes"                );
    const std::string visualize_image_trackheadsizes                ( "trackheadsizes"                 );
    const std::string visualize_image_tracklinecolors               ( "tracklinecolors"                );
    const std::string visualize_image_tracklinewidths               ( "tracklinewidths"                );
    const std::string visualize_image_trackmarkercolors             ( "trackmarkercolors"              );
    const std::string visualize_image_trackmarkershapes             ( "trackmarkershapes"              );
    const std::string visualize_image_trackmarkersizes              ( "trackmarkersizes"               );
    const std::string visualize_image_true                          ( "true"                           );
    const std::string visualize_image_use_point_renderer            ( "use_point_renderer"             );

    // Keywords for /visualize/image/chart request
    const std::string visualize_image_chart_base64        ( "base64"         );
    const std::string visualize_image_chart_cb_delimiter  ( "cb_delimiter"   );
    const std::string visualize_image_chart_cb_pointcolors( "cb_pointcolors" );
    const std::string visualize_image_chart_cb_pointshapes( "cb_pointshapes" );
    const std::string visualize_image_chart_cb_pointsizes ( "cb_pointsizes"  );
    const std::string visualize_image_chart_circle        ( "circle"         );
    const std::string visualize_image_chart_diamond       ( "diamond"        );
    const std::string visualize_image_chart_hollowcircle  ( "hollowcircle"   );
    const std::string visualize_image_chart_hollowdiamond ( "hollowdiamond"  );
    const std::string visualize_image_chart_hollowsquare  ( "hollowsquare"   );
    const std::string visualize_image_chart_image_encoding( "image_encoding" );
    const std::string visualize_image_chart_jitter_x      ( "jitter_x"       );
    const std::string visualize_image_chart_jitter_y      ( "jitter_y"       );
    const std::string visualize_image_chart_log           ( "log"            );
    const std::string visualize_image_chart_min_max_scaled( "min_max_scaled" );
    const std::string visualize_image_chart_none          ( "none"           );
    const std::string visualize_image_chart_plot_all      ( "plot_all"       );
    const std::string visualize_image_chart_pointcolor    ( "pointcolor"     );
    const std::string visualize_image_chart_pointshape    ( "pointshape"     );
    const std::string visualize_image_chart_pointsize     ( "pointsize"      );
    const std::string visualize_image_chart_scale_type_x  ( "scale_type_x"   );
    const std::string visualize_image_chart_scale_type_y  ( "scale_type_y"   );
    const std::string visualize_image_chart_square        ( "square"         );
    const std::string visualize_image_chart_x_order_by    ( "x_order_by"     );
    const std::string visualize_image_chart_y_order_by    ( "y_order_by"     );

    // Keywords for /visualize/image/chart response
    const std::string visualize_image_chart_location_x     ( "location_x"      );
    const std::string visualize_image_chart_location_y     ( "location_y"      );
    const std::string visualize_image_chart_sorted_x_values( "sorted_x_values" );
    const std::string visualize_image_chart_sorted_y_values( "sorted_y_values" );

    // Keywords for /visualize/image/classbreak request
    const std::string visualize_image_classbreak_102100                        ( "102100"                         );
    const std::string visualize_image_classbreak_3857                          ( "3857"                           );
    const std::string visualize_image_classbreak_900913                        ( "900913"                         );
    const std::string visualize_image_classbreak_EPSG_102100                   ( "EPSG:102100"                    );
    const std::string visualize_image_classbreak_EPSG_3857                     ( "EPSG:3857"                      );
    const std::string visualize_image_classbreak_EPSG_4326                     ( "EPSG:4326"                      );
    const std::string visualize_image_classbreak_EPSG_900913                   ( "EPSG:900913"                    );
    const std::string visualize_image_classbreak_PLATE_CARREE                  ( "PLATE_CARREE"                   );
    const std::string visualize_image_classbreak_WEB_MERCATOR                  ( "WEB_MERCATOR"                   );
    const std::string visualize_image_classbreak_alpha_blending                ( "alpha_blending"                 );
    const std::string visualize_image_classbreak_antialiasing                  ( "antialiasing"                   );
    const std::string visualize_image_classbreak_cb_pointalphas                ( "cb_pointalphas"                 );
    const std::string visualize_image_classbreak_circle                        ( "circle"                         );
    const std::string visualize_image_classbreak_dash                          ( "dash"                           );
    const std::string visualize_image_classbreak_diamond                       ( "diamond"                        );
    const std::string visualize_image_classbreak_do_points                     ( "do_points"                      );
    const std::string visualize_image_classbreak_do_shapes                     ( "do_shapes"                      );
    const std::string visualize_image_classbreak_do_symbology                  ( "do_symbology"                   );
    const std::string visualize_image_classbreak_do_tracks                     ( "do_tracks"                      );
    const std::string visualize_image_classbreak_dot                           ( "dot"                            );
    const std::string visualize_image_classbreak_false                         ( "false"                          );
    const std::string visualize_image_classbreak_feather                       ( "feather"                        );
    const std::string visualize_image_classbreak_hashlineangles                ( "hashlineangles"                 );
    const std::string visualize_image_classbreak_hashlinecolors                ( "hashlinecolors"                 );
    const std::string visualize_image_classbreak_hashlineintervals             ( "hashlineintervals"              );
    const std::string visualize_image_classbreak_hashlinelens                  ( "hashlinelens"                   );
    const std::string visualize_image_classbreak_hashlinewidths                ( "hashlinewidths"                 );
    const std::string visualize_image_classbreak_hollowcircle                  ( "hollowcircle"                   );
    const std::string visualize_image_classbreak_hollowdiamond                 ( "hollowdiamond"                  );
    const std::string visualize_image_classbreak_hollowsquare                  ( "hollowsquare"                   );
    const std::string visualize_image_classbreak_hollowsquarewithplus          ( "hollowsquarewithplus"           );
    const std::string visualize_image_classbreak_none                          ( "none"                           );
    const std::string visualize_image_classbreak_order_classes                 ( "order_classes"                  );
    const std::string visualize_image_classbreak_oriented_arrow                ( "oriented_arrow"                 );
    const std::string visualize_image_classbreak_oriented_triangle             ( "oriented_triangle"              );
    const std::string visualize_image_classbreak_pipe                          ( "pipe"                           );
    const std::string visualize_image_classbreak_plus                          ( "plus"                           );
    const std::string visualize_image_classbreak_pointcolors                   ( "pointcolors"                    );
    const std::string visualize_image_classbreak_pointoffset_x                 ( "pointoffset_x"                  );
    const std::string visualize_image_classbreak_pointoffset_y                 ( "pointoffset_y"                  );
    const std::string visualize_image_classbreak_pointshapes                   ( "pointshapes"                    );
    const std::string visualize_image_classbreak_pointsizes                    ( "pointsizes"                     );
    const std::string visualize_image_classbreak_shape_renderer                ( "shape_renderer"                 );
    const std::string visualize_image_classbreak_shapefillcolors               ( "shapefillcolors"                );
    const std::string visualize_image_classbreak_shapelinecolors               ( "shapelinecolors"                );
    const std::string visualize_image_classbreak_shapelinepatternlen           ( "shapelinepatternlen"            );
    const std::string visualize_image_classbreak_shapelinepatterns             ( "shapelinepatterns"              );
    const std::string visualize_image_classbreak_shapelinewidths               ( "shapelinewidths"                );
    const std::string visualize_image_classbreak_square                        ( "square"                         );
    const std::string visualize_image_classbreak_symbolcode                    ( "symbolcode"                     );
    const std::string visualize_image_classbreak_symbolrotations               ( "symbolrotations"                );
    const std::string visualize_image_classbreak_track_id_column_name          ( "track_id_column_name"           );
    const std::string visualize_image_classbreak_track_order_column_name       ( "track_order_column_name"        );
    const std::string visualize_image_classbreak_track_simplification_threshold( "track_simplification_threshold" );
    const std::string visualize_image_classbreak_trackheadcolors               ( "trackheadcolors"                );
    const std::string visualize_image_classbreak_trackheadshapes               ( "trackheadshapes"                );
    const std::string visualize_image_classbreak_trackheadsizes                ( "trackheadsizes"                 );
    const std::string visualize_image_classbreak_tracklinecolors               ( "tracklinecolors"                );
    const std::string visualize_image_classbreak_tracklinewidths               ( "tracklinewidths"                );
    const std::string visualize_image_classbreak_trackmarkercolors             ( "trackmarkercolors"              );
    const std::string visualize_image_classbreak_trackmarkershapes             ( "trackmarkershapes"              );
    const std::string visualize_image_classbreak_trackmarkersizes              ( "trackmarkersizes"               );
    const std::string visualize_image_classbreak_true                          ( "true"                           );
    const std::string visualize_image_classbreak_use_point_renderer            ( "use_point_renderer"             );

    // Keywords for /visualize/image/contour request
    const std::string visualize_image_contour_102100                      ( "102100"                       );
    const std::string visualize_image_contour_3857                        ( "3857"                         );
    const std::string visualize_image_contour_900913                      ( "900913"                       );
    const std::string visualize_image_contour_EPSG_102100                 ( "EPSG:102100"                  );
    const std::string visualize_image_contour_EPSG_3857                   ( "EPSG:3857"                    );
    const std::string visualize_image_contour_EPSG_4326                   ( "EPSG:4326"                    );
    const std::string visualize_image_contour_EPSG_900913                 ( "EPSG:900913"                  );
    const std::string visualize_image_contour_FILL_RATIO                  ( "FILL_RATIO"                   );
    const std::string visualize_image_contour_INV_DST_POW                 ( "INV_DST_POW"                  );
    const std::string visualize_image_contour_KRIGING                     ( "KRIGING"                      );
    const std::string visualize_image_contour_MIN_CURV                    ( "MIN_CURV"                     );
    const std::string visualize_image_contour_PASS_THROUGH                ( "PASS_THROUGH"                 );
    const std::string visualize_image_contour_PLATE_CARREE                ( "PLATE_CARREE"                 );
    const std::string visualize_image_contour_WEB_MERCATOR                ( "WEB_MERCATOR"                 );
    const std::string visualize_image_contour_accent                      ( "accent"                       );
    const std::string visualize_image_contour_add_labels                  ( "add_labels"                   );
    const std::string visualize_image_contour_adjust_grid                 ( "adjust_grid"                  );
    const std::string visualize_image_contour_adjust_grid_neigh           ( "adjust_grid_neigh"            );
    const std::string visualize_image_contour_adjust_grid_size            ( "adjust_grid_size"             );
    const std::string visualize_image_contour_adjust_levels               ( "adjust_levels"                );
    const std::string visualize_image_contour_afmhot                      ( "afmhot"                       );
    const std::string visualize_image_contour_autumn                      ( "autumn"                       );
    const std::string visualize_image_contour_bg_color                    ( "bg_color"                     );
    const std::string visualize_image_contour_binary                      ( "binary"                       );
    const std::string visualize_image_contour_blues                       ( "blues"                        );
    const std::string visualize_image_contour_bone                        ( "bone"                         );
    const std::string visualize_image_contour_brbg                        ( "brbg"                         );
    const std::string visualize_image_contour_brg                         ( "brg"                          );
    const std::string visualize_image_contour_bugn                        ( "bugn"                         );
    const std::string visualize_image_contour_bupu                        ( "bupu"                         );
    const std::string visualize_image_contour_bwr                         ( "bwr"                          );
    const std::string visualize_image_contour_cmrmap                      ( "cmrmap"                       );
    const std::string visualize_image_contour_color                       ( "color"                        );
    const std::string visualize_image_contour_color_isolines              ( "color_isolines"               );
    const std::string visualize_image_contour_colormap                    ( "colormap"                     );
    const std::string visualize_image_contour_cool                        ( "cool"                         );
    const std::string visualize_image_contour_coolwarm                    ( "coolwarm"                     );
    const std::string visualize_image_contour_copper                      ( "copper"                       );
    const std::string visualize_image_contour_cubehelix                   ( "cubehelix"                    );
    const std::string visualize_image_contour_dark2                       ( "dark2"                        );
    const std::string visualize_image_contour_flag                        ( "flag"                         );
    const std::string visualize_image_contour_gist_earth                  ( "gist_earth"                   );
    const std::string visualize_image_contour_gist_gray                   ( "gist_gray"                    );
    const std::string visualize_image_contour_gist_heat                   ( "gist_heat"                    );
    const std::string visualize_image_contour_gist_ncar                   ( "gist_ncar"                    );
    const std::string visualize_image_contour_gist_rainbow                ( "gist_rainbow"                 );
    const std::string visualize_image_contour_gist_stern                  ( "gist_stern"                   );
    const std::string visualize_image_contour_gist_yarg                   ( "gist_yarg"                    );
    const std::string visualize_image_contour_gnbu                        ( "gnbu"                         );
    const std::string visualize_image_contour_gnuplot                     ( "gnuplot"                      );
    const std::string visualize_image_contour_gnuplot2                    ( "gnuplot2"                     );
    const std::string visualize_image_contour_gray                        ( "gray"                         );
    const std::string visualize_image_contour_greens                      ( "greens"                       );
    const std::string visualize_image_contour_greys                       ( "greys"                        );
    const std::string visualize_image_contour_grid_size                   ( "grid_size"                    );
    const std::string visualize_image_contour_gridding_method             ( "gridding_method"              );
    const std::string visualize_image_contour_hot                         ( "hot"                          );
    const std::string visualize_image_contour_hsv                         ( "hsv"                          );
    const std::string visualize_image_contour_inferno                     ( "inferno"                      );
    const std::string visualize_image_contour_isochrone_concavity         ( "isochrone_concavity"          );
    const std::string visualize_image_contour_isochrone_image             ( "isochrone_image"              );
    const std::string visualize_image_contour_isochrone_output_table      ( "isochrone_output_table"       );
    const std::string visualize_image_contour_jet                         ( "jet"                          );
    const std::string visualize_image_contour_labels_font_family          ( "labels_font_family"           );
    const std::string visualize_image_contour_labels_font_size            ( "labels_font_size"             );
    const std::string visualize_image_contour_labels_interlevel_separation( "labels_interlevel_separation" );
    const std::string visualize_image_contour_labels_intralevel_separation( "labels_intralevel_separation" );
    const std::string visualize_image_contour_labels_max_angle            ( "labels_max_angle"             );
    const std::string visualize_image_contour_labels_search_window        ( "labels_search_window"         );
    const std::string visualize_image_contour_line_size                   ( "line_size"                    );
    const std::string visualize_image_contour_magma                       ( "magma"                        );
    const std::string visualize_image_contour_max_grid_size               ( "max_grid_size"                );
    const std::string visualize_image_contour_max_level                   ( "max_level"                    );
    const std::string visualize_image_contour_max_search_cells            ( "max_search_cells"             );
    const std::string visualize_image_contour_min_grid_size               ( "min_grid_size"                );
    const std::string visualize_image_contour_min_level                   ( "min_level"                    );
    const std::string visualize_image_contour_nipy_spectral               ( "nipy_spectral"                );
    const std::string visualize_image_contour_num_levels                  ( "num_levels"                   );
    const std::string visualize_image_contour_ocean                       ( "ocean"                        );
    const std::string visualize_image_contour_oranges                     ( "oranges"                      );
    const std::string visualize_image_contour_orrd                        ( "orrd"                         );
    const std::string visualize_image_contour_paired                      ( "paired"                       );
    const std::string visualize_image_contour_pastel1                     ( "pastel1"                      );
    const std::string visualize_image_contour_pastel2                     ( "pastel2"                      );
    const std::string visualize_image_contour_pink                        ( "pink"                         );
    const std::string visualize_image_contour_piyg                        ( "piyg"                         );
    const std::string visualize_image_contour_plasma                      ( "plasma"                       );
    const std::string visualize_image_contour_prgn                        ( "prgn"                         );
    const std::string visualize_image_contour_prism                       ( "prism"                        );
    const std::string visualize_image_contour_pubu                        ( "pubu"                         );
    const std::string visualize_image_contour_pubugn                      ( "pubugn"                       );
    const std::string visualize_image_contour_puor                        ( "puor"                         );
    const std::string visualize_image_contour_purd                        ( "purd"                         );
    const std::string visualize_image_contour_purples                     ( "purples"                      );
    const std::string visualize_image_contour_rainbow                     ( "rainbow"                      );
    const std::string visualize_image_contour_rdbu                        ( "rdbu"                         );
    const std::string visualize_image_contour_rdgy                        ( "rdgy"                         );
    const std::string visualize_image_contour_rdpu                        ( "rdpu"                         );
    const std::string visualize_image_contour_rdylbu                      ( "rdylbu"                       );
    const std::string visualize_image_contour_rdylgn                      ( "rdylgn"                       );
    const std::string visualize_image_contour_reds                        ( "reds"                         );
    const std::string visualize_image_contour_render_output_grid          ( "render_output_grid"           );
    const std::string visualize_image_contour_search_radius               ( "search_radius"                );
    const std::string visualize_image_contour_seismic                     ( "seismic"                      );
    const std::string visualize_image_contour_set1                        ( "set1"                         );
    const std::string visualize_image_contour_set2                        ( "set2"                         );
    const std::string visualize_image_contour_set3                        ( "set3"                         );
    const std::string visualize_image_contour_smoothing_factor            ( "smoothing_factor"             );
    const std::string visualize_image_contour_spectral                    ( "spectral"                     );
    const std::string visualize_image_contour_spring                      ( "spring"                       );
    const std::string visualize_image_contour_summer                      ( "summer"                       );
    const std::string visualize_image_contour_terrain                     ( "terrain"                      );
    const std::string visualize_image_contour_text_color                  ( "text_color"                   );
    const std::string visualize_image_contour_viridis                     ( "viridis"                      );
    const std::string visualize_image_contour_winter                      ( "winter"                       );
    const std::string visualize_image_contour_wistia                      ( "wistia"                       );
    const std::string visualize_image_contour_ylgn                        ( "ylgn"                         );
    const std::string visualize_image_contour_ylgnbu                      ( "ylgnbu"                       );
    const std::string visualize_image_contour_ylorbr                      ( "ylorbr"                       );
    const std::string visualize_image_contour_ylorrd                      ( "ylorrd"                       );

    // Keywords for /visualize/image/heatmap request
    const std::string visualize_image_heatmap_102100              ( "102100"               );
    const std::string visualize_image_heatmap_3857                ( "3857"                 );
    const std::string visualize_image_heatmap_900913              ( "900913"               );
    const std::string visualize_image_heatmap_EPSG_102100         ( "EPSG:102100"          );
    const std::string visualize_image_heatmap_EPSG_3857           ( "EPSG:3857"            );
    const std::string visualize_image_heatmap_EPSG_4326           ( "EPSG:4326"            );
    const std::string visualize_image_heatmap_EPSG_900913         ( "EPSG:900913"          );
    const std::string visualize_image_heatmap_PLATE_CARREE        ( "PLATE_CARREE"         );
    const std::string visualize_image_heatmap_WEB_MERCATOR        ( "WEB_MERCATOR"         );
    const std::string visualize_image_heatmap_accent              ( "accent"               );
    const std::string visualize_image_heatmap_afmhot              ( "afmhot"               );
    const std::string visualize_image_heatmap_autumn              ( "autumn"               );
    const std::string visualize_image_heatmap_bg_color            ( "bg_color"             );
    const std::string visualize_image_heatmap_binary              ( "binary"               );
    const std::string visualize_image_heatmap_blues               ( "blues"                );
    const std::string visualize_image_heatmap_blur_radius         ( "blur_radius"          );
    const std::string visualize_image_heatmap_bone                ( "bone"                 );
    const std::string visualize_image_heatmap_brbg                ( "brbg"                 );
    const std::string visualize_image_heatmap_brg                 ( "brg"                  );
    const std::string visualize_image_heatmap_bugn                ( "bugn"                 );
    const std::string visualize_image_heatmap_bupu                ( "bupu"                 );
    const std::string visualize_image_heatmap_bwr                 ( "bwr"                  );
    const std::string visualize_image_heatmap_cmrmap              ( "cmrmap"               );
    const std::string visualize_image_heatmap_colormap            ( "colormap"             );
    const std::string visualize_image_heatmap_cool                ( "cool"                 );
    const std::string visualize_image_heatmap_coolwarm            ( "coolwarm"             );
    const std::string visualize_image_heatmap_copper              ( "copper"               );
    const std::string visualize_image_heatmap_cubehelix           ( "cubehelix"            );
    const std::string visualize_image_heatmap_dark2               ( "dark2"                );
    const std::string visualize_image_heatmap_flag                ( "flag"                 );
    const std::string visualize_image_heatmap_gist_earth          ( "gist_earth"           );
    const std::string visualize_image_heatmap_gist_gray           ( "gist_gray"            );
    const std::string visualize_image_heatmap_gist_heat           ( "gist_heat"            );
    const std::string visualize_image_heatmap_gist_ncar           ( "gist_ncar"            );
    const std::string visualize_image_heatmap_gist_rainbow        ( "gist_rainbow"         );
    const std::string visualize_image_heatmap_gist_stern          ( "gist_stern"           );
    const std::string visualize_image_heatmap_gist_yarg           ( "gist_yarg"            );
    const std::string visualize_image_heatmap_gnbu                ( "gnbu"                 );
    const std::string visualize_image_heatmap_gnuplot             ( "gnuplot"              );
    const std::string visualize_image_heatmap_gnuplot2            ( "gnuplot2"             );
    const std::string visualize_image_heatmap_gradient_end_color  ( "gradient_end_color"   );
    const std::string visualize_image_heatmap_gradient_start_color( "gradient_start_color" );
    const std::string visualize_image_heatmap_gray                ( "gray"                 );
    const std::string visualize_image_heatmap_greens              ( "greens"               );
    const std::string visualize_image_heatmap_greys               ( "greys"                );
    const std::string visualize_image_heatmap_hot                 ( "hot"                  );
    const std::string visualize_image_heatmap_hsv                 ( "hsv"                  );
    const std::string visualize_image_heatmap_inferno             ( "inferno"              );
    const std::string visualize_image_heatmap_jet                 ( "jet"                  );
    const std::string visualize_image_heatmap_magma               ( "magma"                );
    const std::string visualize_image_heatmap_nipy_spectral       ( "nipy_spectral"        );
    const std::string visualize_image_heatmap_ocean               ( "ocean"                );
    const std::string visualize_image_heatmap_oranges             ( "oranges"              );
    const std::string visualize_image_heatmap_orrd                ( "orrd"                 );
    const std::string visualize_image_heatmap_paired              ( "paired"               );
    const std::string visualize_image_heatmap_pastel1             ( "pastel1"              );
    const std::string visualize_image_heatmap_pastel2             ( "pastel2"              );
    const std::string visualize_image_heatmap_pink                ( "pink"                 );
    const std::string visualize_image_heatmap_piyg                ( "piyg"                 );
    const std::string visualize_image_heatmap_plasma              ( "plasma"               );
    const std::string visualize_image_heatmap_prgn                ( "prgn"                 );
    const std::string visualize_image_heatmap_prism               ( "prism"                );
    const std::string visualize_image_heatmap_pubu                ( "pubu"                 );
    const std::string visualize_image_heatmap_pubugn              ( "pubugn"               );
    const std::string visualize_image_heatmap_puor                ( "puor"                 );
    const std::string visualize_image_heatmap_purd                ( "purd"                 );
    const std::string visualize_image_heatmap_purples             ( "purples"              );
    const std::string visualize_image_heatmap_rainbow             ( "rainbow"              );
    const std::string visualize_image_heatmap_rdbu                ( "rdbu"                 );
    const std::string visualize_image_heatmap_rdgy                ( "rdgy"                 );
    const std::string visualize_image_heatmap_rdpu                ( "rdpu"                 );
    const std::string visualize_image_heatmap_rdylbu              ( "rdylbu"               );
    const std::string visualize_image_heatmap_rdylgn              ( "rdylgn"               );
    const std::string visualize_image_heatmap_reds                ( "reds"                 );
    const std::string visualize_image_heatmap_seismic             ( "seismic"              );
    const std::string visualize_image_heatmap_set1                ( "set1"                 );
    const std::string visualize_image_heatmap_set2                ( "set2"                 );
    const std::string visualize_image_heatmap_set3                ( "set3"                 );
    const std::string visualize_image_heatmap_spectral            ( "spectral"             );
    const std::string visualize_image_heatmap_spring              ( "spring"               );
    const std::string visualize_image_heatmap_summer              ( "summer"               );
    const std::string visualize_image_heatmap_terrain             ( "terrain"              );
    const std::string visualize_image_heatmap_viridis             ( "viridis"              );
    const std::string visualize_image_heatmap_winter              ( "winter"               );
    const std::string visualize_image_heatmap_wistia              ( "wistia"               );
    const std::string visualize_image_heatmap_ylgn                ( "ylgn"                 );
    const std::string visualize_image_heatmap_ylgnbu              ( "ylgnbu"               );
    const std::string visualize_image_heatmap_ylorbr              ( "ylorbr"               );
    const std::string visualize_image_heatmap_ylorrd              ( "ylorrd"               );

    // Keywords for /visualize/image/labels request
    const std::string visualize_image_labels_102100      ( "102100"       );
    const std::string visualize_image_labels_3857        ( "3857"         );
    const std::string visualize_image_labels_900913      ( "900913"       );
    const std::string visualize_image_labels_EPSG_102100 ( "EPSG:102100"  );
    const std::string visualize_image_labels_EPSG_3857   ( "EPSG:3857"    );
    const std::string visualize_image_labels_EPSG_4326   ( "EPSG:4326"    );
    const std::string visualize_image_labels_EPSG_900913 ( "EPSG:900913"  );
    const std::string visualize_image_labels_PLATE_CARREE( "PLATE_CARREE" );
    const std::string visualize_image_labels_WEB_MERCATOR( "WEB_MERCATOR" );

    // Keywords for /visualize/isochrone request
    const std::string visualize_isochrone_102100                      ( "102100"                       );
    const std::string visualize_isochrone_3857                        ( "3857"                         );
    const std::string visualize_isochrone_900913                      ( "900913"                       );
    const std::string visualize_isochrone_EPSG_102100                 ( "EPSG:102100"                  );
    const std::string visualize_isochrone_EPSG_3857                   ( "EPSG:3857"                    );
    const std::string visualize_isochrone_EPSG_4326                   ( "EPSG:4326"                    );
    const std::string visualize_isochrone_EPSG_900913                 ( "EPSG:900913"                  );
    const std::string visualize_isochrone_PLATE_CARREE                ( "PLATE_CARREE"                 );
    const std::string visualize_isochrone_WEB_MERCATOR                ( "WEB_MERCATOR"                 );
    const std::string visualize_isochrone_accent                      ( "accent"                       );
    const std::string visualize_isochrone_add_labels                  ( "add_labels"                   );
    const std::string visualize_isochrone_afmhot                      ( "afmhot"                       );
    const std::string visualize_isochrone_autumn                      ( "autumn"                       );
    const std::string visualize_isochrone_bg_color                    ( "bg_color"                     );
    const std::string visualize_isochrone_binary                      ( "binary"                       );
    const std::string visualize_isochrone_blues                       ( "blues"                        );
    const std::string visualize_isochrone_bone                        ( "bone"                         );
    const std::string visualize_isochrone_brbg                        ( "brbg"                         );
    const std::string visualize_isochrone_brg                         ( "brg"                          );
    const std::string visualize_isochrone_bugn                        ( "bugn"                         );
    const std::string visualize_isochrone_bupu                        ( "bupu"                         );
    const std::string visualize_isochrone_bwr                         ( "bwr"                          );
    const std::string visualize_isochrone_cmrmap                      ( "cmrmap"                       );
    const std::string visualize_isochrone_color                       ( "color"                        );
    const std::string visualize_isochrone_color_isolines              ( "color_isolines"               );
    const std::string visualize_isochrone_colormap                    ( "colormap"                     );
    const std::string visualize_isochrone_concavity_level             ( "concavity_level"              );
    const std::string visualize_isochrone_cool                        ( "cool"                         );
    const std::string visualize_isochrone_coolwarm                    ( "coolwarm"                     );
    const std::string visualize_isochrone_copper                      ( "copper"                       );
    const std::string visualize_isochrone_cubehelix                   ( "cubehelix"                    );
    const std::string visualize_isochrone_dark2                       ( "dark2"                        );
    const std::string visualize_isochrone_data_max_x                  ( "data_max_x"                   );
    const std::string visualize_isochrone_data_max_y                  ( "data_max_y"                   );
    const std::string visualize_isochrone_data_min_x                  ( "data_min_x"                   );
    const std::string visualize_isochrone_data_min_y                  ( "data_min_y"                   );
    const std::string visualize_isochrone_false                       ( "false"                        );
    const std::string visualize_isochrone_flag                        ( "flag"                         );
    const std::string visualize_isochrone_from_source                 ( "from_source"                  );
    const std::string visualize_isochrone_gist_earth                  ( "gist_earth"                   );
    const std::string visualize_isochrone_gist_gray                   ( "gist_gray"                    );
    const std::string visualize_isochrone_gist_heat                   ( "gist_heat"                    );
    const std::string visualize_isochrone_gist_ncar                   ( "gist_ncar"                    );
    const std::string visualize_isochrone_gist_rainbow                ( "gist_rainbow"                 );
    const std::string visualize_isochrone_gist_stern                  ( "gist_stern"                   );
    const std::string visualize_isochrone_gist_yarg                   ( "gist_yarg"                    );
    const std::string visualize_isochrone_gnbu                        ( "gnbu"                         );
    const std::string visualize_isochrone_gnuplot                     ( "gnuplot"                      );
    const std::string visualize_isochrone_gnuplot2                    ( "gnuplot2"                     );
    const std::string visualize_isochrone_gray                        ( "gray"                         );
    const std::string visualize_isochrone_greens                      ( "greens"                       );
    const std::string visualize_isochrone_greys                       ( "greys"                        );
    const std::string visualize_isochrone_grid_size                   ( "grid_size"                    );
    const std::string visualize_isochrone_height                      ( "height"                       );
    const std::string visualize_isochrone_hot                         ( "hot"                          );
    const std::string visualize_isochrone_hsv                         ( "hsv"                          );
    const std::string visualize_isochrone_inferno                     ( "inferno"                      );
    const std::string visualize_isochrone_is_replicated               ( "is_replicated"                );
    const std::string visualize_isochrone_jet                         ( "jet"                          );
    const std::string visualize_isochrone_labels_font_family          ( "labels_font_family"           );
    const std::string visualize_isochrone_labels_font_size            ( "labels_font_size"             );
    const std::string visualize_isochrone_labels_interlevel_separation( "labels_interlevel_separation" );
    const std::string visualize_isochrone_labels_intralevel_separation( "labels_intralevel_separation" );
    const std::string visualize_isochrone_labels_max_angle            ( "labels_max_angle"             );
    const std::string visualize_isochrone_labels_search_window        ( "labels_search_window"         );
    const std::string visualize_isochrone_line_size                   ( "line_size"                    );
    const std::string visualize_isochrone_magma                       ( "magma"                        );
    const std::string visualize_isochrone_nipy_spectral               ( "nipy_spectral"                );
    const std::string visualize_isochrone_ocean                       ( "ocean"                        );
    const std::string visualize_isochrone_oranges                     ( "oranges"                      );
    const std::string visualize_isochrone_orrd                        ( "orrd"                         );
    const std::string visualize_isochrone_paired                      ( "paired"                       );
    const std::string visualize_isochrone_pastel1                     ( "pastel1"                      );
    const std::string visualize_isochrone_pastel2                     ( "pastel2"                      );
    const std::string visualize_isochrone_pink                        ( "pink"                         );
    const std::string visualize_isochrone_piyg                        ( "piyg"                         );
    const std::string visualize_isochrone_plasma                      ( "plasma"                       );
    const std::string visualize_isochrone_prgn                        ( "prgn"                         );
    const std::string visualize_isochrone_prism                       ( "prism"                        );
    const std::string visualize_isochrone_projection                  ( "projection"                   );
    const std::string visualize_isochrone_pubu                        ( "pubu"                         );
    const std::string visualize_isochrone_pubugn                      ( "pubugn"                       );
    const std::string visualize_isochrone_puor                        ( "puor"                         );
    const std::string visualize_isochrone_purd                        ( "purd"                         );
    const std::string visualize_isochrone_purples                     ( "purples"                      );
    const std::string visualize_isochrone_rainbow                     ( "rainbow"                      );
    const std::string visualize_isochrone_rdbu                        ( "rdbu"                         );
    const std::string visualize_isochrone_rdgy                        ( "rdgy"                         );
    const std::string visualize_isochrone_rdpu                        ( "rdpu"                         );
    const std::string visualize_isochrone_rdylbu                      ( "rdylbu"                       );
    const std::string visualize_isochrone_rdylgn                      ( "rdylgn"                       );
    const std::string visualize_isochrone_reds                        ( "reds"                         );
    const std::string visualize_isochrone_remove_previous_restrictions( "remove_previous_restrictions" );
    const std::string visualize_isochrone_restriction_threshold_value ( "restriction_threshold_value"  );
    const std::string visualize_isochrone_search_radius               ( "search_radius"                );
    const std::string visualize_isochrone_seismic                     ( "seismic"                      );
    const std::string visualize_isochrone_set1                        ( "set1"                         );
    const std::string visualize_isochrone_set2                        ( "set2"                         );
    const std::string visualize_isochrone_set3                        ( "set3"                         );
    const std::string visualize_isochrone_solve_direction             ( "solve_direction"              );
    const std::string visualize_isochrone_solve_table                 ( "solve_table"                  );
    const std::string visualize_isochrone_spectral                    ( "spectral"                     );
    const std::string visualize_isochrone_spring                      ( "spring"                       );
    const std::string visualize_isochrone_summer                      ( "summer"                       );
    const std::string visualize_isochrone_terrain                     ( "terrain"                      );
    const std::string visualize_isochrone_text_color                  ( "text_color"                   );
    const std::string visualize_isochrone_to_source                   ( "to_source"                    );
    const std::string visualize_isochrone_true                        ( "true"                         );
    const std::string visualize_isochrone_uniform_weights             ( "uniform_weights"              );
    const std::string visualize_isochrone_use_priority_queue_solvers  ( "use_priority_queue_solvers"   );
    const std::string visualize_isochrone_viridis                     ( "viridis"                      );
    const std::string visualize_isochrone_width                       ( "width"                        );
    const std::string visualize_isochrone_winter                      ( "winter"                       );
    const std::string visualize_isochrone_wistia                      ( "wistia"                       );
    const std::string visualize_isochrone_ylgn                        ( "ylgn"                         );
    const std::string visualize_isochrone_ylgnbu                      ( "ylgnbu"                       );
    const std::string visualize_isochrone_ylorbr                      ( "ylorbr"                       );
    const std::string visualize_isochrone_ylorrd                      ( "ylorrd"                       );
} // end namespace gpudb
