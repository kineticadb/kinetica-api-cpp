/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __MODIFY_GRAPH_H__
#define __MODIFY_GRAPH_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #modifyGraph(const ModifyGraphRequest&) const}.
     * <p>
     * Update an existing graph network using given nodes, edges, weights,
     * restrictions, and options.

     * IMPORTANT: It's highly recommended that you review the
     * <a href="../../../graph_solver/network_graph_solver/"
     * target="_top">Network Graphs & Solvers</a>
     * concepts documentation, and
     * <a href="../../../guides/graph_rest_guide/" target="_top">Graph REST
     * Tutorial</a>
     * before using this endpoint.
     */
    struct ModifyGraphRequest
    {

        /**
         * Constructs a ModifyGraphRequest object with default parameter
         * values.
         */
        ModifyGraphRequest() :
            graphName(std::string()),
            nodes(std::vector<std::string>()),
            edges(std::vector<std::string>()),
            weights(std::vector<std::string>()),
            restrictions(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ModifyGraphRequest object with the specified
         * parameters.
         * 
         * @param[in] graphName_  Name of the graph resource to modify.
         * @param[in] nodes_  Nodes with which to update existing @a nodes in
         *                    graph specified by @a graphName. Review <a
         *                    href="../../../graph_solver/network_graph_solver/#nodes"
         *                    target="_top">Nodes</a> for more information.
         *                    Nodes must be specified using <a
         *                    href="../../../graph_solver/network_graph_solver/#identifiers"
         *                    target="_top">identifiers</a>; identifiers are
         *                    grouped as <a
         *                    href="../../../graph_solver/network_graph_solver/#id-combos"
         *                    target="_top">combinations</a>. Identifiers can
         *                    be used with existing column names, e.g.,
         *                    'table.column AS NODE_ID', expressions, e.g.,
         *                    'ST_MAKEPOINT(column1, column2) AS
         *                    NODE_WKTPOINT', or raw values, e.g., '{9, 10, 11}
         *                    AS NODE_ID'. If using raw values in an identifier
         *                    combination, the number of values specified must
         *                    match across the combination. Identifier
         *                    combination(s) do not have to match the method
         *                    used to create the graph, e.g., if column names
         *                    were specified to create the graph, expressions
         *                    or raw values could also be used to modify the
         *                    graph.
         * @param[in] edges_  Edges with which to update existing @a edges in
         *                    graph specified by @a graphName. Review <a
         *                    href="../../../graph_solver/network_graph_solver/#edges"
         *                    target="_top">Edges</a> for more information.
         *                    Edges must be specified using <a
         *                    href="../../../graph_solver/network_graph_solver/#identifiers"
         *                    target="_top">identifiers</a>; identifiers are
         *                    grouped as <a
         *                    href="../../../graph_solver/network_graph_solver/#id-combos"
         *                    target="_top">combinations</a>. Identifiers can
         *                    be used with existing column names, e.g.,
         *                    'table.column AS EDGE_ID', expressions, e.g.,
         *                    'SUBSTR(column, 1, 6) AS EDGE_NODE1_NAME', or raw
         *                    values, e.g., "{'family', 'coworker'} AS
         *                    EDGE_LABEL". If using raw values in an identifier
         *                    combination, the number of values specified must
         *                    match across the combination. Identifier
         *                    combination(s) do not have to match the method
         *                    used to create the graph, e.g., if column names
         *                    were specified to create the graph, expressions
         *                    or raw values could also be used to modify the
         *                    graph.
         * @param[in] weights_  Weights with which to update existing @a
         *                      weights in graph specified by @a graphName.
         *                      Review <a
         *                      href="../../../graph_solver/network_graph_solver/#graph-weights"
         *                      target="_top">Weights</a> for more information.
         *                      Weights must be specified using <a
         *                      href="../../../graph_solver/network_graph_solver/#identifiers"
         *                      target="_top">identifiers</a>; identifiers are
         *                      grouped as <a
         *                      href="../../../graph_solver/network_graph_solver/#id-combos"
         *                      target="_top">combinations</a>. Identifiers can
         *                      be used with existing column names, e.g.,
         *                      'table.column AS WEIGHTS_EDGE_ID', expressions,
         *                      e.g., 'ST_LENGTH(wkt) AS
         *                      WEIGHTS_VALUESPECIFIED', or raw values, e.g.,
         *                      '{4, 15} AS WEIGHTS_VALUESPECIFIED'. If using
         *                      raw values in an identifier combination, the
         *                      number of values specified must match across
         *                      the combination. Identifier combination(s) do
         *                      not have to match the method used to create the
         *                      graph, e.g., if column names were specified to
         *                      create the graph, expressions or raw values
         *                      could also be used to modify the graph.
         * @param[in] restrictions_  Restrictions with which to update existing
         *                           @a restrictions in graph specified by @a
         *                           graphName. Review <a
         *                           href="../../../graph_solver/network_graph_solver/#graph-restrictions"
         *                           target="_top">Restrictions</a> for more
         *                           information. Restrictions must be
         *                           specified using <a
         *                           href="../../../graph_solver/network_graph_solver/#identifiers"
         *                           target="_top">identifiers</a>; identifiers
         *                           are grouped as <a
         *                           href="../../../graph_solver/network_graph_solver/#id-combos"
         *                           target="_top">combinations</a>.
         *                           Identifiers can be used with existing
         *                           column names, e.g., 'table.column AS
         *                           RESTRICTIONS_EDGE_ID', expressions, e.g.,
         *                           'column/2 AS RESTRICTIONS_VALUECOMPARED',
         *                           or raw values, e.g., '{0, 0, 0, 1} AS
         *                           RESTRICTIONS_ONOFFCOMPARED'. If using raw
         *                           values in an identifier combination, the
         *                           number of values specified must match
         *                           across the combination. Identifier
         *                           combination(s) do not have to match the
         *                           method used to create the graph, e.g., if
         *                           column names were specified to create the
         *                           graph, expressions or raw values could
         *                           also be used to modify the graph.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::modify_graph_restriction_threshold_value:
         *                      Value-based restriction comparison. Any node or
         *                      edge with a RESTRICTIONS_VALUECOMPARED value
         *                      greater than the @a restriction_threshold_value
         *                      will not be included in the graph.
         *                              <li>
         *                      gpudb::modify_graph_export_create_results: If
         *                      set to @a true, returns the graph topology in
         *                      the response as arrays.
         *                      <ul>
         *                              <li> gpudb::modify_graph_true
         *                              <li> gpudb::modify_graph_false
         *                      </ul>
         *                      The default value is gpudb::modify_graph_false.
         *                              <li>
         *                      gpudb::modify_graph_enable_graph_draw: If set
         *                      to @a true, adds a 'EDGE_WKTLINE' column
         *                      identifier to the specified @a graph_table so
         *                      the graph can be viewed via WMS; for social and
         *                      non-geospatial graphs, the 'EDGE_WKTLINE'
         *                      column identifier will be populated with
         *                      spatial coordinates derived from a flattening
         *                      layout algorithm so the graph can still be
         *                      viewed.
         *                      <ul>
         *                              <li> gpudb::modify_graph_true
         *                              <li> gpudb::modify_graph_false
         *                      </ul>
         *                      The default value is gpudb::modify_graph_false.
         *                              <li> gpudb::modify_graph_save_persist:
         *                      If set to @a true, the graph will be saved in
         *                      the persist directory (see the <a
         *                      href="../../../config/" target="_top">config
         *                      reference</a> for more information). If set to
         *                      @a false, the graph will be removed when the
         *                      graph server is shutdown.
         *                      <ul>
         *                              <li> gpudb::modify_graph_true
         *                              <li> gpudb::modify_graph_false
         *                      </ul>
         *                      The default value is gpudb::modify_graph_false.
         *                              <li>
         *                      gpudb::modify_graph_add_table_monitor: Adds a
         *                      table monitor to every table used in the
         *                      creation of the graph; this table monitor will
         *                      trigger the graph to update dynamically upon
         *                      inserts to the source table(s). Note that upon
         *                      database restart, if @a save_persist is also
         *                      set to @a true, the graph will be fully
         *                      reconstructed and the table monitors will be
         *                      reattached. For more details on table monitors,
         *                      see /create/tablemonitor.
         *                      <ul>
         *                              <li> gpudb::modify_graph_true
         *                              <li> gpudb::modify_graph_false
         *                      </ul>
         *                      The default value is gpudb::modify_graph_false.
         *                              <li> gpudb::modify_graph_graph_table:
         *                      If specified, the created graph is also created
         *                      as a table with the given name, in
         *                      [schema_name.]table_name format, using standard
         *                      <a
         *                      href="../../../concepts/tables/#table-name-resolution"
         *                      target="_top">name resolution rules</a> and
         *                      meeting <a
         *                      href="../../../concepts/tables/#table-naming-criteria"
         *                      target="_top">table naming criteria</a>.  This
         *                      table will have the following identifier
         *                      columns: 'EDGE_ID', 'EDGE_NODE1_ID',
         *                      'EDGE_NODE2_ID'. If left blank, no table is
         *                      created.  The default value is ''.
         *                              <li>
         *                      gpudb::modify_graph_remove_label_only: When
         *                      RESTRICTIONS on labeled entities requested, if
         *                      set to true this will NOT delete the entity but
         *                      only the label associated with the entity.
         *                      Otherwise (default), it'll delete the label AND
         *                      the entity.
         *                      <ul>
         *                              <li> gpudb::modify_graph_true
         *                              <li> gpudb::modify_graph_false
         *                      </ul>
         *                      The default value is gpudb::modify_graph_false.
         *                              <li> gpudb::modify_graph_add_turns:
         *                      Adds dummy 'pillowed' edges around intersection
         *                      nodes where there are more than three edges so
         *                      that additional weight penalties can be imposed
         *                      by the solve endpoints. (increases the total
         *                      number of edges).
         *                      <ul>
         *                              <li> gpudb::modify_graph_true
         *                              <li> gpudb::modify_graph_false
         *                      </ul>
         *                      The default value is gpudb::modify_graph_false.
         *                              <li> gpudb::modify_graph_turn_angle:
         *                      Value in degrees modifies the thresholds for
         *                      attributing right, left, sharp turns, and
         *                      intersections. It is the vertical deviation
         *                      angle from the incoming edge to the
         *                      intersection node. The larger the value, the
         *                      larger the threshold for sharp turns and
         *                      intersections; the smaller the value, the
         *                      larger the threshold for right and left turns;
         *                      0 < turn_angle < 90.  The default value is
         *                      '60'.
         *                              <li> gpudb::modify_graph_use_rtree: Use
         *                      an range tree structure to accelerate and
         *                      improve the accuracy of snapping, especially to
         *                      edges.
         *                      <ul>
         *                              <li> gpudb::modify_graph_true
         *                              <li> gpudb::modify_graph_false
         *                      </ul>
         *                      The default value is gpudb::modify_graph_true.
         *                              <li>
         *                      gpudb::modify_graph_label_delimiter: If
         *                      provided the label string will be split
         *                      according to this delimiter and each sub-string
         *                      will be applied as a separate label onto the
         *                      specified edge.  The default value is ''.
         *                              <li>
         *                      gpudb::modify_graph_allow_multiple_edges:
         *                      Multigraph choice; allowing multiple edges with
         *                      the same node pairs if set to true, otherwise,
         *                      new edges with existing same node pairs will
         *                      not be inserted.
         *                      <ul>
         *                              <li> gpudb::modify_graph_true
         *                              <li> gpudb::modify_graph_false
         *                      </ul>
         *                      The default value is gpudb::modify_graph_true.
         *                      </ul>
         * 
         */
        ModifyGraphRequest(const std::string& graphName_, const std::vector<std::string>& nodes_, const std::vector<std::string>& edges_, const std::vector<std::string>& weights_, const std::vector<std::string>& restrictions_, const std::map<std::string, std::string>& options_):
            graphName( graphName_ ),
            nodes( nodes_ ),
            edges( edges_ ),
            weights( weights_ ),
            restrictions( restrictions_ ),
            options( options_ )
        {
        }

        std::string graphName;
        std::vector<std::string> nodes;
        std::vector<std::string> edges;
        std::vector<std::string> weights;
        std::vector<std::string> restrictions;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ModifyGraphRequest>
    {
        static void encode(Encoder& e, const gpudb::ModifyGraphRequest& v)
        {
            ::avro::encode(e, v.graphName);
            ::avro::encode(e, v.nodes);
            ::avro::encode(e, v.edges);
            ::avro::encode(e, v.weights);
            ::avro::encode(e, v.restrictions);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ModifyGraphRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.graphName);
                            break;

                        case 1:
                            ::avro::decode(d, v.nodes);
                            break;

                        case 2:
                            ::avro::decode(d, v.edges);
                            break;

                        case 3:
                            ::avro::decode(d, v.weights);
                            break;

                        case 4:
                            ::avro::decode(d, v.restrictions);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.graphName);
                ::avro::decode(d, v.nodes);
                ::avro::decode(d, v.edges);
                ::avro::decode(d, v.weights);
                ::avro::decode(d, v.restrictions);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #modifyGraph(const ModifyGraphRequest&) const}.
     * <p>
     * Update an existing graph network using given nodes, edges, weights,
     * restrictions, and options.

     * IMPORTANT: It's highly recommended that you review the
     * <a href="../../../graph_solver/network_graph_solver/"
     * target="_top">Network Graphs & Solvers</a>
     * concepts documentation, and
     * <a href="../../../guides/graph_rest_guide/" target="_top">Graph REST
     * Tutorial</a>
     * before using this endpoint.
     */
    struct ModifyGraphResponse
    {

        /**
         * Constructs a ModifyGraphResponse object with default parameter
         * values.
         */
        ModifyGraphResponse() :
            result(bool()),
            numNodes(int64_t()),
            numEdges(int64_t()),
            edgesIds(std::vector<int64_t>()),
            info(std::map<std::string, std::string>())
        {
        }

        bool result;
        int64_t numNodes;
        int64_t numEdges;
        std::vector<int64_t> edgesIds;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ModifyGraphResponse>
    {
        static void encode(Encoder& e, const gpudb::ModifyGraphResponse& v)
        {
            ::avro::encode(e, v.result);
            ::avro::encode(e, v.numNodes);
            ::avro::encode(e, v.numEdges);
            ::avro::encode(e, v.edgesIds);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ModifyGraphResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.result);
                            break;

                        case 1:
                            ::avro::decode(d, v.numNodes);
                            break;

                        case 2:
                            ::avro::decode(d, v.numEdges);
                            break;

                        case 3:
                            ::avro::decode(d, v.edgesIds);
                            break;

                        case 4:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.result);
                ::avro::decode(d, v.numNodes);
                ::avro::decode(d, v.numEdges);
                ::avro::decode(d, v.edgesIds);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
