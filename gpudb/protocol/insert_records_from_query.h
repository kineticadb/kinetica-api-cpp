/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __INSERT_RECORDS_FROM_QUERY_H__
#define __INSERT_RECORDS_FROM_QUERY_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #insertRecordsFromQuery(const InsertRecordsFromQueryRequest&) const}.
     * <p>
     * Computes remote query result and inserts the result data into a new or
     * existing table
     */
    struct InsertRecordsFromQueryRequest
    {

        /**
         * Constructs an InsertRecordsFromQueryRequest object with default
         * parameter values.
         */
        InsertRecordsFromQueryRequest() :
            tableName(std::string()),
            remoteQuery(std::string()),
            modifyColumns(std::map<std::string, std::map<std::string, std::string> >()),
            createTableOptions(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an InsertRecordsFromQueryRequest object with the
         * specified parameters.
         * 
         * @param[in] tableName_  Name of the table into which the data will be
         *                        inserted, in
         *                        [schema_name.]table_name format, using
         *                        standard
         *                        <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        If the table does not exist, the table will
         *                        be created using either an existing
         *                        @a type_id or the type inferred from the
         *                        remote query, and the new table name will
         *                        have to meet standard
         *                        <a
         *                        href="../../../concepts/tables/#table-naming-criteria"
         *                        target="_top">table naming criteria</a>.
         * @param[in] remoteQuery_  Query for which result data needs to be
         *                          imported
         * @param[in] modifyColumns_  Not implemented yet
         * @param[in] createTableOptions_  Options used when creating the
         *                                 target table.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_query_type_id:
         *                                 ID of a currently registered <a
         *                                 href="../../../concepts/types/"
         *                                 target="_top">type</a>.  The default
         *                                 value is ''.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_no_error_if_exists:
         *                                 If @a true, prevents an error from
         *                                 occurring if the table already
         *                                 exists and is of the given type.  If
         *                                 a table with the same ID but a
         *                                 different type exists, it is still
         *                                 an error.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_query_true
         *                                         <li>
         *                                 gpudb::insert_records_from_query_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_query_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_is_replicated:
         *                                 Affects the <a
         *                                 href="../../../concepts/tables/#distribution"
         *                                 target="_top">distribution
         *                                 scheme</a> for the table's data.  If
         *                                 @a true and the given type has no
         *                                 explicit <a
         *                                 href="../../../concepts/tables/#shard-key"
         *                                 target="_top">shard key</a> defined,
         *                                 the table will be <a
         *                                 href="../../../concepts/tables/#replication"
         *                                 target="_top">replicated</a>.  If @a
         *                                 false, the table will be <a
         *                                 href="../../../concepts/tables/#sharding"
         *                                 target="_top">sharded</a> according
         *                                 to the shard key specified in the
         *                                 given @a type_id, or <a
         *                                 href="../../../concepts/tables/#random-sharding"
         *                                 target="_top">randomly sharded</a>,
         *                                 if no shard key is specified.  Note
         *                                 that a type containing a shard key
         *                                 cannot be used to create a
         *                                 replicated table.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_query_true
         *                                         <li>
         *                                 gpudb::insert_records_from_query_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_query_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_foreign_keys:
         *                                 Semicolon-separated list of <a
         *                                 href="../../../concepts/tables/#foreign-keys"
         *                                 target="_top">foreign keys</a>, of
         *                                 the format '(source_column_name [,
         *                                 ...]) references
         *                                 target_table_name(primary_key_column_name
         *                                 [, ...]) [as foreign_key_name]'.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_foreign_shard_key:
         *                                 Foreign shard key of the format
         *                                 'source_column references
         *                                 shard_by_column from
         *                                 target_table(primary_key_column)'.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_partition_type:
         *                                 <a
         *                                 href="../../../concepts/tables/#partitioning"
         *                                 target="_top">Partitioning</a>
         *                                 scheme to use.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_query_RANGE:
         *                                 Use <a
         *                                 href="../../../concepts/tables/#partitioning-by-range"
         *                                 target="_top">range
         *                                 partitioning</a>.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_INTERVAL:
         *                                 Use <a
         *                                 href="../../../concepts/tables/#partitioning-by-interval"
         *                                 target="_top">interval
         *                                 partitioning</a>.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_LIST:
         *                                 Use <a
         *                                 href="../../../concepts/tables/#partitioning-by-list"
         *                                 target="_top">list partitioning</a>.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_HASH:
         *                                 Use <a
         *                                 href="../../../concepts/tables/#partitioning-by-hash"
         *                                 target="_top">hash partitioning</a>.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_SERIES:
         *                                 Use <a
         *                                 href="../../../concepts/tables/#partitioning-by-series"
         *                                 target="_top">series
         *                                 partitioning</a>.
         *                                 </ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_query_partition_keys:
         *                                 Comma-separated list of partition
         *                                 keys, which are the columns or
         *                                 column expressions by which records
         *                                 will be assigned to partitions
         *                                 defined by @a partition_definitions.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_partition_definitions:
         *                                 Comma-separated list of partition
         *                                 definitions, whose format depends on
         *                                 the choice of @a partition_type.
         *                                 See <a
         *                                 href="../../../concepts/tables/#partitioning-by-range"
         *                                 target="_top">range
         *                                 partitioning</a>, <a
         *                                 href="../../../concepts/tables/#partitioning-by-interval"
         *                                 target="_top">interval
         *                                 partitioning</a>, <a
         *                                 href="../../../concepts/tables/#partitioning-by-list"
         *                                 target="_top">list partitioning</a>,
         *                                 <a
         *                                 href="../../../concepts/tables/#partitioning-by-hash"
         *                                 target="_top">hash partitioning</a>,
         *                                 or <a
         *                                 href="../../../concepts/tables/#partitioning-by-series"
         *                                 target="_top">series
         *                                 partitioning</a> for example
         *                                 formats.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_is_automatic_partition:
         *                                 If @a true, a new partition will be
         *                                 created for values which don't fall
         *                                 into an existing partition.
         *                                 Currently only supported for <a
         *                                 href="../../../concepts/tables/#partitioning-by-list"
         *                                 target="_top">list partitions</a>.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_query_true
         *                                         <li>
         *                                 gpudb::insert_records_from_query_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_query_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_ttl:
         *                                 Sets the <a
         *                                 href="../../../concepts/ttl/"
         *                                 target="_top">TTL</a> of the table
         *                                 specified in @a tableName.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_chunk_size:
         *                                 Indicates the number of records per
         *                                 chunk to be used for this table.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_is_result_table:
         *                                 Indicates whether the table is a <a
         *                                 href="../../../concepts/tables_memory_only/"
         *                                 target="_top">memory-only table</a>.
         *                                 A result table cannot contain
         *                                 columns with store_only or
         *                                 text_search <a
         *                                 href="../../../concepts/types/#data-handling"
         *                                 target="_top">data-handling</a> or
         *                                 that are <a
         *                                 href="../../../concepts/types/#primitive-types"
         *                                 target="_top">non-charN strings</a>,
         *                                 and it will not be retained if the
         *                                 server is restarted.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_query_true
         *                                         <li>
         *                                 gpudb::insert_records_from_query_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_query_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_query_strategy_definition:
         *                                 The <a
         *                                 href="../../../rm/concepts/#tier-strategies"
         *                                 target="_top">tier strategy</a> for
         *                                 the table and its columns.
         *                                 </ul>
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_query_bad_record_table_name:
         *                      Optional name of a table to which records that
         *                      were rejected are written.  The
         *                      bad-record-table has the following columns:
         *                      line_number (long), line_rejected (string),
         *                      error_message (string). When error handling is
         *                      Abort, bad records table is not populated.
         *                              <li>
         *                      gpudb::insert_records_from_query_bad_record_table_limit:
         *                      A positive integer indicating the maximum
         *                      number of records that can be  written to the
         *                      bad-record-table.   Default value is 10000
         *                              <li>
         *                      gpudb::insert_records_from_query_batch_size:
         *                      Number of records per batch when inserting
         *                      data.
         *                              <li>
         *                      gpudb::insert_records_from_query_datasource_name:
         *                      Name of an existing external data source from
         *                      which table will be loaded
         *                              <li>
         *                      gpudb::insert_records_from_query_error_handling:
         *                      Specifies how errors should be handled upon
         *                      insertion.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_query_permissive:
         *                      Records with missing columns are populated with
         *                      nulls if possible; otherwise, the malformed
         *                      records are skipped.
         *                              <li>
         *                      gpudb::insert_records_from_query_ignore_bad_records:
         *                      Malformed records are skipped.
         *                              <li>
         *                      gpudb::insert_records_from_query_abort: Stops
         *                      current insertion and aborts entire operation
         *                      when an error is encountered.  Primary key
         *                      collisions are considered abortable errors in
         *                      this mode.
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_query_abort.
         *                              <li>
         *                      gpudb::insert_records_from_query_ignore_existing_pk:
         *                      Specifies the record collision
         *                      error-suppression policy for
         *                      inserting into a table with a <a
         *                      href="../../../concepts/tables/#primary-keys"
         *                      target="_top">primary key</a>, only used when
         *                      not in upsert mode (upsert mode is disabled
         *                      when @a update_on_existing_pk is
         *                      @a false).  If set to
         *                      @a true, any record being inserted that is
         *                      rejected
         *                      for having primary key values that match those
         *                      of an existing table record will be ignored
         *                      with no
         *                      error generated.  If @a false, the rejection of
         *                      any
         *                      record for having primary key values matching
         *                      an existing record will result in an error
         *                      being
         *                      reported, as determined by @a error_handling.
         *                      If the specified table does not
         *                      have a primary key or if upsert mode is in
         *                      effect (@a update_on_existing_pk is
         *                      @a true), then this option has no effect.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_query_true: Ignore
         *                      new records whose primary key values collide
         *                      with those of existing records
         *                              <li>
         *                      gpudb::insert_records_from_query_false: Treat
         *                      as errors any new records whose primary key
         *                      values collide with those of existing records
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_query_false.
         *                              <li>
         *                      gpudb::insert_records_from_query_ingestion_mode:
         *                      Whether to do a full load, dry run, or perform
         *                      a type inference on the source data.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_query_full: Run a
         *                      type inference on the source data (if needed)
         *                      and ingest
         *                              <li>
         *                      gpudb::insert_records_from_query_dry_run: Does
         *                      not load data, but walks through the source
         *                      data and determines the number of valid
         *                      records, taking into account the current mode
         *                      of @a error_handling.
         *                              <li>
         *                      gpudb::insert_records_from_query_type_inference_only:
         *                      Infer the type of the source data and return,
         *                      without ingesting any data.  The inferred type
         *                      is returned in the response.
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_query_full.
         *                              <li>
         *                      gpudb::insert_records_from_query_jdbc_fetch_size:
         *                      The JDBC fetch size, which determines how many
         *                      rows to fetch per round trip.
         *                              <li>
         *                      gpudb::insert_records_from_query_jdbc_session_init_statement:
         *                      Executes the statement per each jdbc session
         *                      before doing actual load.  The default value is
         *                      ''.
         *                              <li>
         *                      gpudb::insert_records_from_query_num_splits_per_rank:
         *                      Optional: number of splits for reading data per
         *                      rank. Default will be
         *                      external_file_reader_num_tasks.  The default
         *                      value is ''.
         *                              <li>
         *                      gpudb::insert_records_from_query_num_tasks_per_rank:
         *                      Optional: number of tasks for reading data per
         *                      rank. Default will be
         *                      external_file_reader_num_tasks
         *                              <li>
         *                      gpudb::insert_records_from_query_primary_keys:
         *                      Optional: comma separated list of column names,
         *                      to set as primary keys, when not specified in
         *                      the type.  The default value is ''.
         *                              <li>
         *                      gpudb::insert_records_from_query_shard_keys:
         *                      Optional: comma separated list of column names,
         *                      to set as primary keys, when not specified in
         *                      the type.  The default value is ''.
         *                              <li>
         *                      gpudb::insert_records_from_query_subscribe:
         *                      Continuously poll the data source to check for
         *                      new data and load it into the table.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_query_true
         *                              <li>
         *                      gpudb::insert_records_from_query_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_query_false.
         *                              <li>
         *                      gpudb::insert_records_from_query_truncate_table:
         *                      If set to @a true, truncates the table
         *                      specified by @a tableName prior to loading the
         *                      data.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_query_true
         *                              <li>
         *                      gpudb::insert_records_from_query_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_query_false.
         *                              <li>
         *                      gpudb::insert_records_from_query_remote_query:
         *                      Remote SQL query from which data will be
         *                      sourced
         *                              <li>
         *                      gpudb::insert_records_from_query_remote_query_order_by:
         *                      Name of column to be used for splitting the
         *                      query into multiple sub-queries using ordering
         *                      of given column.  The default value is ''.
         *                              <li>
         *                      gpudb::insert_records_from_query_remote_query_filter_column:
         *                      Name of column to be used for splitting the
         *                      query into multiple sub-queries using the data
         *                      distribution of given column.  The default
         *                      value is ''.
         *                              <li>
         *                      gpudb::insert_records_from_query_remote_query_increasing_column:
         *                      Column on subscribed remote query result that
         *                      will increase for new records (e.g.,
         *                      TIMESTAMP).  The default value is ''.
         *                              <li>
         *                      gpudb::insert_records_from_query_remote_query_partition_column:
         *                      Alias name for remote_query_filter_column.  The
         *                      default value is ''.
         *                              <li>
         *                      gpudb::insert_records_from_query_truncate_strings:
         *                      If set to @a true, truncate string values that
         *                      are longer than the column's type size.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_query_true
         *                              <li>
         *                      gpudb::insert_records_from_query_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_query_false.
         *                              <li>
         *                      gpudb::insert_records_from_query_update_on_existing_pk:
         *                      Specifies the record collision policy for
         *                      inserting into a table
         *                      with a <a
         *                      href="../../../concepts/tables/#primary-keys"
         *                      target="_top">primary key</a>. If set to
         *                      @a true, any existing table record with primary
         *                      key values that match those of a record being
         *                      inserted will be replaced by that new record
         *                      (the new
         *                      data will be "upserted"). If set to @a false,
         *                      any existing table record with primary key
         *                      values that match those of a record being
         *                      inserted will
         *                      remain unchanged, while the new record will be
         *                      rejected and the error handled as determined by
         *                      @a ignore_existing_pk & @a error_handling.  If
         *                      the
         *                      specified table does not have a primary key,
         *                      then this option has no effect.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_query_true: Upsert
         *                      new records when primary keys match existing
         *                      records
         *                              <li>
         *                      gpudb::insert_records_from_query_false: Reject
         *                      new records when primary keys match existing
         *                      records
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_query_false.
         *                      </ul>
         * 
         */
        InsertRecordsFromQueryRequest(const std::string& tableName_, const std::string& remoteQuery_, const std::map<std::string, std::map<std::string, std::string> >& modifyColumns_, const std::map<std::string, std::string>& createTableOptions_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            remoteQuery( remoteQuery_ ),
            modifyColumns( modifyColumns_ ),
            createTableOptions( createTableOptions_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::string remoteQuery;
        std::map<std::string, std::map<std::string, std::string> > modifyColumns;
        std::map<std::string, std::string> createTableOptions;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::InsertRecordsFromQueryRequest>
    {
        static void encode(Encoder& e, const gpudb::InsertRecordsFromQueryRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.remoteQuery);
            ::avro::encode(e, v.modifyColumns);
            ::avro::encode(e, v.createTableOptions);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::InsertRecordsFromQueryRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.remoteQuery);
                            break;

                        case 2:
                            ::avro::decode(d, v.modifyColumns);
                            break;

                        case 3:
                            ::avro::decode(d, v.createTableOptions);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.remoteQuery);
                ::avro::decode(d, v.modifyColumns);
                ::avro::decode(d, v.createTableOptions);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #insertRecordsFromQuery(const InsertRecordsFromQueryRequest&) const}.
     * <p>
     * Computes remote query result and inserts the result data into a new or
     * existing table
     */
    struct InsertRecordsFromQueryResponse
    {

        /**
         * Constructs an InsertRecordsFromQueryResponse object with default
         * parameter values.
         */
        InsertRecordsFromQueryResponse() :
            tableName(std::string()),
            typeId(std::string()),
            typeDefinition(std::string()),
            typeLabel(std::string()),
            typeProperties(std::map<std::string, std::vector<std::string> >()),
            countInserted(int64_t()),
            countSkipped(int64_t()),
            countUpdated(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string tableName;
        std::string typeId;
        std::string typeDefinition;
        std::string typeLabel;
        std::map<std::string, std::vector<std::string> > typeProperties;
        int64_t countInserted;
        int64_t countSkipped;
        int64_t countUpdated;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::InsertRecordsFromQueryResponse>
    {
        static void encode(Encoder& e, const gpudb::InsertRecordsFromQueryResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.typeDefinition);
            ::avro::encode(e, v.typeLabel);
            ::avro::encode(e, v.typeProperties);
            ::avro::encode(e, v.countInserted);
            ::avro::encode(e, v.countSkipped);
            ::avro::encode(e, v.countUpdated);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::InsertRecordsFromQueryResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 2:
                            ::avro::decode(d, v.typeDefinition);
                            break;

                        case 3:
                            ::avro::decode(d, v.typeLabel);
                            break;

                        case 4:
                            ::avro::decode(d, v.typeProperties);
                            break;

                        case 5:
                            ::avro::decode(d, v.countInserted);
                            break;

                        case 6:
                            ::avro::decode(d, v.countSkipped);
                            break;

                        case 7:
                            ::avro::decode(d, v.countUpdated);
                            break;

                        case 8:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.typeDefinition);
                ::avro::decode(d, v.typeLabel);
                ::avro::decode(d, v.typeProperties);
                ::avro::decode(d, v.countInserted);
                ::avro::decode(d, v.countSkipped);
                ::avro::decode(d, v.countUpdated);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
