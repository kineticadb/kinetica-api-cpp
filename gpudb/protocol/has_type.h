/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __HAS_TYPE_H__
#define __HAS_TYPE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref GPUdb::hasType(const HasTypeRequest&) const
     * "GPUdb::hasType".
     *
     * Check for the existence of a type.
     */
    struct HasTypeRequest
    {
        /**
         * Constructs a HasTypeRequest object with default parameters.
         */
        HasTypeRequest() :
            typeId(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a HasTypeRequest object with the specified parameters.
         *
         * @param[in] typeId_  Id of the type returned in response to @ref
         *                     GPUdb::createType(const CreateTypeRequest&) const
         *                     "GPUdb::createType" request.
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        HasTypeRequest(const std::string& typeId_, const std::map<std::string, std::string>& options_):
            typeId( typeId_ ),
            options( options_ )
        {
        }

        /**
         * Id of the type returned in response to @ref
         * GPUdb::createType(const CreateTypeRequest&) const
         * "GPUdb::createType" request.
         */
        std::string typeId;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::HasTypeRequest>
    {
        static void encode(Encoder& e, const gpudb::HasTypeRequest& v)
        {
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::HasTypeRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::hasType(const HasTypeRequest&) const "GPUdb::hasType".
     */
    struct HasTypeResponse
    {
        /**
         * Constructs a HasTypeResponse object with default parameters.
         */
        HasTypeResponse() :
            typeId(std::string()),
            typeExists(bool()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::HasTypeRequest::typeId "typeId".
         */
        std::string typeId;

        /**
         * Indicates whether the type exists or not.
         * Supported values:
         * <ul>
         *     <li>true
         *     <li>false
         * </ul>
         */
        bool typeExists;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::HasTypeResponse>
    {
        static void encode(Encoder& e, const gpudb::HasTypeResponse& v)
        {
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.typeExists);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::HasTypeResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeExists);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.typeExists);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __HAS_TYPE_H__
