/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __INSERT_RECORDS_FROM_FILES_H__
#define __INSERT_RECORDS_FROM_FILES_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #insertRecordsFromFiles(const InsertRecordsFromFilesRequest&) const}.
     * <p>
     * Reads from one or more files and inserts the data into a new or existing
     * table.
     * The source data can be located either in <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>; on the cluster, accessible to the database; or
     * remotely, accessible via a pre-defined external <a
     * href="../../../concepts/data_sources/" target="_top">data source</a>.
     * <p>

     * For delimited text files, there are two loading schemes: positional and
     * name-based. The name-based
     * loading scheme is enabled when the file has a header present and
     * @a text_has_header is set to
     * @a true. In this scheme, the source file(s) field names
     * must match the target table's column names exactly; however, the source
     * file can have more fields
     * than the target table has columns. If @a error_handling is set to
     * @a permissive, the source file can have fewer fields
     * than the target table has columns. If the name-based loading scheme is
     * being used, names matching
     * the file header's names may be provided to @a columns_to_load instead of
     * numbers, but ranges are not supported.
     * <p>
     * Note: Due to data being loaded in parallel, there is no insertion order
     * guaranteed.  For tables with
     * primary keys, in the case of a primary key collision, this means it is
     * indeterminate which record
     * will be inserted first and remain, while the rest of the colliding key
     * records are discarded.
     * <p>
     * Returns once all files are processed.
     */
    struct InsertRecordsFromFilesRequest
    {

        /**
         * Constructs an InsertRecordsFromFilesRequest object with default
         * parameter values.
         */
        InsertRecordsFromFilesRequest() :
            tableName(std::string()),
            filepaths(std::vector<std::string>()),
            modifyColumns(std::map<std::string, std::map<std::string, std::string> >()),
            createTableOptions(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an InsertRecordsFromFilesRequest object with the
         * specified parameters.
         * 
         * @param[in] tableName_  Name of the table into which the data will be
         *                        inserted, in
         *                        [schema_name.]table_name format, using
         *                        standard
         *                        <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        If the table does not exist, the table will
         *                        be created using either an existing
         *                        @a type_id or the type inferred from the
         *                        file, and the new table name will have to
         *                        meet standard
         *                        <a
         *                        href="../../../concepts/tables/#table-naming-criteria"
         *                        target="_top">table naming criteria</a>.
         * @param[in] filepaths_  A list of file paths from which data will be
         *                        sourced;
         *                        For paths in <a href="../../../tools/kifs/"
         *                        target="_top">KiFS</a>, use the uri prefix of
         *                        kifs:// followed by the path to
         *                        a file or directory. File matching by prefix
         *                        is supported, e.g. kifs://dir/file would
         *                        match dir/file_1
         *                        and dir/file_2. When prefix matching is used,
         *                        the path must start with a full, valid KiFS
         *                        directory name.
         *                        If an external data source is specified in @a
         *                        datasource_name, these file
         *                        paths must resolve to accessible files at
         *                        that data source location. Prefix matching is
         *                        supported.
         *                        If the data source is hdfs, prefixes must be
         *                        aligned with directories, i.e. partial file
         *                        names will
         *                        not match.
         *                        If no data source is specified, the files are
         *                        assumed to be local to the database and must
         *                        all be
         *                        accessible to the gpudb user, residing on the
         *                        path (or relative to the path) specified by
         *                        the
         *                        external files directory in the Kinetica
         *                        <a
         *                        href="../../../config/#config-main-external-files"
         *                        target="_top">configuration file</a>.
         *                        Wildcards (*) can be used to
         *                        specify a group of files.  Prefix matching is
         *                        supported, the prefixes must be aligned with
         *                        directories.
         *                        If the first path ends in .tsv, the text
         *                        delimiter will be defaulted to a tab
         *                        character.
         *                        If the first path ends in .psv, the text
         *                        delimiter will be defaulted to a pipe
         *                        character (|).
         * @param[in] modifyColumns_  Not implemented yet
         * @param[in] createTableOptions_  Options used when creating the
         *                                 target table.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_type_id:
         *                                 ID of a currently registered <a
         *                                 href="../../../concepts/types/"
         *                                 target="_top">type</a>.  The default
         *                                 value is ''.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_no_error_if_exists:
         *                                 If @a true, prevents an error from
         *                                 occurring if the table already
         *                                 exists and is of the given type.  If
         *                                 a table with the same ID but a
         *                                 different type exists, it is still
         *                                 an error.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_true
         *                                         <li>
         *                                 gpudb::insert_records_from_files_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_files_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_is_replicated:
         *                                 Affects the <a
         *                                 href="../../../concepts/tables/#distribution"
         *                                 target="_top">distribution
         *                                 scheme</a> for the table's data.  If
         *                                 @a true and the given type has no
         *                                 explicit <a
         *                                 href="../../../concepts/tables/#shard-key"
         *                                 target="_top">shard key</a> defined,
         *                                 the table will be <a
         *                                 href="../../../concepts/tables/#replication"
         *                                 target="_top">replicated</a>.  If @a
         *                                 false, the table will be <a
         *                                 href="../../../concepts/tables/#sharding"
         *                                 target="_top">sharded</a> according
         *                                 to the shard key specified in the
         *                                 given @a type_id, or <a
         *                                 href="../../../concepts/tables/#random-sharding"
         *                                 target="_top">randomly sharded</a>,
         *                                 if no shard key is specified.  Note
         *                                 that a type containing a shard key
         *                                 cannot be used to create a
         *                                 replicated table.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_true
         *                                         <li>
         *                                 gpudb::insert_records_from_files_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_files_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_foreign_keys:
         *                                 Semicolon-separated list of <a
         *                                 href="../../../concepts/tables/#foreign-keys"
         *                                 target="_top">foreign keys</a>, of
         *                                 the format '(source_column_name [,
         *                                 ...]) references
         *                                 target_table_name(primary_key_column_name
         *                                 [, ...]) [as foreign_key_name]'.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_foreign_shard_key:
         *                                 Foreign shard key of the format
         *                                 'source_column references
         *                                 shard_by_column from
         *                                 target_table(primary_key_column)'.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_partition_type:
         *                                 <a
         *                                 href="../../../concepts/tables/#partitioning"
         *                                 target="_top">Partitioning</a>
         *                                 scheme to use.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_RANGE:
         *                                 Use <a
         *                                 href="../../../concepts/tables/#partitioning-by-range"
         *                                 target="_top">range
         *                                 partitioning</a>.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_INTERVAL:
         *                                 Use <a
         *                                 href="../../../concepts/tables/#partitioning-by-interval"
         *                                 target="_top">interval
         *                                 partitioning</a>.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_LIST:
         *                                 Use <a
         *                                 href="../../../concepts/tables/#partitioning-by-list"
         *                                 target="_top">list partitioning</a>.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_HASH:
         *                                 Use <a
         *                                 href="../../../concepts/tables/#partitioning-by-hash"
         *                                 target="_top">hash partitioning</a>.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_SERIES:
         *                                 Use <a
         *                                 href="../../../concepts/tables/#partitioning-by-series"
         *                                 target="_top">series
         *                                 partitioning</a>.
         *                                 </ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_partition_keys:
         *                                 Comma-separated list of partition
         *                                 keys, which are the columns or
         *                                 column expressions by which records
         *                                 will be assigned to partitions
         *                                 defined by @a partition_definitions.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_partition_definitions:
         *                                 Comma-separated list of partition
         *                                 definitions, whose format depends on
         *                                 the choice of @a partition_type.
         *                                 See <a
         *                                 href="../../../concepts/tables/#partitioning-by-range"
         *                                 target="_top">range
         *                                 partitioning</a>, <a
         *                                 href="../../../concepts/tables/#partitioning-by-interval"
         *                                 target="_top">interval
         *                                 partitioning</a>, <a
         *                                 href="../../../concepts/tables/#partitioning-by-list"
         *                                 target="_top">list partitioning</a>,
         *                                 <a
         *                                 href="../../../concepts/tables/#partitioning-by-hash"
         *                                 target="_top">hash partitioning</a>,
         *                                 or <a
         *                                 href="../../../concepts/tables/#partitioning-by-series"
         *                                 target="_top">series
         *                                 partitioning</a> for example
         *                                 formats.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_is_automatic_partition:
         *                                 If @a true, a new partition will be
         *                                 created for values which don't fall
         *                                 into an existing partition.
         *                                 Currently only supported for <a
         *                                 href="../../../concepts/tables/#partitioning-by-list"
         *                                 target="_top">list partitions</a>.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_true
         *                                         <li>
         *                                 gpudb::insert_records_from_files_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_files_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_ttl:
         *                                 Sets the <a
         *                                 href="../../../concepts/ttl/"
         *                                 target="_top">TTL</a> of the table
         *                                 specified in @a tableName.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_chunk_size:
         *                                 Indicates the number of records per
         *                                 chunk to be used for this table.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_is_result_table:
         *                                 Indicates whether the table is a <a
         *                                 href="../../../concepts/tables_memory_only/"
         *                                 target="_top">memory-only table</a>.
         *                                 A result table cannot contain
         *                                 columns with store_only or
         *                                 text_search <a
         *                                 href="../../../concepts/types/#data-handling"
         *                                 target="_top">data-handling</a> or
         *                                 that are <a
         *                                 href="../../../concepts/types/#primitive-types"
         *                                 target="_top">non-charN strings</a>,
         *                                 and it will not be retained if the
         *                                 server is restarted.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_true
         *                                         <li>
         *                                 gpudb::insert_records_from_files_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_files_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_strategy_definition:
         *                                 The <a
         *                                 href="../../../rm/concepts/#tier-strategies"
         *                                 target="_top">tier strategy</a> for
         *                                 the table and its columns.
         *                                 </ul>
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_avro_header_bytes:
         *                      Optional number of bytes to skip when reading
         *                      an avro record.
         *                              <li>
         *                      gpudb::insert_records_from_files_avro_num_records:
         *                      Optional number of avro records, if data
         *                      includes only records.
         *                              <li>
         *                      gpudb::insert_records_from_files_avro_schema:
         *                      Optional string representing avro schema, if
         *                      data includes only records.
         *                              <li>
         *                      gpudb::insert_records_from_files_avro_schemaless:
         *                      When user provides 'avro_schema', avro data is
         *                      assumed to be schemaless, unless specified.
         *                      Default is 'true' when given avro_schema.
         *                      Igonred when avro_schema is not given.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_true
         *                              <li>
         *                      gpudb::insert_records_from_files_false
         *                      </ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_bad_record_table_name:
         *                      Optional name of a table to which records that
         *                      were rejected are written.  The
         *                      bad-record-table has the following columns:
         *                      line_number (long), line_rejected (string),
         *                      error_message (string). When error handling is
         *                      Abort, bad records table is not populated.
         *                              <li>
         *                      gpudb::insert_records_from_files_bad_record_table_limit:
         *                      A positive integer indicating the maximum
         *                      number of records that can be  written to the
         *                      bad-record-table.   Default value is 10000
         *                              <li>
         *                      gpudb::insert_records_from_files_bad_record_table_limit_per_input:
         *                      For subscriptions: A positive integer
         *                      indicating the maximum number of records that
         *                      can be written to the bad-record-table per
         *                      file/payload. Default value will be
         *                      'bad_record_table_limit' and total size of the
         *                      table per rank is limited to
         *                      'bad_record_table_limit'
         *                              <li>
         *                      gpudb::insert_records_from_files_batch_size:
         *                      Internal tuning parameter--number of records
         *                      per batch when inserting data.
         *                              <li>
         *                      gpudb::insert_records_from_files_column_formats:
         *                      For each target column specified, applies the
         *                      column-property-bound format to the source data
         *                      loaded into that column.  Each column format
         *                      will contain a mapping of one or more of its
         *                      column
         *                      properties to an appropriate format for each
         *                      property.  Currently supported column
         *                      properties
         *                      include date, time, & datetime. The parameter
         *                      value must be formatted as a JSON string of
         *                      maps of
         *                      column names to maps of column properties to
         *                      their corresponding column formats, e.g.,
         *                      '{ "order_date" : { "date" : "%Y.%m.%d" },
         *                      "order_time" : { "time" : "%H:%M:%S" } }'.
         *                      See @a default_column_formats for valid format
         *                      syntax.
         *                              <li>
         *                      gpudb::insert_records_from_files_columns_to_load:
         *                      Specifies a comma-delimited list of columns
         *                      from the source data to
         *                      load.  If more than one file is being loaded,
         *                      this list applies to all files.
         *                      Column numbers can be specified discretely or
         *                      as a range.  For example, a value of '5,7,1..3'
         *                      will
         *                      insert values from the fifth column in the
         *                      source data into the first column in the target
         *                      table,
         *                      from the seventh column in the source data into
         *                      the second column in the target table, and from
         *                      the
         *                      first through third columns in the source data
         *                      into the third through fifth columns in the
         *                      target
         *                      table.
         *                      If the source data contains a header, column
         *                      names matching the file header names may be
         *                      provided
         *                      instead of column numbers.  If the target table
         *                      doesn't exist, the table will be created with
         *                      the
         *                      columns in this order.  If the target table
         *                      does exist with columns in a different order
         *                      than the
         *                      source data, this list can be used to match the
         *                      order of the target table.  For example, a
         *                      value of
         *                      'C, B, A' will create a three column table with
         *                      column C, followed by column B, followed by
         *                      column
         *                      A; or will insert those fields in that order
         *                      into a table created with columns in that
         *                      order.  If
         *                      the target table exists, the column names must
         *                      match the source data field names for a
         *                      name-mapping
         *                      to be successful.
         *                      Mutually exclusive with @a columns_to_skip.
         *                              <li>
         *                      gpudb::insert_records_from_files_columns_to_skip:
         *                      Specifies a comma-delimited list of columns
         *                      from the source data to
         *                      skip.  Mutually exclusive with @a
         *                      columns_to_load.
         *                              <li>
         *                      gpudb::insert_records_from_files_compression_type:
         *                      Optional: compression type
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_none:
         *                      Uncompressed file
         *                              <li>
         *                      gpudb::insert_records_from_files_auto: Default.
         *                      Auto detect compression type
         *                              <li>
         *                      gpudb::insert_records_from_files_gzip: gzip
         *                      file compression.
         *                              <li>
         *                      gpudb::insert_records_from_files_bzip2: bzip2
         *                      file compression.
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_auto.
         *                              <li>
         *                      gpudb::insert_records_from_files_datasource_name:
         *                      Name of an existing external data source from
         *                      which data file(s) specified in @a filepaths
         *                      will be loaded
         *                              <li>
         *                      gpudb::insert_records_from_files_default_column_formats:
         *                      Specifies the default format to be applied to
         *                      source data loaded
         *                      into columns with the corresponding column
         *                      property.  Currently supported column
         *                      properties include
         *                      date, time, & datetime.  This default
         *                      column-property-bound format can be overridden
         *                      by specifying a
         *                      column property & format for a given target
         *                      column in @a column_formats. For
         *                      each specified annotation, the format will
         *                      apply to all columns with that annotation
         *                      unless a custom
         *                      @a column_formats for that annotation is
         *                      specified.
         *                      The parameter value must be formatted as a JSON
         *                      string that is a map of column properties to
         *                      their
         *                      respective column formats, e.g., '{ "date" :
         *                      "%Y.%m.%d", "time" : "%H:%M:%S" }'.  Column
         *                      formats are specified as a string of control
         *                      characters and plain text. The supported
         *                      control
         *                      characters are 'Y', 'm', 'd', 'H', 'M', 'S',
         *                      and 's', which follow the Linux 'strptime()'
         *                      specification, as well as 's', which specifies
         *                      seconds and fractional seconds (though the
         *                      fractional
         *                      component will be truncated past milliseconds).
         *                      Formats for the 'date' annotation must include
         *                      the 'Y', 'm', and 'd' control characters.
         *                      Formats for
         *                      the 'time' annotation must include the 'H',
         *                      'M', and either 'S' or 's' (but not both)
         *                      control
         *                      characters. Formats for the 'datetime'
         *                      annotation meet both the 'date' and 'time'
         *                      control character
         *                      requirements. For example, '{"datetime" :
         *                      "%m/%d/%Y %H:%M:%S" }' would be used to
         *                      interpret text
         *                      as "05/04/2000 12:12:11"
         *                              <li>
         *                      gpudb::insert_records_from_files_error_handling:
         *                      Specifies how errors should be handled upon
         *                      insertion.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_permissive:
         *                      Records with missing columns are populated with
         *                      nulls if possible; otherwise, the malformed
         *                      records are skipped.
         *                              <li>
         *                      gpudb::insert_records_from_files_ignore_bad_records:
         *                      Malformed records are skipped.
         *                              <li>
         *                      gpudb::insert_records_from_files_abort: Stops
         *                      current insertion and aborts entire operation
         *                      when an error is encountered.  Primary key
         *                      collisions are considered abortable errors in
         *                      this mode.
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_abort.
         *                              <li>
         *                      gpudb::insert_records_from_files_file_type:
         *                      Specifies the type of the file(s) whose records
         *                      will be inserted.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_avro: Avro
         *                      file format
         *                              <li>
         *                      gpudb::insert_records_from_files_delimited_text:
         *                      Delimited text file format; e.g., CSV, TSV,
         *                      PSV, etc.
         *                              <li>
         *                      gpudb::insert_records_from_files_gdb: Esri/GDB
         *                      file format
         *                              <li>
         *                      gpudb::insert_records_from_files_json: Json
         *                      file format
         *                              <li>
         *                      gpudb::insert_records_from_files_parquet:
         *                      Apache Parquet file format
         *                              <li>
         *                      gpudb::insert_records_from_files_shapefile:
         *                      ShapeFile file format
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_delimited_text.
         *                              <li>
         *                      gpudb::insert_records_from_files_gdal_configuration_options:
         *                      Comma separated list of gdal conf options, for
         *                      the specific requets: key=value.  The default
         *                      value is ''.
         *                              <li>
         *                      gpudb::insert_records_from_files_ignore_existing_pk:
         *                      Specifies the record collision
         *                      error-suppression policy for
         *                      inserting into a table with a <a
         *                      href="../../../concepts/tables/#primary-keys"
         *                      target="_top">primary key</a>, only used when
         *                      not in upsert mode (upsert mode is disabled
         *                      when @a update_on_existing_pk is
         *                      @a false).  If set to
         *                      @a true, any record being inserted that is
         *                      rejected
         *                      for having primary key values that match those
         *                      of an existing table record will be ignored
         *                      with no
         *                      error generated.  If @a false, the rejection of
         *                      any
         *                      record for having primary key values matching
         *                      an existing record will result in an error
         *                      being
         *                      reported, as determined by @a error_handling.
         *                      If the specified table does not
         *                      have a primary key or if upsert mode is in
         *                      effect (@a update_on_existing_pk is
         *                      @a true), then this option has no effect.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_true: Ignore
         *                      new records whose primary key values collide
         *                      with those of existing records
         *                              <li>
         *                      gpudb::insert_records_from_files_false: Treat
         *                      as errors any new records whose primary key
         *                      values collide with those of existing records
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_false.
         *                              <li>
         *                      gpudb::insert_records_from_files_ingestion_mode:
         *                      Whether to do a full load, dry run, or perform
         *                      a type inference on the source data.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_full: Run a
         *                      type inference on the source data (if needed)
         *                      and ingest
         *                              <li>
         *                      gpudb::insert_records_from_files_dry_run: Does
         *                      not load data, but walks through the source
         *                      data and determines the number of valid
         *                      records, taking into account the current mode
         *                      of @a error_handling.
         *                              <li>
         *                      gpudb::insert_records_from_files_type_inference_only:
         *                      Infer the type of the source data and return,
         *                      without ingesting any data.  The inferred type
         *                      is returned in the response.
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_full.
         *                              <li>
         *                      gpudb::insert_records_from_files_kafka_group_id:
         *                      The group id to be used consuming data from a
         *                      kakfa topic (valid only for kafka datasource
         *                      subscriptions).
         *                              <li>
         *                      gpudb::insert_records_from_files_kafka_offset_reset_policy:
         *                      Policy to determine whether the data
         *                      consumption starts either at earliest offset or
         *                      latest offset.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_earliest
         *                              <li>
         *                      gpudb::insert_records_from_files_latest
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_earliest.
         *                              <li>
         *                      gpudb::insert_records_from_files_kafka_subscription_cancel_after:
         *                      Sets the subscription lifespan (in minutes).
         *                      Expired subscription will be cancelled
         *                      automatically.
         *                              <li>
         *                      gpudb::insert_records_from_files_layer:
         *                      Optional: geo files layer(s) name(s): comma
         *                      separated.  The default value is ''.
         *                              <li>
         *                      gpudb::insert_records_from_files_loading_mode:
         *                      Scheme for distributing the extraction and
         *                      loading of data from the source data file(s).
         *                      This option applies only when loading files
         *                      that are local to the database
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_head: The head
         *                      node loads all data. All files must be
         *                      available to the head node.
         *                              <li>
         *                      gpudb::insert_records_from_files_distributed_shared:
         *                      The head node coordinates loading data by
         *                      worker
         *                      processes across all nodes from shared files
         *                      available to all workers.
         *                      NOTE:
         *                      Instead of existing on a shared source, the
         *                      files can be duplicated on a source local to
         *                      each host
         *                      to improve performance, though the files must
         *                      appear as the same data set from the
         *                      perspective of
         *                      all hosts performing the load.
         *                              <li>
         *                      gpudb::insert_records_from_files_distributed_local:
         *                      A single worker process on each node loads all
         *                      files
         *                      that are available to it. This option works
         *                      best when each worker loads files from its own
         *                      file
         *                      system, to maximize performance. In order to
         *                      avoid data duplication, either each worker
         *                      performing
         *                      the load needs to have visibility to a set of
         *                      files unique to it (no file is visible to more
         *                      than
         *                      one node) or the target table needs to have a
         *                      primary key (which will allow the worker to
         *                      automatically deduplicate data).
         *                      NOTE:
         *                      If the target table doesn't exist, the table
         *                      structure will be determined by the head node.
         *                      If the
         *                      head node has no files local to it, it will be
         *                      unable to determine the structure and the
         *                      request
         *                      will fail.
         *                      If the head node is configured to have no
         *                      worker processes, no data strictly accessible
         *                      to the head
         *                      node will be loaded.
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_head.
         *                              <li>
         *                      gpudb::insert_records_from_files_local_time_offset:
         *                      For Avro local timestamp columns
         *                              <li>
         *                      gpudb::insert_records_from_files_max_records_to_load:
         *                      Limit the number of records to load in this
         *                      request: If this number is larger than a
         *                      batch_size, then the number of records loaded
         *                      will be limited to the next whole number of
         *                      batch_size (per working thread).  The default
         *                      value is ''.
         *                              <li>
         *                      gpudb::insert_records_from_files_num_tasks_per_rank:
         *                      Optional: number of tasks for reading file per
         *                      rank. Default will be
         *                      external_file_reader_num_tasks
         *                              <li>
         *                      gpudb::insert_records_from_files_poll_interval:
         *                      If @a true, the number of seconds between
         *                      attempts to load external files into the table.
         *                      If zero, polling will be continuous as long as
         *                      data is found.  If no data is found, the
         *                      interval will steadily increase to a maximum of
         *                      60 seconds.
         *                              <li>
         *                      gpudb::insert_records_from_files_primary_keys:
         *                      Optional: comma separated list of column names,
         *                      to set as primary keys, when not specified in
         *                      the type.  The default value is ''.
         *                              <li>
         *                      gpudb::insert_records_from_files_schema_registry_schema_id
         *                              <li>
         *                      gpudb::insert_records_from_files_schema_registry_schema_name
         *                              <li>
         *                      gpudb::insert_records_from_files_schema_registry_schema_version
         *                              <li>
         *                      gpudb::insert_records_from_files_shard_keys:
         *                      Optional: comma separated list of column names,
         *                      to set as primary keys, when not specified in
         *                      the type.  The default value is ''.
         *                              <li>
         *                      gpudb::insert_records_from_files_skip_lines:
         *                      Skip number of lines from begining of file.
         *                              <li>
         *                      gpudb::insert_records_from_files_subscribe:
         *                      Continuously poll the data source to check for
         *                      new data and load it into the table.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_true
         *                              <li>
         *                      gpudb::insert_records_from_files_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_false.
         *                              <li>
         *                      gpudb::insert_records_from_files_table_insert_mode:
         *                      Optional: table_insert_mode. When inserting
         *                      records from multiple files: if table_per_file
         *                      then insert from each file into a new table.
         *                      Currently supported only for shapefiles.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_single
         *                              <li>
         *                      gpudb::insert_records_from_files_table_per_file
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_single.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_comment_string:
         *                      Specifies the character string that should be
         *                      interpreted as a comment line
         *                      prefix in the source data.  All lines in the
         *                      data starting with the provided string are
         *                      ignored.
         *                      For @a delimited_text @a file_type only.  The
         *                      default value is '#'.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_delimiter:
         *                      Specifies the character delimiting field values
         *                      in the source data
         *                      and field names in the header (if present).
         *                      For @a delimited_text @a file_type only.  The
         *                      default value is ','.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_escape_character:
         *                      Specifies the character that is used to escape
         *                      other characters in
         *                      the source data.
         *                      An 'a', 'b', 'f', 'n', 'r', 't', or 'v'
         *                      preceded by an escape character will be
         *                      interpreted as the
         *                      ASCII bell, backspace, form feed, line feed,
         *                      carriage return, horizontal tab, & vertical
         *                      tab,
         *                      respectively.  For example, the escape
         *                      character followed by an 'n' will be
         *                      interpreted as a newline
         *                      within a field value.
         *                      The escape character can also be used to escape
         *                      the quoting character, and will be treated as
         *                      an
         *                      escape character whether it is within a quoted
         *                      field value or not.
         *                      For @a delimited_text @a file_type only.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_has_header:
         *                      Indicates whether the source data contains a
         *                      header row.
         *                      For @a delimited_text @a file_type only.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_true
         *                              <li>
         *                      gpudb::insert_records_from_files_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_true.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_header_property_delimiter:
         *                      Specifies the delimiter for
         *                      <a
         *                      href="../../../concepts/types/#column-properties"
         *                      target="_top">column properties</a> in the
         *                      header row (if
         *                      present).  Cannot be set to same value as @a
         *                      text_delimiter.
         *                      For @a delimited_text @a file_type only.  The
         *                      default value is '|'.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_null_string:
         *                      Specifies the character string that should be
         *                      interpreted as a null
         *                      value in the source data.
         *                      For @a delimited_text @a file_type only.  The
         *                      default value is '\\N'.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_quote_character:
         *                      Specifies the character that should be
         *                      interpreted as a field value
         *                      quoting character in the source data.  The
         *                      character must appear at beginning and end of
         *                      field value
         *                      to take effect.  Delimiters within quoted
         *                      fields are treated as literals and not
         *                      delimiters.  Within
         *                      a quoted field, two consecutive quote
         *                      characters will be interpreted as a single
         *                      literal quote
         *                      character, effectively escaping it.  To not
         *                      have a quote character, specify an empty
         *                      string.
         *                      For @a delimited_text @a file_type only.  The
         *                      default value is '"'.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_search_columns:
         *                      Add 'text_search' property to internally
         *                      inferenced string columns. Comma seperated list
         *                      of column names or '*' for all columns. To add
         *                      text_search property only to string columns of
         *                      minimum size, set also the option
         *                      'text_search_min_column_length'
         *                              <li>
         *                      gpudb::insert_records_from_files_text_search_min_column_length:
         *                      Set minimum column size. Used only when
         *                      'text_search_columns' has a value.
         *                              <li>
         *                      gpudb::insert_records_from_files_truncate_strings:
         *                      If set to @a true, truncate string values that
         *                      are longer than the column's type size.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_true
         *                              <li>
         *                      gpudb::insert_records_from_files_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_false.
         *                              <li>
         *                      gpudb::insert_records_from_files_truncate_table:
         *                      If set to @a true, truncates the table
         *                      specified by @a tableName prior to loading the
         *                      file(s).
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_true
         *                              <li>
         *                      gpudb::insert_records_from_files_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_false.
         *                              <li>
         *                      gpudb::insert_records_from_files_type_inference_mode:
         *                      optimize type inference for:
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_accuracy:
         *                      Scans data to get exactly-typed & sized columns
         *                      for all data scanned.
         *                              <li>
         *                      gpudb::insert_records_from_files_speed: Scans
         *                      data and picks the widest possible column types
         *                      so that 'all' values will fit with minimum data
         *                      scanned
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_speed.
         *                              <li>
         *                      gpudb::insert_records_from_files_update_on_existing_pk:
         *                      Specifies the record collision policy for
         *                      inserting into a table
         *                      with a <a
         *                      href="../../../concepts/tables/#primary-keys"
         *                      target="_top">primary key</a>. If set to
         *                      @a true, any existing table record with primary
         *                      key values that match those of a record being
         *                      inserted will be replaced by that new record
         *                      (the new
         *                      data will be "upserted"). If set to @a false,
         *                      any existing table record with primary key
         *                      values that match those of a record being
         *                      inserted will
         *                      remain unchanged, while the new record will be
         *                      rejected and the error handled as determined by
         *                      @a ignore_existing_pk & @a error_handling.  If
         *                      the
         *                      specified table does not have a primary key,
         *                      then this option has no effect.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_true: Upsert
         *                      new records when primary keys match existing
         *                      records
         *                              <li>
         *                      gpudb::insert_records_from_files_false: Reject
         *                      new records when primary keys match existing
         *                      records
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_false.
         *                      </ul>
         * 
         */
        InsertRecordsFromFilesRequest(const std::string& tableName_, const std::vector<std::string>& filepaths_, const std::map<std::string, std::map<std::string, std::string> >& modifyColumns_, const std::map<std::string, std::string>& createTableOptions_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            filepaths( filepaths_ ),
            modifyColumns( modifyColumns_ ),
            createTableOptions( createTableOptions_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::vector<std::string> filepaths;
        std::map<std::string, std::map<std::string, std::string> > modifyColumns;
        std::map<std::string, std::string> createTableOptions;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::InsertRecordsFromFilesRequest>
    {
        static void encode(Encoder& e, const gpudb::InsertRecordsFromFilesRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.filepaths);
            ::avro::encode(e, v.modifyColumns);
            ::avro::encode(e, v.createTableOptions);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::InsertRecordsFromFilesRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.filepaths);
                            break;

                        case 2:
                            ::avro::decode(d, v.modifyColumns);
                            break;

                        case 3:
                            ::avro::decode(d, v.createTableOptions);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.filepaths);
                ::avro::decode(d, v.modifyColumns);
                ::avro::decode(d, v.createTableOptions);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #insertRecordsFromFiles(const InsertRecordsFromFilesRequest&) const}.
     * <p>
     * Reads from one or more files and inserts the data into a new or existing
     * table.
     * The source data can be located either in <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>; on the cluster, accessible to the database; or
     * remotely, accessible via a pre-defined external <a
     * href="../../../concepts/data_sources/" target="_top">data source</a>.
     * <p>

     * For delimited text files, there are two loading schemes: positional and
     * name-based. The name-based
     * loading scheme is enabled when the file has a header present and
     * @a text_has_header is set to
     * @a true. In this scheme, the source file(s) field names
     * must match the target table's column names exactly; however, the source
     * file can have more fields
     * than the target table has columns. If @a error_handling is set to
     * @a permissive, the source file can have fewer fields
     * than the target table has columns. If the name-based loading scheme is
     * being used, names matching
     * the file header's names may be provided to @a columns_to_load instead of
     * numbers, but ranges are not supported.
     * <p>
     * Note: Due to data being loaded in parallel, there is no insertion order
     * guaranteed.  For tables with
     * primary keys, in the case of a primary key collision, this means it is
     * indeterminate which record
     * will be inserted first and remain, while the rest of the colliding key
     * records are discarded.
     * <p>
     * Returns once all files are processed.
     */
    struct InsertRecordsFromFilesResponse
    {

        /**
         * Constructs an InsertRecordsFromFilesResponse object with default
         * parameter values.
         */
        InsertRecordsFromFilesResponse() :
            tableName(std::string()),
            typeId(std::string()),
            typeDefinition(std::string()),
            typeLabel(std::string()),
            typeProperties(std::map<std::string, std::vector<std::string> >()),
            countInserted(int64_t()),
            countSkipped(int64_t()),
            countUpdated(int64_t()),
            info(std::map<std::string, std::string>()),
            files(std::vector<std::string>())
        {
        }

        std::string tableName;
        std::string typeId;
        std::string typeDefinition;
        std::string typeLabel;
        std::map<std::string, std::vector<std::string> > typeProperties;
        int64_t countInserted;
        int64_t countSkipped;
        int64_t countUpdated;
        std::map<std::string, std::string> info;
        std::vector<std::string> files;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::InsertRecordsFromFilesResponse>
    {
        static void encode(Encoder& e, const gpudb::InsertRecordsFromFilesResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.typeDefinition);
            ::avro::encode(e, v.typeLabel);
            ::avro::encode(e, v.typeProperties);
            ::avro::encode(e, v.countInserted);
            ::avro::encode(e, v.countSkipped);
            ::avro::encode(e, v.countUpdated);
            ::avro::encode(e, v.info);
            ::avro::encode(e, v.files);
        }

        static void decode(Decoder& d, gpudb::InsertRecordsFromFilesResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 2:
                            ::avro::decode(d, v.typeDefinition);
                            break;

                        case 3:
                            ::avro::decode(d, v.typeLabel);
                            break;

                        case 4:
                            ::avro::decode(d, v.typeProperties);
                            break;

                        case 5:
                            ::avro::decode(d, v.countInserted);
                            break;

                        case 6:
                            ::avro::decode(d, v.countSkipped);
                            break;

                        case 7:
                            ::avro::decode(d, v.countUpdated);
                            break;

                        case 8:
                            ::avro::decode(d, v.info);
                            break;

                        case 9:
                            ::avro::decode(d, v.files);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.typeDefinition);
                ::avro::decode(d, v.typeLabel);
                ::avro::decode(d, v.typeProperties);
                ::avro::decode(d, v.countInserted);
                ::avro::decode(d, v.countSkipped);
                ::avro::decode(d, v.countUpdated);
                ::avro::decode(d, v.info);
                ::avro::decode(d, v.files);
            }
        }
    };
}

#endif
