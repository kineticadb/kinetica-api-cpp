/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_TABLE_H__
#define __ALTER_TABLE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::alterTable(const AlterTableRequest&) const "GPUdb::alterTable".
     *
     * Apply various modifications to a table or view.  The available
     * modifications include the following:
     *
     * Manage a table's columns--a column can be added, removed, or have its <a
     * href="../../../concepts/types/" target="_top">type and properties</a>
     * modified, including whether it is <a
     * href="../../../concepts/dictionary_encoding/" target="_top">dictionary
     * encoded</a> or not.
     *
     * External tables cannot be modified except for their refresh method.
     *
     * Create or delete a <a href="../../../concepts/indexes/#column-index"
     * target="_top">column</a>, <a
     * href="../../../concepts/indexes/#low-cardinality-index"
     * target="_top">low-cardinality index</a>, <a
     * href="../../../concepts/indexes/#chunk-skip-index" target="_top">chunk
     * skip</a>, <a href="../../../concepts/indexes/#geospatial-index"
     * target="_top">geospatial</a>, <a
     * href="../../../concepts/indexes/#cagra-index" target="_top">CAGRA</a>,
     * or <a href="../../../concepts/indexes/#hnsw-index"
     * target="_top">HNSW</a> index. This can speed up certain operations when
     * using expressions containing equality or relational operators on indexed
     * columns. This only applies to tables.
     *
     * Create or delete a <a href="../../../concepts/tables/#foreign-key"
     * target="_top">foreign key</a> on a particular column.
     *
     * Manage a <a href="../../../concepts/tables/#partitioning-by-range"
     * target="_top">range-partitioned</a> or a <a
     * href="../../../concepts/tables/#partitioning-by-list-manual"
     * target="_top">manual list-partitioned</a> table's partitions.
     *
     * Set (or reset) the <a href="../../../rm/concepts/#tier-strategies"
     * target="_top">tier strategy</a> of a table or view.
     *
     * Refresh and manage the refresh mode of a <a
     * href="../../../concepts/materialized_views/" target="_top">materialized
     * view</a> or an <a href="../../../concepts/external_tables/"
     * target="_top">external table</a>.
     *
     * Set the <a href="../../../concepts/ttl/" target="_top">time-to-live
     * (TTL)</a>. This can be applied to tables or views.
     *
     * Set the global access mode (i.e. locking) for a table. This setting
     * trumps any role-based access controls that may be in place; e.g., a user
     * with write access to a table marked read-only will not be able to insert
     * records into it. The mode can be set to read-only, write-only,
     * read/write, and no access.
     */
    struct AlterTableRequest
    {
        /**
         * Constructs an AlterTableRequest object with default parameters.
         */
        AlterTableRequest() :
            tableName(std::string()),
            action(std::string()),
            value(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterTableRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Table on which the operation will be
         *                        performed, in [schema_name.]table_name
         *                        format, using standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>. Must
         *                        be an existing table or view.
         * @param[in] action_  Modification operation to be applied.
         *                     Supported values:
         *                     <ul>
         *                         <li>@ref
         *                             gpudb::alter_table_allow_homogeneous_tables
         *                             "alter_table_allow_homogeneous_tables":
         *                             No longer supported; action will be
         *                             ignored.
         *                         <li>@ref gpudb::alter_table_create_index
         *                             "alter_table_create_index": Creates a <a
         *                             href="../../../concepts/indexes/#column-index"
         *                             target="_top">column (attribute)
         *                             index</a>, <a
         *                             href="../../../concepts/indexes/#low-cardinality-index"
         *                             target="_top">low-cardinality index</a>,
         *                             <a
         *                             href="../../../concepts/indexes/#chunk-skip-index"
         *                             target="_top">chunk skip index</a>, <a
         *                             href="../../../concepts/indexes/#geospatial-index"
         *                             target="_top">geospatial index</a>, <a
         *                             href="../../../concepts/indexes/#cagra-index"
         *                             target="_top">CAGRA index</a>, or <a
         *                             href="../../../concepts/indexes/#hnsw-index"
         *                             target="_top">HNSW index</a> (depending
         *                             on the specified @ref
         *                             gpudb::alter_table_index_type
         *                             "index_type"), on the column name
         *                             specified in @a value_. If this column
         *                             already has the specified index, an
         *                             error will be returned.
         *                         <li>@ref gpudb::alter_table_refresh_index
         *                             "alter_table_refresh_index": Refreshes
         *                             an index identified by @ref
         *                             gpudb::alter_table_index_type
         *                             "index_type", on the column name
         *                             specified in @a value_. Currently
         *                             applicable only to CAGRA indices.
         *                         <li>@ref gpudb::alter_table_delete_index
         *                             "alter_table_delete_index": Deletes a <a
         *                             href="../../../concepts/indexes/#column-index"
         *                             target="_top">column (attribute)
         *                             index</a>, <a
         *                             href="../../../concepts/indexes/#low-cardinality-index"
         *                             target="_top">low-cardinality index</a>,
         *                             <a
         *                             href="../../../concepts/indexes/#chunk-skip-index"
         *                             target="_top">chunk skip index</a>, <a
         *                             href="../../../concepts/indexes/#geospatial-index"
         *                             target="_top">geospatial index</a>, <a
         *                             href="../../../concepts/indexes/#cagra-index"
         *                             target="_top">CAGRA index</a>, or <a
         *                             href="../../../concepts/indexes/#hnsw-index"
         *                             target="_top">HNSW index</a> (depending
         *                             on the specified @ref
         *                             gpudb::alter_table_index_type
         *                             "index_type"), on the column name
         *                             specified in @a value_. If this column
         *                             does not have the specified index, an
         *                             error will be returned.
         *                         <li>@ref
         *                             gpudb::alter_table_move_to_collection
         *                             "alter_table_move_to_collection":
         *                             [DEPRECATED--please use @ref
         *                             gpudb::alter_table_move_to_schema
         *                             "move_to_schema" and use @ref
         *                             GPUdb::createSchema(const CreateSchemaRequest&) const
         *                             "GPUdb::createSchema" to create the
         *                             schema if non-existent]  Moves a table
         *                             or view into a schema named @a value_.
         *                             If the schema provided is non-existent,
         *                             it will be automatically created.
         *                         <li>@ref gpudb::alter_table_move_to_schema
         *                             "alter_table_move_to_schema": Moves a
         *                             table or view into a schema named @a
         *                             value_. If the schema provided is
         *                             nonexistent, an error will be thrown. If
         *                             @a value_ is empty, then the table or
         *                             view will be placed in the user's
         *                             default schema.
         *                         <li>@ref gpudb::alter_table_protected
         *                             "alter_table_protected": No longer used.
         *                             Previously set whether the given @a
         *                             tableName_ should be protected or not.
         *                             The @a value_ would have been either
         *                             'true' or 'false'.
         *                         <li>@ref gpudb::alter_table_rename_table
         *                             "alter_table_rename_table": Renames a
         *                             table or view to @a value_. Has the same
         *                             naming restrictions as <a
         *                             href="../../../concepts/tables/"
         *                             target="_top">tables</a>.
         *                         <li>@ref gpudb::alter_table_ttl
         *                             "alter_table_ttl": Sets the <a
         *                             href="../../../concepts/ttl/"
         *                             target="_top">time-to-live</a> in
         *                             minutes of the table or view specified
         *                             in @a tableName_.
         *                         <li>@ref gpudb::alter_table_add_comment
         *                             "alter_table_add_comment": Adds the
         *                             comment specified in @a value_ to the
         *                             table specified in @a tableName_. Use
         *                             @ref gpudb::alter_table_column_name
         *                             "column_name" to set the comment for a
         *                             column.
         *                         <li>@ref gpudb::alter_table_add_column
         *                             "alter_table_add_column": Adds the
         *                             column specified in @a value_ to the
         *                             table specified in @a tableName_. Use
         *                             @ref gpudb::alter_table_column_type
         *                             "column_type" and @ref
         *                             gpudb::alter_table_column_properties
         *                             "column_properties" in @a options_ to
         *                             set the column's type and properties,
         *                             respectively.
         *                         <li>@ref gpudb::alter_table_change_column
         *                             "alter_table_change_column": Changes
         *                             type and properties of the column
         *                             specified in @a value_. Use @ref
         *                             gpudb::alter_table_column_type
         *                             "column_type" and @ref
         *                             gpudb::alter_table_column_properties
         *                             "column_properties" in @a options_ to
         *                             set the column's type and properties,
         *                             respectively. Note that primary key
         *                             and/or shard key columns cannot be
         *                             changed. All unchanging column
         *                             properties must be listed for the change
         *                             to take place, e.g., to add dictionary
         *                             encoding to an existing 'char4' column,
         *                             both 'char4' and 'dict' must be
         *                             specified in the @a options_ map.
         *                         <li>@ref
         *                             gpudb::alter_table_set_column_compression
         *                             "alter_table_set_column_compression": No
         *                             longer supported; action will be
         *                             ignored.
         *                         <li>@ref gpudb::alter_table_delete_column
         *                             "alter_table_delete_column": Deletes the
         *                             column specified in @a value_ from the
         *                             table specified in @a tableName_.
         *                         <li>@ref
         *                             gpudb::alter_table_create_foreign_key
         *                             "alter_table_create_foreign_key":
         *                             Creates a <a
         *                             href="../../../concepts/tables/#foreign-key"
         *                             target="_top">foreign key</a> specified
         *                             in @a value_ using the format
         *                             '(source_column_name [, ...]) references
         *                             target_table_name(primary_key_column_name
         *                             [, ...]) [as foreign_key_name]'.
         *                         <li>@ref
         *                             gpudb::alter_table_delete_foreign_key
         *                             "alter_table_delete_foreign_key":
         *                             Deletes a <a
         *                             href="../../../concepts/tables/#foreign-key"
         *                             target="_top">foreign key</a>.  The @a
         *                             value_ should be the foreign_key_name
         *                             specified when creating the key or the
         *                             complete string used to define it.
         *                         <li>@ref gpudb::alter_table_add_partition
         *                             "alter_table_add_partition": Adds the
         *                             partition specified in @a value_, to
         *                             either a <a
         *                             href="../../../concepts/tables/#partitioning-by-range"
         *                             target="_top">range-partitioned</a> or
         *                             <a
         *                             href="../../../concepts/tables/#partitioning-by-list-manual"
         *                             target="_top">manual
         *                             list-partitioned</a> table.
         *                         <li>@ref gpudb::alter_table_remove_partition
         *                             "alter_table_remove_partition": Removes
         *                             the partition specified in @a value_
         *                             (and relocates all of its data to the
         *                             default partition) from either a <a
         *                             href="../../../concepts/tables/#partitioning-by-range"
         *                             target="_top">range-partitioned</a> or
         *                             <a
         *                             href="../../../concepts/tables/#partitioning-by-list-manual"
         *                             target="_top">manual
         *                             list-partitioned</a> table.
         *                         <li>@ref gpudb::alter_table_delete_partition
         *                             "alter_table_delete_partition": Deletes
         *                             the partition specified in @a value_
         *                             (and all of its data) from either a <a
         *                             href="../../../concepts/tables/#partitioning-by-range"
         *                             target="_top">range-partitioned</a> or
         *                             <a
         *                             href="../../../concepts/tables/#partitioning-by-list-manual"
         *                             target="_top">manual
         *                             list-partitioned</a> table.
         *                         <li>@ref
         *                             gpudb::alter_table_set_global_access_mode
         *                             "alter_table_set_global_access_mode":
         *                             Sets the global access mode (i.e.
         *                             locking) for the table specified in @a
         *                             tableName_. Specify the access mode in
         *                             @a value_. Valid modes are 'no_access',
         *                             'read_only', 'write_only' and
         *                             'read_write'.
         *                         <li>@ref gpudb::alter_table_refresh
         *                             "alter_table_refresh": For a <a
         *                             href="../../../concepts/materialized_views/"
         *                             target="_top">materialized view</a>,
         *                             replays all the table creation commands
         *                             required to create the view.  For an <a
         *                             href="../../../concepts/external_tables/"
         *                             target="_top">external table</a>,
         *                             reloads all data in the table from its
         *                             associated source files or <a
         *                             href="../../../concepts/data_sources/"
         *                             target="_top">data source</a>.
         *                         <li>@ref
         *                             gpudb::alter_table_set_refresh_method
         *                             "alter_table_set_refresh_method": For a
         *                             <a
         *                             href="../../../concepts/materialized_views/"
         *                             target="_top">materialized view</a>,
         *                             sets the method by which the view is
         *                             refreshed to the method specified in @a
         *                             value_ - one of 'manual', 'periodic', or
         *                             'on_change'.  For an <a
         *                             href="../../../concepts/external_tables/"
         *                             target="_top">external table</a>, sets
         *                             the method by which the table is
         *                             refreshed to the method specified in @a
         *                             value_ - either 'manual' or 'on_start'.
         *                         <li>@ref
         *                             gpudb::alter_table_set_refresh_start_time
         *                             "alter_table_set_refresh_start_time":
         *                             Sets the time to start periodic
         *                             refreshes of this <a
         *                             href="../../../concepts/materialized_views/"
         *                             target="_top">materialized view</a> to
         *                             the datetime string specified in @a
         *                             value_ with format 'YYYY-MM-DD
         *                             HH:MM:SS'.  Subsequent refreshes occur
         *                             at the specified time + N * the refresh
         *                             period.
         *                         <li>@ref
         *                             gpudb::alter_table_set_refresh_stop_time
         *                             "alter_table_set_refresh_stop_time":
         *                             Sets the time to stop periodic refreshes
         *                             of this <a
         *                             href="../../../concepts/materialized_views/"
         *                             target="_top">materialized view</a> to
         *                             the datetime string specified in @a
         *                             value_ with format 'YYYY-MM-DD
         *                             HH:MM:SS'.
         *                         <li>@ref
         *                             gpudb::alter_table_set_refresh_period
         *                             "alter_table_set_refresh_period": Sets
         *                             the time interval in seconds at which to
         *                             refresh this <a
         *                             href="../../../concepts/materialized_views/"
         *                             target="_top">materialized view</a> to
         *                             the value specified in @a value_.  Also,
         *                             sets the refresh method to periodic if
         *                             not already set.
         *                         <li>@ref gpudb::alter_table_set_refresh_span
         *                             "alter_table_set_refresh_span": Sets the
         *                             future time-offset(in seconds) for the
         *                             view refresh to stop.
         *                         <li>@ref
         *                             gpudb::alter_table_set_refresh_execute_as
         *                             "alter_table_set_refresh_execute_as":
         *                             Sets the user name to refresh this <a
         *                             href="../../../concepts/materialized_views/"
         *                             target="_top">materialized view</a> to
         *                             the value specified in @a value_.
         *                         <li>@ref
         *                             gpudb::alter_table_remove_text_search_attributes
         *                             "alter_table_remove_text_search_attributes":
         *                             Removes <a
         *                             href="../../../concepts/full_text_search/"
         *                             target="_top">text search</a> attribute
         *                             from all columns.
         *                         <li>@ref
         *                             gpudb::alter_table_remove_shard_keys
         *                             "alter_table_remove_shard_keys": Removes
         *                             the shard key property from all columns,
         *                             so that the table will be considered
         *                             randomly sharded.  The data is not
         *                             moved.  The @a value_ is ignored.
         *                         <li>@ref
         *                             gpudb::alter_table_set_strategy_definition
         *                             "alter_table_set_strategy_definition":
         *                             Sets the <a
         *                             href="../../../rm/concepts/#tier-strategies"
         *                             target="_top">tier strategy</a> for the
         *                             table and its columns to the one
         *                             specified in @a value_, replacing the
         *                             existing tier strategy in its entirety.
         *                         <li>@ref
         *                             gpudb::alter_table_cancel_datasource_subscription
         *                             "alter_table_cancel_datasource_subscription":
         *                             Permanently unsubscribe a data source
         *                             that is loading continuously as a
         *                             stream. The data source can be Kafka /
         *                             S3 / Azure.
         *                         <li>@ref
         *                             gpudb::alter_table_pause_datasource_subscription
         *                             "alter_table_pause_datasource_subscription":
         *                             Temporarily unsubscribe a data source
         *                             that is loading continuously as a
         *                             stream. The data source can be Kafka /
         *                             S3 / Azure.
         *                         <li>@ref
         *                             gpudb::alter_table_resume_datasource_subscription
         *                             "alter_table_resume_datasource_subscription":
         *                             Resubscribe to a paused data source
         *                             subscription. The data source can be
         *                             Kafka / S3 / Azure.
         *                         <li>@ref gpudb::alter_table_change_owner
         *                             "alter_table_change_owner": Change the
         *                             owner resource group of the table.
         *                         <li>@ref
         *                             gpudb::alter_table_set_load_vectors_policy
         *                             "alter_table_set_load_vectors_policy":
         *                             Set startup data loading scheme for the
         *                             table; see description of
         *                             'load_vectors_policy' in @ref
         *                             GPUdb::createTable(const CreateTableRequest&) const
         *                             "GPUdb::createTable" for possible values
         *                             for @a value_
         *                         <li>@ref
         *                             gpudb::alter_table_set_build_pk_index_policy
         *                             "alter_table_set_build_pk_index_policy":
         *                             Set startup primary key generation
         *                             scheme for the table; see description of
         *                             'build_pk_index_policy' in @ref
         *                             GPUdb::createTable(const CreateTableRequest&) const
         *                             "GPUdb::createTable" for possible values
         *                             for @a value_
         *                         <li>@ref
         *                             gpudb::alter_table_set_build_materialized_view_policy
         *                             "alter_table_set_build_materialized_view_policy":
         *                             Set startup rebuilding scheme for the
         *                             materialized view; see description of
         *                             'build_materialized_view_policy' in @ref
         *                             GPUdb::createMaterializedView(const CreateMaterializedViewRequest&) const
         *                             "GPUdb::createMaterializedView" for
         *                             possible values for @a value_
         *                     </ul>
         * @param[in] value_  The value of the modification, depending on @a
         *                    action_. For example, if @a action_ is @ref
         *                    gpudb::alter_table_add_column "add_column", this
         *                    would be the column name; while the column's
         *                    definition would be covered by the @ref
         *                    gpudb::alter_table_column_type "column_type",
         *                    @ref gpudb::alter_table_column_properties
         *                    "column_properties", @ref
         *                    gpudb::alter_table_column_default_value
         *                    "column_default_value", and @ref
         *                    gpudb::alter_table_add_column_expression
         *                    "add_column_expression" in @a options_. If @a
         *                    action_ is @ref gpudb::alter_table_ttl "ttl", it
         *                    would be the number of minutes for the new TTL.
         *                    If @a action_ is @ref gpudb::alter_table_refresh
         *                    "refresh", this field would be blank.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::alter_table_action
         *                              "alter_table_action"
         *                          <li>@ref gpudb::alter_table_column_name
         *                              "alter_table_column_name"
         *                          <li>@ref gpudb::alter_table_table_name
         *                              "alter_table_table_name"
         *                          <li>@ref
         *                              gpudb::alter_table_column_default_value
         *                              "alter_table_column_default_value":
         *                              When adding a column, set a default
         *                              value for existing records.  For
         *                              nullable columns, the default value
         *                              will be null, regardless of data type.
         *                          <li>@ref
         *                              gpudb::alter_table_column_properties
         *                              "alter_table_column_properties": When
         *                              adding or changing a column, set the
         *                              column properties (strings, separated
         *                              by a comma: data, store_only,
         *                              text_search, char8, int8 etc).
         *                          <li>@ref gpudb::alter_table_column_type
         *                              "alter_table_column_type": When adding
         *                              or changing a column, set the column
         *                              type (strings, separated by a comma:
         *                              int, double, string, null etc).
         *                          <li>@ref
         *                              gpudb::alter_table_compression_type
         *                              "alter_table_compression_type": No
         *                              longer supported; option will be
         *                              ignored.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::alter_table_none
         *                                      "alter_table_none"
         *                                  <li>@ref gpudb::alter_table_snappy
         *                                      "alter_table_snappy"
         *                                  <li>@ref gpudb::alter_table_lz4
         *                                      "alter_table_lz4"
         *                                  <li>@ref gpudb::alter_table_lz4hc
         *                                      "alter_table_lz4hc"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::alter_table_snappy
         *                              "alter_table_snappy".
         *                          <li>@ref
         *                              gpudb::alter_table_copy_values_from_column
         *                              "alter_table_copy_values_from_column":
         *                              [DEPRECATED--please use @ref
         *                              gpudb::alter_table_add_column_expression
         *                              "add_column_expression" instead.]
         *                          <li>@ref gpudb::alter_table_rename_column
         *                              "alter_table_rename_column": When
         *                              changing a column, specify new column
         *                              name.
         *                          <li>@ref
         *                              gpudb::alter_table_validate_change_column
         *                              "alter_table_validate_change_column":
         *                              When changing a column, validate the
         *                              change before applying it (or not).
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::alter_table_true
         *                                      "alter_table_true": Validate
         *                                      all values. A value too large
         *                                      (or too long) for the new type
         *                                      will prevent any change.
         *                                  <li>@ref gpudb::alter_table_false
         *                                      "alter_table_false": When a
         *                                      value is too large or long, it
         *                                      will be truncated.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::alter_table_true
         *                              "alter_table_true".
         *                          <li>@ref
         *                              gpudb::alter_table_update_last_access_time
         *                              "alter_table_update_last_access_time":
         *                              Indicates whether the <a
         *                              href="../../../concepts/ttl/"
         *                              target="_top">time-to-live</a> (TTL)
         *                              expiration countdown timer should be
         *                              reset to the table's TTL.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::alter_table_true
         *                                      "alter_table_true": Reset the
         *                                      expiration countdown timer to
         *                                      the table's configured TTL.
         *                                  <li>@ref gpudb::alter_table_false
         *                                      "alter_table_false": Don't
         *                                      reset the timer; expiration
         *                                      countdown will continue from
         *                                      where it is, as if the table
         *                                      had not been accessed.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::alter_table_true
         *                              "alter_table_true".
         *                          <li>@ref
         *                              gpudb::alter_table_add_column_expression
         *                              "alter_table_add_column_expression":
         *                              When adding a column, an optional
         *                              expression to use for the new column's
         *                              values. Any valid expression may be
         *                              used, including one containing
         *                              references to existing columns in the
         *                              same table.
         *                          <li>@ref
         *                              gpudb::alter_table_strategy_definition
         *                              "alter_table_strategy_definition":
         *                              Optional parameter for specifying the
         *                              <a
         *                              href="../../../rm/concepts/#tier-strategies"
         *                              target="_top">tier strategy</a> for the
         *                              table and its columns when @a action_
         *                              is @ref
         *                              gpudb::alter_table_set_strategy_definition
         *                              "set_strategy_definition", replacing
         *                              the existing tier strategy in its
         *                              entirety.
         *                          <li>@ref gpudb::alter_table_index_type
         *                              "alter_table_index_type": Type of index
         *                              to create, when @a action_ is @ref
         *                              gpudb::alter_table_create_index
         *                              "create_index"; to refresh, when @a
         *                              action_ is @ref
         *                              gpudb::alter_table_refresh_index
         *                              "refresh_index"; or to delete, when @a
         *                              action_ is @ref
         *                              gpudb::alter_table_delete_index
         *                              "delete_index".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::alter_table_column
         *                                      "alter_table_column": Create or
         *                                      delete a <a
         *                                      href="../../../concepts/indexes/#column-index"
         *                                      target="_top">column
         *                                      (attribute) index</a>.
         *                                  <li>@ref
         *                                      gpudb::alter_table_low_cardinality
         *                                      "alter_table_low_cardinality":
         *                                      Create a <a
         *                                      href="../../../concepts/indexes/#low-cardinality-index"
         *                                      target="_top">low-cardinality
         *                                      column (attribute) index</a>.
         *                                  <li>@ref
         *                                      gpudb::alter_table_chunk_skip
         *                                      "alter_table_chunk_skip":
         *                                      Create or delete a <a
         *                                      href="../../../concepts/indexes/#chunk-skip-index"
         *                                      target="_top">chunk skip
         *                                      index</a>.
         *                                  <li>@ref
         *                                      gpudb::alter_table_geospatial
         *                                      "alter_table_geospatial":
         *                                      Create or delete a <a
         *                                      href="../../../concepts/indexes/#geospatial-index"
         *                                      target="_top">geospatial
         *                                      index</a>
         *                                  <li>@ref gpudb::alter_table_cagra
         *                                      "alter_table_cagra": Create or
         *                                      delete a <a
         *                                      href="../../../concepts/indexes/#cagra-index"
         *                                      target="_top">CAGRA index</a>
         *                                      on a <a
         *                                      href="../../../vector_search/#vector-type"
         *                                      target="_top">vector column</a>
         *                                  <li>@ref gpudb::alter_table_hnsw
         *                                      "alter_table_hnsw": Create or
         *                                      delete an <a
         *                                      href="../../../concepts/indexes/#hnsw-index"
         *                                      target="_top">HNSW index</a> on
         *                                      a <a
         *                                      href="../../../vector_search/#vector-type"
         *                                      target="_top">vector column</a>
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::alter_table_column
         *                              "alter_table_column".
         *                          <li>@ref gpudb::alter_table_index_options
         *                              "alter_table_index_options": Options to
         *                              use when creating an index, in the
         *                              format "key: value [, key: value [,
         *                              ...]]". Valid options vary by index
         *                              type.
         *                      </ul>
         *                      The default value is an empty map.
         */
        AlterTableRequest(const std::string& tableName_, const std::string& action_, const std::string& value_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            action( action_ ),
            value( value_ ),
            options( options_ )
        {
        }

        /**
         * Table on which the operation will be performed, in [ schema_name.\
         * ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>. Must be an existing table
         * or view.
         */
        std::string tableName;

        /**
         * Modification operation to be applied.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::alter_table_allow_homogeneous_tables
         *         "alter_table_allow_homogeneous_tables": No longer supported;
         *         action will be ignored.
         *     <li>@ref gpudb::alter_table_create_index
         *         "alter_table_create_index": Creates a <a
         *         href="../../../concepts/indexes/#column-index"
         *         target="_top">column (attribute) index</a>, <a
         *         href="../../../concepts/indexes/#low-cardinality-index"
         *         target="_top">low-cardinality index</a>, <a
         *         href="../../../concepts/indexes/#chunk-skip-index"
         *         target="_top">chunk skip index</a>, <a
         *         href="../../../concepts/indexes/#geospatial-index"
         *         target="_top">geospatial index</a>, <a
         *         href="../../../concepts/indexes/#cagra-index"
         *         target="_top">CAGRA index</a>, or <a
         *         href="../../../concepts/indexes/#hnsw-index"
         *         target="_top">HNSW index</a> (depending on the specified
         *         @ref gpudb::alter_table_index_type "index_type"), on the
         *         column name specified in @ref value. If this column already
         *         has the specified index, an error will be returned.
         *     <li>@ref gpudb::alter_table_refresh_index
         *         "alter_table_refresh_index": Refreshes an index identified
         *         by @ref gpudb::alter_table_index_type "index_type", on the
         *         column name specified in @ref value. Currently applicable
         *         only to CAGRA indices.
         *     <li>@ref gpudb::alter_table_delete_index
         *         "alter_table_delete_index": Deletes a <a
         *         href="../../../concepts/indexes/#column-index"
         *         target="_top">column (attribute) index</a>, <a
         *         href="../../../concepts/indexes/#low-cardinality-index"
         *         target="_top">low-cardinality index</a>, <a
         *         href="../../../concepts/indexes/#chunk-skip-index"
         *         target="_top">chunk skip index</a>, <a
         *         href="../../../concepts/indexes/#geospatial-index"
         *         target="_top">geospatial index</a>, <a
         *         href="../../../concepts/indexes/#cagra-index"
         *         target="_top">CAGRA index</a>, or <a
         *         href="../../../concepts/indexes/#hnsw-index"
         *         target="_top">HNSW index</a> (depending on the specified
         *         @ref gpudb::alter_table_index_type "index_type"), on the
         *         column name specified in @ref value. If this column does not
         *         have the specified index, an error will be returned.
         *     <li>@ref gpudb::alter_table_move_to_collection
         *         "alter_table_move_to_collection": [DEPRECATED--please use
         *         @ref gpudb::alter_table_move_to_schema "move_to_schema" and
         *         use @ref
         *         GPUdb::createSchema(const CreateSchemaRequest&) const
         *         "GPUdb::createSchema" to create the schema if non-existent]
         *         Moves a table or view into a schema named @ref value.  If
         *         the schema provided is non-existent, it will be
         *         automatically created.
         *     <li>@ref gpudb::alter_table_move_to_schema
         *         "alter_table_move_to_schema": Moves a table or view into a
         *         schema named @ref value. If the schema provided is
         *         nonexistent, an error will be thrown. If @ref value is
         *         empty, then the table or view will be placed in the user's
         *         default schema.
         *     <li>@ref gpudb::alter_table_protected "alter_table_protected":
         *         No longer used.  Previously set whether the given @ref
         *         tableName should be protected or not. The @ref value would
         *         have been either 'true' or 'false'.
         *     <li>@ref gpudb::alter_table_rename_table
         *         "alter_table_rename_table": Renames a table or view to @ref
         *         value. Has the same naming restrictions as <a
         *         href="../../../concepts/tables/" target="_top">tables</a>.
         *     <li>@ref gpudb::alter_table_ttl "alter_table_ttl": Sets the <a
         *         href="../../../concepts/ttl/" target="_top">time-to-live</a>
         *         in minutes of the table or view specified in @ref tableName.
         *     <li>@ref gpudb::alter_table_add_comment
         *         "alter_table_add_comment": Adds the comment specified in
         *         @ref value to the table specified in @ref tableName. Use
         *         @ref gpudb::alter_table_column_name "column_name" to set the
         *         comment for a column.
         *     <li>@ref gpudb::alter_table_add_column "alter_table_add_column":
         *         Adds the column specified in @ref value to the table
         *         specified in @ref tableName. Use @ref
         *         gpudb::alter_table_column_type "column_type" and @ref
         *         gpudb::alter_table_column_properties "column_properties" in
         *         @ref options to set the column's type and properties,
         *         respectively.
         *     <li>@ref gpudb::alter_table_change_column
         *         "alter_table_change_column": Changes type and properties of
         *         the column specified in @ref value. Use @ref
         *         gpudb::alter_table_column_type "column_type" and @ref
         *         gpudb::alter_table_column_properties "column_properties" in
         *         @ref options to set the column's type and properties,
         *         respectively. Note that primary key and/or shard key columns
         *         cannot be changed. All unchanging column properties must be
         *         listed for the change to take place, e.g., to add dictionary
         *         encoding to an existing 'char4' column, both 'char4' and
         *         'dict' must be specified in the @ref options map.
         *     <li>@ref gpudb::alter_table_set_column_compression
         *         "alter_table_set_column_compression": No longer supported;
         *         action will be ignored.
         *     <li>@ref gpudb::alter_table_delete_column
         *         "alter_table_delete_column": Deletes the column specified in
         *         @ref value from the table specified in @ref tableName.
         *     <li>@ref gpudb::alter_table_create_foreign_key
         *         "alter_table_create_foreign_key": Creates a <a
         *         href="../../../concepts/tables/#foreign-key"
         *         target="_top">foreign key</a> specified in @ref value using
         *         the format '(source_column_name [, ...]) references
         *         target_table_name(primary_key_column_name [, ...]) [as
         *         foreign_key_name]'.
         *     <li>@ref gpudb::alter_table_delete_foreign_key
         *         "alter_table_delete_foreign_key": Deletes a <a
         *         href="../../../concepts/tables/#foreign-key"
         *         target="_top">foreign key</a>.  The @ref value should be the
         *         foreign_key_name specified when creating the key or the
         *         complete string used to define it.
         *     <li>@ref gpudb::alter_table_add_partition
         *         "alter_table_add_partition": Adds the partition specified in
         *         @ref value, to either a <a
         *         href="../../../concepts/tables/#partitioning-by-range"
         *         target="_top">range-partitioned</a> or <a
         *         href="../../../concepts/tables/#partitioning-by-list-manual"
         *         target="_top">manual list-partitioned</a> table.
         *     <li>@ref gpudb::alter_table_remove_partition
         *         "alter_table_remove_partition": Removes the partition
         *         specified in @ref value (and relocates all of its data to
         *         the default partition) from either a <a
         *         href="../../../concepts/tables/#partitioning-by-range"
         *         target="_top">range-partitioned</a> or <a
         *         href="../../../concepts/tables/#partitioning-by-list-manual"
         *         target="_top">manual list-partitioned</a> table.
         *     <li>@ref gpudb::alter_table_delete_partition
         *         "alter_table_delete_partition": Deletes the partition
         *         specified in @ref value (and all of its data) from either a
         *         <a href="../../../concepts/tables/#partitioning-by-range"
         *         target="_top">range-partitioned</a> or <a
         *         href="../../../concepts/tables/#partitioning-by-list-manual"
         *         target="_top">manual list-partitioned</a> table.
         *     <li>@ref gpudb::alter_table_set_global_access_mode
         *         "alter_table_set_global_access_mode": Sets the global access
         *         mode (i.e. locking) for the table specified in @ref
         *         tableName. Specify the access mode in @ref value. Valid
         *         modes are 'no_access', 'read_only', 'write_only' and
         *         'read_write'.
         *     <li>@ref gpudb::alter_table_refresh "alter_table_refresh": For a
         *         <a href="../../../concepts/materialized_views/"
         *         target="_top">materialized view</a>, replays all the table
         *         creation commands required to create the view.  For an <a
         *         href="../../../concepts/external_tables/"
         *         target="_top">external table</a>, reloads all data in the
         *         table from its associated source files or <a
         *         href="../../../concepts/data_sources/" target="_top">data
         *         source</a>.
         *     <li>@ref gpudb::alter_table_set_refresh_method
         *         "alter_table_set_refresh_method": For a <a
         *         href="../../../concepts/materialized_views/"
         *         target="_top">materialized view</a>, sets the method by
         *         which the view is refreshed to the method specified in @ref
         *         value - one of 'manual', 'periodic', or 'on_change'.  For an
         *         <a href="../../../concepts/external_tables/"
         *         target="_top">external table</a>, sets the method by which
         *         the table is refreshed to the method specified in @ref value
         *         - either 'manual' or 'on_start'.
         *     <li>@ref gpudb::alter_table_set_refresh_start_time
         *         "alter_table_set_refresh_start_time": Sets the time to start
         *         periodic refreshes of this <a
         *         href="../../../concepts/materialized_views/"
         *         target="_top">materialized view</a> to the datetime string
         *         specified in @ref value with format 'YYYY-MM-DD HH:MM:SS'.
         *         Subsequent refreshes occur at the specified time + N * the
         *         refresh period.
         *     <li>@ref gpudb::alter_table_set_refresh_stop_time
         *         "alter_table_set_refresh_stop_time": Sets the time to stop
         *         periodic refreshes of this <a
         *         href="../../../concepts/materialized_views/"
         *         target="_top">materialized view</a> to the datetime string
         *         specified in @ref value with format 'YYYY-MM-DD HH:MM:SS'.
         *     <li>@ref gpudb::alter_table_set_refresh_period
         *         "alter_table_set_refresh_period": Sets the time interval in
         *         seconds at which to refresh this <a
         *         href="../../../concepts/materialized_views/"
         *         target="_top">materialized view</a> to the value specified
         *         in @ref value.  Also, sets the refresh method to periodic if
         *         not already set.
         *     <li>@ref gpudb::alter_table_set_refresh_span
         *         "alter_table_set_refresh_span": Sets the future
         *         time-offset(in seconds) for the view refresh to stop.
         *     <li>@ref gpudb::alter_table_set_refresh_execute_as
         *         "alter_table_set_refresh_execute_as": Sets the user name to
         *         refresh this <a href="../../../concepts/materialized_views/"
         *         target="_top">materialized view</a> to the value specified
         *         in @ref value.
         *     <li>@ref gpudb::alter_table_remove_text_search_attributes
         *         "alter_table_remove_text_search_attributes": Removes <a
         *         href="../../../concepts/full_text_search/"
         *         target="_top">text search</a> attribute from all columns.
         *     <li>@ref gpudb::alter_table_remove_shard_keys
         *         "alter_table_remove_shard_keys": Removes the shard key
         *         property from all columns, so that the table will be
         *         considered randomly sharded.  The data is not moved.  The
         *         @ref value is ignored.
         *     <li>@ref gpudb::alter_table_set_strategy_definition
         *         "alter_table_set_strategy_definition": Sets the <a
         *         href="../../../rm/concepts/#tier-strategies"
         *         target="_top">tier strategy</a> for the table and its
         *         columns to the one specified in @ref value, replacing the
         *         existing tier strategy in its entirety.
         *     <li>@ref gpudb::alter_table_cancel_datasource_subscription
         *         "alter_table_cancel_datasource_subscription": Permanently
         *         unsubscribe a data source that is loading continuously as a
         *         stream. The data source can be Kafka / S3 / Azure.
         *     <li>@ref gpudb::alter_table_pause_datasource_subscription
         *         "alter_table_pause_datasource_subscription": Temporarily
         *         unsubscribe a data source that is loading continuously as a
         *         stream. The data source can be Kafka / S3 / Azure.
         *     <li>@ref gpudb::alter_table_resume_datasource_subscription
         *         "alter_table_resume_datasource_subscription": Resubscribe to
         *         a paused data source subscription. The data source can be
         *         Kafka / S3 / Azure.
         *     <li>@ref gpudb::alter_table_change_owner
         *         "alter_table_change_owner": Change the owner resource group
         *         of the table.
         *     <li>@ref gpudb::alter_table_set_load_vectors_policy
         *         "alter_table_set_load_vectors_policy": Set startup data
         *         loading scheme for the table; see description of
         *         'load_vectors_policy' in @ref
         *         GPUdb::createTable(const CreateTableRequest&) const
         *         "GPUdb::createTable" for possible values for @ref value
         *     <li>@ref gpudb::alter_table_set_build_pk_index_policy
         *         "alter_table_set_build_pk_index_policy": Set startup primary
         *         key generation scheme for the table; see description of
         *         'build_pk_index_policy' in @ref
         *         GPUdb::createTable(const CreateTableRequest&) const
         *         "GPUdb::createTable" for possible values for @ref value
         *     <li>@ref gpudb::alter_table_set_build_materialized_view_policy
         *         "alter_table_set_build_materialized_view_policy": Set
         *         startup rebuilding scheme for the materialized view; see
         *         description of 'build_materialized_view_policy' in @ref
         *         GPUdb::createMaterializedView(const CreateMaterializedViewRequest&) const
         *         "GPUdb::createMaterializedView" for possible values for @ref
         *         value
         * </ul>
         */
        std::string action;

        /**
         * The value of the modification, depending on @ref action. For
         * example, if @ref action is @ref gpudb::alter_table_add_column
         * "add_column", this would be the column name; while the column's
         * definition would be covered by the @ref
         * gpudb::alter_table_column_type "column_type", @ref
         * gpudb::alter_table_column_properties "column_properties", @ref
         * gpudb::alter_table_column_default_value "column_default_value", and
         * @ref gpudb::alter_table_add_column_expression
         * "add_column_expression" in @ref options. If @ref action is @ref
         * gpudb::alter_table_ttl "ttl", it would be the number of minutes for
         * the new TTL. If @ref action is @ref gpudb::alter_table_refresh
         * "refresh", this field would be blank.
         */
        std::string value;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::alter_table_action "alter_table_action"
         *     <li>@ref gpudb::alter_table_column_name
         *         "alter_table_column_name"
         *     <li>@ref gpudb::alter_table_table_name "alter_table_table_name"
         *     <li>@ref gpudb::alter_table_column_default_value
         *         "alter_table_column_default_value": When adding a column,
         *         set a default value for existing records.  For nullable
         *         columns, the default value will be null, regardless of data
         *         type.
         *     <li>@ref gpudb::alter_table_column_properties
         *         "alter_table_column_properties": When adding or changing a
         *         column, set the column properties (strings, separated by a
         *         comma: data, store_only, text_search, char8, int8 etc).
         *     <li>@ref gpudb::alter_table_column_type
         *         "alter_table_column_type": When adding or changing a column,
         *         set the column type (strings, separated by a comma: int,
         *         double, string, null etc).
         *     <li>@ref gpudb::alter_table_compression_type
         *         "alter_table_compression_type": No longer supported; option
         *         will be ignored.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_table_none "alter_table_none"
         *             <li>@ref gpudb::alter_table_snappy "alter_table_snappy"
         *             <li>@ref gpudb::alter_table_lz4 "alter_table_lz4"
         *             <li>@ref gpudb::alter_table_lz4hc "alter_table_lz4hc"
         *         </ul>
         *         The default value is @ref gpudb::alter_table_snappy
         *         "alter_table_snappy".
         *     <li>@ref gpudb::alter_table_copy_values_from_column
         *         "alter_table_copy_values_from_column": [DEPRECATED--please
         *         use @ref gpudb::alter_table_add_column_expression
         *         "add_column_expression" instead.]
         *     <li>@ref gpudb::alter_table_rename_column
         *         "alter_table_rename_column": When changing a column, specify
         *         new column name.
         *     <li>@ref gpudb::alter_table_validate_change_column
         *         "alter_table_validate_change_column": When changing a
         *         column, validate the change before applying it (or not).
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_table_true "alter_table_true":
         *                 Validate all values. A value too large (or too long)
         *                 for the new type will prevent any change.
         *             <li>@ref gpudb::alter_table_false "alter_table_false":
         *                 When a value is too large or long, it will be
         *                 truncated.
         *         </ul>
         *         The default value is @ref gpudb::alter_table_true
         *         "alter_table_true".
         *     <li>@ref gpudb::alter_table_update_last_access_time
         *         "alter_table_update_last_access_time": Indicates whether the
         *         <a href="../../../concepts/ttl/"
         *         target="_top">time-to-live</a> (TTL) expiration countdown
         *         timer should be reset to the table's TTL.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_table_true "alter_table_true":
         *                 Reset the expiration countdown timer to the table's
         *                 configured TTL.
         *             <li>@ref gpudb::alter_table_false "alter_table_false":
         *                 Don't reset the timer; expiration countdown will
         *                 continue from where it is, as if the table had not
         *                 been accessed.
         *         </ul>
         *         The default value is @ref gpudb::alter_table_true
         *         "alter_table_true".
         *     <li>@ref gpudb::alter_table_add_column_expression
         *         "alter_table_add_column_expression": When adding a column,
         *         an optional expression to use for the new column's values.
         *         Any valid expression may be used, including one containing
         *         references to existing columns in the same table.
         *     <li>@ref gpudb::alter_table_strategy_definition
         *         "alter_table_strategy_definition": Optional parameter for
         *         specifying the <a
         *         href="../../../rm/concepts/#tier-strategies"
         *         target="_top">tier strategy</a> for the table and its
         *         columns when @ref action is @ref
         *         gpudb::alter_table_set_strategy_definition
         *         "set_strategy_definition", replacing the existing tier
         *         strategy in its entirety.
         *     <li>@ref gpudb::alter_table_index_type "alter_table_index_type":
         *         Type of index to create, when @ref action is @ref
         *         gpudb::alter_table_create_index "create_index"; to refresh,
         *         when @ref action is @ref gpudb::alter_table_refresh_index
         *         "refresh_index"; or to delete, when @ref action is @ref
         *         gpudb::alter_table_delete_index "delete_index".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_table_column "alter_table_column":
         *                 Create or delete a <a
         *                 href="../../../concepts/indexes/#column-index"
         *                 target="_top">column (attribute) index</a>.
         *             <li>@ref gpudb::alter_table_low_cardinality
         *                 "alter_table_low_cardinality": Create a <a
         *                 href="../../../concepts/indexes/#low-cardinality-index"
         *                 target="_top">low-cardinality column (attribute)
         *                 index</a>.
         *             <li>@ref gpudb::alter_table_chunk_skip
         *                 "alter_table_chunk_skip": Create or delete a <a
         *                 href="../../../concepts/indexes/#chunk-skip-index"
         *                 target="_top">chunk skip index</a>.
         *             <li>@ref gpudb::alter_table_geospatial
         *                 "alter_table_geospatial": Create or delete a <a
         *                 href="../../../concepts/indexes/#geospatial-index"
         *                 target="_top">geospatial index</a>
         *             <li>@ref gpudb::alter_table_cagra "alter_table_cagra":
         *                 Create or delete a <a
         *                 href="../../../concepts/indexes/#cagra-index"
         *                 target="_top">CAGRA index</a> on a <a
         *                 href="../../../vector_search/#vector-type"
         *                 target="_top">vector column</a>
         *             <li>@ref gpudb::alter_table_hnsw "alter_table_hnsw":
         *                 Create or delete an <a
         *                 href="../../../concepts/indexes/#hnsw-index"
         *                 target="_top">HNSW index</a> on a <a
         *                 href="../../../vector_search/#vector-type"
         *                 target="_top">vector column</a>
         *         </ul>
         *         The default value is @ref gpudb::alter_table_column
         *         "alter_table_column".
         *     <li>@ref gpudb::alter_table_index_options
         *         "alter_table_index_options": Options to use when creating an
         *         index, in the format "key: value [, key: value [, ...]]".
         *         Valid options vary by index type.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterTableRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::alterTable(const AlterTableRequest&) const "GPUdb::alterTable".
     */
    struct AlterTableResponse
    {
        /**
         * Constructs an AlterTableResponse object with default parameters.
         */
        AlterTableResponse() :
            tableName(std::string()),
            action(std::string()),
            value(std::string()),
            typeId(std::string()),
            typeDefinition(std::string()),
            properties(std::map<std::string, std::vector<std::string> >()),
            label(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Table on which the operation was performed.
         */
        std::string tableName;

        /**
         * Modification operation that was performed.
         */
        std::string action;

        /**
         * The value of the modification that was performed.
         */
        std::string value;

        /**
         * return the type_id (when changing a table, a new type may be
         * created)
         */
        std::string typeId;

        /**
         * return the type_definition  (when changing a table, a new type may
         * be created)
         */
        std::string typeDefinition;

        /**
         * return the type properties  (when changing a table, a new type may
         * be created)
         */
        std::map<std::string, std::vector<std::string> > properties;

        /**
         * return the type label  (when changing a table, a new type may be
         * created)
         */
        std::string label;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterTableResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.typeDefinition);
            ::avro::encode(e, v.properties);
            ::avro::encode(e, v.label);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        case 3:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 4:
                            ::avro::decode(d, v.typeDefinition);
                            break;

                        case 5:
                            ::avro::decode(d, v.properties);
                            break;

                        case 6:
                            ::avro::decode(d, v.label);
                            break;

                        case 7:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.typeDefinition);
                ::avro::decode(d, v.properties);
                ::avro::decode(d, v.label);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ALTER_TABLE_H__
