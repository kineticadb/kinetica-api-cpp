/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_TABLE_H__
#define __ALTER_TABLE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #alterTable(const AlterTableRequest&) const}.
     * <p>
     * Apply various modifications to a table or view.  The
     * available modifications include the following:
     * <p>
     * Manage a table's columns--a column can be added, removed, or have its
     * <a href="../../../concepts/types/" target="_top">type and properties</a>
     * modified, including whether it is
     * <a href="../../../concepts/dictionary_encoding/"
     * target="_top">dictionary encoded</a> or not.
     * <p>
     * External tables cannot be modified except for their refresh method.
     * <p>
     * Create or delete a <a href="../../../concepts/indexes/#column-index"
     * target="_top">column</a>,
     * <a href="../../../concepts/indexes/#chunk-skip-index"
     * target="_top">chunk skip</a>, or
     * <a href="../../../concepts/indexes/#geospatial-index"
     * target="_top">geospatial</a> index. This can speed up
     * certain operations when using expressions containing equality or
     * relational
     * operators on indexed columns. This only applies to tables.
     * <p>
     * Create or delete a <a href="../../../concepts/tables/#foreign-key"
     * target="_top">foreign key</a>
     * on a particular column.
     * <p>
     * Manage a
     * <a href="../../../concepts/tables/#partitioning-by-range"
     * target="_top">range-partitioned</a> or a
     * <a href="../../../concepts/tables/#partitioning-by-list-manual"
     * target="_top">manual list-partitioned</a>
     * table's partitions.
     * <p>
     * Set (or reset) the <a href="../../../rm/concepts/#tier-strategies"
     * target="_top">tier strategy</a>
     * of a table or view.
     * <p>
     * Refresh and manage the refresh mode of a
     * <a href="../../../concepts/materialized_views/"
     * target="_top">materialized view</a> or an
     * <a href="../../../concepts/external_tables/" target="_top">external
     * table</a>.
     * <p>
     * Set the <a href="../../../concepts/ttl/" target="_top">time-to-live
     * (TTL)</a>. This can be applied
     * to tables or views.
     * <p>
     * Set the global access mode (i.e. locking) for a table. This setting
     * trumps any
     * role-based access controls that may be in place; e.g., a user with write
     * access
     * to a table marked read-only will not be able to insert records into it.
     * The mode
     * can be set to read-only, write-only, read/write, and no access.
     */
    struct AlterTableRequest
    {

        /**
         * Constructs an AlterTableRequest object with default parameter
         * values.
         */
        AlterTableRequest() :
            tableName(std::string()),
            action(std::string()),
            value(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterTableRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Table on which the operation will be
         *                        performed, in [schema_name.]table_name
         *                        format,
         *                        using standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        Must be an existing table or view.
         * @param[in] action_  Modification operation to be applied
         *                     <ul>
         *                             <li>
         *                     gpudb::alter_table_allow_homogeneous_tables: No
         *                     longer supported; action will be ignored.
         *                             <li> gpudb::alter_table_create_index:
         *                     Creates a <a
         *                     href="../../../concepts/indexes/#column-index"
         *                     target="_top">column (attribute) index</a>,
         *                     <a
         *                     href="../../../concepts/indexes/#chunk-skip-index"
         *                     target="_top">chunk skip index</a>, or
         *                     <a
         *                     href="../../../concepts/indexes/#geospatial-index"
         *                     target="_top">geospatial index</a>
         *                     (depending on the specified @a index_type), on
         *                     the column name specified in @a value.
         *                     If this column already has the specified index,
         *                     an error will be returned.
         *                             <li> gpudb::alter_table_delete_index:
         *                     Deletes a <a
         *                     href="../../../concepts/indexes/#column-index"
         *                     target="_top">column (attribute) index</a>,
         *                     <a
         *                     href="../../../concepts/indexes/#chunk-skip-index"
         *                     target="_top">chunk skip index</a>, or
         *                     <a
         *                     href="../../../concepts/indexes/#geospatial-index"
         *                     target="_top">geospatial index</a>
         *                     (depending on the specified @a index_type), on
         *                     the column name specified in @a value.
         *                     If this column does not have the specified
         *                     index, an error will be returned.
         *                             <li>
         *                     gpudb::alter_table_move_to_collection:
         *                     [DEPRECATED--please use @a move_to_schema and
         *                     use /create/schema to create the schema if
         *                     non-existent]  Moves a table or view into a
         *                     schema named @a value.  If the schema provided
         *                     is non-existent, it will be automatically
         *                     created.
         *                             <li> gpudb::alter_table_move_to_schema:
         *                     Moves a table or view into a schema named @a
         *                     value.
         *                     If the schema provided is nonexistent, an error
         *                     will be thrown.
         *                     If @a value is empty, then the table or view
         *                     will be placed in the user's default schema.
         *                             <li> gpudb::alter_table_protected: No
         *                     longer used.  Previously set whether the given
         *                     @a tableName should be protected or not. The @a
         *                     value would have been either 'true' or 'false'.
         *                             <li> gpudb::alter_table_rename_table:
         *                     Renames a table or view within its current
         *                     schema to @a value. Has the same naming
         *                     restrictions as <a
         *                     href="../../../concepts/tables/"
         *                     target="_top">tables</a>.
         *                             <li> gpudb::alter_table_ttl: Sets the <a
         *                     href="../../../concepts/ttl/"
         *                     target="_top">time-to-live</a> in minutes of the
         *                     table or view specified in @a tableName.
         *                             <li> gpudb::alter_table_add_column: Adds
         *                     the column specified in @a value to the table
         *                     specified in @a tableName.
         *                     Use @a column_type and @a column_properties in
         *                     @a options
         *                     to set the column's type and properties,
         *                     respectively.
         *                             <li> gpudb::alter_table_change_column:
         *                     Changes type and properties of the column
         *                     specified in @a value.
         *                     Use @a column_type and @a column_properties in
         *                     @a options to set
         *                     the column's type and properties, respectively.
         *                     Note that primary key and/or shard key columns
         *                     cannot be changed.
         *                     All unchanging column properties must be listed
         *                     for the change to take place, e.g., to add
         *                     dictionary encoding to
         *                     an existing 'char4' column, both 'char4' and
         *                     'dict' must be specified in the @a options map.
         *                             <li>
         *                     gpudb::alter_table_set_column_compression: No
         *                     longer supported; action will be ignored.
         *                             <li> gpudb::alter_table_delete_column:
         *                     Deletes the column specified in @a value from
         *                     the table specified in @a tableName.
         *                             <li>
         *                     gpudb::alter_table_create_foreign_key: Creates a
         *                     <a href="../../../concepts/tables/#foreign-key"
         *                     target="_top">foreign key</a> specified in @a
         *                     value using the format '(source_column_name [,
         *                     ...]) references
         *                     target_table_name(primary_key_column_name [,
         *                     ...]) [as foreign_key_name]'.
         *                             <li>
         *                     gpudb::alter_table_delete_foreign_key: Deletes a
         *                     <a href="../../../concepts/tables/#foreign-key"
         *                     target="_top">foreign key</a>.  The @a value
         *                     should be the foreign_key_name specified when
         *                     creating the key or the complete string used to
         *                     define it.
         *                             <li> gpudb::alter_table_add_partition:
         *                     Adds the partition specified in @a value, to
         *                     either a <a
         *                     href="../../../concepts/tables/#partitioning-by-range"
         *                     target="_top">range-partitioned</a> or <a
         *                     href="../../../concepts/tables/#partitioning-by-list-manual"
         *                     target="_top">manual list-partitioned</a> table.
         *                             <li>
         *                     gpudb::alter_table_remove_partition: Removes the
         *                     partition specified in @a value (and relocates
         *                     all of its data to the default partition) from
         *                     either a <a
         *                     href="../../../concepts/tables/#partitioning-by-range"
         *                     target="_top">range-partitioned</a> or <a
         *                     href="../../../concepts/tables/#partitioning-by-list-manual"
         *                     target="_top">manual list-partitioned</a> table.
         *                             <li>
         *                     gpudb::alter_table_delete_partition: Deletes the
         *                     partition specified in @a value (and all of its
         *                     data) from either a <a
         *                     href="../../../concepts/tables/#partitioning-by-range"
         *                     target="_top">range-partitioned</a> or <a
         *                     href="../../../concepts/tables/#partitioning-by-list-manual"
         *                     target="_top">manual list-partitioned</a> table.
         *                             <li>
         *                     gpudb::alter_table_set_global_access_mode: Sets
         *                     the global access mode (i.e. locking) for the
         *                     table specified in @a tableName. Specify the
         *                     access mode in @a value. Valid modes are
         *                     'no_access', 'read_only', 'write_only' and
         *                     'read_write'.
         *                             <li> gpudb::alter_table_refresh: For a
         *                     <a href="../../../concepts/materialized_views/"
         *                     target="_top">materialized view</a>, replays all
         *                     the table creation commands required to create
         *                     the view.  For an <a
         *                     href="../../../concepts/external_tables/"
         *                     target="_top">external table</a>, reloads all
         *                     data in the table from its associated source
         *                     files or <a
         *                     href="../../../concepts/data_sources/"
         *                     target="_top">data source</a>.
         *                             <li>
         *                     gpudb::alter_table_set_refresh_method: For a <a
         *                     href="../../../concepts/materialized_views/"
         *                     target="_top">materialized view</a>, sets the
         *                     method by which the view is refreshed to the
         *                     method specified in @a value - one of 'manual',
         *                     'periodic', or 'on_change'.  For an <a
         *                     href="../../../concepts/external_tables/"
         *                     target="_top">external table</a>, sets the
         *                     method by which the table is refreshed to the
         *                     method specified in @a value - either 'manual'
         *                     or 'on_start'.
         *                             <li>
         *                     gpudb::alter_table_set_refresh_start_time: Sets
         *                     the time to start periodic refreshes of this <a
         *                     href="../../../concepts/materialized_views/"
         *                     target="_top">materialized view</a> to the
         *                     datetime string specified in @a value with
         *                     format 'YYYY-MM-DD HH:MM:SS'.  Subsequent
         *                     refreshes occur at the specified time + N * the
         *                     refresh period.
         *                             <li>
         *                     gpudb::alter_table_set_refresh_stop_time: Sets
         *                     the time to stop periodic refreshes of this <a
         *                     href="../../../concepts/materialized_views/"
         *                     target="_top">materialized view</a> to the
         *                     datetime string specified in @a value with
         *                     format 'YYYY-MM-DD HH:MM:SS'.
         *                             <li>
         *                     gpudb::alter_table_set_refresh_period: Sets the
         *                     time interval in seconds at which to refresh
         *                     this <a
         *                     href="../../../concepts/materialized_views/"
         *                     target="_top">materialized view</a> to the value
         *                     specified in @a value.  Also, sets the refresh
         *                     method to periodic if not already set.
         *                             <li>
         *                     gpudb::alter_table_set_refresh_span: Sets the
         *                     future time-offset(in seconds) for the view
         *                     refresh to stop.
         *                             <li>
         *                     gpudb::alter_table_set_refresh_execute_as: Sets
         *                     the user name to refresh this <a
         *                     href="../../../concepts/materialized_views/"
         *                     target="_top">materialized view</a> to the value
         *                     specified in @a value.
         *                             <li>
         *                     gpudb::alter_table_remove_text_search_attributes:
         *                     Removes <a
         *                     href="../../../concepts/full_text_search/"
         *                     target="_top">text search</a> attribute from all
         *                     columns.
         *                             <li>
         *                     gpudb::alter_table_remove_shard_keys: Removes
         *                     the shard key property from all columns, so that
         *                     the table will be considered randomly sharded.
         *                     The data is not moved.  The @a value is ignored.
         *                             <li>
         *                     gpudb::alter_table_set_strategy_definition: Sets
         *                     the <a
         *                     href="../../../rm/concepts/#tier-strategies"
         *                     target="_top">tier strategy</a> for the table
         *                     and its columns to the one specified in @a
         *                     value, replacing the existing tier strategy in
         *                     its entirety.
         *                             <li>
         *                     gpudb::alter_table_cancel_datasource_subscription:
         *                     Permanently unsubscribe a data source that is
         *                     loading continuously as a stream. The data
         *                     source can be Kafka / S3 / Azure.
         *                             <li>
         *                     gpudb::alter_table_pause_datasource_subscription:
         *                     Temporarily unsubscribe a data source that is
         *                     loading continuously as a stream. The data
         *                     source can be Kafka / S3 / Azure.
         *                             <li>
         *                     gpudb::alter_table_resume_datasource_subscription:
         *                     Resubscribe to a paused data source
         *                     subscription. The data source can be Kafka / S3
         *                     / Azure.
         *                             <li> gpudb::alter_table_change_owner:
         *                     Change the owner resource group of the table.
         *                     </ul>
         * @param[in] value_  The value of the modification, depending on @a
         *                    action.
         *                    For example, if @a action is @a add_column, this
         *                    would be the column name;
         *                    while the column's definition would be covered by
         *                    the @a column_type,
         *                    @a column_properties, @a column_default_value,
         *                    and @a add_column_expression in @a options.
         *                    If @a action is @a ttl, it would be the number of
         *                    minutes for the new TTL.
         *                    If @a action is @a refresh, this field would be
         *                    blank.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> gpudb::alter_table_action
         *                              <li> gpudb::alter_table_column_name
         *                              <li> gpudb::alter_table_table_name
         *                              <li>
         *                      gpudb::alter_table_column_default_value: When
         *                      adding a column, set a default value for
         *                      existing records.  For nullable columns, the
         *                      default value will be null, regardless of data
         *                      type.
         *                              <li>
         *                      gpudb::alter_table_column_properties: When
         *                      adding or changing a column, set the column
         *                      properties (strings, separated by a comma:
         *                      data, store_only, text_search, char8, int8
         *                      etc).
         *                              <li> gpudb::alter_table_column_type:
         *                      When adding or changing a column, set the
         *                      column type (strings, separated by a comma:
         *                      int, double, string, null etc).
         *                              <li>
         *                      gpudb::alter_table_compression_type: No longer
         *                      supported; option will be ignored.
         *                      <ul>
         *                              <li> gpudb::alter_table_none
         *                              <li> gpudb::alter_table_snappy
         *                              <li> gpudb::alter_table_lz4
         *                              <li> gpudb::alter_table_lz4hc
         *                      </ul>
         *                      The default value is gpudb::alter_table_snappy.
         *                              <li>
         *                      gpudb::alter_table_copy_values_from_column:
         *                      [DEPRECATED--please use @a
         *                      add_column_expression instead.]
         *                              <li> gpudb::alter_table_rename_column:
         *                      When changing a column, specify new column
         *                      name.
         *                              <li>
         *                      gpudb::alter_table_validate_change_column: When
         *                      changing a column, validate the change before
         *                      applying it (or not).
         *                      <ul>
         *                              <li> gpudb::alter_table_true: Validate
         *                      all values. A value too large (or too long) for
         *                      the new type will prevent any change.
         *                              <li> gpudb::alter_table_false: When a
         *                      value is too large or long, it will be
         *                      truncated.
         *                      </ul>
         *                      The default value is gpudb::alter_table_true.
         *                              <li>
         *                      gpudb::alter_table_update_last_access_time:
         *                      Indicates whether the <a
         *                      href="../../../concepts/ttl/"
         *                      target="_top">time-to-live</a> (TTL) expiration
         *                      countdown timer should be reset to the table's
         *                      TTL.
         *                      <ul>
         *                              <li> gpudb::alter_table_true: Reset the
         *                      expiration countdown timer to the table's
         *                      configured TTL.
         *                              <li> gpudb::alter_table_false: Don't
         *                      reset the timer; expiration countdown will
         *                      continue from where it is, as if the table had
         *                      not been accessed.
         *                      </ul>
         *                      The default value is gpudb::alter_table_true.
         *                              <li>
         *                      gpudb::alter_table_add_column_expression: When
         *                      adding a column, an optional expression to use
         *                      for the new column's values. Any valid
         *                      expression may be used, including one
         *                      containing references to existing columns in
         *                      the same table.
         *                              <li>
         *                      gpudb::alter_table_strategy_definition:
         *                      Optional parameter for specifying the <a
         *                      href="../../../rm/concepts/#tier-strategies"
         *                      target="_top">tier strategy</a> for the table
         *                      and its columns when @a action is @a
         *                      set_strategy_definition, replacing the existing
         *                      tier strategy in its entirety.
         *                              <li> gpudb::alter_table_index_type:
         *                      Type of index to create, when @a action is @a
         *                      create_index,
         *                      or to delete, when @a action is @a
         *                      delete_index.
         *                      <ul>
         *                              <li> gpudb::alter_table_column: Create
         *                      or delete a <a
         *                      href="../../../concepts/indexes/#column-index"
         *                      target="_top">column (attribute) index</a>.
         *                              <li> gpudb::alter_table_chunk_skip:
         *                      Create or delete a <a
         *                      href="../../../concepts/indexes/#chunk-skip-index"
         *                      target="_top">chunk skip index</a>.
         *                              <li> gpudb::alter_table_geospatial:
         *                      Create or delete a geospatial index
         *                      </ul>
         *                      The default value is gpudb::alter_table_column.
         *                      </ul>
         * 
         */
        AlterTableRequest(const std::string& tableName_, const std::string& action_, const std::string& value_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            action( action_ ),
            value( value_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::string action;
        std::string value;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterTableRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #alterTable(const AlterTableRequest&) const}.
     * <p>
     * Apply various modifications to a table or view.  The
     * available modifications include the following:
     * <p>
     * Manage a table's columns--a column can be added, removed, or have its
     * <a href="../../../concepts/types/" target="_top">type and properties</a>
     * modified, including whether it is
     * <a href="../../../concepts/dictionary_encoding/"
     * target="_top">dictionary encoded</a> or not.
     * <p>
     * External tables cannot be modified except for their refresh method.
     * <p>
     * Create or delete a <a href="../../../concepts/indexes/#column-index"
     * target="_top">column</a>,
     * <a href="../../../concepts/indexes/#chunk-skip-index"
     * target="_top">chunk skip</a>, or
     * <a href="../../../concepts/indexes/#geospatial-index"
     * target="_top">geospatial</a> index. This can speed up
     * certain operations when using expressions containing equality or
     * relational
     * operators on indexed columns. This only applies to tables.
     * <p>
     * Create or delete a <a href="../../../concepts/tables/#foreign-key"
     * target="_top">foreign key</a>
     * on a particular column.
     * <p>
     * Manage a
     * <a href="../../../concepts/tables/#partitioning-by-range"
     * target="_top">range-partitioned</a> or a
     * <a href="../../../concepts/tables/#partitioning-by-list-manual"
     * target="_top">manual list-partitioned</a>
     * table's partitions.
     * <p>
     * Set (or reset) the <a href="../../../rm/concepts/#tier-strategies"
     * target="_top">tier strategy</a>
     * of a table or view.
     * <p>
     * Refresh and manage the refresh mode of a
     * <a href="../../../concepts/materialized_views/"
     * target="_top">materialized view</a> or an
     * <a href="../../../concepts/external_tables/" target="_top">external
     * table</a>.
     * <p>
     * Set the <a href="../../../concepts/ttl/" target="_top">time-to-live
     * (TTL)</a>. This can be applied
     * to tables or views.
     * <p>
     * Set the global access mode (i.e. locking) for a table. This setting
     * trumps any
     * role-based access controls that may be in place; e.g., a user with write
     * access
     * to a table marked read-only will not be able to insert records into it.
     * The mode
     * can be set to read-only, write-only, read/write, and no access.
     */
    struct AlterTableResponse
    {

        /**
         * Constructs an AlterTableResponse object with default parameter
         * values.
         */
        AlterTableResponse() :
            tableName(std::string()),
            action(std::string()),
            value(std::string()),
            typeId(std::string()),
            typeDefinition(std::string()),
            properties(std::map<std::string, std::vector<std::string> >()),
            label(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string tableName;
        std::string action;
        std::string value;
        std::string typeId;
        std::string typeDefinition;
        std::map<std::string, std::vector<std::string> > properties;
        std::string label;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterTableResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.typeDefinition);
            ::avro::encode(e, v.properties);
            ::avro::encode(e, v.label);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        case 3:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 4:
                            ::avro::decode(d, v.typeDefinition);
                            break;

                        case 5:
                            ::avro::decode(d, v.properties);
                            break;

                        case 6:
                            ::avro::decode(d, v.label);
                            break;

                        case 7:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.typeDefinition);
                ::avro::decode(d, v.properties);
                ::avro::decode(d, v.label);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
