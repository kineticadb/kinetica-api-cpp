/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_REPAIR_TABLE_H__
#define __ADMIN_REPAIR_TABLE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::adminRepairTable(const AdminRepairTableRequest&) const
     * "GPUdb::adminRepairTable".
     *
     * Manually repair a corrupted table.
     * Returns information about affected tables.
     */
    struct AdminRepairTableRequest
    {
        /**
         * Constructs an AdminRepairTableRequest object with default
         * parameters.
         */
        AdminRepairTableRequest() :
            tableNames(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminRepairTableRequest object with the specified
         * parameters.
         *
         * @param[in] tableNames_  List of tables to query. An asterisk returns
         *                         all tables.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::admin_repair_table_repair_policy
         *                              "admin_repair_table_repair_policy":
         *                              Corrective action to take.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::admin_repair_table_delete_chunks
         *                                      "admin_repair_table_delete_chunks":
         *                                      Deletes any corrupted chunks
         *                                  <li>@ref
         *                                      gpudb::admin_repair_table_shrink_columns
         *                                      "admin_repair_table_shrink_columns":
         *                                      Shrinks corrupted chunks to the
         *                                      shortest column
         *                                  <li>@ref
         *                                      gpudb::admin_repair_table_replay_wal
         *                                      "admin_repair_table_replay_wal":
         *                                      Manually invokes wal replay on
         *                                      the table
         *                              </ul>
         *                          <li>@ref
         *                              gpudb::admin_repair_table_verify_all
         *                              "admin_repair_table_verify_all": If
         *                              @ref gpudb::admin_repair_table_false
         *                              "false" only table chunk data already
         *                              known to be corrupted will be repaired.
         *                              Otherwise the database will perform a
         *                              full table scan to check for
         *                              correctness.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::admin_repair_table_true
         *                                      "admin_repair_table_true"
         *                                  <li>@ref
         *                                      gpudb::admin_repair_table_false
         *                                      "admin_repair_table_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::admin_repair_table_false
         *                              "admin_repair_table_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        AdminRepairTableRequest(const std::vector<std::string>& tableNames_, const std::map<std::string, std::string>& options_):
            tableNames( tableNames_ ),
            options( options_ )
        {
        }

        /**
         * List of tables to query. An asterisk returns all tables.
         */
        std::vector<std::string> tableNames;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::admin_repair_table_repair_policy
         *         "admin_repair_table_repair_policy": Corrective action to
         *         take.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::admin_repair_table_delete_chunks
         *                 "admin_repair_table_delete_chunks": Deletes any
         *                 corrupted chunks
         *             <li>@ref gpudb::admin_repair_table_shrink_columns
         *                 "admin_repair_table_shrink_columns": Shrinks
         *                 corrupted chunks to the shortest column
         *             <li>@ref gpudb::admin_repair_table_replay_wal
         *                 "admin_repair_table_replay_wal": Manually invokes
         *                 wal replay on the table
         *         </ul>
         *     <li>@ref gpudb::admin_repair_table_verify_all
         *         "admin_repair_table_verify_all": If @ref
         *         gpudb::admin_repair_table_false "false" only table chunk
         *         data already known to be corrupted will be repaired.
         *         Otherwise the database will perform a full table scan to
         *         check for correctness.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::admin_repair_table_true
         *                 "admin_repair_table_true"
         *             <li>@ref gpudb::admin_repair_table_false
         *                 "admin_repair_table_false"
         *         </ul>
         *         The default value is @ref gpudb::admin_repair_table_false
         *         "admin_repair_table_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRepairTableRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminRepairTableRequest& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminRepairTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::adminRepairTable(const AdminRepairTableRequest&) const
     * "GPUdb::adminRepairTable".
     */
    struct AdminRepairTableResponse
    {
        /**
         * Constructs an AdminRepairTableResponse object with default
         * parameters.
         */
        AdminRepairTableResponse() :
            tableNames(std::vector<std::string>()),
            repairStatus(std::vector<std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * List of repaired tables.
         */
        std::vector<std::string> tableNames;

        /**
         * List of repair status by table.
         */
        std::vector<std::string> repairStatus;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRepairTableResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminRepairTableResponse& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.repairStatus);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AdminRepairTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.repairStatus);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.repairStatus);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ADMIN_REPAIR_TABLE_H__
