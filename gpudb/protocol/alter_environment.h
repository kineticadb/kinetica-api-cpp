/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_ENVIRONMENT_H__
#define __ALTER_ENVIRONMENT_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #alterEnvironment(const AlterEnvironmentRequest&) const}.
     * <p>
     * Alters an existing environment which can be referenced by a <a
     * href="../../../concepts/udf/" target="_top">user-defined function</a>
     * (UDF).
     */
    struct AlterEnvironmentRequest
    {

        /**
         * Constructs an AlterEnvironmentRequest object with default parameter
         * values.
         */
        AlterEnvironmentRequest() :
            environmentName(std::string()),
            action(std::string()),
            value(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterEnvironmentRequest object with the specified
         * parameters.
         * 
         * @param[in] environmentName_  Name of the environment to be altered.
         * @param[in] action_  Modification operation to be applied
         *                     <ul>
         *                             <li>
         *                     gpudb::alter_environment_install_package:
         *                     Install a python package from PyPI, an external
         *                     data source or KiFS
         *                             <li>
         *                     gpudb::alter_environment_install_requirements:
         *                     Install packages from a requirements file
         *                             <li>
         *                     gpudb::alter_environment_uninstall_package:
         *                     Uninstall a python package.
         *                             <li>
         *                     gpudb::alter_environment_uninstall_requirements:
         *                     Uninstall packages from a requirements file
         *                             <li> gpudb::alter_environment_reset:
         *                     Uninstalls all packages in the environment and
         *                     resets it to the original state at time of
         *                     creation
         *                             <li> gpudb::alter_environment_rebuild:
         *                     Recreates the environment and re-installs all
         *                     packages, upgrades the packages if necessary
         *                     based on dependencies
         *                     </ul>
         * @param[in] value_  The value of the modification, depending on @a
         *                    action.  For example, if @a action is @a
         *                    install_package, this would be the python package
         *                    name.
         *                    If @a action is @a install_requirements, this
         *                    would be the path of a requirements file from
         *                    which to install packages.
         *                    If an external data source is specified in @a
         *                    datasource_name, this can be the path to a wheel
         *                    file or source archive.
         *                    Alternatively, if installing from a file (wheel
         *                    or source archive), the value may be a reference
         *                    to a file in <a href="../../../tools/kifs/"
         *                    target="_top">KiFS</a>.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::alter_environment_datasource_name: Name
         *                      of an existing external data source from which
         *                      packages specified in @a value can be loaded
         *                      </ul>
         * 
         */
        AlterEnvironmentRequest(const std::string& environmentName_, const std::string& action_, const std::string& value_, const std::map<std::string, std::string>& options_):
            environmentName( environmentName_ ),
            action( action_ ),
            value( value_ ),
            options( options_ )
        {
        }

        std::string environmentName;
        std::string action;
        std::string value;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterEnvironmentRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterEnvironmentRequest& v)
        {
            ::avro::encode(e, v.environmentName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterEnvironmentRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.environmentName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.environmentName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #alterEnvironment(const AlterEnvironmentRequest&) const}.
     * <p>
     * Alters an existing environment which can be referenced by a <a
     * href="../../../concepts/udf/" target="_top">user-defined function</a>
     * (UDF).
     */
    struct AlterEnvironmentResponse
    {

        /**
         * Constructs an AlterEnvironmentResponse object with default parameter
         * values.
         */
        AlterEnvironmentResponse() :
            environmentName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string environmentName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterEnvironmentResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterEnvironmentResponse& v)
        {
            ::avro::encode(e, v.environmentName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterEnvironmentResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.environmentName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.environmentName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
