/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __AGGREGATE_GROUP_BY_H__
#define __AGGREGATE_GROUP_BY_H__

#include "../GenericRecord.hpp"

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::aggregateGroupBy(const AggregateGroupByRequest&) const
     * "GPUdb::aggregateGroupBy".
     *
     * Calculates unique combinations (groups) of values for the given columns
     * in a given table or view and computes aggregates on each unique
     * combination. This is somewhat analogous to an SQL-style SELECT...GROUP
     * BY.
     *
     * For aggregation details and examples, see <a
     * href="../../../concepts/aggregation/" target="_top">Aggregation</a>.
     * For limitations, see <a
     * href="../../../concepts/aggregation/#limitations"
     * target="_top">Aggregation Limitations</a>.
     *
     * Any column(s) can be grouped on, and all column types except
     * unrestricted-length strings may be used for computing applicable
     * aggregates; columns marked as <a
     * href="../../../concepts/types/#data-handling"
     * target="_top">store-only</a> are unable to be used in grouping or
     * aggregation.
     *
     * The results can be paged via the @ref offset and @ref limit parameters.
     * For example, to get 10 groups with the largest counts the inputs would
     * be: limit=10, options={"sort_order":"descending", "sort_by":"value"}.
     *
     * @ref options can be used to customize behavior of this call e.g.
     * filtering or sorting the results.
     *
     * To group by columns 'x' and 'y' and compute the number of objects within
     * each group, use:  column_names=['x','y','count(*)'].
     *
     * To also compute the sum of 'z' over each group, use:
     * column_names=['x','y','count(*)','sum(z)'].
     *
     * Available <a href="../../../concepts/expressions/#aggregate-expressions"
     * target="_top">aggregation functions</a> are: count(*), sum, min, max,
     * avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp,
     * arg_min, arg_max and count_distinct.
     *
     * Available grouping functions are <a href="../../../concepts/rollup/"
     * target="_top">Rollup</a>, <a href="../../../concepts/cube/"
     * target="_top">Cube</a>, and <a href="../../../concepts/grouping_sets/"
     * target="_top">Grouping Sets</a>
     *
     * This service also provides support for <a
     * href="../../../concepts/pivot/" target="_top">Pivot</a> operations.
     *
     * Filtering on aggregates is supported via expressions using <a
     * href="../../../concepts/expressions/#aggregate-expressions"
     * target="_top">aggregation functions</a> supplied to @ref
     * gpudb::aggregate_group_by_having "having".
     *
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     *
     * If a @ref gpudb::aggregate_group_by_result_table "result_table" name is
     * specified in the @ref options, the results are stored in a new table
     * with that name--no results are returned in the response.  Both the table
     * name and resulting column names must adhere to <a
     * href="../../../concepts/tables/#table" target="_top">standard naming
     * conventions</a>; column/aggregation expressions will need to be aliased.
     * If the source table's <a href="../../../concepts/tables/#shard-keys"
     * target="_top">shard key</a> is used as the grouping column(s) and all
     * result records are selected (@ref offset is 0 and @ref limit is -9999),
     * the result table will be sharded, in all other cases it will be
     * replicated.  Sorting will properly function only if the result table is
     * replicated or if there is only one processing node and should not be
     * relied upon in other cases.  Not available when any of the values of
     * @ref columnNames is an unrestricted-length string.
     */
    struct AggregateGroupByRequest
    {
        /**
         * Constructs an AggregateGroupByRequest object with default
         * parameters.
         */
        AggregateGroupByRequest() :
            tableName(std::string()),
            columnNames(std::vector<std::string>()),
            offset(int64_t()),
            limit(int64_t()),
            encoding(std::string("binary")),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AggregateGroupByRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of an existing table or view on which
         *                        the operation will be performed, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         * @param[in] columnNames_  List of one or more column names,
         *                          expressions, and aggregate expressions.
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results). The default value
         *                     is 0. The minimum allowed value is 0. The
         *                     maximum allowed value is MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned, or END_OF_SET (-9999)
         *                    to indicate that the maximum number of results
         *                    allowed by the server should be returned.  The
         *                    number of records returned will never exceed the
         *                    server's own limit, defined by the <a
         *                    href="../../../config/#config-main-general"
         *                    target="_top">max_get_records_size</a> parameter
         *                    in the server configuration. Use @ref
         *                    gpudb::RawAggregateGroupByResponse::hasMoreRecords
         *                    "hasMoreRecords" to see if more records exist in
         *                    the result to be fetched, and @a offset_ & @a
         *                    limit_ to request subsequent pages of results.
         *                    The default value is -9999.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_create_temp_table
         *                              "aggregate_group_by_create_temp_table":
         *                              If @ref gpudb::aggregate_group_by_true
         *                              "true", a unique temporary table name
         *                              will be generated in the sys_temp
         *                              schema and used in place of @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table". If @ref
         *                              gpudb::aggregate_group_by_result_table_persist
         *                              "result_table_persist" is @ref
         *                              gpudb::aggregate_group_by_false "false"
         *                              (or unspecified), then this is always
         *                              allowed even if the caller does not
         *                              have permission to create tables. The
         *                              generated name is returned in @ref
         *                              gpudb::aggregate_group_by_qualified_result_table_name
         *                              "qualified_result_table_name".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_true
         *                                      "aggregate_group_by_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_false
         *                                      "aggregate_group_by_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_false
         *                              "aggregate_group_by_false".
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_collection_name
         *                              "aggregate_group_by_collection_name":
         *                              [DEPRECATED--please specify the
         *                              containing schema as part of @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" and use @ref
         *                              GPUdb::createSchema(const CreateSchemaRequest&) const
         *                              "GPUdb::createSchema" to create the
         *                              schema if non-existent]  Name of a
         *                              schema which is to contain the table
         *                              specified in @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table". If the schema provided
         *                              is non-existent, it will be
         *                              automatically created.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_expression
         *                              "aggregate_group_by_expression": Filter
         *                              expression to apply to the table prior
         *                              to computing the aggregate group by.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_chunked_expression_evaluation
         *                              "aggregate_group_by_chunked_expression_evaluation":
         *                              evaluate the filter expression during
         *                              group-by chunk processing.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_true
         *                                      "aggregate_group_by_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_false
         *                                      "aggregate_group_by_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_false
         *                              "aggregate_group_by_false".
         *                          <li>@ref gpudb::aggregate_group_by_having
         *                              "aggregate_group_by_having": Filter
         *                              expression to apply to the aggregated
         *                              results.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_sort_order
         *                              "aggregate_group_by_sort_order":
         *                              [DEPRECATED--use order_by instead]
         *                              String indicating how the returned
         *                              values should be sorted - ascending or
         *                              descending.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_ascending
         *                                      "aggregate_group_by_ascending":
         *                                      Indicates that the returned
         *                                      values should be sorted in
         *                                      ascending order.
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_descending
         *                                      "aggregate_group_by_descending":
         *                                      Indicates that the returned
         *                                      values should be sorted in
         *                                      descending order.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_ascending
         *                              "aggregate_group_by_ascending".
         *                          <li>@ref gpudb::aggregate_group_by_sort_by
         *                              "aggregate_group_by_sort_by":
         *                              [DEPRECATED--use order_by instead]
         *                              String determining how the results are
         *                              sorted.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_key
         *                                      "aggregate_group_by_key":
         *                                      Indicates that the returned
         *                                      values should be sorted by key,
         *                                      which corresponds to the
         *                                      grouping columns. If you have
         *                                      multiple grouping columns (and
         *                                      are sorting by key), it will
         *                                      first sort the first grouping
         *                                      column, then the second
         *                                      grouping column, etc.
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_value
         *                                      "aggregate_group_by_value":
         *                                      Indicates that the returned
         *                                      values should be sorted by
         *                                      value, which corresponds to the
         *                                      aggregates. If you have
         *                                      multiple aggregates (and are
         *                                      sorting by value), it will
         *                                      first sort by the first
         *                                      aggregate, then the second
         *                                      aggregate, etc.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_value
         *                              "aggregate_group_by_value".
         *                          <li>@ref gpudb::aggregate_group_by_order_by
         *                              "aggregate_group_by_order_by":
         *                              Comma-separated list of the columns to
         *                              be sorted by as well as the sort
         *                              direction, e.g., 'timestamp asc, x
         *                              desc'. The default value is ''.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_strategy_definition
         *                              "aggregate_group_by_strategy_definition":
         *                              The <a
         *                              href="../../../rm/concepts/#tier-strategies"
         *                              target="_top">tier strategy</a> for the
         *                              table and its columns.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "aggregate_group_by_result_table": The
         *                              name of a table used to store the
         *                              results, in [schema_name.]table_name
         *                              format, using standard <a
         *                              href="../../../concepts/tables/#table-name-resolution"
         *                              target="_top">name resolution rules</a>
         *                              and meeting <a
         *                              href="../../../concepts/tables/#table-naming-criteria"
         *                              target="_top">table naming
         *                              criteria</a>.  Column names (group-by
         *                              and aggregate fields) need to be given
         *                              aliases e.g. ["FChar256 as fchar256",
         *                              "sum(FDouble) as sfd"].  If present, no
         *                              results are returned in the response.
         *                              This option is not available if one of
         *                              the grouping attributes is an
         *                              unrestricted string (i.e.; not charN)
         *                              type.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_result_table_persist
         *                              "aggregate_group_by_result_table_persist":
         *                              If @ref gpudb::aggregate_group_by_true
         *                              "true", then the result table specified
         *                              in @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" will be persisted and
         *                              will not expire unless a @ref
         *                              gpudb::aggregate_group_by_ttl "ttl" is
         *                              specified.   If @ref
         *                              gpudb::aggregate_group_by_false
         *                              "false", then the result table will be
         *                              an in-memory table and will expire
         *                              unless a @ref
         *                              gpudb::aggregate_group_by_ttl "ttl" is
         *                              specified otherwise.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_true
         *                                      "aggregate_group_by_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_false
         *                                      "aggregate_group_by_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_false
         *                              "aggregate_group_by_false".
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_result_table_force_replicated
         *                              "aggregate_group_by_result_table_force_replicated":
         *                              Force the result table to be replicated
         *                              (ignores any sharding). Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" option.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_true
         *                                      "aggregate_group_by_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_false
         *                                      "aggregate_group_by_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_false
         *                              "aggregate_group_by_false".
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_result_table_generate_pk
         *                              "aggregate_group_by_result_table_generate_pk":
         *                              If @ref gpudb::aggregate_group_by_true
         *                              "true" then set a primary key for the
         *                              result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" option.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_true
         *                                      "aggregate_group_by_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_false
         *                                      "aggregate_group_by_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_false
         *                              "aggregate_group_by_false".
         *                          <li>@ref gpudb::aggregate_group_by_ttl
         *                              "aggregate_group_by_ttl": Sets the <a
         *                              href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the table
         *                              specified in @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table".
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_chunk_size
         *                              "aggregate_group_by_chunk_size":
         *                              Indicates the number of records per
         *                              chunk to be used for the result table.
         *                              Must be used in combination with the
         *                              @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_chunk_column_max_memory
         *                              "aggregate_group_by_chunk_column_max_memory":
         *                              Indicates the target maximum data size
         *                              for each column in a chunk to be used
         *                              for the result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_chunk_max_memory
         *                              "aggregate_group_by_chunk_max_memory":
         *                              Indicates the target maximum data size
         *                              for all columns in a chunk to be used
         *                              for the result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_create_indexes
         *                              "aggregate_group_by_create_indexes":
         *                              Comma-separated list of columns on
         *                              which to create indexes on the result
         *                              table. Must be used in combination with
         *                              the @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" option.
         *                          <li>@ref gpudb::aggregate_group_by_view_id
         *                              "aggregate_group_by_view_id": ID of
         *                              view of which the result table will be
         *                              a member. The default value is ''.
         *                          <li>@ref gpudb::aggregate_group_by_pivot
         *                              "aggregate_group_by_pivot": pivot
         *                              column
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_pivot_values
         *                              "aggregate_group_by_pivot_values": The
         *                              value list provided will become the
         *                              column headers in the output. Should be
         *                              the values from the pivot_column.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_grouping_sets
         *                              "aggregate_group_by_grouping_sets":
         *                              Customize the grouping attribute sets
         *                              to compute the aggregates. These sets
         *                              can include ROLLUP or CUBE operartors.
         *                              The attribute sets should be enclosed
         *                              in paranthesis and can include
         *                              composite attributes. All attributes
         *                              specified in the grouping sets must
         *                              present in the groupby attributes.
         *                          <li>@ref gpudb::aggregate_group_by_rollup
         *                              "aggregate_group_by_rollup": This
         *                              option is used to specify the
         *                              multilevel aggregates.
         *                          <li>@ref gpudb::aggregate_group_by_cube
         *                              "aggregate_group_by_cube": This option
         *                              is used to specify the multidimensional
         *                              aggregates.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_shard_key
         *                              "aggregate_group_by_shard_key":
         *                              Comma-separated list of the columns to
         *                              be sharded on; e.g. 'column1, column2'.
         *                              The columns specified must be present
         *                              in @a columnNames_.  If any alias is
         *                              given for any column name, the alias
         *                              must be used, rather than the original
         *                              column name. The default value is ''.
         *                      </ul>
         *                      The default value is an empty map.
         */
        AggregateGroupByRequest(const std::string& tableName_, const std::vector<std::string>& columnNames_, const int64_t offset_, const int64_t limit_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnNames( columnNames_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( "binary" ),
            options( options_ )
        {
        }

        /**
         * Constructs an AggregateGroupByRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of an existing table or view on which
         *                        the operation will be performed, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         * @param[in] columnNames_  List of one or more column names,
         *                          expressions, and aggregate expressions.
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results). The default value
         *                     is 0. The minimum allowed value is 0. The
         *                     maximum allowed value is MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned, or END_OF_SET (-9999)
         *                    to indicate that the maximum number of results
         *                    allowed by the server should be returned.  The
         *                    number of records returned will never exceed the
         *                    server's own limit, defined by the <a
         *                    href="../../../config/#config-main-general"
         *                    target="_top">max_get_records_size</a> parameter
         *                    in the server configuration. Use @ref
         *                    gpudb::RawAggregateGroupByResponse::hasMoreRecords
         *                    "hasMoreRecords" to see if more records exist in
         *                    the result to be fetched, and @a offset_ & @a
         *                    limit_ to request subsequent pages of results.
         *                    The default value is -9999.
         * @param[in] encoding_  Specifies the encoding for returned records.
         *                       Supported values:
         *                       <ul>
         *                           <li>@ref gpudb::aggregate_group_by_binary
         *                               "aggregate_group_by_binary": Indicates
         *                               that the returned records should be
         *                               binary encoded.
         *                           <li>@ref gpudb::aggregate_group_by_json
         *                               "aggregate_group_by_json": Indicates
         *                               that the returned records should be
         *                               json encoded.
         *                       </ul>
         *                       The default value is @ref
         *                       gpudb::aggregate_group_by_binary
         *                       "aggregate_group_by_binary".
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_create_temp_table
         *                              "aggregate_group_by_create_temp_table":
         *                              If @ref gpudb::aggregate_group_by_true
         *                              "true", a unique temporary table name
         *                              will be generated in the sys_temp
         *                              schema and used in place of @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table". If @ref
         *                              gpudb::aggregate_group_by_result_table_persist
         *                              "result_table_persist" is @ref
         *                              gpudb::aggregate_group_by_false "false"
         *                              (or unspecified), then this is always
         *                              allowed even if the caller does not
         *                              have permission to create tables. The
         *                              generated name is returned in @ref
         *                              gpudb::aggregate_group_by_qualified_result_table_name
         *                              "qualified_result_table_name".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_true
         *                                      "aggregate_group_by_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_false
         *                                      "aggregate_group_by_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_false
         *                              "aggregate_group_by_false".
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_collection_name
         *                              "aggregate_group_by_collection_name":
         *                              [DEPRECATED--please specify the
         *                              containing schema as part of @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" and use @ref
         *                              GPUdb::createSchema(const CreateSchemaRequest&) const
         *                              "GPUdb::createSchema" to create the
         *                              schema if non-existent]  Name of a
         *                              schema which is to contain the table
         *                              specified in @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table". If the schema provided
         *                              is non-existent, it will be
         *                              automatically created.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_expression
         *                              "aggregate_group_by_expression": Filter
         *                              expression to apply to the table prior
         *                              to computing the aggregate group by.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_chunked_expression_evaluation
         *                              "aggregate_group_by_chunked_expression_evaluation":
         *                              evaluate the filter expression during
         *                              group-by chunk processing.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_true
         *                                      "aggregate_group_by_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_false
         *                                      "aggregate_group_by_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_false
         *                              "aggregate_group_by_false".
         *                          <li>@ref gpudb::aggregate_group_by_having
         *                              "aggregate_group_by_having": Filter
         *                              expression to apply to the aggregated
         *                              results.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_sort_order
         *                              "aggregate_group_by_sort_order":
         *                              [DEPRECATED--use order_by instead]
         *                              String indicating how the returned
         *                              values should be sorted - ascending or
         *                              descending.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_ascending
         *                                      "aggregate_group_by_ascending":
         *                                      Indicates that the returned
         *                                      values should be sorted in
         *                                      ascending order.
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_descending
         *                                      "aggregate_group_by_descending":
         *                                      Indicates that the returned
         *                                      values should be sorted in
         *                                      descending order.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_ascending
         *                              "aggregate_group_by_ascending".
         *                          <li>@ref gpudb::aggregate_group_by_sort_by
         *                              "aggregate_group_by_sort_by":
         *                              [DEPRECATED--use order_by instead]
         *                              String determining how the results are
         *                              sorted.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_key
         *                                      "aggregate_group_by_key":
         *                                      Indicates that the returned
         *                                      values should be sorted by key,
         *                                      which corresponds to the
         *                                      grouping columns. If you have
         *                                      multiple grouping columns (and
         *                                      are sorting by key), it will
         *                                      first sort the first grouping
         *                                      column, then the second
         *                                      grouping column, etc.
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_value
         *                                      "aggregate_group_by_value":
         *                                      Indicates that the returned
         *                                      values should be sorted by
         *                                      value, which corresponds to the
         *                                      aggregates. If you have
         *                                      multiple aggregates (and are
         *                                      sorting by value), it will
         *                                      first sort by the first
         *                                      aggregate, then the second
         *                                      aggregate, etc.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_value
         *                              "aggregate_group_by_value".
         *                          <li>@ref gpudb::aggregate_group_by_order_by
         *                              "aggregate_group_by_order_by":
         *                              Comma-separated list of the columns to
         *                              be sorted by as well as the sort
         *                              direction, e.g., 'timestamp asc, x
         *                              desc'. The default value is ''.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_strategy_definition
         *                              "aggregate_group_by_strategy_definition":
         *                              The <a
         *                              href="../../../rm/concepts/#tier-strategies"
         *                              target="_top">tier strategy</a> for the
         *                              table and its columns.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "aggregate_group_by_result_table": The
         *                              name of a table used to store the
         *                              results, in [schema_name.]table_name
         *                              format, using standard <a
         *                              href="../../../concepts/tables/#table-name-resolution"
         *                              target="_top">name resolution rules</a>
         *                              and meeting <a
         *                              href="../../../concepts/tables/#table-naming-criteria"
         *                              target="_top">table naming
         *                              criteria</a>.  Column names (group-by
         *                              and aggregate fields) need to be given
         *                              aliases e.g. ["FChar256 as fchar256",
         *                              "sum(FDouble) as sfd"].  If present, no
         *                              results are returned in the response.
         *                              This option is not available if one of
         *                              the grouping attributes is an
         *                              unrestricted string (i.e.; not charN)
         *                              type.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_result_table_persist
         *                              "aggregate_group_by_result_table_persist":
         *                              If @ref gpudb::aggregate_group_by_true
         *                              "true", then the result table specified
         *                              in @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" will be persisted and
         *                              will not expire unless a @ref
         *                              gpudb::aggregate_group_by_ttl "ttl" is
         *                              specified.   If @ref
         *                              gpudb::aggregate_group_by_false
         *                              "false", then the result table will be
         *                              an in-memory table and will expire
         *                              unless a @ref
         *                              gpudb::aggregate_group_by_ttl "ttl" is
         *                              specified otherwise.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_true
         *                                      "aggregate_group_by_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_false
         *                                      "aggregate_group_by_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_false
         *                              "aggregate_group_by_false".
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_result_table_force_replicated
         *                              "aggregate_group_by_result_table_force_replicated":
         *                              Force the result table to be replicated
         *                              (ignores any sharding). Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" option.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_true
         *                                      "aggregate_group_by_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_false
         *                                      "aggregate_group_by_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_false
         *                              "aggregate_group_by_false".
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_result_table_generate_pk
         *                              "aggregate_group_by_result_table_generate_pk":
         *                              If @ref gpudb::aggregate_group_by_true
         *                              "true" then set a primary key for the
         *                              result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" option.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_true
         *                                      "aggregate_group_by_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_group_by_false
         *                                      "aggregate_group_by_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_group_by_false
         *                              "aggregate_group_by_false".
         *                          <li>@ref gpudb::aggregate_group_by_ttl
         *                              "aggregate_group_by_ttl": Sets the <a
         *                              href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the table
         *                              specified in @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table".
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_chunk_size
         *                              "aggregate_group_by_chunk_size":
         *                              Indicates the number of records per
         *                              chunk to be used for the result table.
         *                              Must be used in combination with the
         *                              @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_chunk_column_max_memory
         *                              "aggregate_group_by_chunk_column_max_memory":
         *                              Indicates the target maximum data size
         *                              for each column in a chunk to be used
         *                              for the result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_chunk_max_memory
         *                              "aggregate_group_by_chunk_max_memory":
         *                              Indicates the target maximum data size
         *                              for all columns in a chunk to be used
         *                              for the result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_create_indexes
         *                              "aggregate_group_by_create_indexes":
         *                              Comma-separated list of columns on
         *                              which to create indexes on the result
         *                              table. Must be used in combination with
         *                              the @ref
         *                              gpudb::aggregate_group_by_result_table
         *                              "result_table" option.
         *                          <li>@ref gpudb::aggregate_group_by_view_id
         *                              "aggregate_group_by_view_id": ID of
         *                              view of which the result table will be
         *                              a member. The default value is ''.
         *                          <li>@ref gpudb::aggregate_group_by_pivot
         *                              "aggregate_group_by_pivot": pivot
         *                              column
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_pivot_values
         *                              "aggregate_group_by_pivot_values": The
         *                              value list provided will become the
         *                              column headers in the output. Should be
         *                              the values from the pivot_column.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_grouping_sets
         *                              "aggregate_group_by_grouping_sets":
         *                              Customize the grouping attribute sets
         *                              to compute the aggregates. These sets
         *                              can include ROLLUP or CUBE operartors.
         *                              The attribute sets should be enclosed
         *                              in paranthesis and can include
         *                              composite attributes. All attributes
         *                              specified in the grouping sets must
         *                              present in the groupby attributes.
         *                          <li>@ref gpudb::aggregate_group_by_rollup
         *                              "aggregate_group_by_rollup": This
         *                              option is used to specify the
         *                              multilevel aggregates.
         *                          <li>@ref gpudb::aggregate_group_by_cube
         *                              "aggregate_group_by_cube": This option
         *                              is used to specify the multidimensional
         *                              aggregates.
         *                          <li>@ref
         *                              gpudb::aggregate_group_by_shard_key
         *                              "aggregate_group_by_shard_key":
         *                              Comma-separated list of the columns to
         *                              be sharded on; e.g. 'column1, column2'.
         *                              The columns specified must be present
         *                              in @a columnNames_.  If any alias is
         *                              given for any column name, the alias
         *                              must be used, rather than the original
         *                              column name. The default value is ''.
         *                      </ul>
         *                      The default value is an empty map.
         */
        AggregateGroupByRequest(const std::string& tableName_, const std::vector<std::string>& columnNames_, const int64_t offset_, const int64_t limit_, const std::string& encoding_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnNames( columnNames_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( encoding_ ),
            options( options_ )
        {
        }

        /**
         * Name of an existing table or view on which the operation will be
         * performed, in [ schema_name.\ ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.
         */
        std::string tableName;

        /**
         * List of one or more column names, expressions, and aggregate
         * expressions.
         */
        std::vector<std::string> columnNames;

        /**
         * A positive integer indicating the number of initial results to skip
         * (this can be useful for paging through the results). The default
         * value is 0. The minimum allowed value is 0. The maximum allowed
         * value is MAX_INT.
         */
        int64_t offset;

        /**
         * A positive integer indicating the maximum number of results to be
         * returned, or END_OF_SET (-9999) to indicate that the maximum number
         * of results allowed by the server should be returned.  The number of
         * records returned will never exceed the server's own limit, defined
         * by the <a href="../../../config/#config-main-general"
         * target="_top">max_get_records_size</a> parameter in the server
         * configuration. Use @ref
         * gpudb::RawAggregateGroupByResponse::hasMoreRecords "hasMoreRecords"
         * to see if more records exist in the result to be fetched, and @ref
         * offset & @ref limit to request subsequent pages of results. The
         * default value is -9999.
         */
        int64_t limit;

        /**
         * Specifies the encoding for returned records.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::aggregate_group_by_binary
         *         "aggregate_group_by_binary": Indicates that the returned
         *         records should be binary encoded.
         *     <li>@ref gpudb::aggregate_group_by_json
         *         "aggregate_group_by_json": Indicates that the returned
         *         records should be json encoded.
         * </ul>
         * The default value is @ref gpudb::aggregate_group_by_binary
         * "aggregate_group_by_binary".
         */
        std::string encoding;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::aggregate_group_by_create_temp_table
         *         "aggregate_group_by_create_temp_table": If @ref
         *         gpudb::aggregate_group_by_true "true", a unique temporary
         *         table name will be generated in the sys_temp schema and used
         *         in place of @ref gpudb::aggregate_group_by_result_table
         *         "result_table". If @ref
         *         gpudb::aggregate_group_by_result_table_persist
         *         "result_table_persist" is @ref
         *         gpudb::aggregate_group_by_false "false" (or unspecified),
         *         then this is always allowed even if the caller does not have
         *         permission to create tables. The generated name is returned
         *         in @ref
         *         gpudb::aggregate_group_by_qualified_result_table_name
         *         "qualified_result_table_name".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_group_by_true
         *                 "aggregate_group_by_true"
         *             <li>@ref gpudb::aggregate_group_by_false
         *                 "aggregate_group_by_false"
         *         </ul>
         *         The default value is @ref gpudb::aggregate_group_by_false
         *         "aggregate_group_by_false".
         *     <li>@ref gpudb::aggregate_group_by_collection_name
         *         "aggregate_group_by_collection_name": [DEPRECATED--please
         *         specify the containing schema as part of @ref
         *         gpudb::aggregate_group_by_result_table "result_table" and
         *         use @ref
         *         GPUdb::createSchema(const CreateSchemaRequest&) const
         *         "GPUdb::createSchema" to create the schema if non-existent]
         *         Name of a schema which is to contain the table specified in
         *         @ref gpudb::aggregate_group_by_result_table "result_table".
         *         If the schema provided is non-existent, it will be
         *         automatically created.
         *     <li>@ref gpudb::aggregate_group_by_expression
         *         "aggregate_group_by_expression": Filter expression to apply
         *         to the table prior to computing the aggregate group by.
         *     <li>@ref gpudb::aggregate_group_by_chunked_expression_evaluation
         *         "aggregate_group_by_chunked_expression_evaluation": evaluate
         *         the filter expression during group-by chunk processing.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_group_by_true
         *                 "aggregate_group_by_true"
         *             <li>@ref gpudb::aggregate_group_by_false
         *                 "aggregate_group_by_false"
         *         </ul>
         *         The default value is @ref gpudb::aggregate_group_by_false
         *         "aggregate_group_by_false".
         *     <li>@ref gpudb::aggregate_group_by_having
         *         "aggregate_group_by_having": Filter expression to apply to
         *         the aggregated results.
         *     <li>@ref gpudb::aggregate_group_by_sort_order
         *         "aggregate_group_by_sort_order": [DEPRECATED--use order_by
         *         instead] String indicating how the returned values should be
         *         sorted - ascending or descending.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_group_by_ascending
         *                 "aggregate_group_by_ascending": Indicates that the
         *                 returned values should be sorted in ascending order.
         *             <li>@ref gpudb::aggregate_group_by_descending
         *                 "aggregate_group_by_descending": Indicates that the
         *                 returned values should be sorted in descending
         *                 order.
         *         </ul>
         *         The default value is @ref
         *         gpudb::aggregate_group_by_ascending
         *         "aggregate_group_by_ascending".
         *     <li>@ref gpudb::aggregate_group_by_sort_by
         *         "aggregate_group_by_sort_by": [DEPRECATED--use order_by
         *         instead] String determining how the results are sorted.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_group_by_key
         *                 "aggregate_group_by_key": Indicates that the
         *                 returned values should be sorted by key, which
         *                 corresponds to the grouping columns. If you have
         *                 multiple grouping columns (and are sorting by key),
         *                 it will first sort the first grouping column, then
         *                 the second grouping column, etc.
         *             <li>@ref gpudb::aggregate_group_by_value
         *                 "aggregate_group_by_value": Indicates that the
         *                 returned values should be sorted by value, which
         *                 corresponds to the aggregates. If you have multiple
         *                 aggregates (and are sorting by value), it will first
         *                 sort by the first aggregate, then the second
         *                 aggregate, etc.
         *         </ul>
         *         The default value is @ref gpudb::aggregate_group_by_value
         *         "aggregate_group_by_value".
         *     <li>@ref gpudb::aggregate_group_by_order_by
         *         "aggregate_group_by_order_by": Comma-separated list of the
         *         columns to be sorted by as well as the sort direction, e.g.,
         *         'timestamp asc, x desc'. The default value is ''.
         *     <li>@ref gpudb::aggregate_group_by_strategy_definition
         *         "aggregate_group_by_strategy_definition": The <a
         *         href="../../../rm/concepts/#tier-strategies"
         *         target="_top">tier strategy</a> for the table and its
         *         columns.
         *     <li>@ref gpudb::aggregate_group_by_result_table
         *         "aggregate_group_by_result_table": The name of a table used
         *         to store the results, in [schema_name.]table_name format,
         *         using standard <a
         *         href="../../../concepts/tables/#table-name-resolution"
         *         target="_top">name resolution rules</a> and meeting <a
         *         href="../../../concepts/tables/#table-naming-criteria"
         *         target="_top">table naming criteria</a>.  Column names
         *         (group-by and aggregate fields) need to be given aliases
         *         e.g. ["FChar256 as fchar256", "sum(FDouble) as sfd"].  If
         *         present, no results are returned in the response.  This
         *         option is not available if one of the grouping attributes is
         *         an unrestricted string (i.e.; not charN) type.
         *     <li>@ref gpudb::aggregate_group_by_result_table_persist
         *         "aggregate_group_by_result_table_persist": If @ref
         *         gpudb::aggregate_group_by_true "true", then the result table
         *         specified in @ref gpudb::aggregate_group_by_result_table
         *         "result_table" will be persisted and will not expire unless
         *         a @ref gpudb::aggregate_group_by_ttl "ttl" is specified.
         *         If @ref gpudb::aggregate_group_by_false "false", then the
         *         result table will be an in-memory table and will expire
         *         unless a @ref gpudb::aggregate_group_by_ttl "ttl" is
         *         specified otherwise.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_group_by_true
         *                 "aggregate_group_by_true"
         *             <li>@ref gpudb::aggregate_group_by_false
         *                 "aggregate_group_by_false"
         *         </ul>
         *         The default value is @ref gpudb::aggregate_group_by_false
         *         "aggregate_group_by_false".
         *     <li>@ref gpudb::aggregate_group_by_result_table_force_replicated
         *         "aggregate_group_by_result_table_force_replicated": Force
         *         the result table to be replicated (ignores any sharding).
         *         Must be used in combination with the @ref
         *         gpudb::aggregate_group_by_result_table "result_table"
         *         option.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_group_by_true
         *                 "aggregate_group_by_true"
         *             <li>@ref gpudb::aggregate_group_by_false
         *                 "aggregate_group_by_false"
         *         </ul>
         *         The default value is @ref gpudb::aggregate_group_by_false
         *         "aggregate_group_by_false".
         *     <li>@ref gpudb::aggregate_group_by_result_table_generate_pk
         *         "aggregate_group_by_result_table_generate_pk": If @ref
         *         gpudb::aggregate_group_by_true "true" then set a primary key
         *         for the result table. Must be used in combination with the
         *         @ref gpudb::aggregate_group_by_result_table "result_table"
         *         option.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_group_by_true
         *                 "aggregate_group_by_true"
         *             <li>@ref gpudb::aggregate_group_by_false
         *                 "aggregate_group_by_false"
         *         </ul>
         *         The default value is @ref gpudb::aggregate_group_by_false
         *         "aggregate_group_by_false".
         *     <li>@ref gpudb::aggregate_group_by_ttl "aggregate_group_by_ttl":
         *         Sets the <a href="../../../concepts/ttl/"
         *         target="_top">TTL</a> of the table specified in @ref
         *         gpudb::aggregate_group_by_result_table "result_table".
         *     <li>@ref gpudb::aggregate_group_by_chunk_size
         *         "aggregate_group_by_chunk_size": Indicates the number of
         *         records per chunk to be used for the result table. Must be
         *         used in combination with the @ref
         *         gpudb::aggregate_group_by_result_table "result_table"
         *         option.
         *     <li>@ref gpudb::aggregate_group_by_chunk_column_max_memory
         *         "aggregate_group_by_chunk_column_max_memory": Indicates the
         *         target maximum data size for each column in a chunk to be
         *         used for the result table. Must be used in combination with
         *         the @ref gpudb::aggregate_group_by_result_table
         *         "result_table" option.
         *     <li>@ref gpudb::aggregate_group_by_chunk_max_memory
         *         "aggregate_group_by_chunk_max_memory": Indicates the target
         *         maximum data size for all columns in a chunk to be used for
         *         the result table. Must be used in combination with the @ref
         *         gpudb::aggregate_group_by_result_table "result_table"
         *         option.
         *     <li>@ref gpudb::aggregate_group_by_create_indexes
         *         "aggregate_group_by_create_indexes": Comma-separated list of
         *         columns on which to create indexes on the result table. Must
         *         be used in combination with the @ref
         *         gpudb::aggregate_group_by_result_table "result_table"
         *         option.
         *     <li>@ref gpudb::aggregate_group_by_view_id
         *         "aggregate_group_by_view_id": ID of view of which the result
         *         table will be a member. The default value is ''.
         *     <li>@ref gpudb::aggregate_group_by_pivot
         *         "aggregate_group_by_pivot": pivot column
         *     <li>@ref gpudb::aggregate_group_by_pivot_values
         *         "aggregate_group_by_pivot_values": The value list provided
         *         will become the column headers in the output. Should be the
         *         values from the pivot_column.
         *     <li>@ref gpudb::aggregate_group_by_grouping_sets
         *         "aggregate_group_by_grouping_sets": Customize the grouping
         *         attribute sets to compute the aggregates. These sets can
         *         include ROLLUP or CUBE operartors. The attribute sets should
         *         be enclosed in paranthesis and can include composite
         *         attributes. All attributes specified in the grouping sets
         *         must present in the groupby attributes.
         *     <li>@ref gpudb::aggregate_group_by_rollup
         *         "aggregate_group_by_rollup": This option is used to specify
         *         the multilevel aggregates.
         *     <li>@ref gpudb::aggregate_group_by_cube
         *         "aggregate_group_by_cube": This option is used to specify
         *         the multidimensional aggregates.
         *     <li>@ref gpudb::aggregate_group_by_shard_key
         *         "aggregate_group_by_shard_key": Comma-separated list of the
         *         columns to be sharded on; e.g. 'column1, column2'.  The
         *         columns specified must be present in @ref columnNames.  If
         *         any alias is given for any column name, the alias must be
         *         used, rather than the original column name. The default
         *         value is ''.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateGroupByRequest>
    {
        static void encode(Encoder& e, const gpudb::AggregateGroupByRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.columnNames);
            ::avro::encode(e, v.offset);
            ::avro::encode(e, v.limit);
            ::avro::encode(e, v.encoding);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AggregateGroupByRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.columnNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.offset);
                            break;

                        case 3:
                            ::avro::decode(d, v.limit);
                            break;

                        case 4:
                            ::avro::decode(d, v.encoding);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.columnNames);
                ::avro::decode(d, v.offset);
                ::avro::decode(d, v.limit);
                ::avro::decode(d, v.encoding);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::aggregateGroupByRaw(const AggregateGroupByRequest&) const
     * "GPUdb::aggregateGroupByRaw".
     */
    struct RawAggregateGroupByResponse
    {
        /**
         * Constructs a RawAggregateGroupByResponse object with default
         * parameters.
         */
        RawAggregateGroupByResponse() :
            responseSchemaStr(std::string()),
            binaryEncodedResponse(std::vector<uint8_t>()),
            jsonEncodedResponse(std::string()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Avro schema of @ref binaryEncodedResponse or @ref
         * jsonEncodedResponse.
         */
        std::string responseSchemaStr;

        /**
         * Avro binary encoded response.
         */
        std::vector<uint8_t> binaryEncodedResponse;

        /**
         * Avro JSON encoded response.
         */
        std::string jsonEncodedResponse;

        /**
         * Total/Filtered number of records.  This may be an over-estimate if a
         * limit was applied and there are additional records (i.e., when @ref
         * hasMoreRecords is true).
         */
        int64_t totalNumberOfRecords;

        /**
         * Too many records. Returned a partial set.
         */
        bool hasMoreRecords;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::aggregate_group_by_qualified_result_table_name
         *         "aggregate_group_by_qualified_result_table_name": The fully
         *         qualified name of the table (i.e. including the schema) used
         *         to store the results.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RawAggregateGroupByResponse>
    {
        static void encode(Encoder& e, const gpudb::RawAggregateGroupByResponse& v)
        {
            ::avro::encode(e, v.responseSchemaStr);
            ::avro::encode(e, v.binaryEncodedResponse);
            ::avro::encode(e, v.jsonEncodedResponse);
            ::avro::encode(e, v.totalNumberOfRecords);
            ::avro::encode(e, v.hasMoreRecords);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::RawAggregateGroupByResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.responseSchemaStr);
                            break;

                        case 1:
                            ::avro::decode(d, v.binaryEncodedResponse);
                            break;

                        case 2:
                            ::avro::decode(d, v.jsonEncodedResponse);
                            break;

                        case 3:
                            ::avro::decode(d, v.totalNumberOfRecords);
                            break;

                        case 4:
                            ::avro::decode(d, v.hasMoreRecords);
                            break;

                        case 5:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.responseSchemaStr);
                ::avro::decode(d, v.binaryEncodedResponse);
                ::avro::decode(d, v.jsonEncodedResponse);
                ::avro::decode(d, v.totalNumberOfRecords);
                ::avro::decode(d, v.hasMoreRecords);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::aggregateGroupBy(const AggregateGroupByRequest&) const
     * "GPUdb::aggregateGroupBy".
     */
    struct AggregateGroupByResponse
    {
        /**
         * Constructs an AggregateGroupByResponse object with default
         * parameters.
         */
        AggregateGroupByResponse() :
            responseSchemaStr(std::string()),
            data(std::vector<gpudb::GenericRecord>()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool()),
            info(std::map<std::string, std::string>()),
            dataTypePtr((gpudb::Type*)NULL)
        {
        }

        /**
         * Avro schema of @ref data or @a jsonEncodedResponse.
         */
        std::string responseSchemaStr;

        /**
         * Avro binary encoded response.
         */
        std::vector<gpudb::GenericRecord> data;

        /**
         * Total/Filtered number of records.  This may be an over-estimate if a
         * limit was applied and there are additional records (i.e., when @ref
         * hasMoreRecords is true).
         */
        int64_t totalNumberOfRecords;

        /**
         * Too many records. Returned a partial set.
         */
        bool hasMoreRecords;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::aggregate_group_by_qualified_result_table_name
         *         "aggregate_group_by_qualified_result_table_name": The fully
         *         qualified name of the table (i.e. including the schema) used
         *         to store the results.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;

        gpudb_type_ptr_t dataTypePtr;
    };
} // end namespace gpudb

#endif // __AGGREGATE_GROUP_BY_H__
