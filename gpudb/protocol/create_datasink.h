/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_DATASINK_H__
#define __CREATE_DATASINK_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::createDatasink(const CreateDatasinkRequest&) const
     * "GPUdb::createDatasink".
     *
     * Creates a <a href="../../../concepts/data_sinks/" target="_top">data
     * sink</a>, which contains the destination information for a data sink
     * that is external to the database.
     */
    struct CreateDatasinkRequest
    {
        /**
         * Constructs a CreateDatasinkRequest object with default parameters.
         */
        CreateDatasinkRequest() :
            name(std::string()),
            destination(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateDatasinkRequest object with the specified
         * parameters.
         *
         * @param[in] name_  Name of the data sink to be created.
         * @param[in] destination_  Destination for the output data in format
         *                          'storage_provider_type://path[:port]'.
         *                          Supported storage provider types are
         *                          'azure', 'gcs', 'hdfs', 'http', 'https',
         *                          'jdbc', 'kafka', and 's3'.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::create_datasink_connection_timeout
         *                              "create_datasink_connection_timeout":
         *                              Timeout in seconds for connecting to
         *                              this data sink
         *                          <li>@ref
         *                              gpudb::create_datasink_wait_timeout
         *                              "create_datasink_wait_timeout": Timeout
         *                              in seconds for waiting for a response
         *                              from this data sink
         *                          <li>@ref gpudb::create_datasink_credential
         *                              "create_datasink_credential": Name of
         *                              the <a
         *                              href="../../../concepts/credentials/"
         *                              target="_top">credential</a> object to
         *                              be used in this data sink
         *                          <li>@ref
         *                              gpudb::create_datasink_s3_bucket_name
         *                              "create_datasink_s3_bucket_name": Name
         *                              of the Amazon S3 bucket to use as the
         *                              data sink
         *                          <li>@ref gpudb::create_datasink_s3_region
         *                              "create_datasink_s3_region": Name of
         *                              the Amazon S3 region where the given
         *                              bucket is located
         *                          <li>@ref
         *                              gpudb::create_datasink_s3_verify_ssl
         *                              "create_datasink_s3_verify_ssl":
         *                              Whether to verify SSL connections.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_datasink_true
         *                                      "create_datasink_true": Connect
         *                                      with SSL verification
         *                                  <li>@ref
         *                                      gpudb::create_datasink_false
         *                                      "create_datasink_false":
         *                                      Connect without verifying the
         *                                      SSL connection; for testing
         *                                      purposes, bypassing TLS errors,
         *                                      self-signed certificates, etc.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_datasink_true
         *                              "create_datasink_true".
         *                          <li>@ref
         *                              gpudb::create_datasink_s3_use_virtual_addressing
         *                              "create_datasink_s3_use_virtual_addressing":
         *                              Whether to use virtual addressing when
         *                              referencing the Amazon S3 sink.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_datasink_true
         *                                      "create_datasink_true": The
         *                                      requests URI should be
         *                                      specified in
         *                                      virtual-hosted-style format
         *                                      where the bucket name is part
         *                                      of the domain name in the URL.
         *                                  <li>@ref
         *                                      gpudb::create_datasink_false
         *                                      "create_datasink_false": Use
         *                                      path-style URI for requests.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_datasink_true
         *                              "create_datasink_true".
         *                          <li>@ref
         *                              gpudb::create_datasink_s3_aws_role_arn
         *                              "create_datasink_s3_aws_role_arn":
         *                              Amazon IAM Role ARN which has required
         *                              S3 permissions that can be assumed for
         *                              the given S3 IAM user
         *                          <li>@ref
         *                              gpudb::create_datasink_s3_encryption_customer_algorithm
         *                              "create_datasink_s3_encryption_customer_algorithm":
         *                              Customer encryption algorithm used
         *                              encrypting data
         *                          <li>@ref
         *                              gpudb::create_datasink_s3_encryption_customer_key
         *                              "create_datasink_s3_encryption_customer_key":
         *                              Customer encryption key to encrypt or
         *                              decrypt data
         *                          <li>@ref
         *                              gpudb::create_datasink_s3_encryption_type
         *                              "create_datasink_s3_encryption_type":
         *                              Server side encryption type
         *                          <li>@ref
         *                              gpudb::create_datasink_s3_kms_key_id
         *                              "create_datasink_s3_kms_key_id": KMS
         *                              key
         *                          <li>@ref
         *                              gpudb::create_datasink_hdfs_kerberos_keytab
         *                              "create_datasink_hdfs_kerberos_keytab":
         *                              Kerberos keytab file location for the
         *                              given HDFS user.  This may be a KIFS
         *                              file.
         *                          <li>@ref
         *                              gpudb::create_datasink_hdfs_delegation_token
         *                              "create_datasink_hdfs_delegation_token":
         *                              Delegation token for the given HDFS
         *                              user
         *                          <li>@ref
         *                              gpudb::create_datasink_hdfs_use_kerberos
         *                              "create_datasink_hdfs_use_kerberos":
         *                              Use kerberos authentication for the
         *                              given HDFS cluster.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_datasink_true
         *                                      "create_datasink_true"
         *                                  <li>@ref
         *                                      gpudb::create_datasink_false
         *                                      "create_datasink_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_datasink_false
         *                              "create_datasink_false".
         *                          <li>@ref
         *                              gpudb::create_datasink_azure_storage_account_name
         *                              "create_datasink_azure_storage_account_name":
         *                              Name of the Azure storage account to
         *                              use as the data sink, this is valid
         *                              only if tenant_id is specified
         *                          <li>@ref
         *                              gpudb::create_datasink_azure_container_name
         *                              "create_datasink_azure_container_name":
         *                              Name of the Azure storage container to
         *                              use as the data sink
         *                          <li>@ref
         *                              gpudb::create_datasink_azure_tenant_id
         *                              "create_datasink_azure_tenant_id":
         *                              Active Directory tenant ID (or
         *                              directory ID)
         *                          <li>@ref
         *                              gpudb::create_datasink_azure_sas_token
         *                              "create_datasink_azure_sas_token":
         *                              Shared access signature token for Azure
         *                              storage account to use as the data sink
         *                          <li>@ref
         *                              gpudb::create_datasink_azure_oauth_token
         *                              "create_datasink_azure_oauth_token":
         *                              Oauth token to access given storage
         *                              container
         *                          <li>@ref
         *                              gpudb::create_datasink_gcs_bucket_name
         *                              "create_datasink_gcs_bucket_name": Name
         *                              of the Google Cloud Storage bucket to
         *                              use as the data sink
         *                          <li>@ref
         *                              gpudb::create_datasink_gcs_project_id
         *                              "create_datasink_gcs_project_id": Name
         *                              of the Google Cloud project to use as
         *                              the data sink
         *                          <li>@ref
         *                              gpudb::create_datasink_gcs_service_account_keys
         *                              "create_datasink_gcs_service_account_keys":
         *                              Google Cloud service account keys to
         *                              use for authenticating the data sink
         *                          <li>@ref
         *                              gpudb::create_datasink_jdbc_driver_jar_path
         *                              "create_datasink_jdbc_driver_jar_path":
         *                              JDBC driver jar file location
         *                          <li>@ref
         *                              gpudb::create_datasink_jdbc_driver_class_name
         *                              "create_datasink_jdbc_driver_class_name":
         *                              Name of the JDBC driver class
         *                          <li>@ref
         *                              gpudb::create_datasink_kafka_topic_name
         *                              "create_datasink_kafka_topic_name":
         *                              Name of the Kafka topic to publish to
         *                              if @a destination_ is a Kafka broker
         *                          <li>@ref
         *                              gpudb::create_datasink_max_batch_size
         *                              "create_datasink_max_batch_size":
         *                              Maximum number of records per
         *                              notification message. The default value
         *                              is '1'.
         *                          <li>@ref
         *                              gpudb::create_datasink_max_message_size
         *                              "create_datasink_max_message_size":
         *                              Maximum size in bytes of each
         *                              notification message. The default value
         *                              is '1000000'.
         *                          <li>@ref gpudb::create_datasink_json_format
         *                              "create_datasink_json_format": The
         *                              desired format of JSON encoded
         *                              notifications message.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_datasink_flat
         *                                      "create_datasink_flat": A
         *                                      single record is returned per
         *                                      message
         *                                  <li>@ref
         *                                      gpudb::create_datasink_nested
         *                                      "create_datasink_nested":
         *                                      Records are returned as an
         *                                      array per message
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_datasink_flat
         *                              "create_datasink_flat".
         *                          <li>@ref
         *                              gpudb::create_datasink_use_managed_credentials
         *                              "create_datasink_use_managed_credentials":
         *                              When no credentials are supplied, we
         *                              use anonymous access by default.  If
         *                              this is set, we will use cloud provider
         *                              user settings.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_datasink_true
         *                                      "create_datasink_true"
         *                                  <li>@ref
         *                                      gpudb::create_datasink_false
         *                                      "create_datasink_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_datasink_false
         *                              "create_datasink_false".
         *                          <li>@ref gpudb::create_datasink_use_https
         *                              "create_datasink_use_https": Use https
         *                              to connect to datasink if true,
         *                              otherwise use http.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_datasink_true
         *                                      "create_datasink_true"
         *                                  <li>@ref
         *                                      gpudb::create_datasink_false
         *                                      "create_datasink_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_datasink_true
         *                              "create_datasink_true".
         *                          <li>@ref
         *                              gpudb::create_datasink_skip_validation
         *                              "create_datasink_skip_validation":
         *                              Bypass validation of connection to this
         *                              data sink.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_datasink_true
         *                                      "create_datasink_true"
         *                                  <li>@ref
         *                                      gpudb::create_datasink_false
         *                                      "create_datasink_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_datasink_false
         *                              "create_datasink_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        CreateDatasinkRequest(const std::string& name_, const std::string& destination_, const std::map<std::string, std::string>& options_):
            name( name_ ),
            destination( destination_ ),
            options( options_ )
        {
        }

        /**
         * Name of the data sink to be created.
         */
        std::string name;

        /**
         * Destination for the output data in format
         * 'storage_provider_type://path[:port]'.
         *
         * Supported storage provider types are 'azure', 'gcs', 'hdfs', 'http',
         * 'https', 'jdbc', 'kafka', and 's3'.
         */
        std::string destination;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::create_datasink_connection_timeout
         *         "create_datasink_connection_timeout": Timeout in seconds for
         *         connecting to this data sink
         *     <li>@ref gpudb::create_datasink_wait_timeout
         *         "create_datasink_wait_timeout": Timeout in seconds for
         *         waiting for a response from this data sink
         *     <li>@ref gpudb::create_datasink_credential
         *         "create_datasink_credential": Name of the <a
         *         href="../../../concepts/credentials/"
         *         target="_top">credential</a> object to be used in this data
         *         sink
         *     <li>@ref gpudb::create_datasink_s3_bucket_name
         *         "create_datasink_s3_bucket_name": Name of the Amazon S3
         *         bucket to use as the data sink
         *     <li>@ref gpudb::create_datasink_s3_region
         *         "create_datasink_s3_region": Name of the Amazon S3 region
         *         where the given bucket is located
         *     <li>@ref gpudb::create_datasink_s3_verify_ssl
         *         "create_datasink_s3_verify_ssl": Whether to verify SSL
         *         connections.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_datasink_true
         *                 "create_datasink_true": Connect with SSL
         *                 verification
         *             <li>@ref gpudb::create_datasink_false
         *                 "create_datasink_false": Connect without verifying
         *                 the SSL connection; for testing purposes, bypassing
         *                 TLS errors, self-signed certificates, etc.
         *         </ul>
         *         The default value is @ref gpudb::create_datasink_true
         *         "create_datasink_true".
         *     <li>@ref gpudb::create_datasink_s3_use_virtual_addressing
         *         "create_datasink_s3_use_virtual_addressing": Whether to use
         *         virtual addressing when referencing the Amazon S3 sink.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_datasink_true
         *                 "create_datasink_true": The requests URI should be
         *                 specified in virtual-hosted-style format where the
         *                 bucket name is part of the domain name in the URL.
         *             <li>@ref gpudb::create_datasink_false
         *                 "create_datasink_false": Use path-style URI for
         *                 requests.
         *         </ul>
         *         The default value is @ref gpudb::create_datasink_true
         *         "create_datasink_true".
         *     <li>@ref gpudb::create_datasink_s3_aws_role_arn
         *         "create_datasink_s3_aws_role_arn": Amazon IAM Role ARN which
         *         has required S3 permissions that can be assumed for the
         *         given S3 IAM user
         *     <li>@ref gpudb::create_datasink_s3_encryption_customer_algorithm
         *         "create_datasink_s3_encryption_customer_algorithm": Customer
         *         encryption algorithm used encrypting data
         *     <li>@ref gpudb::create_datasink_s3_encryption_customer_key
         *         "create_datasink_s3_encryption_customer_key": Customer
         *         encryption key to encrypt or decrypt data
         *     <li>@ref gpudb::create_datasink_s3_encryption_type
         *         "create_datasink_s3_encryption_type": Server side encryption
         *         type
         *     <li>@ref gpudb::create_datasink_s3_kms_key_id
         *         "create_datasink_s3_kms_key_id": KMS key
         *     <li>@ref gpudb::create_datasink_hdfs_kerberos_keytab
         *         "create_datasink_hdfs_kerberos_keytab": Kerberos keytab file
         *         location for the given HDFS user.  This may be a KIFS file.
         *     <li>@ref gpudb::create_datasink_hdfs_delegation_token
         *         "create_datasink_hdfs_delegation_token": Delegation token
         *         for the given HDFS user
         *     <li>@ref gpudb::create_datasink_hdfs_use_kerberos
         *         "create_datasink_hdfs_use_kerberos": Use kerberos
         *         authentication for the given HDFS cluster.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_datasink_true
         *                 "create_datasink_true"
         *             <li>@ref gpudb::create_datasink_false
         *                 "create_datasink_false"
         *         </ul>
         *         The default value is @ref gpudb::create_datasink_false
         *         "create_datasink_false".
         *     <li>@ref gpudb::create_datasink_azure_storage_account_name
         *         "create_datasink_azure_storage_account_name": Name of the
         *         Azure storage account to use as the data sink, this is valid
         *         only if tenant_id is specified
         *     <li>@ref gpudb::create_datasink_azure_container_name
         *         "create_datasink_azure_container_name": Name of the Azure
         *         storage container to use as the data sink
         *     <li>@ref gpudb::create_datasink_azure_tenant_id
         *         "create_datasink_azure_tenant_id": Active Directory tenant
         *         ID (or directory ID)
         *     <li>@ref gpudb::create_datasink_azure_sas_token
         *         "create_datasink_azure_sas_token": Shared access signature
         *         token for Azure storage account to use as the data sink
         *     <li>@ref gpudb::create_datasink_azure_oauth_token
         *         "create_datasink_azure_oauth_token": Oauth token to access
         *         given storage container
         *     <li>@ref gpudb::create_datasink_gcs_bucket_name
         *         "create_datasink_gcs_bucket_name": Name of the Google Cloud
         *         Storage bucket to use as the data sink
         *     <li>@ref gpudb::create_datasink_gcs_project_id
         *         "create_datasink_gcs_project_id": Name of the Google Cloud
         *         project to use as the data sink
         *     <li>@ref gpudb::create_datasink_gcs_service_account_keys
         *         "create_datasink_gcs_service_account_keys": Google Cloud
         *         service account keys to use for authenticating the data sink
         *     <li>@ref gpudb::create_datasink_jdbc_driver_jar_path
         *         "create_datasink_jdbc_driver_jar_path": JDBC driver jar file
         *         location
         *     <li>@ref gpudb::create_datasink_jdbc_driver_class_name
         *         "create_datasink_jdbc_driver_class_name": Name of the JDBC
         *         driver class
         *     <li>@ref gpudb::create_datasink_kafka_topic_name
         *         "create_datasink_kafka_topic_name": Name of the Kafka topic
         *         to publish to if @ref destination is a Kafka broker
         *     <li>@ref gpudb::create_datasink_max_batch_size
         *         "create_datasink_max_batch_size": Maximum number of records
         *         per notification message. The default value is '1'.
         *     <li>@ref gpudb::create_datasink_max_message_size
         *         "create_datasink_max_message_size": Maximum size in bytes of
         *         each notification message. The default value is '1000000'.
         *     <li>@ref gpudb::create_datasink_json_format
         *         "create_datasink_json_format": The desired format of JSON
         *         encoded notifications message.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_datasink_flat
         *                 "create_datasink_flat": A single record is returned
         *                 per message
         *             <li>@ref gpudb::create_datasink_nested
         *                 "create_datasink_nested": Records are returned as an
         *                 array per message
         *         </ul>
         *         The default value is @ref gpudb::create_datasink_flat
         *         "create_datasink_flat".
         *     <li>@ref gpudb::create_datasink_use_managed_credentials
         *         "create_datasink_use_managed_credentials": When no
         *         credentials are supplied, we use anonymous access by
         *         default.  If this is set, we will use cloud provider user
         *         settings.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_datasink_true
         *                 "create_datasink_true"
         *             <li>@ref gpudb::create_datasink_false
         *                 "create_datasink_false"
         *         </ul>
         *         The default value is @ref gpudb::create_datasink_false
         *         "create_datasink_false".
         *     <li>@ref gpudb::create_datasink_use_https
         *         "create_datasink_use_https": Use https to connect to
         *         datasink if true, otherwise use http.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_datasink_true
         *                 "create_datasink_true"
         *             <li>@ref gpudb::create_datasink_false
         *                 "create_datasink_false"
         *         </ul>
         *         The default value is @ref gpudb::create_datasink_true
         *         "create_datasink_true".
         *     <li>@ref gpudb::create_datasink_skip_validation
         *         "create_datasink_skip_validation": Bypass validation of
         *         connection to this data sink.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_datasink_true
         *                 "create_datasink_true"
         *             <li>@ref gpudb::create_datasink_false
         *                 "create_datasink_false"
         *         </ul>
         *         The default value is @ref gpudb::create_datasink_false
         *         "create_datasink_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateDatasinkRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateDatasinkRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.destination);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateDatasinkRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.destination);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.destination);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::createDatasink(const CreateDatasinkRequest&) const
     * "GPUdb::createDatasink".
     */
    struct CreateDatasinkResponse
    {
        /**
         * Constructs a CreateDatasinkResponse object with default parameters.
         */
        CreateDatasinkResponse() :
            name(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::CreateDatasinkRequest::name "name".
         */
        std::string name;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateDatasinkResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateDatasinkResponse& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateDatasinkResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __CREATE_DATASINK_H__
