/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_TABLE_EXTERNAL_H__
#define __CREATE_TABLE_EXTERNAL_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::createTableExternal(const CreateTableExternalRequest&) const
     * "GPUdb::createTableExternal".
     *
     * Creates a new <a href="../../../concepts/external_tables/"
     * target="_top">external table</a>, which is a local database object whose
     * source data is located externally to the database.  The source data can
     * be located either in <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>; on the cluster, accessible to the database; or
     * remotely, accessible via a pre-defined external <a
     * href="../../../concepts/data_sources/" target="_top">data source</a>.
     *
     * The external table can have its structure defined explicitly, via @ref
     * createTableOptions, which contains many of the options from @ref
     * GPUdb::createTable(const CreateTableRequest&) const
     * "GPUdb::createTable"; or defined implicitly, inferred from the source
     * data.
     */
    struct CreateTableExternalRequest
    {
        /**
         * Constructs a CreateTableExternalRequest object with default
         * parameters.
         */
        CreateTableExternalRequest() :
            tableName(std::string()),
            filepaths(std::vector<std::string>()),
            modifyColumns(std::map<std::string, std::map<std::string, std::string> >()),
            createTableOptions(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateTableExternalRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of the table to be created, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a> and
         *                        meeting <a
         *                        href="../../../concepts/tables/#table-naming-criteria"
         *                        target="_top">table naming criteria</a>.
         * @param[in] filepaths_  A list of file paths from which data will be
         *                        sourced;  For paths in <a
         *                        href="../../../tools/kifs/"
         *                        target="_top">KiFS</a>, use the uri prefix of
         *                        kifs:// followed by the path to a file or
         *                        directory. File matching by prefix is
         *                        supported, e.g. kifs://dir/file would match
         *                        dir/file_1 and dir/file_2. When prefix
         *                        matching is used, the path must start with a
         *                        full, valid KiFS directory name.  If an
         *                        external data source is specified in @ref
         *                        gpudb::create_table_external_datasource_name
         *                        "datasource_name", these file paths must
         *                        resolve to accessible files at that data
         *                        source location. Prefix matching is
         *                        supported. If the data source is hdfs,
         *                        prefixes must be aligned with directories,
         *                        i.e. partial file names will not match.  If
         *                        no data source is specified, the files are
         *                        assumed to be local to the database and must
         *                        all be accessible to the gpudb user, residing
         *                        on the path (or relative to the path)
         *                        specified by the external files directory in
         *                        the Kinetica <a
         *                        href="../../../config/#config-main-external-files"
         *                        target="_top">configuration file</a>.
         *                        Wildcards (*) can be used to specify a group
         *                        of files.  Prefix matching is supported, the
         *                        prefixes must be aligned with directories.
         *                        If the first path ends in .tsv, the text
         *                        delimiter will be defaulted to a tab
         *                        character. If the first path ends in .psv,
         *                        the text delimiter will be defaulted to a
         *                        pipe character (|).
         * @param[in] modifyColumns_  Not implemented yet. The default value is
         *                            an empty map.
         * @param[in] createTableOptions_  Options from @ref
         *                                 GPUdb::createTable(const CreateTableRequest&) const
         *                                 "GPUdb::createTable", allowing the
         *                                 structure of the table to be defined
         *                                 independently of the data source.
         *                                 <ul>
         *                                     <li>@ref
         *                                         gpudb::create_table_external_type_id
         *                                         "create_table_external_type_id":
         *                                         ID of a currently registered
         *                                         <a
         *                                         href="../../../concepts/types/"
         *                                         target="_top">type</a>.
         *                                     <li>@ref
         *                                         gpudb::create_table_external_no_error_if_exists
         *                                         "create_table_external_no_error_if_exists":
         *                                         If @ref
         *                                         gpudb::create_table_external_true
         *                                         "true", prevents an error
         *                                         from occurring if the table
         *                                         already exists and is of the
         *                                         given type.  If a table with
         *                                         the same name but a
         *                                         different type exists, it is
         *                                         still an error.
         *                                         Supported values:
         *                                         <ul>
         *                                             <li>@ref
         *                                                 gpudb::create_table_external_true
         *                                                 "create_table_external_true"
         *                                             <li>@ref
         *                                                 gpudb::create_table_external_false
         *                                                 "create_table_external_false"
         *                                         </ul>
         *                                         The default value is @ref
         *                                         gpudb::create_table_external_false
         *                                         "create_table_external_false".
         *                                     <li>@ref
         *                                         gpudb::create_table_external_is_replicated
         *                                         "create_table_external_is_replicated":
         *                                         Affects the <a
         *                                         href="../../../concepts/tables/#distribution"
         *                                         target="_top">distribution
         *                                         scheme</a> for the table's
         *                                         data.  If @ref
         *                                         gpudb::create_table_external_true
         *                                         "true" and the given table
         *                                         has no explicit <a
         *                                         href="../../../concepts/tables/#shard-key"
         *                                         target="_top">shard key</a>
         *                                         defined, the table will be
         *                                         <a
         *                                         href="../../../concepts/tables/#replication"
         *                                         target="_top">replicated</a>.
         *                                         If @ref
         *                                         gpudb::create_table_external_false
         *                                         "false", the table will be
         *                                         <a
         *                                         href="../../../concepts/tables/#sharding"
         *                                         target="_top">sharded</a>
         *                                         according to the shard key
         *                                         specified in the given @ref
         *                                         gpudb::create_table_external_type_id
         *                                         "type_id", or <a
         *                                         href="../../../concepts/tables/#random-sharding"
         *                                         target="_top">randomly
         *                                         sharded</a>, if no shard key
         *                                         is specified. Note that a
         *                                         type containing a shard key
         *                                         cannot be used to create a
         *                                         replicated table.
         *                                         Supported values:
         *                                         <ul>
         *                                             <li>@ref
         *                                                 gpudb::create_table_external_true
         *                                                 "create_table_external_true"
         *                                             <li>@ref
         *                                                 gpudb::create_table_external_false
         *                                                 "create_table_external_false"
         *                                         </ul>
         *                                         The default value is @ref
         *                                         gpudb::create_table_external_false
         *                                         "create_table_external_false".
         *                                     <li>@ref
         *                                         gpudb::create_table_external_foreign_keys
         *                                         "create_table_external_foreign_keys":
         *                                         Semicolon-separated list of
         *                                         <a
         *                                         href="../../../concepts/tables/#foreign-keys"
         *                                         target="_top">foreign
         *                                         keys</a>, of the format
         *                                         '(source_column_name [,
         *                                         ...]) references
         *                                         target_table_name(primary_key_column_name
         *                                         [, ...]) [as
         *                                         foreign_key_name]'.
         *                                     <li>@ref
         *                                         gpudb::create_table_external_foreign_shard_key
         *                                         "create_table_external_foreign_shard_key":
         *                                         Foreign shard key of the
         *                                         format 'source_column
         *                                         references shard_by_column
         *                                         from
         *                                         target_table(primary_key_column)'.
         *                                     <li>@ref
         *                                         gpudb::create_table_external_partition_type
         *                                         "create_table_external_partition_type":
         *                                         <a
         *                                         href="../../../concepts/tables/#partitioning"
         *                                         target="_top">Partitioning</a>
         *                                         scheme to use.
         *                                         Supported values:
         *                                         <ul>
         *                                             <li>@ref
         *                                                 gpudb::create_table_external_RANGE
         *                                                 "create_table_external_RANGE":
         *                                                 Use <a
         *                                                 href="../../../concepts/tables/#partitioning-by-range"
         *                                                 target="_top">range
         *                                                 partitioning</a>.
         *                                             <li>@ref
         *                                                 gpudb::create_table_external_INTERVAL
         *                                                 "create_table_external_INTERVAL":
         *                                                 Use <a
         *                                                 href="../../../concepts/tables/#partitioning-by-interval"
         *                                                 target="_top">interval
         *                                                 partitioning</a>.
         *                                             <li>@ref
         *                                                 gpudb::create_table_external_LIST
         *                                                 "create_table_external_LIST":
         *                                                 Use <a
         *                                                 href="../../../concepts/tables/#partitioning-by-list"
         *                                                 target="_top">list
         *                                                 partitioning</a>.
         *                                             <li>@ref
         *                                                 gpudb::create_table_external_HASH
         *                                                 "create_table_external_HASH":
         *                                                 Use <a
         *                                                 href="../../../concepts/tables/#partitioning-by-hash"
         *                                                 target="_top">hash
         *                                                 partitioning</a>.
         *                                             <li>@ref
         *                                                 gpudb::create_table_external_SERIES
         *                                                 "create_table_external_SERIES":
         *                                                 Use <a
         *                                                 href="../../../concepts/tables/#partitioning-by-series"
         *                                                 target="_top">series
         *                                                 partitioning</a>.
         *                                         </ul>
         *                                     <li>@ref
         *                                         gpudb::create_table_external_partition_keys
         *                                         "create_table_external_partition_keys":
         *                                         Comma-separated list of
         *                                         partition keys, which are
         *                                         the columns or column
         *                                         expressions by which records
         *                                         will be assigned to
         *                                         partitions defined by @ref
         *                                         gpudb::create_table_external_partition_definitions
         *                                         "partition_definitions".
         *                                     <li>@ref
         *                                         gpudb::create_table_external_partition_definitions
         *                                         "create_table_external_partition_definitions":
         *                                         Comma-separated list of
         *                                         partition definitions, whose
         *                                         format depends on the choice
         *                                         of @ref
         *                                         gpudb::create_table_external_partition_type
         *                                         "partition_type".  See <a
         *                                         href="../../../concepts/tables/#partitioning-by-range"
         *                                         target="_top">range
         *                                         partitioning</a>, <a
         *                                         href="../../../concepts/tables/#partitioning-by-interval"
         *                                         target="_top">interval
         *                                         partitioning</a>, <a
         *                                         href="../../../concepts/tables/#partitioning-by-list"
         *                                         target="_top">list
         *                                         partitioning</a>, <a
         *                                         href="../../../concepts/tables/#partitioning-by-hash"
         *                                         target="_top">hash
         *                                         partitioning</a>, or <a
         *                                         href="../../../concepts/tables/#partitioning-by-series"
         *                                         target="_top">series
         *                                         partitioning</a> for example
         *                                         formats.
         *                                     <li>@ref
         *                                         gpudb::create_table_external_is_automatic_partition
         *                                         "create_table_external_is_automatic_partition":
         *                                         If @ref
         *                                         gpudb::create_table_external_true
         *                                         "true", a new partition will
         *                                         be created for values which
         *                                         don't fall into an existing
         *                                         partition.  Currently, only
         *                                         supported for <a
         *                                         href="../../../concepts/tables/#partitioning-by-list"
         *                                         target="_top">list
         *                                         partitions</a>.
         *                                         Supported values:
         *                                         <ul>
         *                                             <li>@ref
         *                                                 gpudb::create_table_external_true
         *                                                 "create_table_external_true"
         *                                             <li>@ref
         *                                                 gpudb::create_table_external_false
         *                                                 "create_table_external_false"
         *                                         </ul>
         *                                         The default value is @ref
         *                                         gpudb::create_table_external_false
         *                                         "create_table_external_false".
         *                                     <li>@ref
         *                                         gpudb::create_table_external_ttl
         *                                         "create_table_external_ttl":
         *                                         Sets the <a
         *                                         href="../../../concepts/ttl/"
         *                                         target="_top">TTL</a> of the
         *                                         table specified in @a
         *                                         tableName_.
         *                                     <li>@ref
         *                                         gpudb::create_table_external_chunk_size
         *                                         "create_table_external_chunk_size":
         *                                         Indicates the number of
         *                                         records per chunk to be used
         *                                         for this table.
         *                                     <li>@ref
         *                                         gpudb::create_table_external_chunk_column_max_memory
         *                                         "create_table_external_chunk_column_max_memory":
         *                                         Indicates the target maximum
         *                                         data size for each column in
         *                                         a chunk to be used for this
         *                                         table.
         *                                     <li>@ref
         *                                         gpudb::create_table_external_chunk_max_memory
         *                                         "create_table_external_chunk_max_memory":
         *                                         Indicates the target maximum
         *                                         data size for all columns in
         *                                         a chunk to be used for this
         *                                         table.
         *                                     <li>@ref
         *                                         gpudb::create_table_external_is_result_table
         *                                         "create_table_external_is_result_table":
         *                                         Indicates whether the table
         *                                         is a <a
         *                                         href="../../../concepts/tables_memory_only/"
         *                                         target="_top">memory-only
         *                                         table</a>. A result table
         *                                         cannot contain columns with
         *                                         text_search <a
         *                                         href="../../../concepts/types/#data-handling"
         *                                         target="_top">data-handling</a>,
         *                                         and it will not be retained
         *                                         if the server is restarted.
         *                                         Supported values:
         *                                         <ul>
         *                                             <li>@ref
         *                                                 gpudb::create_table_external_true
         *                                                 "create_table_external_true"
         *                                             <li>@ref
         *                                                 gpudb::create_table_external_false
         *                                                 "create_table_external_false"
         *                                         </ul>
         *                                         The default value is @ref
         *                                         gpudb::create_table_external_false
         *                                         "create_table_external_false".
         *                                     <li>@ref
         *                                         gpudb::create_table_external_strategy_definition
         *                                         "create_table_external_strategy_definition":
         *                                         The <a
         *                                         href="../../../rm/concepts/#tier-strategies"
         *                                         target="_top">tier
         *                                         strategy</a> for the table
         *                                         and its columns.
         *                                 </ul>
         *                                 The default value is an empty map.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::create_table_external_bad_record_table_name
         *                              "create_table_external_bad_record_table_name":
         *                              Name of a table to which records that
         *                              were rejected are written. The
         *                              bad-record-table has the following
         *                              columns: line_number (long),
         *                              line_rejected (string), error_message
         *                              (string).  When @ref
         *                              gpudb::create_table_external_error_handling
         *                              "error_handling" is @ref
         *                              gpudb::create_table_external_abort
         *                              "abort", bad records table is not
         *                              populated.
         *                          <li>@ref
         *                              gpudb::create_table_external_bad_record_table_limit
         *                              "create_table_external_bad_record_table_limit":
         *                              A positive integer indicating the
         *                              maximum number of records that can be
         *                              written to the bad-record-table. The
         *                              default value is '10000'.
         *                          <li>@ref
         *                              gpudb::create_table_external_bad_record_table_limit_per_input
         *                              "create_table_external_bad_record_table_limit_per_input":
         *                              For subscriptions, a positive integer
         *                              indicating the maximum number of
         *                              records that can be written to the
         *                              bad-record-table per file/payload.
         *                              Default value will be @ref
         *                              gpudb::create_table_external_bad_record_table_limit
         *                              "bad_record_table_limit" and total size
         *                              of the table per rank is limited to
         *                              @ref
         *                              gpudb::create_table_external_bad_record_table_limit
         *                              "bad_record_table_limit".
         *                          <li>@ref
         *                              gpudb::create_table_external_batch_size
         *                              "create_table_external_batch_size":
         *                              Number of records to insert per batch
         *                              when inserting data. The default value
         *                              is '50000'.
         *                          <li>@ref
         *                              gpudb::create_table_external_column_formats
         *                              "create_table_external_column_formats":
         *                              For each target column specified,
         *                              applies the column-property-bound
         *                              format to the source data loaded into
         *                              that column.  Each column format will
         *                              contain a mapping of one or more of its
         *                              column properties to an appropriate
         *                              format for each property.  Currently
         *                              supported column properties include
         *                              date, time, & datetime. The parameter
         *                              value must be formatted as a JSON
         *                              string of maps of column names to maps
         *                              of column properties to their
         *                              corresponding column formats, e.g., '{
         *                              "order_date" : { "date" : "%Y.%m.%d" },
         *                              "order_time" : { "time" : "%H:%M:%S" }
         *                              }'.  See @ref
         *                              gpudb::create_table_external_default_column_formats
         *                              "default_column_formats" for valid
         *                              format syntax.
         *                          <li>@ref
         *                              gpudb::create_table_external_columns_to_load
         *                              "create_table_external_columns_to_load":
         *                              Specifies a comma-delimited list of
         *                              columns from the source data to load.
         *                              If more than one file is being loaded,
         *                              this list applies to all files.  Column
         *                              numbers can be specified discretely or
         *                              as a range.  For example, a value of
         *                              '5,7,1..3' will insert values from the
         *                              fifth column in the source data into
         *                              the first column in the target table,
         *                              from the seventh column in the source
         *                              data into the second column in the
         *                              target table, and from the first
         *                              through third columns in the source
         *                              data into the third through fifth
         *                              columns in the target table.  If the
         *                              source data contains a header, column
         *                              names matching the file header names
         *                              may be provided instead of column
         *                              numbers.  If the target table doesn't
         *                              exist, the table will be created with
         *                              the columns in this order.  If the
         *                              target table does exist with columns in
         *                              a different order than the source data,
         *                              this list can be used to match the
         *                              order of the target table.  For
         *                              example, a value of 'C, B, A' will
         *                              create a three column table with column
         *                              C, followed by column B, followed by
         *                              column A; or will insert those fields
         *                              in that order into a table created with
         *                              columns in that order.  If the target
         *                              table exists, the column names must
         *                              match the source data field names for a
         *                              name-mapping to be successful.
         *                              Mutually exclusive with @ref
         *                              gpudb::create_table_external_columns_to_skip
         *                              "columns_to_skip".
         *                          <li>@ref
         *                              gpudb::create_table_external_columns_to_skip
         *                              "create_table_external_columns_to_skip":
         *                              Specifies a comma-delimited list of
         *                              columns from the source data to skip.
         *                              Mutually exclusive with @ref
         *                              gpudb::create_table_external_columns_to_load
         *                              "columns_to_load".
         *                          <li>@ref
         *                              gpudb::create_table_external_compression_type
         *                              "create_table_external_compression_type":
         *                              Source data compression type.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_none
         *                                      "create_table_external_none":
         *                                      No compression.
         *                                  <li>@ref
         *                                      gpudb::create_table_external_auto
         *                                      "create_table_external_auto":
         *                                      Auto detect compression type
         *                                  <li>@ref
         *                                      gpudb::create_table_external_gzip
         *                                      "create_table_external_gzip":
         *                                      gzip file compression.
         *                                  <li>@ref
         *                                      gpudb::create_table_external_bzip2
         *                                      "create_table_external_bzip2":
         *                                      bzip2 file compression.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_auto
         *                              "create_table_external_auto".
         *                          <li>@ref
         *                              gpudb::create_table_external_datasource_name
         *                              "create_table_external_datasource_name":
         *                              Name of an existing external data
         *                              source from which data file(s)
         *                              specified in @a filepaths_ will be
         *                              loaded
         *                          <li>@ref
         *                              gpudb::create_table_external_default_column_formats
         *                              "create_table_external_default_column_formats":
         *                              Specifies the default format to be
         *                              applied to source data loaded into
         *                              columns with the corresponding column
         *                              property.  Currently supported column
         *                              properties include date, time, &
         *                              datetime.  This default
         *                              column-property-bound format can be
         *                              overridden by specifying a column
         *                              property & format for a given target
         *                              column in @ref
         *                              gpudb::create_table_external_column_formats
         *                              "column_formats". For each specified
         *                              annotation, the format will apply to
         *                              all columns with that annotation unless
         *                              a custom @ref
         *                              gpudb::create_table_external_column_formats
         *                              "column_formats" for that annotation is
         *                              specified.  The parameter value must be
         *                              formatted as a JSON string that is a
         *                              map of column properties to their
         *                              respective column formats, e.g., '{
         *                              "date" : "%Y.%m.%d", "time" :
         *                              "%H:%M:%S" }'.  Column formats are
         *                              specified as a string of control
         *                              characters and plain text. The
         *                              supported control characters are 'Y',
         *                              'm', 'd', 'H', 'M', 'S', and 's', which
         *                              follow the Linux 'strptime()'
         *                              specification, as well as 's', which
         *                              specifies seconds and fractional
         *                              seconds (though the fractional
         *                              component will be truncated past
         *                              milliseconds).  Formats for the 'date'
         *                              annotation must include the 'Y', 'm',
         *                              and 'd' control characters. Formats for
         *                              the 'time' annotation must include the
         *                              'H', 'M', and either 'S' or 's' (but
         *                              not both) control characters. Formats
         *                              for the 'datetime' annotation meet both
         *                              the 'date' and 'time' control character
         *                              requirements. For example, '{"datetime"
         *                              : "%m/%d/%Y %H:%M:%S" }' would be used
         *                              to interpret text as "05/04/2000
         *                              12:12:11"
         *                          <li>@ref
         *                              gpudb::create_table_external_error_handling
         *                              "create_table_external_error_handling":
         *                              Specifies how errors should be handled
         *                              upon insertion.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_permissive
         *                                      "create_table_external_permissive":
         *                                      Records with missing columns
         *                                      are populated with nulls if
         *                                      possible; otherwise, the
         *                                      malformed records are skipped.
         *                                  <li>@ref
         *                                      gpudb::create_table_external_ignore_bad_records
         *                                      "create_table_external_ignore_bad_records":
         *                                      Malformed records are skipped.
         *                                  <li>@ref
         *                                      gpudb::create_table_external_abort
         *                                      "create_table_external_abort":
         *                                      Stops current insertion and
         *                                      aborts entire operation when an
         *                                      error is encountered.  Primary
         *                                      key collisions are considered
         *                                      abortable errors in this mode.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_abort
         *                              "create_table_external_abort".
         *                          <li>@ref
         *                              gpudb::create_table_external_external_table_type
         *                              "create_table_external_external_table_type":
         *                              Specifies whether the external table
         *                              holds a local copy of the external
         *                              data.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_materialized
         *                                      "create_table_external_materialized":
         *                                      Loads a copy of the external
         *                                      data into the database,
         *                                      refreshed on demand
         *                                  <li>@ref
         *                                      gpudb::create_table_external_logical
         *                                      "create_table_external_logical":
         *                                      External data will not be
         *                                      loaded into the database; the
         *                                      data will be retrieved from the
         *                                      source upon servicing each
         *                                      query against the external
         *                                      table
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_materialized
         *                              "create_table_external_materialized".
         *                          <li>@ref
         *                              gpudb::create_table_external_file_type
         *                              "create_table_external_file_type":
         *                              Specifies the type of the file(s) whose
         *                              records will be inserted.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_avro
         *                                      "create_table_external_avro":
         *                                      Avro file format
         *                                  <li>@ref
         *                                      gpudb::create_table_external_delimited_text
         *                                      "create_table_external_delimited_text":
         *                                      Delimited text file format;
         *                                      e.g., CSV, TSV, PSV, etc.
         *                                  <li>@ref
         *                                      gpudb::create_table_external_gdb
         *                                      "create_table_external_gdb":
         *                                      Esri/GDB file format
         *                                  <li>@ref
         *                                      gpudb::create_table_external_json
         *                                      "create_table_external_json":
         *                                      Json file format
         *                                  <li>@ref
         *                                      gpudb::create_table_external_parquet
         *                                      "create_table_external_parquet":
         *                                      Apache Parquet file format
         *                                  <li>@ref
         *                                      gpudb::create_table_external_shapefile
         *                                      "create_table_external_shapefile":
         *                                      ShapeFile file format
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_delimited_text
         *                              "create_table_external_delimited_text".
         *                          <li>@ref
         *                              gpudb::create_table_external_flatten_columns
         *                              "create_table_external_flatten_columns":
         *                              Specifies how to handle nested columns.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_true
         *                                      "create_table_external_true":
         *                                      Break up nested columns to
         *                                      multiple columns
         *                                  <li>@ref
         *                                      gpudb::create_table_external_false
         *                                      "create_table_external_false":
         *                                      Treat nested columns as json
         *                                      columns instead of flattening
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_false
         *                              "create_table_external_false".
         *                          <li>@ref
         *                              gpudb::create_table_external_gdal_configuration_options
         *                              "create_table_external_gdal_configuration_options":
         *                              Comma separated list of gdal conf
         *                              options, for the specific requets:
         *                              key=value
         *                          <li>@ref
         *                              gpudb::create_table_external_ignore_existing_pk
         *                              "create_table_external_ignore_existing_pk":
         *                              Specifies the record collision
         *                              error-suppression policy for inserting
         *                              into a table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>, only
         *                              used when not in upsert mode (upsert
         *                              mode is disabled when @ref
         *                              gpudb::create_table_external_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::create_table_external_false
         *                              "false").  If set to @ref
         *                              gpudb::create_table_external_true
         *                              "true", any record being inserted that
         *                              is rejected for having primary key
         *                              values that match those of an existing
         *                              table record will be ignored with no
         *                              error generated.  If @ref
         *                              gpudb::create_table_external_false
         *                              "false", the rejection of any record
         *                              for having primary key values matching
         *                              an existing record will result in an
         *                              error being reported, as determined by
         *                              @ref
         *                              gpudb::create_table_external_error_handling
         *                              "error_handling".  If the specified
         *                              table does not have a primary key or if
         *                              upsert mode is in effect (@ref
         *                              gpudb::create_table_external_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::create_table_external_true
         *                              "true"), then this option has no
         *                              effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_true
         *                                      "create_table_external_true":
         *                                      Ignore new records whose
         *                                      primary key values collide with
         *                                      those of existing records
         *                                  <li>@ref
         *                                      gpudb::create_table_external_false
         *                                      "create_table_external_false":
         *                                      Treat as errors any new records
         *                                      whose primary key values
         *                                      collide with those of existing
         *                                      records
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_false
         *                              "create_table_external_false".
         *                          <li>@ref
         *                              gpudb::create_table_external_ingestion_mode
         *                              "create_table_external_ingestion_mode":
         *                              Whether to do a full load, dry run, or
         *                              perform a type inference on the source
         *                              data.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_full
         *                                      "create_table_external_full":
         *                                      Run a type inference on the
         *                                      source data (if needed) and
         *                                      ingest
         *                                  <li>@ref
         *                                      gpudb::create_table_external_dry_run
         *                                      "create_table_external_dry_run":
         *                                      Does not load data, but walks
         *                                      through the source data and
         *                                      determines the number of valid
         *                                      records, taking into account
         *                                      the current mode of @ref
         *                                      gpudb::create_table_external_error_handling
         *                                      "error_handling".
         *                                  <li>@ref
         *                                      gpudb::create_table_external_type_inference_only
         *                                      "create_table_external_type_inference_only":
         *                                      Infer the type of the source
         *                                      data and return, without
         *                                      ingesting any data.  The
         *                                      inferred type is returned in
         *                                      the response.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_full
         *                              "create_table_external_full".
         *                          <li>@ref
         *                              gpudb::create_table_external_jdbc_fetch_size
         *                              "create_table_external_jdbc_fetch_size":
         *                              The JDBC fetch size, which determines
         *                              how many rows to fetch per round trip.
         *                              The default value is '50000'.
         *                          <li>@ref
         *                              gpudb::create_table_external_kafka_consumers_per_rank
         *                              "create_table_external_kafka_consumers_per_rank":
         *                              Number of Kafka consumer threads per
         *                              rank (valid range 1-6). The default
         *                              value is '1'.
         *                          <li>@ref
         *                              gpudb::create_table_external_kafka_group_id
         *                              "create_table_external_kafka_group_id":
         *                              The group id to be used when consuming
         *                              data from a Kafka topic (valid only for
         *                              Kafka datasource subscriptions).
         *                          <li>@ref
         *                              gpudb::create_table_external_kafka_offset_reset_policy
         *                              "create_table_external_kafka_offset_reset_policy":
         *                              Policy to determine whether the Kafka
         *                              data consumption starts either at
         *                              earliest offset or latest offset.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_earliest
         *                                      "create_table_external_earliest"
         *                                  <li>@ref
         *                                      gpudb::create_table_external_latest
         *                                      "create_table_external_latest"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_earliest
         *                              "create_table_external_earliest".
         *                          <li>@ref
         *                              gpudb::create_table_external_kafka_optimistic_ingest
         *                              "create_table_external_kafka_optimistic_ingest":
         *                              Enable optimistic ingestion where Kafka
         *                              topic offsets and table data are
         *                              committed independently to achieve
         *                              parallelism.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_true
         *                                      "create_table_external_true"
         *                                  <li>@ref
         *                                      gpudb::create_table_external_false
         *                                      "create_table_external_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_false
         *                              "create_table_external_false".
         *                          <li>@ref
         *                              gpudb::create_table_external_kafka_subscription_cancel_after
         *                              "create_table_external_kafka_subscription_cancel_after":
         *                              Sets the Kafka subscription lifespan
         *                              (in minutes). Expired subscription will
         *                              be cancelled automatically.
         *                          <li>@ref
         *                              gpudb::create_table_external_kafka_type_inference_fetch_timeout
         *                              "create_table_external_kafka_type_inference_fetch_timeout":
         *                              Maximum time to collect Kafka messages
         *                              before type inferencing on the set of
         *                              them.
         *                          <li>@ref gpudb::create_table_external_layer
         *                              "create_table_external_layer": Geo
         *                              files layer(s) name(s): comma
         *                              separated.
         *                          <li>@ref
         *                              gpudb::create_table_external_loading_mode
         *                              "create_table_external_loading_mode":
         *                              Scheme for distributing the extraction
         *                              and loading of data from the source
         *                              data file(s). This option applies only
         *                              when loading files that are local to
         *                              the database.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_head
         *                                      "create_table_external_head":
         *                                      The head node loads all data.
         *                                      All files must be available to
         *                                      the head node.
         *                                  <li>@ref
         *                                      gpudb::create_table_external_distributed_shared
         *                                      "create_table_external_distributed_shared":
         *                                      The head node coordinates
         *                                      loading data by worker
         *                                      processes across all nodes from
         *                                      shared files available to all
         *                                      workers.  NOTE:  Instead of
         *                                      existing on a shared source,
         *                                      the files can be duplicated on
         *                                      a source local to each host to
         *                                      improve performance, though the
         *                                      files must appear as the same
         *                                      data set from the perspective
         *                                      of all hosts performing the
         *                                      load.
         *                                  <li>@ref
         *                                      gpudb::create_table_external_distributed_local
         *                                      "create_table_external_distributed_local":
         *                                      A single worker process on each
         *                                      node loads all files that are
         *                                      available to it. This option
         *                                      works best when each worker
         *                                      loads files from its own file
         *                                      system, to maximize
         *                                      performance. In order to avoid
         *                                      data duplication, either each
         *                                      worker performing the load
         *                                      needs to have visibility to a
         *                                      set of files unique to it (no
         *                                      file is visible to more than
         *                                      one node) or the target table
         *                                      needs to have a primary key
         *                                      (which will allow the worker to
         *                                      automatically deduplicate
         *                                      data).  NOTE:  If the target
         *                                      table doesn't exist, the table
         *                                      structure will be determined by
         *                                      the head node. If the head node
         *                                      has no files local to it, it
         *                                      will be unable to determine the
         *                                      structure and the request will
         *                                      fail.  If the head node is
         *                                      configured to have no worker
         *                                      processes, no data strictly
         *                                      accessible to the head node
         *                                      will be loaded.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_head
         *                              "create_table_external_head".
         *                          <li>@ref
         *                              gpudb::create_table_external_local_time_offset
         *                              "create_table_external_local_time_offset":
         *                              Apply an offset to Avro local timestamp
         *                              columns.
         *                          <li>@ref
         *                              gpudb::create_table_external_max_records_to_load
         *                              "create_table_external_max_records_to_load":
         *                              Limit the number of records to load in
         *                              this request: if this number is larger
         *                              than @ref
         *                              gpudb::create_table_external_batch_size
         *                              "batch_size", then the number of
         *                              records loaded will be limited to the
         *                              next whole number of @ref
         *                              gpudb::create_table_external_batch_size
         *                              "batch_size" (per working thread).
         *                          <li>@ref
         *                              gpudb::create_table_external_num_tasks_per_rank
         *                              "create_table_external_num_tasks_per_rank":
         *                              Number of tasks for reading file per
         *                              rank. Default will be system
         *                              configuration parameter,
         *                              external_file_reader_num_tasks.
         *                          <li>@ref
         *                              gpudb::create_table_external_poll_interval
         *                              "create_table_external_poll_interval":
         *                              If @ref
         *                              gpudb::create_table_external_true
         *                              "true", the number of seconds between
         *                              attempts to load external files into
         *                              the table.  If zero, polling will be
         *                              continuous as long as data is found.
         *                              If no data is found, the interval will
         *                              steadily increase to a maximum of 60
         *                              seconds. The default value is '0'.
         *                          <li>@ref
         *                              gpudb::create_table_external_primary_keys
         *                              "create_table_external_primary_keys":
         *                              Comma separated list of column names to
         *                              set as primary keys, when not specified
         *                              in the type.
         *                          <li>@ref
         *                              gpudb::create_table_external_refresh_method
         *                              "create_table_external_refresh_method":
         *                              Method by which the table can be
         *                              refreshed from its source data.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_manual
         *                                      "create_table_external_manual":
         *                                      Refresh only occurs when
         *                                      manually requested by invoking
         *                                      the refresh action of @ref
         *                                      GPUdb::alterTable(const AlterTableRequest&) const
         *                                      "GPUdb::alterTable" on this
         *                                      table.
         *                                  <li>@ref
         *                                      gpudb::create_table_external_on_start
         *                                      "create_table_external_on_start":
         *                                      Refresh table on database
         *                                      startup and when manually
         *                                      requested by invoking the
         *                                      refresh action of @ref
         *                                      GPUdb::alterTable(const AlterTableRequest&) const
         *                                      "GPUdb::alterTable" on this
         *                                      table.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_manual
         *                              "create_table_external_manual".
         *                          <li>@ref
         *                              gpudb::create_table_external_schema_registry_schema_name
         *                              "create_table_external_schema_registry_schema_name":
         *                              Name of the Avro schema in the schema
         *                              registry to use when reading Avro
         *                              records.
         *                          <li>@ref
         *                              gpudb::create_table_external_shard_keys
         *                              "create_table_external_shard_keys":
         *                              Comma separated list of column names to
         *                              set as shard keys, when not specified
         *                              in the type.
         *                          <li>@ref
         *                              gpudb::create_table_external_skip_lines
         *                              "create_table_external_skip_lines":
         *                              Skip number of lines from begining of
         *                              file.
         *                          <li>@ref
         *                              gpudb::create_table_external_start_offsets
         *                              "create_table_external_start_offsets":
         *                              Starting offsets by partition to fetch
         *                              from kafka. A comma separated list of
         *                              partition:offset pairs.
         *                          <li>@ref
         *                              gpudb::create_table_external_subscribe
         *                              "create_table_external_subscribe":
         *                              Continuously poll the data source to
         *                              check for new data and load it into the
         *                              table.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_true
         *                                      "create_table_external_true"
         *                                  <li>@ref
         *                                      gpudb::create_table_external_false
         *                                      "create_table_external_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_false
         *                              "create_table_external_false".
         *                          <li>@ref
         *                              gpudb::create_table_external_table_insert_mode
         *                              "create_table_external_table_insert_mode":
         *                              Insertion scheme to use when inserting
         *                              records from multiple shapefiles.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_single
         *                                      "create_table_external_single":
         *                                      Insert all records into a
         *                                      single table.
         *                                  <li>@ref
         *                                      gpudb::create_table_external_table_per_file
         *                                      "create_table_external_table_per_file":
         *                                      Insert records from each file
         *                                      into a new table corresponding
         *                                      to that file.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_single
         *                              "create_table_external_single".
         *                          <li>@ref
         *                              gpudb::create_table_external_text_comment_string
         *                              "create_table_external_text_comment_string":
         *                              Specifies the character string that
         *                              should be interpreted as a comment line
         *                              prefix in the source data.  All lines
         *                              in the data starting with the provided
         *                              string are ignored.  For @ref
         *                              gpudb::create_table_external_delimited_text
         *                              "delimited_text" @ref
         *                              gpudb::create_table_external_file_type
         *                              "file_type" only. The default value is
         *                              '#'.
         *                          <li>@ref
         *                              gpudb::create_table_external_text_delimiter
         *                              "create_table_external_text_delimiter":
         *                              Specifies the character delimiting
         *                              field values in the source data and
         *                              field names in the header (if present).
         *                              For @ref
         *                              gpudb::create_table_external_delimited_text
         *                              "delimited_text" @ref
         *                              gpudb::create_table_external_file_type
         *                              "file_type" only. The default value is
         *                              ','.
         *                          <li>@ref
         *                              gpudb::create_table_external_text_escape_character
         *                              "create_table_external_text_escape_character":
         *                              Specifies the character that is used to
         *                              escape other characters in the source
         *                              data.  An 'a', 'b', 'f', 'n', 'r', 't',
         *                              or 'v' preceded by an escape character
         *                              will be interpreted as the ASCII bell,
         *                              backspace, form feed, line feed,
         *                              carriage return, horizontal tab, &
         *                              vertical tab, respectively.  For
         *                              example, the escape character followed
         *                              by an 'n' will be interpreted as a
         *                              newline within a field value.  The
         *                              escape character can also be used to
         *                              escape the quoting character, and will
         *                              be treated as an escape character
         *                              whether it is within a quoted field
         *                              value or not.  For @ref
         *                              gpudb::create_table_external_delimited_text
         *                              "delimited_text" @ref
         *                              gpudb::create_table_external_file_type
         *                              "file_type" only.
         *                          <li>@ref
         *                              gpudb::create_table_external_text_has_header
         *                              "create_table_external_text_has_header":
         *                              Indicates whether the source data
         *                              contains a header row.  For @ref
         *                              gpudb::create_table_external_delimited_text
         *                              "delimited_text" @ref
         *                              gpudb::create_table_external_file_type
         *                              "file_type" only.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_true
         *                                      "create_table_external_true"
         *                                  <li>@ref
         *                                      gpudb::create_table_external_false
         *                                      "create_table_external_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_true
         *                              "create_table_external_true".
         *                          <li>@ref
         *                              gpudb::create_table_external_text_header_property_delimiter
         *                              "create_table_external_text_header_property_delimiter":
         *                              Specifies the delimiter for <a
         *                              href="../../../concepts/types/#column-properties"
         *                              target="_top">column properties</a> in
         *                              the header row (if present).  Cannot be
         *                              set to same value as @ref
         *                              gpudb::create_table_external_text_delimiter
         *                              "text_delimiter".  For @ref
         *                              gpudb::create_table_external_delimited_text
         *                              "delimited_text" @ref
         *                              gpudb::create_table_external_file_type
         *                              "file_type" only. The default value is
         *                              '|'.
         *                          <li>@ref
         *                              gpudb::create_table_external_text_null_string
         *                              "create_table_external_text_null_string":
         *                              Specifies the character string that
         *                              should be interpreted as a null value
         *                              in the source data.  For @ref
         *                              gpudb::create_table_external_delimited_text
         *                              "delimited_text" @ref
         *                              gpudb::create_table_external_file_type
         *                              "file_type" only. The default value is
         *                              '\\N'.
         *                          <li>@ref
         *                              gpudb::create_table_external_text_quote_character
         *                              "create_table_external_text_quote_character":
         *                              Specifies the character that should be
         *                              interpreted as a field value quoting
         *                              character in the source data.  The
         *                              character must appear at beginning and
         *                              end of field value to take effect.
         *                              Delimiters within quoted fields are
         *                              treated as literals and not delimiters.
         *                              Within a quoted field, two consecutive
         *                              quote characters will be interpreted as
         *                              a single literal quote character,
         *                              effectively escaping it.  To not have a
         *                              quote character, specify an empty
         *                              string.  For @ref
         *                              gpudb::create_table_external_delimited_text
         *                              "delimited_text" @ref
         *                              gpudb::create_table_external_file_type
         *                              "file_type" only. The default value is
         *                              '"'.
         *                          <li>@ref
         *                              gpudb::create_table_external_text_search_columns
         *                              "create_table_external_text_search_columns":
         *                              Add 'text_search' property to
         *                              internally inferenced string columns.
         *                              Comma seperated list of column names or
         *                              '*' for all columns. To add
         *                              'text_search' property only to string
         *                              columns greater than or equal to a
         *                              minimum size, also set the @ref
         *                              gpudb::create_table_external_text_search_min_column_length
         *                              "text_search_min_column_length"
         *                          <li>@ref
         *                              gpudb::create_table_external_text_search_min_column_length
         *                              "create_table_external_text_search_min_column_length":
         *                              Set the minimum column size for strings
         *                              to apply the 'text_search' property to.
         *                              Used only when @ref
         *                              gpudb::create_table_external_text_search_columns
         *                              "text_search_columns" has a value.
         *                          <li>@ref
         *                              gpudb::create_table_external_truncate_strings
         *                              "create_table_external_truncate_strings":
         *                              If set to @ref
         *                              gpudb::create_table_external_true
         *                              "true", truncate string values that are
         *                              longer than the column's type size.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_true
         *                                      "create_table_external_true"
         *                                  <li>@ref
         *                                      gpudb::create_table_external_false
         *                                      "create_table_external_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_false
         *                              "create_table_external_false".
         *                          <li>@ref
         *                              gpudb::create_table_external_truncate_table
         *                              "create_table_external_truncate_table":
         *                              If set to @ref
         *                              gpudb::create_table_external_true
         *                              "true", truncates the table specified
         *                              by @a tableName_ prior to loading the
         *                              file(s).
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_true
         *                                      "create_table_external_true"
         *                                  <li>@ref
         *                                      gpudb::create_table_external_false
         *                                      "create_table_external_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_false
         *                              "create_table_external_false".
         *                          <li>@ref
         *                              gpudb::create_table_external_type_inference_mode
         *                              "create_table_external_type_inference_mode":
         *                              Optimize type inferencing for either
         *                              speed or accuracy.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_accuracy
         *                                      "create_table_external_accuracy":
         *                                      Scans data to get exactly-typed
         *                                      & sized columns for all data
         *                                      scanned.
         *                                  <li>@ref
         *                                      gpudb::create_table_external_speed
         *                                      "create_table_external_speed":
         *                                      Scans data and picks the widest
         *                                      possible column types so that
         *                                      'all' values will fit with
         *                                      minimum data scanned
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_speed
         *                              "create_table_external_speed".
         *                          <li>@ref
         *                              gpudb::create_table_external_remote_query
         *                              "create_table_external_remote_query":
         *                              Remote SQL query from which data will
         *                              be sourced
         *                          <li>@ref
         *                              gpudb::create_table_external_remote_query_filter_column
         *                              "create_table_external_remote_query_filter_column":
         *                              Name of column to be used for splitting
         *                              @ref
         *                              gpudb::create_table_external_remote_query
         *                              "remote_query" into multiple
         *                              sub-queries using the data distribution
         *                              of given column
         *                          <li>@ref
         *                              gpudb::create_table_external_remote_query_increasing_column
         *                              "create_table_external_remote_query_increasing_column":
         *                              Column on subscribed remote query
         *                              result that will increase for new
         *                              records (e.g., TIMESTAMP).
         *                          <li>@ref
         *                              gpudb::create_table_external_remote_query_partition_column
         *                              "create_table_external_remote_query_partition_column":
         *                              Alias name for @ref
         *                              gpudb::create_table_external_remote_query_filter_column
         *                              "remote_query_filter_column".
         *                          <li>@ref
         *                              gpudb::create_table_external_update_on_existing_pk
         *                              "create_table_external_update_on_existing_pk":
         *                              Specifies the record collision policy
         *                              for inserting into a table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>. If set
         *                              to @ref
         *                              gpudb::create_table_external_true
         *                              "true", any existing table record with
         *                              primary key values that match those of
         *                              a record being inserted will be
         *                              replaced by that new record (the new
         *                              data will be 'upserted'). If set to
         *                              @ref gpudb::create_table_external_false
         *                              "false", any existing table record with
         *                              primary key values that match those of
         *                              a record being inserted will remain
         *                              unchanged, while the new record will be
         *                              rejected and the error handled as
         *                              determined by @ref
         *                              gpudb::create_table_external_ignore_existing_pk
         *                              "ignore_existing_pk" & @ref
         *                              gpudb::create_table_external_error_handling
         *                              "error_handling".  If the specified
         *                              table does not have a primary key, then
         *                              this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_external_true
         *                                      "create_table_external_true":
         *                                      Upsert new records when primary
         *                                      keys match existing records
         *                                  <li>@ref
         *                                      gpudb::create_table_external_false
         *                                      "create_table_external_false":
         *                                      Reject new records when primary
         *                                      keys match existing records
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_external_false
         *                              "create_table_external_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        CreateTableExternalRequest(const std::string& tableName_, const std::vector<std::string>& filepaths_, const std::map<std::string, std::map<std::string, std::string> >& modifyColumns_, const std::map<std::string, std::string>& createTableOptions_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            filepaths( filepaths_ ),
            modifyColumns( modifyColumns_ ),
            createTableOptions( createTableOptions_ ),
            options( options_ )
        {
        }

        /**
         * Name of the table to be created, in [ schema_name.\ ]table_name
         * format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a> and meeting <a
         * href="../../../concepts/tables/#table-naming-criteria"
         * target="_top">table naming criteria</a>.
         */
        std::string tableName;

        /**
         * A list of file paths from which data will be sourced;
         *
         * For paths in <a href="../../../tools/kifs/" target="_top">KiFS</a>,
         * use the uri prefix of kifs:// followed by the path to a file or
         * directory. File matching by prefix is supported, e.g.\
         * kifs://dir/file would match dir/file_1 and dir/file_2. When prefix
         * matching is used, the path must start with a full, valid KiFS
         * directory name.
         *
         * If an external data source is specified in @ref
         * gpudb::create_table_external_datasource_name "datasource_name",
         * these file paths must resolve to accessible files at that data
         * source location. Prefix matching is supported. If the data source is
         * hdfs, prefixes must be aligned with directories, i.e.\ partial file
         * names will not match.
         *
         * If no data source is specified, the files are assumed to be local to
         * the database and must all be accessible to the gpudb user, residing
         * on the path (or relative to the path) specified by the external
         * files directory in the Kinetica <a
         * href="../../../config/#config-main-external-files"
         * target="_top">configuration file</a>. Wildcards (*) can be used to
         * specify a group of files.  Prefix matching is supported, the
         * prefixes must be aligned with directories.
         *
         * If the first path ends in .tsv, the text delimiter will be defaulted
         * to a tab character. If the first path ends in .psv, the text
         * delimiter will be defaulted to a pipe character (|).
         */
        std::vector<std::string> filepaths;

        /**
         * Not implemented yet. The default value is an empty map.
         */
        std::map<std::string, std::map<std::string, std::string> > modifyColumns;

        /**
         * Options from @ref
         * GPUdb::createTable(const CreateTableRequest&) const
         * "GPUdb::createTable", allowing the structure of the table to be
         * defined independently of the data source.
         * <ul>
         *     <li>@ref gpudb::create_table_external_type_id
         *         "create_table_external_type_id": ID of a currently
         *         registered <a href="../../../concepts/types/"
         *         target="_top">type</a>.
         *     <li>@ref gpudb::create_table_external_no_error_if_exists
         *         "create_table_external_no_error_if_exists": If @ref
         *         gpudb::create_table_external_true "true", prevents an error
         *         from occurring if the table already exists and is of the
         *         given type.  If a table with the same name but a different
         *         type exists, it is still an error.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_true
         *                 "create_table_external_true"
         *             <li>@ref gpudb::create_table_external_false
         *                 "create_table_external_false"
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_false
         *         "create_table_external_false".
         *     <li>@ref gpudb::create_table_external_is_replicated
         *         "create_table_external_is_replicated": Affects the <a
         *         href="../../../concepts/tables/#distribution"
         *         target="_top">distribution scheme</a> for the table's data.
         *         If @ref gpudb::create_table_external_true "true" and the
         *         given table has no explicit <a
         *         href="../../../concepts/tables/#shard-key"
         *         target="_top">shard key</a> defined, the table will be <a
         *         href="../../../concepts/tables/#replication"
         *         target="_top">replicated</a>.  If @ref
         *         gpudb::create_table_external_false "false", the table will
         *         be <a href="../../../concepts/tables/#sharding"
         *         target="_top">sharded</a> according to the shard key
         *         specified in the given @ref
         *         gpudb::create_table_external_type_id "type_id", or <a
         *         href="../../../concepts/tables/#random-sharding"
         *         target="_top">randomly sharded</a>, if no shard key is
         *         specified. Note that a type containing a shard key cannot be
         *         used to create a replicated table.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_true
         *                 "create_table_external_true"
         *             <li>@ref gpudb::create_table_external_false
         *                 "create_table_external_false"
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_false
         *         "create_table_external_false".
         *     <li>@ref gpudb::create_table_external_foreign_keys
         *         "create_table_external_foreign_keys": Semicolon-separated
         *         list of <a href="../../../concepts/tables/#foreign-keys"
         *         target="_top">foreign keys</a>, of the format
         *         '(source_column_name [, ...]) references
         *         target_table_name(primary_key_column_name [, ...]) [as
         *         foreign_key_name]'.
         *     <li>@ref gpudb::create_table_external_foreign_shard_key
         *         "create_table_external_foreign_shard_key": Foreign shard key
         *         of the format 'source_column references shard_by_column from
         *         target_table(primary_key_column)'.
         *     <li>@ref gpudb::create_table_external_partition_type
         *         "create_table_external_partition_type": <a
         *         href="../../../concepts/tables/#partitioning"
         *         target="_top">Partitioning</a> scheme to use.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_RANGE
         *                 "create_table_external_RANGE": Use <a
         *                 href="../../../concepts/tables/#partitioning-by-range"
         *                 target="_top">range partitioning</a>.
         *             <li>@ref gpudb::create_table_external_INTERVAL
         *                 "create_table_external_INTERVAL": Use <a
         *                 href="../../../concepts/tables/#partitioning-by-interval"
         *                 target="_top">interval partitioning</a>.
         *             <li>@ref gpudb::create_table_external_LIST
         *                 "create_table_external_LIST": Use <a
         *                 href="../../../concepts/tables/#partitioning-by-list"
         *                 target="_top">list partitioning</a>.
         *             <li>@ref gpudb::create_table_external_HASH
         *                 "create_table_external_HASH": Use <a
         *                 href="../../../concepts/tables/#partitioning-by-hash"
         *                 target="_top">hash partitioning</a>.
         *             <li>@ref gpudb::create_table_external_SERIES
         *                 "create_table_external_SERIES": Use <a
         *                 href="../../../concepts/tables/#partitioning-by-series"
         *                 target="_top">series partitioning</a>.
         *         </ul>
         *     <li>@ref gpudb::create_table_external_partition_keys
         *         "create_table_external_partition_keys": Comma-separated list
         *         of partition keys, which are the columns or column
         *         expressions by which records will be assigned to partitions
         *         defined by @ref
         *         gpudb::create_table_external_partition_definitions
         *         "partition_definitions".
         *     <li>@ref gpudb::create_table_external_partition_definitions
         *         "create_table_external_partition_definitions":
         *         Comma-separated list of partition definitions, whose format
         *         depends on the choice of @ref
         *         gpudb::create_table_external_partition_type
         *         "partition_type".  See <a
         *         href="../../../concepts/tables/#partitioning-by-range"
         *         target="_top">range partitioning</a>, <a
         *         href="../../../concepts/tables/#partitioning-by-interval"
         *         target="_top">interval partitioning</a>, <a
         *         href="../../../concepts/tables/#partitioning-by-list"
         *         target="_top">list partitioning</a>, <a
         *         href="../../../concepts/tables/#partitioning-by-hash"
         *         target="_top">hash partitioning</a>, or <a
         *         href="../../../concepts/tables/#partitioning-by-series"
         *         target="_top">series partitioning</a> for example formats.
         *     <li>@ref gpudb::create_table_external_is_automatic_partition
         *         "create_table_external_is_automatic_partition": If @ref
         *         gpudb::create_table_external_true "true", a new partition
         *         will be created for values which don't fall into an existing
         *         partition.  Currently, only supported for <a
         *         href="../../../concepts/tables/#partitioning-by-list"
         *         target="_top">list partitions</a>.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_true
         *                 "create_table_external_true"
         *             <li>@ref gpudb::create_table_external_false
         *                 "create_table_external_false"
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_false
         *         "create_table_external_false".
         *     <li>@ref gpudb::create_table_external_ttl
         *         "create_table_external_ttl": Sets the <a
         *         href="../../../concepts/ttl/" target="_top">TTL</a> of the
         *         table specified in @ref tableName.
         *     <li>@ref gpudb::create_table_external_chunk_size
         *         "create_table_external_chunk_size": Indicates the number of
         *         records per chunk to be used for this table.
         *     <li>@ref gpudb::create_table_external_chunk_column_max_memory
         *         "create_table_external_chunk_column_max_memory": Indicates
         *         the target maximum data size for each column in a chunk to
         *         be used for this table.
         *     <li>@ref gpudb::create_table_external_chunk_max_memory
         *         "create_table_external_chunk_max_memory": Indicates the
         *         target maximum data size for all columns in a chunk to be
         *         used for this table.
         *     <li>@ref gpudb::create_table_external_is_result_table
         *         "create_table_external_is_result_table": Indicates whether
         *         the table is a <a
         *         href="../../../concepts/tables_memory_only/"
         *         target="_top">memory-only table</a>. A result table cannot
         *         contain columns with text_search <a
         *         href="../../../concepts/types/#data-handling"
         *         target="_top">data-handling</a>, and it will not be retained
         *         if the server is restarted.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_true
         *                 "create_table_external_true"
         *             <li>@ref gpudb::create_table_external_false
         *                 "create_table_external_false"
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_false
         *         "create_table_external_false".
         *     <li>@ref gpudb::create_table_external_strategy_definition
         *         "create_table_external_strategy_definition": The <a
         *         href="../../../rm/concepts/#tier-strategies"
         *         target="_top">tier strategy</a> for the table and its
         *         columns.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> createTableOptions;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::create_table_external_bad_record_table_name
         *         "create_table_external_bad_record_table_name": Name of a
         *         table to which records that were rejected are written. The
         *         bad-record-table has the following columns: line_number
         *         (long), line_rejected (string), error_message (string).
         *         When @ref gpudb::create_table_external_error_handling
         *         "error_handling" is @ref gpudb::create_table_external_abort
         *         "abort", bad records table is not populated.
         *     <li>@ref gpudb::create_table_external_bad_record_table_limit
         *         "create_table_external_bad_record_table_limit": A positive
         *         integer indicating the maximum number of records that can be
         *         written to the bad-record-table. The default value is
         *         '10000'.
         *     <li>@ref
         *         gpudb::create_table_external_bad_record_table_limit_per_input
         *         "create_table_external_bad_record_table_limit_per_input":
         *         For subscriptions, a positive integer indicating the maximum
         *         number of records that can be written to the
         *         bad-record-table per file/payload. Default value will be
         *         @ref gpudb::create_table_external_bad_record_table_limit
         *         "bad_record_table_limit" and total size of the table per
         *         rank is limited to @ref
         *         gpudb::create_table_external_bad_record_table_limit
         *         "bad_record_table_limit".
         *     <li>@ref gpudb::create_table_external_batch_size
         *         "create_table_external_batch_size": Number of records to
         *         insert per batch when inserting data. The default value is
         *         '50000'.
         *     <li>@ref gpudb::create_table_external_column_formats
         *         "create_table_external_column_formats": For each target
         *         column specified, applies the column-property-bound format
         *         to the source data loaded into that column.  Each column
         *         format will contain a mapping of one or more of its column
         *         properties to an appropriate format for each property.
         *         Currently supported column properties include date, time, &
         *         datetime. The parameter value must be formatted as a JSON
         *         string of maps of column names to maps of column properties
         *         to their corresponding column formats, e.g., '{ "order_date"
         *         : { "date" : "%Y.%m.%d" }, "order_time" : { "time" :
         *         "%H:%M:%S" } }'.  See @ref
         *         gpudb::create_table_external_default_column_formats
         *         "default_column_formats" for valid format syntax.
         *     <li>@ref gpudb::create_table_external_columns_to_load
         *         "create_table_external_columns_to_load": Specifies a
         *         comma-delimited list of columns from the source data to
         *         load.  If more than one file is being loaded, this list
         *         applies to all files.  Column numbers can be specified
         *         discretely or as a range.  For example, a value of
         *         '5,7,1..3' will insert values from the fifth column in the
         *         source data into the first column in the target table, from
         *         the seventh column in the source data into the second column
         *         in the target table, and from the first through third
         *         columns in the source data into the third through fifth
         *         columns in the target table.  If the source data contains a
         *         header, column names matching the file header names may be
         *         provided instead of column numbers.  If the target table
         *         doesn't exist, the table will be created with the columns in
         *         this order.  If the target table does exist with columns in
         *         a different order than the source data, this list can be
         *         used to match the order of the target table.  For example, a
         *         value of 'C, B, A' will create a three column table with
         *         column C, followed by column B, followed by column A; or
         *         will insert those fields in that order into a table created
         *         with columns in that order.  If the target table exists, the
         *         column names must match the source data field names for a
         *         name-mapping to be successful.  Mutually exclusive with @ref
         *         gpudb::create_table_external_columns_to_skip
         *         "columns_to_skip".
         *     <li>@ref gpudb::create_table_external_columns_to_skip
         *         "create_table_external_columns_to_skip": Specifies a
         *         comma-delimited list of columns from the source data to
         *         skip.  Mutually exclusive with @ref
         *         gpudb::create_table_external_columns_to_load
         *         "columns_to_load".
         *     <li>@ref gpudb::create_table_external_compression_type
         *         "create_table_external_compression_type": Source data
         *         compression type.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_none
         *                 "create_table_external_none": No compression.
         *             <li>@ref gpudb::create_table_external_auto
         *                 "create_table_external_auto": Auto detect
         *                 compression type
         *             <li>@ref gpudb::create_table_external_gzip
         *                 "create_table_external_gzip": gzip file compression.
         *             <li>@ref gpudb::create_table_external_bzip2
         *                 "create_table_external_bzip2": bzip2 file
         *                 compression.
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_auto
         *         "create_table_external_auto".
         *     <li>@ref gpudb::create_table_external_datasource_name
         *         "create_table_external_datasource_name": Name of an existing
         *         external data source from which data file(s) specified in
         *         @ref filepaths will be loaded
         *     <li>@ref gpudb::create_table_external_default_column_formats
         *         "create_table_external_default_column_formats": Specifies
         *         the default format to be applied to source data loaded into
         *         columns with the corresponding column property.  Currently
         *         supported column properties include date, time, & datetime.
         *         This default column-property-bound format can be overridden
         *         by specifying a column property & format for a given target
         *         column in @ref gpudb::create_table_external_column_formats
         *         "column_formats". For each specified annotation, the format
         *         will apply to all columns with that annotation unless a
         *         custom @ref gpudb::create_table_external_column_formats
         *         "column_formats" for that annotation is specified.  The
         *         parameter value must be formatted as a JSON string that is a
         *         map of column properties to their respective column formats,
         *         e.g., '{ "date" : "%Y.%m.%d", "time" : "%H:%M:%S" }'.
         *         Column formats are specified as a string of control
         *         characters and plain text. The supported control characters
         *         are 'Y', 'm', 'd', 'H', 'M', 'S', and 's', which follow the
         *         Linux 'strptime()' specification, as well as 's', which
         *         specifies seconds and fractional seconds (though the
         *         fractional component will be truncated past milliseconds).
         *         Formats for the 'date' annotation must include the 'Y', 'm',
         *         and 'd' control characters. Formats for the 'time'
         *         annotation must include the 'H', 'M', and either 'S' or 's'
         *         (but not both) control characters. Formats for the
         *         'datetime' annotation meet both the 'date' and 'time'
         *         control character requirements. For example, '{"datetime" :
         *         "%m/%d/%Y %H:%M:%S" }' would be used to interpret text as
         *         "05/04/2000 12:12:11"
         *     <li>@ref gpudb::create_table_external_error_handling
         *         "create_table_external_error_handling": Specifies how errors
         *         should be handled upon insertion.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_permissive
         *                 "create_table_external_permissive": Records with
         *                 missing columns are populated with nulls if
         *                 possible; otherwise, the malformed records are
         *                 skipped.
         *             <li>@ref gpudb::create_table_external_ignore_bad_records
         *                 "create_table_external_ignore_bad_records":
         *                 Malformed records are skipped.
         *             <li>@ref gpudb::create_table_external_abort
         *                 "create_table_external_abort": Stops current
         *                 insertion and aborts entire operation when an error
         *                 is encountered.  Primary key collisions are
         *                 considered abortable errors in this mode.
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_abort
         *         "create_table_external_abort".
         *     <li>@ref gpudb::create_table_external_external_table_type
         *         "create_table_external_external_table_type": Specifies
         *         whether the external table holds a local copy of the
         *         external data.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_materialized
         *                 "create_table_external_materialized": Loads a copy
         *                 of the external data into the database, refreshed on
         *                 demand
         *             <li>@ref gpudb::create_table_external_logical
         *                 "create_table_external_logical": External data will
         *                 not be loaded into the database; the data will be
         *                 retrieved from the source upon servicing each query
         *                 against the external table
         *         </ul>
         *         The default value is @ref
         *         gpudb::create_table_external_materialized
         *         "create_table_external_materialized".
         *     <li>@ref gpudb::create_table_external_file_type
         *         "create_table_external_file_type": Specifies the type of the
         *         file(s) whose records will be inserted.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_avro
         *                 "create_table_external_avro": Avro file format
         *             <li>@ref gpudb::create_table_external_delimited_text
         *                 "create_table_external_delimited_text": Delimited
         *                 text file format; e.g., CSV, TSV, PSV, etc.
         *             <li>@ref gpudb::create_table_external_gdb
         *                 "create_table_external_gdb": Esri/GDB file format
         *             <li>@ref gpudb::create_table_external_json
         *                 "create_table_external_json": Json file format
         *             <li>@ref gpudb::create_table_external_parquet
         *                 "create_table_external_parquet": Apache Parquet file
         *                 format
         *             <li>@ref gpudb::create_table_external_shapefile
         *                 "create_table_external_shapefile": ShapeFile file
         *                 format
         *         </ul>
         *         The default value is @ref
         *         gpudb::create_table_external_delimited_text
         *         "create_table_external_delimited_text".
         *     <li>@ref gpudb::create_table_external_flatten_columns
         *         "create_table_external_flatten_columns": Specifies how to
         *         handle nested columns.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_true
         *                 "create_table_external_true": Break up nested
         *                 columns to multiple columns
         *             <li>@ref gpudb::create_table_external_false
         *                 "create_table_external_false": Treat nested columns
         *                 as json columns instead of flattening
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_false
         *         "create_table_external_false".
         *     <li>@ref gpudb::create_table_external_gdal_configuration_options
         *         "create_table_external_gdal_configuration_options": Comma
         *         separated list of gdal conf options, for the specific
         *         requets: key=value
         *     <li>@ref gpudb::create_table_external_ignore_existing_pk
         *         "create_table_external_ignore_existing_pk": Specifies the
         *         record collision error-suppression policy for inserting into
         *         a table with a <a
         *         href="../../../concepts/tables/#primary-keys"
         *         target="_top">primary key</a>, only used when not in upsert
         *         mode (upsert mode is disabled when @ref
         *         gpudb::create_table_external_update_on_existing_pk
         *         "update_on_existing_pk" is @ref
         *         gpudb::create_table_external_false "false").  If set to @ref
         *         gpudb::create_table_external_true "true", any record being
         *         inserted that is rejected for having primary key values that
         *         match those of an existing table record will be ignored with
         *         no error generated.  If @ref
         *         gpudb::create_table_external_false "false", the rejection of
         *         any record for having primary key values matching an
         *         existing record will result in an error being reported, as
         *         determined by @ref
         *         gpudb::create_table_external_error_handling
         *         "error_handling".  If the specified table does not have a
         *         primary key or if upsert mode is in effect (@ref
         *         gpudb::create_table_external_update_on_existing_pk
         *         "update_on_existing_pk" is @ref
         *         gpudb::create_table_external_true "true"), then this option
         *         has no effect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_true
         *                 "create_table_external_true": Ignore new records
         *                 whose primary key values collide with those of
         *                 existing records
         *             <li>@ref gpudb::create_table_external_false
         *                 "create_table_external_false": Treat as errors any
         *                 new records whose primary key values collide with
         *                 those of existing records
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_false
         *         "create_table_external_false".
         *     <li>@ref gpudb::create_table_external_ingestion_mode
         *         "create_table_external_ingestion_mode": Whether to do a full
         *         load, dry run, or perform a type inference on the source
         *         data.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_full
         *                 "create_table_external_full": Run a type inference
         *                 on the source data (if needed) and ingest
         *             <li>@ref gpudb::create_table_external_dry_run
         *                 "create_table_external_dry_run": Does not load data,
         *                 but walks through the source data and determines the
         *                 number of valid records, taking into account the
         *                 current mode of @ref
         *                 gpudb::create_table_external_error_handling
         *                 "error_handling".
         *             <li>@ref
         *                 gpudb::create_table_external_type_inference_only
         *                 "create_table_external_type_inference_only": Infer
         *                 the type of the source data and return, without
         *                 ingesting any data.  The inferred type is returned
         *                 in the response.
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_full
         *         "create_table_external_full".
         *     <li>@ref gpudb::create_table_external_jdbc_fetch_size
         *         "create_table_external_jdbc_fetch_size": The JDBC fetch
         *         size, which determines how many rows to fetch per round
         *         trip. The default value is '50000'.
         *     <li>@ref gpudb::create_table_external_kafka_consumers_per_rank
         *         "create_table_external_kafka_consumers_per_rank": Number of
         *         Kafka consumer threads per rank (valid range 1-6). The
         *         default value is '1'.
         *     <li>@ref gpudb::create_table_external_kafka_group_id
         *         "create_table_external_kafka_group_id": The group id to be
         *         used when consuming data from a Kafka topic (valid only for
         *         Kafka datasource subscriptions).
         *     <li>@ref gpudb::create_table_external_kafka_offset_reset_policy
         *         "create_table_external_kafka_offset_reset_policy": Policy to
         *         determine whether the Kafka data consumption starts either
         *         at earliest offset or latest offset.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_earliest
         *                 "create_table_external_earliest"
         *             <li>@ref gpudb::create_table_external_latest
         *                 "create_table_external_latest"
         *         </ul>
         *         The default value is @ref
         *         gpudb::create_table_external_earliest
         *         "create_table_external_earliest".
         *     <li>@ref gpudb::create_table_external_kafka_optimistic_ingest
         *         "create_table_external_kafka_optimistic_ingest": Enable
         *         optimistic ingestion where Kafka topic offsets and table
         *         data are committed independently to achieve parallelism.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_true
         *                 "create_table_external_true"
         *             <li>@ref gpudb::create_table_external_false
         *                 "create_table_external_false"
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_false
         *         "create_table_external_false".
         *     <li>@ref
         *         gpudb::create_table_external_kafka_subscription_cancel_after
         *         "create_table_external_kafka_subscription_cancel_after":
         *         Sets the Kafka subscription lifespan (in minutes). Expired
         *         subscription will be cancelled automatically.
         *     <li>@ref
         *         gpudb::create_table_external_kafka_type_inference_fetch_timeout
         *         "create_table_external_kafka_type_inference_fetch_timeout":
         *         Maximum time to collect Kafka messages before type
         *         inferencing on the set of them.
         *     <li>@ref gpudb::create_table_external_layer
         *         "create_table_external_layer": Geo files layer(s) name(s):
         *         comma separated.
         *     <li>@ref gpudb::create_table_external_loading_mode
         *         "create_table_external_loading_mode": Scheme for
         *         distributing the extraction and loading of data from the
         *         source data file(s). This option applies only when loading
         *         files that are local to the database.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_head
         *                 "create_table_external_head": The head node loads
         *                 all data. All files must be available to the head
         *                 node.
         *             <li>@ref gpudb::create_table_external_distributed_shared
         *                 "create_table_external_distributed_shared": The head
         *                 node coordinates loading data by worker processes
         *                 across all nodes from shared files available to all
         *                 workers.  NOTE:  Instead of existing on a shared
         *                 source, the files can be duplicated on a source
         *                 local to each host to improve performance, though
         *                 the files must appear as the same data set from the
         *                 perspective of all hosts performing the load.
         *             <li>@ref gpudb::create_table_external_distributed_local
         *                 "create_table_external_distributed_local": A single
         *                 worker process on each node loads all files that are
         *                 available to it. This option works best when each
         *                 worker loads files from its own file system, to
         *                 maximize performance. In order to avoid data
         *                 duplication, either each worker performing the load
         *                 needs to have visibility to a set of files unique to
         *                 it (no file is visible to more than one node) or the
         *                 target table needs to have a primary key (which will
         *                 allow the worker to automatically deduplicate data).
         *                 NOTE:  If the target table doesn't exist, the table
         *                 structure will be determined by the head node. If
         *                 the head node has no files local to it, it will be
         *                 unable to determine the structure and the request
         *                 will fail.  If the head node is configured to have
         *                 no worker processes, no data strictly accessible to
         *                 the head node will be loaded.
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_head
         *         "create_table_external_head".
         *     <li>@ref gpudb::create_table_external_local_time_offset
         *         "create_table_external_local_time_offset": Apply an offset
         *         to Avro local timestamp columns.
         *     <li>@ref gpudb::create_table_external_max_records_to_load
         *         "create_table_external_max_records_to_load": Limit the
         *         number of records to load in this request: if this number is
         *         larger than @ref gpudb::create_table_external_batch_size
         *         "batch_size", then the number of records loaded will be
         *         limited to the next whole number of @ref
         *         gpudb::create_table_external_batch_size "batch_size" (per
         *         working thread).
         *     <li>@ref gpudb::create_table_external_num_tasks_per_rank
         *         "create_table_external_num_tasks_per_rank": Number of tasks
         *         for reading file per rank. Default will be system
         *         configuration parameter, external_file_reader_num_tasks.
         *     <li>@ref gpudb::create_table_external_poll_interval
         *         "create_table_external_poll_interval": If @ref
         *         gpudb::create_table_external_true "true", the number of
         *         seconds between attempts to load external files into the
         *         table.  If zero, polling will be continuous as long as data
         *         is found.  If no data is found, the interval will steadily
         *         increase to a maximum of 60 seconds. The default value is
         *         '0'.
         *     <li>@ref gpudb::create_table_external_primary_keys
         *         "create_table_external_primary_keys": Comma separated list
         *         of column names to set as primary keys, when not specified
         *         in the type.
         *     <li>@ref gpudb::create_table_external_refresh_method
         *         "create_table_external_refresh_method": Method by which the
         *         table can be refreshed from its source data.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_manual
         *                 "create_table_external_manual": Refresh only occurs
         *                 when manually requested by invoking the refresh
         *                 action of @ref
         *                 GPUdb::alterTable(const AlterTableRequest&) const
         *                 "GPUdb::alterTable" on this table.
         *             <li>@ref gpudb::create_table_external_on_start
         *                 "create_table_external_on_start": Refresh table on
         *                 database startup and when manually requested by
         *                 invoking the refresh action of @ref
         *                 GPUdb::alterTable(const AlterTableRequest&) const
         *                 "GPUdb::alterTable" on this table.
         *         </ul>
         *         The default value is @ref
         *         gpudb::create_table_external_manual
         *         "create_table_external_manual".
         *     <li>@ref
         *         gpudb::create_table_external_schema_registry_schema_name
         *         "create_table_external_schema_registry_schema_name": Name of
         *         the Avro schema in the schema registry to use when reading
         *         Avro records.
         *     <li>@ref gpudb::create_table_external_shard_keys
         *         "create_table_external_shard_keys": Comma separated list of
         *         column names to set as shard keys, when not specified in the
         *         type.
         *     <li>@ref gpudb::create_table_external_skip_lines
         *         "create_table_external_skip_lines": Skip number of lines
         *         from begining of file.
         *     <li>@ref gpudb::create_table_external_start_offsets
         *         "create_table_external_start_offsets": Starting offsets by
         *         partition to fetch from kafka. A comma separated list of
         *         partition:offset pairs.
         *     <li>@ref gpudb::create_table_external_subscribe
         *         "create_table_external_subscribe": Continuously poll the
         *         data source to check for new data and load it into the
         *         table.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_true
         *                 "create_table_external_true"
         *             <li>@ref gpudb::create_table_external_false
         *                 "create_table_external_false"
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_false
         *         "create_table_external_false".
         *     <li>@ref gpudb::create_table_external_table_insert_mode
         *         "create_table_external_table_insert_mode": Insertion scheme
         *         to use when inserting records from multiple shapefiles.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_single
         *                 "create_table_external_single": Insert all records
         *                 into a single table.
         *             <li>@ref gpudb::create_table_external_table_per_file
         *                 "create_table_external_table_per_file": Insert
         *                 records from each file into a new table
         *                 corresponding to that file.
         *         </ul>
         *         The default value is @ref
         *         gpudb::create_table_external_single
         *         "create_table_external_single".
         *     <li>@ref gpudb::create_table_external_text_comment_string
         *         "create_table_external_text_comment_string": Specifies the
         *         character string that should be interpreted as a comment
         *         line prefix in the source data.  All lines in the data
         *         starting with the provided string are ignored.  For @ref
         *         gpudb::create_table_external_delimited_text "delimited_text"
         *         @ref gpudb::create_table_external_file_type "file_type"
         *         only. The default value is '#'.
         *     <li>@ref gpudb::create_table_external_text_delimiter
         *         "create_table_external_text_delimiter": Specifies the
         *         character delimiting field values in the source data and
         *         field names in the header (if present).  For @ref
         *         gpudb::create_table_external_delimited_text "delimited_text"
         *         @ref gpudb::create_table_external_file_type "file_type"
         *         only. The default value is ','.
         *     <li>@ref gpudb::create_table_external_text_escape_character
         *         "create_table_external_text_escape_character": Specifies the
         *         character that is used to escape other characters in the
         *         source data.  An 'a', 'b', 'f', 'n', 'r', 't', or 'v'
         *         preceded by an escape character will be interpreted as the
         *         ASCII bell, backspace, form feed, line feed, carriage
         *         return, horizontal tab, & vertical tab, respectively.  For
         *         example, the escape character followed by an 'n' will be
         *         interpreted as a newline within a field value.  The escape
         *         character can also be used to escape the quoting character,
         *         and will be treated as an escape character whether it is
         *         within a quoted field value or not.  For @ref
         *         gpudb::create_table_external_delimited_text "delimited_text"
         *         @ref gpudb::create_table_external_file_type "file_type"
         *         only.
         *     <li>@ref gpudb::create_table_external_text_has_header
         *         "create_table_external_text_has_header": Indicates whether
         *         the source data contains a header row.  For @ref
         *         gpudb::create_table_external_delimited_text "delimited_text"
         *         @ref gpudb::create_table_external_file_type "file_type"
         *         only.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_true
         *                 "create_table_external_true"
         *             <li>@ref gpudb::create_table_external_false
         *                 "create_table_external_false"
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_true
         *         "create_table_external_true".
         *     <li>@ref
         *         gpudb::create_table_external_text_header_property_delimiter
         *         "create_table_external_text_header_property_delimiter":
         *         Specifies the delimiter for <a
         *         href="../../../concepts/types/#column-properties"
         *         target="_top">column properties</a> in the header row (if
         *         present).  Cannot be set to same value as @ref
         *         gpudb::create_table_external_text_delimiter
         *         "text_delimiter".  For @ref
         *         gpudb::create_table_external_delimited_text "delimited_text"
         *         @ref gpudb::create_table_external_file_type "file_type"
         *         only. The default value is '|'.
         *     <li>@ref gpudb::create_table_external_text_null_string
         *         "create_table_external_text_null_string": Specifies the
         *         character string that should be interpreted as a null value
         *         in the source data.  For @ref
         *         gpudb::create_table_external_delimited_text "delimited_text"
         *         @ref gpudb::create_table_external_file_type "file_type"
         *         only. The default value is '\\N'.
         *     <li>@ref gpudb::create_table_external_text_quote_character
         *         "create_table_external_text_quote_character": Specifies the
         *         character that should be interpreted as a field value
         *         quoting character in the source data.  The character must
         *         appear at beginning and end of field value to take effect.
         *         Delimiters within quoted fields are treated as literals and
         *         not delimiters.  Within a quoted field, two consecutive
         *         quote characters will be interpreted as a single literal
         *         quote character, effectively escaping it.  To not have a
         *         quote character, specify an empty string.  For @ref
         *         gpudb::create_table_external_delimited_text "delimited_text"
         *         @ref gpudb::create_table_external_file_type "file_type"
         *         only. The default value is '"'.
         *     <li>@ref gpudb::create_table_external_text_search_columns
         *         "create_table_external_text_search_columns": Add
         *         'text_search' property to internally inferenced string
         *         columns. Comma seperated list of column names or '*' for all
         *         columns. To add 'text_search' property only to string
         *         columns greater than or equal to a minimum size, also set
         *         the @ref
         *         gpudb::create_table_external_text_search_min_column_length
         *         "text_search_min_column_length"
         *     <li>@ref
         *         gpudb::create_table_external_text_search_min_column_length
         *         "create_table_external_text_search_min_column_length": Set
         *         the minimum column size for strings to apply the
         *         'text_search' property to. Used only when @ref
         *         gpudb::create_table_external_text_search_columns
         *         "text_search_columns" has a value.
         *     <li>@ref gpudb::create_table_external_truncate_strings
         *         "create_table_external_truncate_strings": If set to @ref
         *         gpudb::create_table_external_true "true", truncate string
         *         values that are longer than the column's type size.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_true
         *                 "create_table_external_true"
         *             <li>@ref gpudb::create_table_external_false
         *                 "create_table_external_false"
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_false
         *         "create_table_external_false".
         *     <li>@ref gpudb::create_table_external_truncate_table
         *         "create_table_external_truncate_table": If set to @ref
         *         gpudb::create_table_external_true "true", truncates the
         *         table specified by @ref tableName prior to loading the
         *         file(s).
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_true
         *                 "create_table_external_true"
         *             <li>@ref gpudb::create_table_external_false
         *                 "create_table_external_false"
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_false
         *         "create_table_external_false".
         *     <li>@ref gpudb::create_table_external_type_inference_mode
         *         "create_table_external_type_inference_mode": Optimize type
         *         inferencing for either speed or accuracy.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_accuracy
         *                 "create_table_external_accuracy": Scans data to get
         *                 exactly-typed & sized columns for all data scanned.
         *             <li>@ref gpudb::create_table_external_speed
         *                 "create_table_external_speed": Scans data and picks
         *                 the widest possible column types so that 'all'
         *                 values will fit with minimum data scanned
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_speed
         *         "create_table_external_speed".
         *     <li>@ref gpudb::create_table_external_remote_query
         *         "create_table_external_remote_query": Remote SQL query from
         *         which data will be sourced
         *     <li>@ref gpudb::create_table_external_remote_query_filter_column
         *         "create_table_external_remote_query_filter_column": Name of
         *         column to be used for splitting @ref
         *         gpudb::create_table_external_remote_query "remote_query"
         *         into multiple sub-queries using the data distribution of
         *         given column
         *     <li>@ref
         *         gpudb::create_table_external_remote_query_increasing_column
         *         "create_table_external_remote_query_increasing_column":
         *         Column on subscribed remote query result that will increase
         *         for new records (e.g., TIMESTAMP).
         *     <li>@ref
         *         gpudb::create_table_external_remote_query_partition_column
         *         "create_table_external_remote_query_partition_column": Alias
         *         name for @ref
         *         gpudb::create_table_external_remote_query_filter_column
         *         "remote_query_filter_column".
         *     <li>@ref gpudb::create_table_external_update_on_existing_pk
         *         "create_table_external_update_on_existing_pk": Specifies the
         *         record collision policy for inserting into a table with a <a
         *         href="../../../concepts/tables/#primary-keys"
         *         target="_top">primary key</a>. If set to @ref
         *         gpudb::create_table_external_true "true", any existing table
         *         record with primary key values that match those of a record
         *         being inserted will be replaced by that new record (the new
         *         data will be 'upserted'). If set to @ref
         *         gpudb::create_table_external_false "false", any existing
         *         table record with primary key values that match those of a
         *         record being inserted will remain unchanged, while the new
         *         record will be rejected and the error handled as determined
         *         by @ref gpudb::create_table_external_ignore_existing_pk
         *         "ignore_existing_pk" & @ref
         *         gpudb::create_table_external_error_handling
         *         "error_handling".  If the specified table does not have a
         *         primary key, then this option has no effect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_external_true
         *                 "create_table_external_true": Upsert new records
         *                 when primary keys match existing records
         *             <li>@ref gpudb::create_table_external_false
         *                 "create_table_external_false": Reject new records
         *                 when primary keys match existing records
         *         </ul>
         *         The default value is @ref gpudb::create_table_external_false
         *         "create_table_external_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateTableExternalRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateTableExternalRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.filepaths);
            ::avro::encode(e, v.modifyColumns);
            ::avro::encode(e, v.createTableOptions);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateTableExternalRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.filepaths);
                            break;

                        case 2:
                            ::avro::decode(d, v.modifyColumns);
                            break;

                        case 3:
                            ::avro::decode(d, v.createTableOptions);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.filepaths);
                ::avro::decode(d, v.modifyColumns);
                ::avro::decode(d, v.createTableOptions);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::createTableExternal(const CreateTableExternalRequest&) const
     * "GPUdb::createTableExternal".
     */
    struct CreateTableExternalResponse
    {
        /**
         * Constructs a CreateTableExternalResponse object with default
         * parameters.
         */
        CreateTableExternalResponse() :
            tableName(std::string()),
            typeId(std::string()),
            typeDefinition(std::string()),
            typeLabel(std::string()),
            typeProperties(std::map<std::string, std::vector<std::string> >()),
            countInserted(int64_t()),
            countSkipped(int64_t()),
            countUpdated(int64_t()),
            info(std::map<std::string, std::string>()),
            files(std::vector<std::string>())
        {
        }

        /**
         * Value of @ref gpudb::CreateTableExternalRequest::tableName
         * "tableName".
         */
        std::string tableName;

        /**
         * ID of the currently registered table structure <a
         * href="../../../concepts/types/" target="_top">type</a> for this
         * external table
         */
        std::string typeId;

        /**
         * A JSON string describing the columns of the created external table
         */
        std::string typeDefinition;

        /**
         * The user-defined description associated with the table's structure
         */
        std::string typeLabel;

        /**
         * A mapping of each external table column name to an array of column
         * properties associated with that column
         */
        std::map<std::string, std::vector<std::string> > typeProperties;

        /**
         * Number of records inserted into the external table.
         */
        int64_t countInserted;

        /**
         * Number of records skipped, when not running in @ref
         * gpudb::create_table_external_abort "abort" error handling mode.
         */
        int64_t countSkipped;

        /**
         * [Not yet implemented]  Number of records updated within the external
         * table.
         */
        int64_t countUpdated;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;

        std::vector<std::string> files;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateTableExternalResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateTableExternalResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.typeDefinition);
            ::avro::encode(e, v.typeLabel);
            ::avro::encode(e, v.typeProperties);
            ::avro::encode(e, v.countInserted);
            ::avro::encode(e, v.countSkipped);
            ::avro::encode(e, v.countUpdated);
            ::avro::encode(e, v.info);
            ::avro::encode(e, v.files);
        }

        static void decode(Decoder& d, gpudb::CreateTableExternalResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 2:
                            ::avro::decode(d, v.typeDefinition);
                            break;

                        case 3:
                            ::avro::decode(d, v.typeLabel);
                            break;

                        case 4:
                            ::avro::decode(d, v.typeProperties);
                            break;

                        case 5:
                            ::avro::decode(d, v.countInserted);
                            break;

                        case 6:
                            ::avro::decode(d, v.countSkipped);
                            break;

                        case 7:
                            ::avro::decode(d, v.countUpdated);
                            break;

                        case 8:
                            ::avro::decode(d, v.info);
                            break;

                        case 9:
                            ::avro::decode(d, v.files);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.typeDefinition);
                ::avro::decode(d, v.typeLabel);
                ::avro::decode(d, v.typeProperties);
                ::avro::decode(d, v.countInserted);
                ::avro::decode(d, v.countSkipped);
                ::avro::decode(d, v.countUpdated);
                ::avro::decode(d, v.info);
                ::avro::decode(d, v.files);
            }
        }
    };
} // end namespace avro

#endif // __CREATE_TABLE_EXTERNAL_H__
