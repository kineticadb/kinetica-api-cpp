/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_JOIN_TABLE_H__
#define __CREATE_JOIN_TABLE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::createJoinTable(const CreateJoinTableRequest&) const
     * "GPUdb::createJoinTable".
     *
     * Creates a table that is the result of a SQL JOIN.
     *
     * For join details and examples see: <a href="../../../concepts/joins/"
     * target="_top">Joins</a>.  For limitations, see <a
     * href="../../../concepts/joins/#limitations-cautions" target="_top">Join
     * Limitations and Cautions</a>.
     */
    struct CreateJoinTableRequest
    {
        /**
         * Constructs a CreateJoinTableRequest object with default parameters.
         */
        CreateJoinTableRequest() :
            joinTableName(std::string()),
            tableNames(std::vector<std::string>()),
            columnNames(std::vector<std::string>()),
            expressions(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateJoinTableRequest object with the specified
         * parameters.
         *
         * @param[in] joinTableName_  Name of the join table to be created, in
         *                            [schema_name.]table_name format, using
         *                            standard <a
         *                            href="../../../concepts/tables/#table-name-resolution"
         *                            target="_top">name resolution rules</a>
         *                            and meeting <a
         *                            href="../../../concepts/tables/#table-naming-criteria"
         *                            target="_top">table naming criteria</a>.
         * @param[in] tableNames_  The list of table names composing the join,
         *                         each in [schema_name.]table_name format,
         *                         using standard <a
         *                         href="../../../concepts/tables/#table-name-resolution"
         *                         target="_top">name resolution rules</a>.
         *                         Corresponds to a SQL statement FROM clause.
         * @param[in] columnNames_  List of member table columns or column
         *                          expressions to be included in the join.
         *                          Columns can be prefixed with
         *                          'table_id.column_name', where 'table_id' is
         *                          the table name or alias.  Columns can be
         *                          aliased via the syntax 'column_name as
         *                          alias'. Wild cards '*' can be used to
         *                          include all columns across member tables or
         *                          'table_id.*' for all of a single table's
         *                          columns.  Columns and column expressions
         *                          composing the join must be uniquely named
         *                          or aliased--therefore, the '*' wild card
         *                          cannot be used if column names aren't
         *                          unique across all tables.
         * @param[in] expressions_  An optional list of expressions to combine
         *                          and filter the joined tables.  Corresponds
         *                          to a SQL statement WHERE clause. For
         *                          details see: <a
         *                          href="../../../concepts/expressions/"
         *                          target="_top">expressions</a>. The default
         *                          value is an empty vector.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::create_join_table_create_temp_table
         *                              "create_join_table_create_temp_table":
         *                              If @ref gpudb::create_join_table_true
         *                              "true", a unique temporary table name
         *                              will be generated in the sys_temp
         *                              schema and used in place of @a
         *                              joinTableName_. This is always allowed
         *                              even if the caller does not have
         *                              permission to create tables. The
         *                              generated name is returned in @ref
         *                              gpudb::create_join_table_qualified_join_table_name
         *                              "qualified_join_table_name".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_join_table_true
         *                                      "create_join_table_true"
         *                                  <li>@ref
         *                                      gpudb::create_join_table_false
         *                                      "create_join_table_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_join_table_false
         *                              "create_join_table_false".
         *                          <li>@ref
         *                              gpudb::create_join_table_collection_name
         *                              "create_join_table_collection_name":
         *                              [DEPRECATED--please specify the
         *                              containing schema for the join as part
         *                              of @a joinTableName_ and use @ref
         *                              GPUdb::createSchema(const CreateSchemaRequest&) const
         *                              "GPUdb::createSchema" to create the
         *                              schema if non-existent]  Name of a
         *                              schema for the join. If the schema is
         *                              non-existent, it will be automatically
         *                              created. The default value is ''.
         *                          <li>@ref
         *                              gpudb::create_join_table_max_query_dimensions
         *                              "create_join_table_max_query_dimensions":
         *                              No longer used.
         *                          <li>@ref
         *                              gpudb::create_join_table_optimize_lookups
         *                              "create_join_table_optimize_lookups":
         *                              Use more memory to speed up the joining
         *                              of tables.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_join_table_true
         *                                      "create_join_table_true"
         *                                  <li>@ref
         *                                      gpudb::create_join_table_false
         *                                      "create_join_table_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_join_table_false
         *                              "create_join_table_false".
         *                          <li>@ref
         *                              gpudb::create_join_table_strategy_definition
         *                              "create_join_table_strategy_definition":
         *                              The <a
         *                              href="../../../rm/concepts/#tier-strategies"
         *                              target="_top">tier strategy</a> for the
         *                              table and its columns.
         *                          <li>@ref gpudb::create_join_table_ttl
         *                              "create_join_table_ttl": Sets the <a
         *                              href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the join table
         *                              specified in @a joinTableName_.
         *                          <li>@ref gpudb::create_join_table_view_id
         *                              "create_join_table_view_id": view this
         *                              projection is part of. The default
         *                              value is ''.
         *                          <li>@ref gpudb::create_join_table_no_count
         *                              "create_join_table_no_count": Return a
         *                              count of 0 for the join table for
         *                              logging and for @ref
         *                              GPUdb::showTable(const ShowTableRequest&) const
         *                              "GPUdb::showTable"; optimization needed
         *                              for large overlapped equi-join
         *                              stencils. The default value is 'false'.
         *                          <li>@ref
         *                              gpudb::create_join_table_chunk_size
         *                              "create_join_table_chunk_size": Maximum
         *                              number of records per joined-chunk for
         *                              this table. Defaults to the gpudb.conf
         *                              file chunk size
         *                          <li>@ref
         *                              gpudb::create_join_table_enable_virtual_chunking
         *                              "create_join_table_enable_virtual_chunking":
         *                              Collect chunks with accumulated size
         *                              less than chunk_size into a single
         *                              chunk. The default value is 'false'.
         *                          <li>@ref
         *                              gpudb::create_join_table_enable_pk_equi_join
         *                              "create_join_table_enable_pk_equi_join":
         *                              Use equi-join to do primary key joins
         *                              rather than using primary-key-index
         *                      </ul>
         *                      The default value is an empty map.
         */
        CreateJoinTableRequest(const std::string& joinTableName_, const std::vector<std::string>& tableNames_, const std::vector<std::string>& columnNames_, const std::vector<std::string>& expressions_, const std::map<std::string, std::string>& options_):
            joinTableName( joinTableName_ ),
            tableNames( tableNames_ ),
            columnNames( columnNames_ ),
            expressions( expressions_ ),
            options( options_ )
        {
        }

        /**
         * Name of the join table to be created, in [ schema_name.\ ]table_name
         * format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a> and meeting <a
         * href="../../../concepts/tables/#table-naming-criteria"
         * target="_top">table naming criteria</a>.
         */
        std::string joinTableName;

        /**
         * The list of table names composing the join, each in [ schema_name.\
         * ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.  Corresponds to a SQL
         * statement FROM clause.
         */
        std::vector<std::string> tableNames;

        /**
         * List of member table columns or column expressions to be included in
         * the join. Columns can be prefixed with 'table_id.column_name', where
         * 'table_id' is the table name or alias.  Columns can be aliased via
         * the syntax 'column_name as alias'. Wild cards '*' can be used to
         * include all columns across member tables or 'table_id.*' for all of
         * a single table's columns.  Columns and column expressions composing
         * the join must be uniquely named or aliased--therefore, the '*' wild
         * card cannot be used if column names aren't unique across all tables.
         */
        std::vector<std::string> columnNames;

        /**
         * An optional list of expressions to combine and filter the joined
         * tables.  Corresponds to a SQL statement WHERE clause. For details
         * see: <a href="../../../concepts/expressions/"
         * target="_top">expressions</a>. The default value is an empty vector.
         */
        std::vector<std::string> expressions;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::create_join_table_create_temp_table
         *         "create_join_table_create_temp_table": If @ref
         *         gpudb::create_join_table_true "true", a unique temporary
         *         table name will be generated in the sys_temp schema and used
         *         in place of @ref joinTableName. This is always allowed even
         *         if the caller does not have permission to create tables. The
         *         generated name is returned in @ref
         *         gpudb::create_join_table_qualified_join_table_name
         *         "qualified_join_table_name".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_join_table_true
         *                 "create_join_table_true"
         *             <li>@ref gpudb::create_join_table_false
         *                 "create_join_table_false"
         *         </ul>
         *         The default value is @ref gpudb::create_join_table_false
         *         "create_join_table_false".
         *     <li>@ref gpudb::create_join_table_collection_name
         *         "create_join_table_collection_name": [DEPRECATED--please
         *         specify the containing schema for the join as part of @ref
         *         joinTableName and use @ref
         *         GPUdb::createSchema(const CreateSchemaRequest&) const
         *         "GPUdb::createSchema" to create the schema if non-existent]
         *         Name of a schema for the join. If the schema is
         *         non-existent, it will be automatically created. The default
         *         value is ''.
         *     <li>@ref gpudb::create_join_table_max_query_dimensions
         *         "create_join_table_max_query_dimensions": No longer used.
         *     <li>@ref gpudb::create_join_table_optimize_lookups
         *         "create_join_table_optimize_lookups": Use more memory to
         *         speed up the joining of tables.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_join_table_true
         *                 "create_join_table_true"
         *             <li>@ref gpudb::create_join_table_false
         *                 "create_join_table_false"
         *         </ul>
         *         The default value is @ref gpudb::create_join_table_false
         *         "create_join_table_false".
         *     <li>@ref gpudb::create_join_table_strategy_definition
         *         "create_join_table_strategy_definition": The <a
         *         href="../../../rm/concepts/#tier-strategies"
         *         target="_top">tier strategy</a> for the table and its
         *         columns.
         *     <li>@ref gpudb::create_join_table_ttl "create_join_table_ttl":
         *         Sets the <a href="../../../concepts/ttl/"
         *         target="_top">TTL</a> of the join table specified in @ref
         *         joinTableName.
         *     <li>@ref gpudb::create_join_table_view_id
         *         "create_join_table_view_id": view this projection is part
         *         of. The default value is ''.
         *     <li>@ref gpudb::create_join_table_no_count
         *         "create_join_table_no_count": Return a count of 0 for the
         *         join table for logging and for @ref
         *         GPUdb::showTable(const ShowTableRequest&) const
         *         "GPUdb::showTable"; optimization needed for large overlapped
         *         equi-join stencils. The default value is 'false'.
         *     <li>@ref gpudb::create_join_table_chunk_size
         *         "create_join_table_chunk_size": Maximum number of records
         *         per joined-chunk for this table. Defaults to the gpudb.conf
         *         file chunk size
         *     <li>@ref gpudb::create_join_table_enable_virtual_chunking
         *         "create_join_table_enable_virtual_chunking": Collect chunks
         *         with accumulated size less than chunk_size into a single
         *         chunk. The default value is 'false'.
         *     <li>@ref gpudb::create_join_table_enable_pk_equi_join
         *         "create_join_table_enable_pk_equi_join": Use equi-join to do
         *         primary key joins rather than using primary-key-index
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateJoinTableRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateJoinTableRequest& v)
        {
            ::avro::encode(e, v.joinTableName);
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.columnNames);
            ::avro::encode(e, v.expressions);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateJoinTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.joinTableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.columnNames);
                            break;

                        case 3:
                            ::avro::decode(d, v.expressions);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.joinTableName);
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.columnNames);
                ::avro::decode(d, v.expressions);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::createJoinTable(const CreateJoinTableRequest&) const
     * "GPUdb::createJoinTable".
     */
    struct CreateJoinTableResponse
    {
        /**
         * Constructs a CreateJoinTableResponse object with default parameters.
         */
        CreateJoinTableResponse() :
            joinTableName(std::string()),
            count(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::CreateJoinTableRequest::joinTableName
         * "joinTableName".
         */
        std::string joinTableName;

        /**
         * The number of records in the join table filtered by the given select
         * expression.
         */
        int64_t count;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::create_join_table_qualified_join_table_name
         *         "create_join_table_qualified_join_table_name": The fully
         *         qualified name of the join table (i.e. including the schema)
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateJoinTableResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateJoinTableResponse& v)
        {
            ::avro::encode(e, v.joinTableName);
            ::avro::encode(e, v.count);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateJoinTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.joinTableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.count);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.joinTableName);
                ::avro::decode(d, v.count);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __CREATE_JOIN_TABLE_H__
