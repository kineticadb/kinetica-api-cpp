/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_OFFLINE_H__
#define __ADMIN_OFFLINE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::adminOffline(const AdminOfflineRequest&) const
     * "GPUdb::adminOffline".
     *
     * Take the system offline. When the system is offline, no user operations
     * can be performed with the exception of a system shutdown.
     */
    struct AdminOfflineRequest
    {
        /**
         * Constructs an AdminOfflineRequest object with default parameters.
         */
        AdminOfflineRequest() :
            offline(bool()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminOfflineRequest object with the specified
         * parameters.
         *
         * @param[in] offline_  Set to true if desired state is offline.
         *                      Supported values:
         *                      <ul>
         *                          <li>true
         *                          <li>false
         *                      </ul>
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::admin_offline_flush_to_disk
         *                              "admin_offline_flush_to_disk": Flush to
         *                              disk when going offline.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::admin_offline_true
         *                                      "admin_offline_true"
         *                                  <li>@ref gpudb::admin_offline_false
         *                                      "admin_offline_false"
         *                              </ul>
         *                      </ul>
         *                      The default value is an empty map.
         */
        AdminOfflineRequest(const bool offline_, const std::map<std::string, std::string>& options_):
            offline( offline_ ),
            options( options_ )
        {
        }

        /**
         * Set to true if desired state is offline.
         * Supported values:
         * <ul>
         *     <li>true
         *     <li>false
         * </ul>
         */
        bool offline;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::admin_offline_flush_to_disk
         *         "admin_offline_flush_to_disk": Flush to disk when going
         *         offline.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::admin_offline_true "admin_offline_true"
         *             <li>@ref gpudb::admin_offline_false
         *                 "admin_offline_false"
         *         </ul>
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AdminOfflineRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminOfflineRequest& v)
        {
            ::avro::encode(e, v.offline);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminOfflineRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.offline);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.offline);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::adminOffline(const AdminOfflineRequest&) const
     * "GPUdb::adminOffline".
     */
    struct AdminOfflineResponse
    {
        /**
         * Constructs an AdminOfflineResponse object with default parameters.
         */
        AdminOfflineResponse() :
            isOffline(bool()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Returns true if the system is offline, or false otherwise.
         */
        bool isOffline;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AdminOfflineResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminOfflineResponse& v)
        {
            ::avro::encode(e, v.isOffline);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AdminOfflineResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.isOffline);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.isOffline);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ADMIN_OFFLINE_H__
