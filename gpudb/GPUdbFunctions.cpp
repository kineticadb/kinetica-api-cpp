/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

// GPUdb Version
const std::string GPUdb::API_VERSION( "7.2.2.1" );

AdminAddHostResponse GPUdb::adminAddHost( const AdminAddHostRequest& request_ ) const
{
    AdminAddHostResponse actualResponse_;
    submitRequestToHostManager("/admin/add/host", request_, actualResponse_, false);
    return actualResponse_;
}

AdminAddHostResponse& GPUdb::adminAddHost( const AdminAddHostRequest& request_,
                                           AdminAddHostResponse& response_ ) const
{
    submitRequestToHostManager("/admin/add/host", request_, response_, false);
    return response_;
}

AdminAddHostResponse GPUdb::adminAddHost( const std::string& hostAddress,
                                          const std::map<std::string, std::string>& options ) const
{
    AdminAddHostRequest actualRequest_;
    actualRequest_.hostAddress = hostAddress;
    actualRequest_.options = options;
    AdminAddHostResponse actualResponse_;
    submitRequestToHostManager("/admin/add/host", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminAddHostResponse& GPUdb::adminAddHost( const std::string& hostAddress,
                                           const std::map<std::string, std::string>& options,
                                           AdminAddHostResponse& response_ ) const
{
    AdminAddHostRequest actualRequest_;
    actualRequest_.hostAddress = hostAddress;
    actualRequest_.options = options;
    submitRequestToHostManager("/admin/add/host", actualRequest_, response_, false);
    return response_;
}

AdminAddRanksResponse GPUdb::adminAddRanks( const AdminAddRanksRequest& request_ ) const
{
    AdminAddRanksResponse actualResponse_;
    submitRequest("/admin/add/ranks", request_, actualResponse_, false);
    return actualResponse_;
}

AdminAddRanksResponse& GPUdb::adminAddRanks( const AdminAddRanksRequest& request_,
                                             AdminAddRanksResponse& response_ ) const
{
    submitRequest("/admin/add/ranks", request_, response_, false);
    return response_;
}

AdminAddRanksResponse GPUdb::adminAddRanks( const std::vector<std::string>& hosts,
                                            const std::vector<std::map<std::string, std::string> >& configParams,
                                            const std::map<std::string, std::string>& options ) const
{
    AdminAddRanksRequest actualRequest_;
    actualRequest_.hosts = hosts;
    actualRequest_.configParams = configParams;
    actualRequest_.options = options;
    AdminAddRanksResponse actualResponse_;
    submitRequest("/admin/add/ranks", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminAddRanksResponse& GPUdb::adminAddRanks( const std::vector<std::string>& hosts,
                                             const std::vector<std::map<std::string, std::string> >& configParams,
                                             const std::map<std::string, std::string>& options,
                                             AdminAddRanksResponse& response_ ) const
{
    AdminAddRanksRequest actualRequest_;
    actualRequest_.hosts = hosts;
    actualRequest_.configParams = configParams;
    actualRequest_.options = options;
    submitRequest("/admin/add/ranks", actualRequest_, response_, false);
    return response_;
}

AdminAlterHostResponse GPUdb::adminAlterHost( const AdminAlterHostRequest& request_ ) const
{
    AdminAlterHostResponse actualResponse_;
    submitRequestToHostManager("/admin/alter/host", request_, actualResponse_, false);
    return actualResponse_;
}

AdminAlterHostResponse& GPUdb::adminAlterHost( const AdminAlterHostRequest& request_,
                                               AdminAlterHostResponse& response_ ) const
{
    submitRequestToHostManager("/admin/alter/host", request_, response_, false);
    return response_;
}

AdminAlterHostResponse GPUdb::adminAlterHost( const std::string& host,
                                              const std::map<std::string, std::string>& options ) const
{
    AdminAlterHostRequest actualRequest_;
    actualRequest_.host = host;
    actualRequest_.options = options;
    AdminAlterHostResponse actualResponse_;
    submitRequestToHostManager("/admin/alter/host", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminAlterHostResponse& GPUdb::adminAlterHost( const std::string& host,
                                               const std::map<std::string, std::string>& options,
                                               AdminAlterHostResponse& response_ ) const
{
    AdminAlterHostRequest actualRequest_;
    actualRequest_.host = host;
    actualRequest_.options = options;
    submitRequestToHostManager("/admin/alter/host", actualRequest_, response_, false);
    return response_;
}

AdminAlterJobsResponse GPUdb::adminAlterJobs( const AdminAlterJobsRequest& request_ ) const
{
    AdminAlterJobsResponse actualResponse_;
    submitRequest("/admin/alter/jobs", request_, actualResponse_, false);
    return actualResponse_;
}

AdminAlterJobsResponse& GPUdb::adminAlterJobs( const AdminAlterJobsRequest& request_,
                                               AdminAlterJobsResponse& response_ ) const
{
    submitRequest("/admin/alter/jobs", request_, response_, false);
    return response_;
}

AdminAlterJobsResponse GPUdb::adminAlterJobs( const std::vector<int64_t>& jobIds,
                                              const std::string& action,
                                              const std::map<std::string, std::string>& options ) const
{
    AdminAlterJobsRequest actualRequest_;
    actualRequest_.jobIds = jobIds;
    actualRequest_.action = action;
    actualRequest_.options = options;
    AdminAlterJobsResponse actualResponse_;
    submitRequest("/admin/alter/jobs", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminAlterJobsResponse& GPUdb::adminAlterJobs( const std::vector<int64_t>& jobIds,
                                               const std::string& action,
                                               const std::map<std::string, std::string>& options,
                                               AdminAlterJobsResponse& response_ ) const
{
    AdminAlterJobsRequest actualRequest_;
    actualRequest_.jobIds = jobIds;
    actualRequest_.action = action;
    actualRequest_.options = options;
    submitRequest("/admin/alter/jobs", actualRequest_, response_, false);
    return response_;
}

AdminBackupBeginResponse GPUdb::adminBackupBegin( const AdminBackupBeginRequest& request_ ) const
{
    AdminBackupBeginResponse actualResponse_;
    submitRequest("/admin/backup/begin", request_, actualResponse_, false);
    return actualResponse_;
}

AdminBackupBeginResponse& GPUdb::adminBackupBegin( const AdminBackupBeginRequest& request_,
                                                   AdminBackupBeginResponse& response_ ) const
{
    submitRequest("/admin/backup/begin", request_, response_, false);
    return response_;
}

AdminBackupBeginResponse GPUdb::adminBackupBegin( const std::map<std::string, std::string>& options ) const
{
    AdminBackupBeginRequest actualRequest_;
    actualRequest_.options = options;
    AdminBackupBeginResponse actualResponse_;
    submitRequest("/admin/backup/begin", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminBackupBeginResponse& GPUdb::adminBackupBegin( const std::map<std::string, std::string>& options,
                                                   AdminBackupBeginResponse& response_ ) const
{
    AdminBackupBeginRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/admin/backup/begin", actualRequest_, response_, false);
    return response_;
}

AdminBackupEndResponse GPUdb::adminBackupEnd( const AdminBackupEndRequest& request_ ) const
{
    AdminBackupEndResponse actualResponse_;
    submitRequest("/admin/backup/end", request_, actualResponse_, false);
    return actualResponse_;
}

AdminBackupEndResponse& GPUdb::adminBackupEnd( const AdminBackupEndRequest& request_,
                                               AdminBackupEndResponse& response_ ) const
{
    submitRequest("/admin/backup/end", request_, response_, false);
    return response_;
}

AdminBackupEndResponse GPUdb::adminBackupEnd( const std::map<std::string, std::string>& options ) const
{
    AdminBackupEndRequest actualRequest_;
    actualRequest_.options = options;
    AdminBackupEndResponse actualResponse_;
    submitRequest("/admin/backup/end", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminBackupEndResponse& GPUdb::adminBackupEnd( const std::map<std::string, std::string>& options,
                                               AdminBackupEndResponse& response_ ) const
{
    AdminBackupEndRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/admin/backup/end", actualRequest_, response_, false);
    return response_;
}

AdminHaRefreshResponse GPUdb::adminHaRefresh( const AdminHaRefreshRequest& request_ ) const
{
    AdminHaRefreshResponse actualResponse_;
    submitRequest("/admin/ha/refresh", request_, actualResponse_, false);
    return actualResponse_;
}

AdminHaRefreshResponse& GPUdb::adminHaRefresh( const AdminHaRefreshRequest& request_,
                                               AdminHaRefreshResponse& response_ ) const
{
    submitRequest("/admin/ha/refresh", request_, response_, false);
    return response_;
}

AdminHaRefreshResponse GPUdb::adminHaRefresh( const std::map<std::string, std::string>& options ) const
{
    AdminHaRefreshRequest actualRequest_;
    actualRequest_.options = options;
    AdminHaRefreshResponse actualResponse_;
    submitRequest("/admin/ha/refresh", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminHaRefreshResponse& GPUdb::adminHaRefresh( const std::map<std::string, std::string>& options,
                                               AdminHaRefreshResponse& response_ ) const
{
    AdminHaRefreshRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/admin/ha/refresh", actualRequest_, response_, false);
    return response_;
}

AdminOfflineResponse GPUdb::adminOffline( const AdminOfflineRequest& request_ ) const
{
    AdminOfflineResponse actualResponse_;
    submitRequest("/admin/offline", request_, actualResponse_, false);
    return actualResponse_;
}

AdminOfflineResponse& GPUdb::adminOffline( const AdminOfflineRequest& request_,
                                           AdminOfflineResponse& response_ ) const
{
    submitRequest("/admin/offline", request_, response_, false);
    return response_;
}

AdminOfflineResponse GPUdb::adminOffline( const bool offline,
                                          const std::map<std::string, std::string>& options ) const
{
    AdminOfflineRequest actualRequest_;
    actualRequest_.offline = offline;
    actualRequest_.options = options;
    AdminOfflineResponse actualResponse_;
    submitRequest("/admin/offline", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminOfflineResponse& GPUdb::adminOffline( const bool offline,
                                           const std::map<std::string, std::string>& options,
                                           AdminOfflineResponse& response_ ) const
{
    AdminOfflineRequest actualRequest_;
    actualRequest_.offline = offline;
    actualRequest_.options = options;
    submitRequest("/admin/offline", actualRequest_, response_, false);
    return response_;
}

AdminRebalanceResponse GPUdb::adminRebalance( const AdminRebalanceRequest& request_ ) const
{
    AdminRebalanceResponse actualResponse_;
    submitRequest("/admin/rebalance", request_, actualResponse_, false);
    return actualResponse_;
}

AdminRebalanceResponse& GPUdb::adminRebalance( const AdminRebalanceRequest& request_,
                                               AdminRebalanceResponse& response_ ) const
{
    submitRequest("/admin/rebalance", request_, response_, false);
    return response_;
}

AdminRebalanceResponse GPUdb::adminRebalance( const std::map<std::string, std::string>& options ) const
{
    AdminRebalanceRequest actualRequest_;
    actualRequest_.options = options;
    AdminRebalanceResponse actualResponse_;
    submitRequest("/admin/rebalance", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminRebalanceResponse& GPUdb::adminRebalance( const std::map<std::string, std::string>& options,
                                               AdminRebalanceResponse& response_ ) const
{
    AdminRebalanceRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/admin/rebalance", actualRequest_, response_, false);
    return response_;
}

AdminRemoveHostResponse GPUdb::adminRemoveHost( const AdminRemoveHostRequest& request_ ) const
{
    AdminRemoveHostResponse actualResponse_;
    submitRequestToHostManager("/admin/remove/host", request_, actualResponse_, false);
    return actualResponse_;
}

AdminRemoveHostResponse& GPUdb::adminRemoveHost( const AdminRemoveHostRequest& request_,
                                                 AdminRemoveHostResponse& response_ ) const
{
    submitRequestToHostManager("/admin/remove/host", request_, response_, false);
    return response_;
}

AdminRemoveHostResponse GPUdb::adminRemoveHost( const std::string& host,
                                                const std::map<std::string, std::string>& options ) const
{
    AdminRemoveHostRequest actualRequest_;
    actualRequest_.host = host;
    actualRequest_.options = options;
    AdminRemoveHostResponse actualResponse_;
    submitRequestToHostManager("/admin/remove/host", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminRemoveHostResponse& GPUdb::adminRemoveHost( const std::string& host,
                                                 const std::map<std::string, std::string>& options,
                                                 AdminRemoveHostResponse& response_ ) const
{
    AdminRemoveHostRequest actualRequest_;
    actualRequest_.host = host;
    actualRequest_.options = options;
    submitRequestToHostManager("/admin/remove/host", actualRequest_, response_, false);
    return response_;
}

AdminRemoveRanksResponse GPUdb::adminRemoveRanks( const AdminRemoveRanksRequest& request_ ) const
{
    AdminRemoveRanksResponse actualResponse_;
    submitRequest("/admin/remove/ranks", request_, actualResponse_, false);
    return actualResponse_;
}

AdminRemoveRanksResponse& GPUdb::adminRemoveRanks( const AdminRemoveRanksRequest& request_,
                                                   AdminRemoveRanksResponse& response_ ) const
{
    submitRequest("/admin/remove/ranks", request_, response_, false);
    return response_;
}

AdminRemoveRanksResponse GPUdb::adminRemoveRanks( const std::vector<std::string>& ranks,
                                                  const std::map<std::string, std::string>& options ) const
{
    AdminRemoveRanksRequest actualRequest_;
    actualRequest_.ranks = ranks;
    actualRequest_.options = options;
    AdminRemoveRanksResponse actualResponse_;
    submitRequest("/admin/remove/ranks", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminRemoveRanksResponse& GPUdb::adminRemoveRanks( const std::vector<std::string>& ranks,
                                                   const std::map<std::string, std::string>& options,
                                                   AdminRemoveRanksResponse& response_ ) const
{
    AdminRemoveRanksRequest actualRequest_;
    actualRequest_.ranks = ranks;
    actualRequest_.options = options;
    submitRequest("/admin/remove/ranks", actualRequest_, response_, false);
    return response_;
}

AdminRepairTableResponse GPUdb::adminRepairTable( const AdminRepairTableRequest& request_ ) const
{
    AdminRepairTableResponse actualResponse_;
    submitRequest("/admin/repair/table", request_, actualResponse_, false);
    return actualResponse_;
}

AdminRepairTableResponse& GPUdb::adminRepairTable( const AdminRepairTableRequest& request_,
                                                   AdminRepairTableResponse& response_ ) const
{
    submitRequest("/admin/repair/table", request_, response_, false);
    return response_;
}

AdminRepairTableResponse GPUdb::adminRepairTable( const std::vector<std::string>& tableNames,
                                                  const std::map<std::string, std::string>& options ) const
{
    AdminRepairTableRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.options = options;
    AdminRepairTableResponse actualResponse_;
    submitRequest("/admin/repair/table", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminRepairTableResponse& GPUdb::adminRepairTable( const std::vector<std::string>& tableNames,
                                                   const std::map<std::string, std::string>& options,
                                                   AdminRepairTableResponse& response_ ) const
{
    AdminRepairTableRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.options = options;
    submitRequest("/admin/repair/table", actualRequest_, response_, false);
    return response_;
}

AdminShowAlertsResponse GPUdb::adminShowAlerts( const AdminShowAlertsRequest& request_ ) const
{
    AdminShowAlertsResponse actualResponse_;
    submitRequestToHostManager("/admin/show/alerts", request_, actualResponse_, false);
    return actualResponse_;
}

AdminShowAlertsResponse& GPUdb::adminShowAlerts( const AdminShowAlertsRequest& request_,
                                                 AdminShowAlertsResponse& response_ ) const
{
    submitRequestToHostManager("/admin/show/alerts", request_, response_, false);
    return response_;
}

AdminShowAlertsResponse GPUdb::adminShowAlerts( const int32_t numAlerts,
                                                const std::map<std::string, std::string>& options ) const
{
    AdminShowAlertsRequest actualRequest_;
    actualRequest_.numAlerts = numAlerts;
    actualRequest_.options = options;
    AdminShowAlertsResponse actualResponse_;
    submitRequestToHostManager("/admin/show/alerts", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminShowAlertsResponse& GPUdb::adminShowAlerts( const int32_t numAlerts,
                                                 const std::map<std::string, std::string>& options,
                                                 AdminShowAlertsResponse& response_ ) const
{
    AdminShowAlertsRequest actualRequest_;
    actualRequest_.numAlerts = numAlerts;
    actualRequest_.options = options;
    submitRequestToHostManager("/admin/show/alerts", actualRequest_, response_, false);
    return response_;
}

AdminShowClusterOperationsResponse GPUdb::adminShowClusterOperations( const AdminShowClusterOperationsRequest& request_ ) const
{
    AdminShowClusterOperationsResponse actualResponse_;
    submitRequest("/admin/show/cluster/operations", request_, actualResponse_, false);
    return actualResponse_;
}

AdminShowClusterOperationsResponse& GPUdb::adminShowClusterOperations( const AdminShowClusterOperationsRequest& request_,
                                                                       AdminShowClusterOperationsResponse& response_ ) const
{
    submitRequest("/admin/show/cluster/operations", request_, response_, false);
    return response_;
}

AdminShowClusterOperationsResponse GPUdb::adminShowClusterOperations( const int32_t historyIndex,
                                                                      const std::map<std::string, std::string>& options ) const
{
    AdminShowClusterOperationsRequest actualRequest_;
    actualRequest_.historyIndex = historyIndex;
    actualRequest_.options = options;
    AdminShowClusterOperationsResponse actualResponse_;
    submitRequest("/admin/show/cluster/operations", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminShowClusterOperationsResponse& GPUdb::adminShowClusterOperations( const int32_t historyIndex,
                                                                       const std::map<std::string, std::string>& options,
                                                                       AdminShowClusterOperationsResponse& response_ ) const
{
    AdminShowClusterOperationsRequest actualRequest_;
    actualRequest_.historyIndex = historyIndex;
    actualRequest_.options = options;
    submitRequest("/admin/show/cluster/operations", actualRequest_, response_, false);
    return response_;
}

AdminShowJobsResponse GPUdb::adminShowJobs( const AdminShowJobsRequest& request_ ) const
{
    AdminShowJobsResponse actualResponse_;
    submitRequest("/admin/show/jobs", request_, actualResponse_, false);
    return actualResponse_;
}

AdminShowJobsResponse& GPUdb::adminShowJobs( const AdminShowJobsRequest& request_,
                                             AdminShowJobsResponse& response_ ) const
{
    submitRequest("/admin/show/jobs", request_, response_, false);
    return response_;
}

AdminShowJobsResponse GPUdb::adminShowJobs( const std::map<std::string, std::string>& options ) const
{
    AdminShowJobsRequest actualRequest_;
    actualRequest_.options = options;
    AdminShowJobsResponse actualResponse_;
    submitRequest("/admin/show/jobs", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminShowJobsResponse& GPUdb::adminShowJobs( const std::map<std::string, std::string>& options,
                                             AdminShowJobsResponse& response_ ) const
{
    AdminShowJobsRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/admin/show/jobs", actualRequest_, response_, false);
    return response_;
}

AdminShowShardsResponse GPUdb::adminShowShards( const AdminShowShardsRequest& request_ ) const
{
    AdminShowShardsResponse actualResponse_;
    submitRequest("/admin/show/shards", request_, actualResponse_, false);
    return actualResponse_;
}

AdminShowShardsResponse& GPUdb::adminShowShards( const AdminShowShardsRequest& request_,
                                                 AdminShowShardsResponse& response_ ) const
{
    submitRequest("/admin/show/shards", request_, response_, false);
    return response_;
}

AdminShowShardsResponse GPUdb::adminShowShards( const std::map<std::string, std::string>& options ) const
{
    AdminShowShardsRequest actualRequest_;
    actualRequest_.options = options;
    AdminShowShardsResponse actualResponse_;
    submitRequest("/admin/show/shards", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminShowShardsResponse& GPUdb::adminShowShards( const std::map<std::string, std::string>& options,
                                                 AdminShowShardsResponse& response_ ) const
{
    AdminShowShardsRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/admin/show/shards", actualRequest_, response_, false);
    return response_;
}

AdminShutdownResponse GPUdb::adminShutdown( const AdminShutdownRequest& request_ ) const
{
    AdminShutdownResponse actualResponse_;
    submitRequest("/admin/shutdown", request_, actualResponse_, false);
    return actualResponse_;
}

AdminShutdownResponse& GPUdb::adminShutdown( const AdminShutdownRequest& request_,
                                             AdminShutdownResponse& response_ ) const
{
    submitRequest("/admin/shutdown", request_, response_, false);
    return response_;
}

AdminShutdownResponse GPUdb::adminShutdown( const std::string& exitType,
                                            const std::string& authorization,
                                            const std::map<std::string, std::string>& options ) const
{
    AdminShutdownRequest actualRequest_;
    actualRequest_.exitType = exitType;
    actualRequest_.authorization = authorization;
    actualRequest_.options = options;
    AdminShutdownResponse actualResponse_;
    submitRequest("/admin/shutdown", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminShutdownResponse& GPUdb::adminShutdown( const std::string& exitType,
                                             const std::string& authorization,
                                             const std::map<std::string, std::string>& options,
                                             AdminShutdownResponse& response_ ) const
{
    AdminShutdownRequest actualRequest_;
    actualRequest_.exitType = exitType;
    actualRequest_.authorization = authorization;
    actualRequest_.options = options;
    submitRequest("/admin/shutdown", actualRequest_, response_, false);
    return response_;
}

AdminSwitchoverResponse GPUdb::adminSwitchover( const AdminSwitchoverRequest& request_ ) const
{
    AdminSwitchoverResponse actualResponse_;
    submitRequestToHostManager("/admin/switchover", request_, actualResponse_, false);
    return actualResponse_;
}

AdminSwitchoverResponse& GPUdb::adminSwitchover( const AdminSwitchoverRequest& request_,
                                                 AdminSwitchoverResponse& response_ ) const
{
    submitRequestToHostManager("/admin/switchover", request_, response_, false);
    return response_;
}

AdminSwitchoverResponse GPUdb::adminSwitchover( const std::vector<std::string>& processes,
                                                const std::vector<std::string>& destinations,
                                                const std::map<std::string, std::string>& options ) const
{
    AdminSwitchoverRequest actualRequest_;
    actualRequest_.processes = processes;
    actualRequest_.destinations = destinations;
    actualRequest_.options = options;
    AdminSwitchoverResponse actualResponse_;
    submitRequestToHostManager("/admin/switchover", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminSwitchoverResponse& GPUdb::adminSwitchover( const std::vector<std::string>& processes,
                                                 const std::vector<std::string>& destinations,
                                                 const std::map<std::string, std::string>& options,
                                                 AdminSwitchoverResponse& response_ ) const
{
    AdminSwitchoverRequest actualRequest_;
    actualRequest_.processes = processes;
    actualRequest_.destinations = destinations;
    actualRequest_.options = options;
    submitRequestToHostManager("/admin/switchover", actualRequest_, response_, false);
    return response_;
}

AdminVerifyDbResponse GPUdb::adminVerifyDb( const AdminVerifyDbRequest& request_ ) const
{
    AdminVerifyDbResponse actualResponse_;
    submitRequest("/admin/verifydb", request_, actualResponse_, false);
    return actualResponse_;
}

AdminVerifyDbResponse& GPUdb::adminVerifyDb( const AdminVerifyDbRequest& request_,
                                             AdminVerifyDbResponse& response_ ) const
{
    submitRequest("/admin/verifydb", request_, response_, false);
    return response_;
}

AdminVerifyDbResponse GPUdb::adminVerifyDb( const std::map<std::string, std::string>& options ) const
{
    AdminVerifyDbRequest actualRequest_;
    actualRequest_.options = options;
    AdminVerifyDbResponse actualResponse_;
    submitRequest("/admin/verifydb", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AdminVerifyDbResponse& GPUdb::adminVerifyDb( const std::map<std::string, std::string>& options,
                                             AdminVerifyDbResponse& response_ ) const
{
    AdminVerifyDbRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/admin/verifydb", actualRequest_, response_, false);
    return response_;
}

AggregateConvexHullResponse GPUdb::aggregateConvexHull( const AggregateConvexHullRequest& request_ ) const
{
    AggregateConvexHullResponse actualResponse_;
    submitRequest("/aggregate/convexhull", request_, actualResponse_, false);
    return actualResponse_;
}

AggregateConvexHullResponse& GPUdb::aggregateConvexHull( const AggregateConvexHullRequest& request_,
                                                         AggregateConvexHullResponse& response_ ) const
{
    submitRequest("/aggregate/convexhull", request_, response_, false);
    return response_;
}

AggregateConvexHullResponse GPUdb::aggregateConvexHull( const std::string& tableName,
                                                        const std::string& xColumnName,
                                                        const std::string& yColumnName,
                                                        const std::map<std::string, std::string>& options ) const
{
    AggregateConvexHullRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.options = options;
    AggregateConvexHullResponse actualResponse_;
    submitRequest("/aggregate/convexhull", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AggregateConvexHullResponse& GPUdb::aggregateConvexHull( const std::string& tableName,
                                                         const std::string& xColumnName,
                                                         const std::string& yColumnName,
                                                         const std::map<std::string, std::string>& options,
                                                         AggregateConvexHullResponse& response_ ) const
{
    AggregateConvexHullRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.options = options;
    submitRequest("/aggregate/convexhull", actualRequest_, response_, false);
    return response_;
}

RawAggregateGroupByResponse GPUdb::aggregateGroupByRaw( const AggregateGroupByRequest& request_ ) const
{
    RawAggregateGroupByResponse actualResponse_;
    submitRequest("/aggregate/groupby", request_, actualResponse_, false);
    return actualResponse_;
}

RawAggregateGroupByResponse& GPUdb::aggregateGroupByRaw( const AggregateGroupByRequest& request_,
                                                         RawAggregateGroupByResponse& response_ ) const
{
    submitRequest("/aggregate/groupby", request_, response_, false);
    return response_;
}

AggregateGroupByResponse GPUdb::aggregateGroupBy( const AggregateGroupByRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawAggregateGroupByResponse actualResponse_;
    submitRequest("/aggregate/groupby", request_, actualResponse_, false);
    AggregateGroupByResponse response_;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

AggregateGroupByResponse& GPUdb::aggregateGroupBy( const AggregateGroupByRequest& request_,
                                                   AggregateGroupByResponse& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawAggregateGroupByResponse actualResponse_;
    submitRequest("/aggregate/groupby", request_, actualResponse_, false);
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

AggregateGroupByResponse GPUdb::aggregateGroupBy( const std::string& tableName,
                                                  const std::vector<std::string>& columnNames,
                                                  const int64_t offset,
                                                  const int64_t limit,
                                                  const std::map<std::string, std::string>& options ) const
{
    AggregateGroupByRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnNames = columnNames;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawAggregateGroupByResponse actualResponse_;
    submitRequest("/aggregate/groupby", actualRequest_, actualResponse_, false);
    AggregateGroupByResponse response_;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

AggregateGroupByResponse& GPUdb::aggregateGroupBy( const std::string& tableName,
                                                   const std::vector<std::string>& columnNames,
                                                   const int64_t offset,
                                                   const int64_t limit,
                                                   const std::map<std::string, std::string>& options,
                                                   AggregateGroupByResponse& response_ ) const
{
    AggregateGroupByRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnNames = columnNames;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawAggregateGroupByResponse actualResponse_;
    submitRequest("/aggregate/groupby", actualRequest_, actualResponse_, false);
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

AggregateHistogramResponse GPUdb::aggregateHistogram( const AggregateHistogramRequest& request_ ) const
{
    AggregateHistogramResponse actualResponse_;
    submitRequest("/aggregate/histogram", request_, actualResponse_, false);
    return actualResponse_;
}

AggregateHistogramResponse& GPUdb::aggregateHistogram( const AggregateHistogramRequest& request_,
                                                       AggregateHistogramResponse& response_ ) const
{
    submitRequest("/aggregate/histogram", request_, response_, false);
    return response_;
}

AggregateHistogramResponse GPUdb::aggregateHistogram( const std::string& tableName,
                                                      const std::string& columnName,
                                                      const double start,
                                                      const double end,
                                                      const double interval,
                                                      const std::map<std::string, std::string>& options ) const
{
    AggregateHistogramRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnName = columnName;
    actualRequest_.start = start;
    actualRequest_.end = end;
    actualRequest_.interval = interval;
    actualRequest_.options = options;
    AggregateHistogramResponse actualResponse_;
    submitRequest("/aggregate/histogram", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AggregateHistogramResponse& GPUdb::aggregateHistogram( const std::string& tableName,
                                                       const std::string& columnName,
                                                       const double start,
                                                       const double end,
                                                       const double interval,
                                                       const std::map<std::string, std::string>& options,
                                                       AggregateHistogramResponse& response_ ) const
{
    AggregateHistogramRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnName = columnName;
    actualRequest_.start = start;
    actualRequest_.end = end;
    actualRequest_.interval = interval;
    actualRequest_.options = options;
    submitRequest("/aggregate/histogram", actualRequest_, response_, false);
    return response_;
}

AggregateKMeansResponse GPUdb::aggregateKMeans( const AggregateKMeansRequest& request_ ) const
{
    AggregateKMeansResponse actualResponse_;
    submitRequest("/aggregate/kmeans", request_, actualResponse_, false);
    return actualResponse_;
}

AggregateKMeansResponse& GPUdb::aggregateKMeans( const AggregateKMeansRequest& request_,
                                                 AggregateKMeansResponse& response_ ) const
{
    submitRequest("/aggregate/kmeans", request_, response_, false);
    return response_;
}

AggregateKMeansResponse GPUdb::aggregateKMeans( const std::string& tableName,
                                                const std::vector<std::string>& columnNames,
                                                const int32_t k,
                                                const double tolerance,
                                                const std::map<std::string, std::string>& options ) const
{
    AggregateKMeansRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnNames = columnNames;
    actualRequest_.k = k;
    actualRequest_.tolerance = tolerance;
    actualRequest_.options = options;
    AggregateKMeansResponse actualResponse_;
    submitRequest("/aggregate/kmeans", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AggregateKMeansResponse& GPUdb::aggregateKMeans( const std::string& tableName,
                                                 const std::vector<std::string>& columnNames,
                                                 const int32_t k,
                                                 const double tolerance,
                                                 const std::map<std::string, std::string>& options,
                                                 AggregateKMeansResponse& response_ ) const
{
    AggregateKMeansRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnNames = columnNames;
    actualRequest_.k = k;
    actualRequest_.tolerance = tolerance;
    actualRequest_.options = options;
    submitRequest("/aggregate/kmeans", actualRequest_, response_, false);
    return response_;
}

AggregateMinMaxResponse GPUdb::aggregateMinMax( const AggregateMinMaxRequest& request_ ) const
{
    AggregateMinMaxResponse actualResponse_;
    submitRequest("/aggregate/minmax", request_, actualResponse_, false);
    return actualResponse_;
}

AggregateMinMaxResponse& GPUdb::aggregateMinMax( const AggregateMinMaxRequest& request_,
                                                 AggregateMinMaxResponse& response_ ) const
{
    submitRequest("/aggregate/minmax", request_, response_, false);
    return response_;
}

AggregateMinMaxResponse GPUdb::aggregateMinMax( const std::string& tableName,
                                                const std::string& columnName,
                                                const std::map<std::string, std::string>& options ) const
{
    AggregateMinMaxRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnName = columnName;
    actualRequest_.options = options;
    AggregateMinMaxResponse actualResponse_;
    submitRequest("/aggregate/minmax", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AggregateMinMaxResponse& GPUdb::aggregateMinMax( const std::string& tableName,
                                                 const std::string& columnName,
                                                 const std::map<std::string, std::string>& options,
                                                 AggregateMinMaxResponse& response_ ) const
{
    AggregateMinMaxRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnName = columnName;
    actualRequest_.options = options;
    submitRequest("/aggregate/minmax", actualRequest_, response_, false);
    return response_;
}

AggregateMinMaxGeometryResponse GPUdb::aggregateMinMaxGeometry( const AggregateMinMaxGeometryRequest& request_ ) const
{
    AggregateMinMaxGeometryResponse actualResponse_;
    submitRequest("/aggregate/minmax/geometry", request_, actualResponse_, false);
    return actualResponse_;
}

AggregateMinMaxGeometryResponse& GPUdb::aggregateMinMaxGeometry( const AggregateMinMaxGeometryRequest& request_,
                                                                 AggregateMinMaxGeometryResponse& response_ ) const
{
    submitRequest("/aggregate/minmax/geometry", request_, response_, false);
    return response_;
}

AggregateMinMaxGeometryResponse GPUdb::aggregateMinMaxGeometry( const std::string& tableName,
                                                                const std::string& columnName,
                                                                const std::map<std::string, std::string>& options ) const
{
    AggregateMinMaxGeometryRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnName = columnName;
    actualRequest_.options = options;
    AggregateMinMaxGeometryResponse actualResponse_;
    submitRequest("/aggregate/minmax/geometry", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AggregateMinMaxGeometryResponse& GPUdb::aggregateMinMaxGeometry( const std::string& tableName,
                                                                 const std::string& columnName,
                                                                 const std::map<std::string, std::string>& options,
                                                                 AggregateMinMaxGeometryResponse& response_ ) const
{
    AggregateMinMaxGeometryRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnName = columnName;
    actualRequest_.options = options;
    submitRequest("/aggregate/minmax/geometry", actualRequest_, response_, false);
    return response_;
}

AggregateStatisticsResponse GPUdb::aggregateStatistics( const AggregateStatisticsRequest& request_ ) const
{
    AggregateStatisticsResponse actualResponse_;
    submitRequest("/aggregate/statistics", request_, actualResponse_, false);
    return actualResponse_;
}

AggregateStatisticsResponse& GPUdb::aggregateStatistics( const AggregateStatisticsRequest& request_,
                                                         AggregateStatisticsResponse& response_ ) const
{
    submitRequest("/aggregate/statistics", request_, response_, false);
    return response_;
}

AggregateStatisticsResponse GPUdb::aggregateStatistics( const std::string& tableName,
                                                        const std::string& columnName,
                                                        const std::string& stats,
                                                        const std::map<std::string, std::string>& options ) const
{
    AggregateStatisticsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnName = columnName;
    actualRequest_.stats = stats;
    actualRequest_.options = options;
    AggregateStatisticsResponse actualResponse_;
    submitRequest("/aggregate/statistics", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AggregateStatisticsResponse& GPUdb::aggregateStatistics( const std::string& tableName,
                                                         const std::string& columnName,
                                                         const std::string& stats,
                                                         const std::map<std::string, std::string>& options,
                                                         AggregateStatisticsResponse& response_ ) const
{
    AggregateStatisticsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnName = columnName;
    actualRequest_.stats = stats;
    actualRequest_.options = options;
    submitRequest("/aggregate/statistics", actualRequest_, response_, false);
    return response_;
}

AggregateStatisticsByRangeResponse GPUdb::aggregateStatisticsByRange( const AggregateStatisticsByRangeRequest& request_ ) const
{
    AggregateStatisticsByRangeResponse actualResponse_;
    submitRequest("/aggregate/statistics/byrange", request_, actualResponse_, false);
    return actualResponse_;
}

AggregateStatisticsByRangeResponse& GPUdb::aggregateStatisticsByRange( const AggregateStatisticsByRangeRequest& request_,
                                                                       AggregateStatisticsByRangeResponse& response_ ) const
{
    submitRequest("/aggregate/statistics/byrange", request_, response_, false);
    return response_;
}

AggregateStatisticsByRangeResponse GPUdb::aggregateStatisticsByRange( const std::string& tableName,
                                                                      const std::string& selectExpression,
                                                                      const std::string& columnName,
                                                                      const std::string& valueColumnName,
                                                                      const std::string& stats,
                                                                      const double start,
                                                                      const double end,
                                                                      const double interval,
                                                                      const std::map<std::string, std::string>& options ) const
{
    AggregateStatisticsByRangeRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.selectExpression = selectExpression;
    actualRequest_.columnName = columnName;
    actualRequest_.valueColumnName = valueColumnName;
    actualRequest_.stats = stats;
    actualRequest_.start = start;
    actualRequest_.end = end;
    actualRequest_.interval = interval;
    actualRequest_.options = options;
    AggregateStatisticsByRangeResponse actualResponse_;
    submitRequest("/aggregate/statistics/byrange", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AggregateStatisticsByRangeResponse& GPUdb::aggregateStatisticsByRange( const std::string& tableName,
                                                                       const std::string& selectExpression,
                                                                       const std::string& columnName,
                                                                       const std::string& valueColumnName,
                                                                       const std::string& stats,
                                                                       const double start,
                                                                       const double end,
                                                                       const double interval,
                                                                       const std::map<std::string, std::string>& options,
                                                                       AggregateStatisticsByRangeResponse& response_ ) const
{
    AggregateStatisticsByRangeRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.selectExpression = selectExpression;
    actualRequest_.columnName = columnName;
    actualRequest_.valueColumnName = valueColumnName;
    actualRequest_.stats = stats;
    actualRequest_.start = start;
    actualRequest_.end = end;
    actualRequest_.interval = interval;
    actualRequest_.options = options;
    submitRequest("/aggregate/statistics/byrange", actualRequest_, response_, false);
    return response_;
}

RawAggregateUniqueResponse GPUdb::aggregateUniqueRaw( const AggregateUniqueRequest& request_ ) const
{
    RawAggregateUniqueResponse actualResponse_;
    submitRequest("/aggregate/unique", request_, actualResponse_, false);
    return actualResponse_;
}

RawAggregateUniqueResponse& GPUdb::aggregateUniqueRaw( const AggregateUniqueRequest& request_,
                                                       RawAggregateUniqueResponse& response_ ) const
{
    submitRequest("/aggregate/unique", request_, response_, false);
    return response_;
}

AggregateUniqueResponse GPUdb::aggregateUnique( const AggregateUniqueRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawAggregateUniqueResponse actualResponse_;
    submitRequest("/aggregate/unique", request_, actualResponse_, false);
    AggregateUniqueResponse response_;
    response_.tableName = actualResponse_.tableName;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

AggregateUniqueResponse& GPUdb::aggregateUnique( const AggregateUniqueRequest& request_,
                                                 AggregateUniqueResponse& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawAggregateUniqueResponse actualResponse_;
    submitRequest("/aggregate/unique", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

AggregateUniqueResponse GPUdb::aggregateUnique( const std::string& tableName,
                                                const std::string& columnName,
                                                const int64_t offset,
                                                const int64_t limit,
                                                const std::map<std::string, std::string>& options ) const
{
    AggregateUniqueRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnName = columnName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawAggregateUniqueResponse actualResponse_;
    submitRequest("/aggregate/unique", actualRequest_, actualResponse_, false);
    AggregateUniqueResponse response_;
    response_.tableName = actualResponse_.tableName;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

AggregateUniqueResponse& GPUdb::aggregateUnique( const std::string& tableName,
                                                 const std::string& columnName,
                                                 const int64_t offset,
                                                 const int64_t limit,
                                                 const std::map<std::string, std::string>& options,
                                                 AggregateUniqueResponse& response_ ) const
{
    AggregateUniqueRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnName = columnName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawAggregateUniqueResponse actualResponse_;
    submitRequest("/aggregate/unique", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

RawAggregateUnpivotResponse GPUdb::aggregateUnpivotRaw( const AggregateUnpivotRequest& request_ ) const
{
    RawAggregateUnpivotResponse actualResponse_;
    submitRequest("/aggregate/unpivot", request_, actualResponse_, false);
    return actualResponse_;
}

RawAggregateUnpivotResponse& GPUdb::aggregateUnpivotRaw( const AggregateUnpivotRequest& request_,
                                                         RawAggregateUnpivotResponse& response_ ) const
{
    submitRequest("/aggregate/unpivot", request_, response_, false);
    return response_;
}

AggregateUnpivotResponse GPUdb::aggregateUnpivot( const AggregateUnpivotRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawAggregateUnpivotResponse actualResponse_;
    submitRequest("/aggregate/unpivot", request_, actualResponse_, false);
    AggregateUnpivotResponse response_;
    response_.tableName = actualResponse_.tableName;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

AggregateUnpivotResponse& GPUdb::aggregateUnpivot( const AggregateUnpivotRequest& request_,
                                                   AggregateUnpivotResponse& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawAggregateUnpivotResponse actualResponse_;
    submitRequest("/aggregate/unpivot", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

AggregateUnpivotResponse GPUdb::aggregateUnpivot( const std::string& tableName,
                                                  const std::vector<std::string>& columnNames,
                                                  const std::string& variableColumnName,
                                                  const std::string& valueColumnName,
                                                  const std::vector<std::string>& pivotedColumns,
                                                  const std::map<std::string, std::string>& options ) const
{
    AggregateUnpivotRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnNames = columnNames;
    actualRequest_.variableColumnName = variableColumnName;
    actualRequest_.valueColumnName = valueColumnName;
    actualRequest_.pivotedColumns = pivotedColumns;
    actualRequest_.options = options;
    RawAggregateUnpivotResponse actualResponse_;
    submitRequest("/aggregate/unpivot", actualRequest_, actualResponse_, false);
    AggregateUnpivotResponse response_;
    response_.tableName = actualResponse_.tableName;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

AggregateUnpivotResponse& GPUdb::aggregateUnpivot( const std::string& tableName,
                                                   const std::vector<std::string>& columnNames,
                                                   const std::string& variableColumnName,
                                                   const std::string& valueColumnName,
                                                   const std::vector<std::string>& pivotedColumns,
                                                   const std::map<std::string, std::string>& options,
                                                   AggregateUnpivotResponse& response_ ) const
{
    AggregateUnpivotRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnNames = columnNames;
    actualRequest_.variableColumnName = variableColumnName;
    actualRequest_.valueColumnName = valueColumnName;
    actualRequest_.pivotedColumns = pivotedColumns;
    actualRequest_.options = options;
    RawAggregateUnpivotResponse actualResponse_;
    submitRequest("/aggregate/unpivot", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

AlterCredentialResponse GPUdb::alterCredential( const AlterCredentialRequest& request_ ) const
{
    AlterCredentialResponse actualResponse_;
    submitRequest("/alter/credential", request_, actualResponse_, false);
    return actualResponse_;
}

AlterCredentialResponse& GPUdb::alterCredential( const AlterCredentialRequest& request_,
                                                 AlterCredentialResponse& response_ ) const
{
    submitRequest("/alter/credential", request_, response_, false);
    return response_;
}

AlterCredentialResponse GPUdb::alterCredential( const std::string& credentialName,
                                                const std::map<std::string, std::string>& credentialUpdatesMap,
                                                const std::map<std::string, std::string>& options ) const
{
    AlterCredentialRequest actualRequest_;
    actualRequest_.credentialName = credentialName;
    actualRequest_.credentialUpdatesMap = credentialUpdatesMap;
    actualRequest_.options = options;
    AlterCredentialResponse actualResponse_;
    submitRequest("/alter/credential", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterCredentialResponse& GPUdb::alterCredential( const std::string& credentialName,
                                                 const std::map<std::string, std::string>& credentialUpdatesMap,
                                                 const std::map<std::string, std::string>& options,
                                                 AlterCredentialResponse& response_ ) const
{
    AlterCredentialRequest actualRequest_;
    actualRequest_.credentialName = credentialName;
    actualRequest_.credentialUpdatesMap = credentialUpdatesMap;
    actualRequest_.options = options;
    submitRequest("/alter/credential", actualRequest_, response_, false);
    return response_;
}

AlterDatasinkResponse GPUdb::alterDatasink( const AlterDatasinkRequest& request_ ) const
{
    AlterDatasinkResponse actualResponse_;
    submitRequest("/alter/datasink", request_, actualResponse_, false);
    return actualResponse_;
}

AlterDatasinkResponse& GPUdb::alterDatasink( const AlterDatasinkRequest& request_,
                                             AlterDatasinkResponse& response_ ) const
{
    submitRequest("/alter/datasink", request_, response_, false);
    return response_;
}

AlterDatasinkResponse GPUdb::alterDatasink( const std::string& name,
                                            const std::map<std::string, std::string>& datasinkUpdatesMap,
                                            const std::map<std::string, std::string>& options ) const
{
    AlterDatasinkRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.datasinkUpdatesMap = datasinkUpdatesMap;
    actualRequest_.options = options;
    AlterDatasinkResponse actualResponse_;
    submitRequest("/alter/datasink", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterDatasinkResponse& GPUdb::alterDatasink( const std::string& name,
                                             const std::map<std::string, std::string>& datasinkUpdatesMap,
                                             const std::map<std::string, std::string>& options,
                                             AlterDatasinkResponse& response_ ) const
{
    AlterDatasinkRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.datasinkUpdatesMap = datasinkUpdatesMap;
    actualRequest_.options = options;
    submitRequest("/alter/datasink", actualRequest_, response_, false);
    return response_;
}

AlterDatasourceResponse GPUdb::alterDatasource( const AlterDatasourceRequest& request_ ) const
{
    AlterDatasourceResponse actualResponse_;
    submitRequest("/alter/datasource", request_, actualResponse_, false);
    return actualResponse_;
}

AlterDatasourceResponse& GPUdb::alterDatasource( const AlterDatasourceRequest& request_,
                                                 AlterDatasourceResponse& response_ ) const
{
    submitRequest("/alter/datasource", request_, response_, false);
    return response_;
}

AlterDatasourceResponse GPUdb::alterDatasource( const std::string& name,
                                                const std::map<std::string, std::string>& datasourceUpdatesMap,
                                                const std::map<std::string, std::string>& options ) const
{
    AlterDatasourceRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.datasourceUpdatesMap = datasourceUpdatesMap;
    actualRequest_.options = options;
    AlterDatasourceResponse actualResponse_;
    submitRequest("/alter/datasource", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterDatasourceResponse& GPUdb::alterDatasource( const std::string& name,
                                                 const std::map<std::string, std::string>& datasourceUpdatesMap,
                                                 const std::map<std::string, std::string>& options,
                                                 AlterDatasourceResponse& response_ ) const
{
    AlterDatasourceRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.datasourceUpdatesMap = datasourceUpdatesMap;
    actualRequest_.options = options;
    submitRequest("/alter/datasource", actualRequest_, response_, false);
    return response_;
}

AlterDirectoryResponse GPUdb::alterDirectory( const AlterDirectoryRequest& request_ ) const
{
    AlterDirectoryResponse actualResponse_;
    submitRequest("/alter/directory", request_, actualResponse_, false);
    return actualResponse_;
}

AlterDirectoryResponse& GPUdb::alterDirectory( const AlterDirectoryRequest& request_,
                                               AlterDirectoryResponse& response_ ) const
{
    submitRequest("/alter/directory", request_, response_, false);
    return response_;
}

AlterDirectoryResponse GPUdb::alterDirectory( const std::string& directoryName,
                                              const std::map<std::string, std::string>& directoryUpdatesMap,
                                              const std::map<std::string, std::string>& options ) const
{
    AlterDirectoryRequest actualRequest_;
    actualRequest_.directoryName = directoryName;
    actualRequest_.directoryUpdatesMap = directoryUpdatesMap;
    actualRequest_.options = options;
    AlterDirectoryResponse actualResponse_;
    submitRequest("/alter/directory", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterDirectoryResponse& GPUdb::alterDirectory( const std::string& directoryName,
                                               const std::map<std::string, std::string>& directoryUpdatesMap,
                                               const std::map<std::string, std::string>& options,
                                               AlterDirectoryResponse& response_ ) const
{
    AlterDirectoryRequest actualRequest_;
    actualRequest_.directoryName = directoryName;
    actualRequest_.directoryUpdatesMap = directoryUpdatesMap;
    actualRequest_.options = options;
    submitRequest("/alter/directory", actualRequest_, response_, false);
    return response_;
}

AlterEnvironmentResponse GPUdb::alterEnvironment( const AlterEnvironmentRequest& request_ ) const
{
    AlterEnvironmentResponse actualResponse_;
    submitRequest("/alter/environment", request_, actualResponse_, false);
    return actualResponse_;
}

AlterEnvironmentResponse& GPUdb::alterEnvironment( const AlterEnvironmentRequest& request_,
                                                   AlterEnvironmentResponse& response_ ) const
{
    submitRequest("/alter/environment", request_, response_, false);
    return response_;
}

AlterEnvironmentResponse GPUdb::alterEnvironment( const std::string& environmentName,
                                                  const std::string& action,
                                                  const std::string& value,
                                                  const std::map<std::string, std::string>& options ) const
{
    AlterEnvironmentRequest actualRequest_;
    actualRequest_.environmentName = environmentName;
    actualRequest_.action = action;
    actualRequest_.value = value;
    actualRequest_.options = options;
    AlterEnvironmentResponse actualResponse_;
    submitRequest("/alter/environment", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterEnvironmentResponse& GPUdb::alterEnvironment( const std::string& environmentName,
                                                   const std::string& action,
                                                   const std::string& value,
                                                   const std::map<std::string, std::string>& options,
                                                   AlterEnvironmentResponse& response_ ) const
{
    AlterEnvironmentRequest actualRequest_;
    actualRequest_.environmentName = environmentName;
    actualRequest_.action = action;
    actualRequest_.value = value;
    actualRequest_.options = options;
    submitRequest("/alter/environment", actualRequest_, response_, false);
    return response_;
}

AlterGraphResponse GPUdb::alterGraph( const AlterGraphRequest& request_ ) const
{
    AlterGraphResponse actualResponse_;
    submitRequest("/alter/graph", request_, actualResponse_, false);
    return actualResponse_;
}

AlterGraphResponse& GPUdb::alterGraph( const AlterGraphRequest& request_,
                                       AlterGraphResponse& response_ ) const
{
    submitRequest("/alter/graph", request_, response_, false);
    return response_;
}

AlterGraphResponse GPUdb::alterGraph( const std::string& graphName,
                                      const std::string& action,
                                      const std::string& actionArg,
                                      const std::map<std::string, std::string>& options ) const
{
    AlterGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.action = action;
    actualRequest_.actionArg = actionArg;
    actualRequest_.options = options;
    AlterGraphResponse actualResponse_;
    submitRequest("/alter/graph", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterGraphResponse& GPUdb::alterGraph( const std::string& graphName,
                                       const std::string& action,
                                       const std::string& actionArg,
                                       const std::map<std::string, std::string>& options,
                                       AlterGraphResponse& response_ ) const
{
    AlterGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.action = action;
    actualRequest_.actionArg = actionArg;
    actualRequest_.options = options;
    submitRequest("/alter/graph", actualRequest_, response_, false);
    return response_;
}

AlterModelResponse GPUdb::alterModel( const AlterModelRequest& request_ ) const
{
    AlterModelResponse actualResponse_;
    submitRequest("/alter/model", request_, actualResponse_, false);
    return actualResponse_;
}

AlterModelResponse& GPUdb::alterModel( const AlterModelRequest& request_,
                                       AlterModelResponse& response_ ) const
{
    submitRequest("/alter/model", request_, response_, false);
    return response_;
}

AlterModelResponse GPUdb::alterModel( const std::string& modelName,
                                      const std::string& action,
                                      const std::string& value,
                                      const std::map<std::string, std::string>& options ) const
{
    AlterModelRequest actualRequest_;
    actualRequest_.modelName = modelName;
    actualRequest_.action = action;
    actualRequest_.value = value;
    actualRequest_.options = options;
    AlterModelResponse actualResponse_;
    submitRequest("/alter/model", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterModelResponse& GPUdb::alterModel( const std::string& modelName,
                                       const std::string& action,
                                       const std::string& value,
                                       const std::map<std::string, std::string>& options,
                                       AlterModelResponse& response_ ) const
{
    AlterModelRequest actualRequest_;
    actualRequest_.modelName = modelName;
    actualRequest_.action = action;
    actualRequest_.value = value;
    actualRequest_.options = options;
    submitRequest("/alter/model", actualRequest_, response_, false);
    return response_;
}

AlterResourceGroupResponse GPUdb::alterResourceGroup( const AlterResourceGroupRequest& request_ ) const
{
    AlterResourceGroupResponse actualResponse_;
    submitRequest("/alter/resourcegroup", request_, actualResponse_, false);
    return actualResponse_;
}

AlterResourceGroupResponse& GPUdb::alterResourceGroup( const AlterResourceGroupRequest& request_,
                                                       AlterResourceGroupResponse& response_ ) const
{
    submitRequest("/alter/resourcegroup", request_, response_, false);
    return response_;
}

AlterResourceGroupResponse GPUdb::alterResourceGroup( const std::string& name,
                                                      const std::map<std::string, std::map<std::string, std::string> >& tierAttributes,
                                                      const std::string& ranking,
                                                      const std::string& adjoiningResourceGroup,
                                                      const std::map<std::string, std::string>& options ) const
{
    AlterResourceGroupRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.tierAttributes = tierAttributes;
    actualRequest_.ranking = ranking;
    actualRequest_.adjoiningResourceGroup = adjoiningResourceGroup;
    actualRequest_.options = options;
    AlterResourceGroupResponse actualResponse_;
    submitRequest("/alter/resourcegroup", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterResourceGroupResponse& GPUdb::alterResourceGroup( const std::string& name,
                                                       const std::map<std::string, std::map<std::string, std::string> >& tierAttributes,
                                                       const std::string& ranking,
                                                       const std::string& adjoiningResourceGroup,
                                                       const std::map<std::string, std::string>& options,
                                                       AlterResourceGroupResponse& response_ ) const
{
    AlterResourceGroupRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.tierAttributes = tierAttributes;
    actualRequest_.ranking = ranking;
    actualRequest_.adjoiningResourceGroup = adjoiningResourceGroup;
    actualRequest_.options = options;
    submitRequest("/alter/resourcegroup", actualRequest_, response_, false);
    return response_;
}

AlterRoleResponse GPUdb::alterRole( const AlterRoleRequest& request_ ) const
{
    AlterRoleResponse actualResponse_;
    submitRequest("/alter/role", request_, actualResponse_, false);
    return actualResponse_;
}

AlterRoleResponse& GPUdb::alterRole( const AlterRoleRequest& request_,
                                     AlterRoleResponse& response_ ) const
{
    submitRequest("/alter/role", request_, response_, false);
    return response_;
}

AlterRoleResponse GPUdb::alterRole( const std::string& name,
                                    const std::string& action,
                                    const std::string& value,
                                    const std::map<std::string, std::string>& options ) const
{
    AlterRoleRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.action = action;
    actualRequest_.value = value;
    actualRequest_.options = options;
    AlterRoleResponse actualResponse_;
    submitRequest("/alter/role", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterRoleResponse& GPUdb::alterRole( const std::string& name,
                                     const std::string& action,
                                     const std::string& value,
                                     const std::map<std::string, std::string>& options,
                                     AlterRoleResponse& response_ ) const
{
    AlterRoleRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.action = action;
    actualRequest_.value = value;
    actualRequest_.options = options;
    submitRequest("/alter/role", actualRequest_, response_, false);
    return response_;
}

AlterSchemaResponse GPUdb::alterSchema( const AlterSchemaRequest& request_ ) const
{
    AlterSchemaResponse actualResponse_;
    submitRequest("/alter/schema", request_, actualResponse_, false);
    return actualResponse_;
}

AlterSchemaResponse& GPUdb::alterSchema( const AlterSchemaRequest& request_,
                                         AlterSchemaResponse& response_ ) const
{
    submitRequest("/alter/schema", request_, response_, false);
    return response_;
}

AlterSchemaResponse GPUdb::alterSchema( const std::string& schemaName,
                                        const std::string& action,
                                        const std::string& value,
                                        const std::map<std::string, std::string>& options ) const
{
    AlterSchemaRequest actualRequest_;
    actualRequest_.schemaName = schemaName;
    actualRequest_.action = action;
    actualRequest_.value = value;
    actualRequest_.options = options;
    AlterSchemaResponse actualResponse_;
    submitRequest("/alter/schema", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterSchemaResponse& GPUdb::alterSchema( const std::string& schemaName,
                                         const std::string& action,
                                         const std::string& value,
                                         const std::map<std::string, std::string>& options,
                                         AlterSchemaResponse& response_ ) const
{
    AlterSchemaRequest actualRequest_;
    actualRequest_.schemaName = schemaName;
    actualRequest_.action = action;
    actualRequest_.value = value;
    actualRequest_.options = options;
    submitRequest("/alter/schema", actualRequest_, response_, false);
    return response_;
}

AlterSystemPropertiesResponse GPUdb::alterSystemProperties( const AlterSystemPropertiesRequest& request_ ) const
{
    AlterSystemPropertiesResponse actualResponse_;
    submitRequest("/alter/system/properties", request_, actualResponse_, false);
    return actualResponse_;
}

AlterSystemPropertiesResponse& GPUdb::alterSystemProperties( const AlterSystemPropertiesRequest& request_,
                                                             AlterSystemPropertiesResponse& response_ ) const
{
    submitRequest("/alter/system/properties", request_, response_, false);
    return response_;
}

AlterSystemPropertiesResponse GPUdb::alterSystemProperties( const std::map<std::string, std::string>& propertyUpdatesMap,
                                                            const std::map<std::string, std::string>& options ) const
{
    AlterSystemPropertiesRequest actualRequest_;
    actualRequest_.propertyUpdatesMap = propertyUpdatesMap;
    actualRequest_.options = options;
    AlterSystemPropertiesResponse actualResponse_;
    submitRequest("/alter/system/properties", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterSystemPropertiesResponse& GPUdb::alterSystemProperties( const std::map<std::string, std::string>& propertyUpdatesMap,
                                                             const std::map<std::string, std::string>& options,
                                                             AlterSystemPropertiesResponse& response_ ) const
{
    AlterSystemPropertiesRequest actualRequest_;
    actualRequest_.propertyUpdatesMap = propertyUpdatesMap;
    actualRequest_.options = options;
    submitRequest("/alter/system/properties", actualRequest_, response_, false);
    return response_;
}

AlterTableResponse GPUdb::alterTable( const AlterTableRequest& request_ ) const
{
    AlterTableResponse actualResponse_;
    submitRequest("/alter/table", request_, actualResponse_, false);
    return actualResponse_;
}

AlterTableResponse& GPUdb::alterTable( const AlterTableRequest& request_,
                                       AlterTableResponse& response_ ) const
{
    submitRequest("/alter/table", request_, response_, false);
    return response_;
}

AlterTableResponse GPUdb::alterTable( const std::string& tableName,
                                      const std::string& action,
                                      const std::string& value,
                                      const std::map<std::string, std::string>& options ) const
{
    AlterTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.action = action;
    actualRequest_.value = value;
    actualRequest_.options = options;
    AlterTableResponse actualResponse_;
    submitRequest("/alter/table", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterTableResponse& GPUdb::alterTable( const std::string& tableName,
                                       const std::string& action,
                                       const std::string& value,
                                       const std::map<std::string, std::string>& options,
                                       AlterTableResponse& response_ ) const
{
    AlterTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.action = action;
    actualRequest_.value = value;
    actualRequest_.options = options;
    submitRequest("/alter/table", actualRequest_, response_, false);
    return response_;
}

AlterTableColumnsResponse GPUdb::alterTableColumns( const AlterTableColumnsRequest& request_ ) const
{
    AlterTableColumnsResponse actualResponse_;
    submitRequest("/alter/table/columns", request_, actualResponse_, false);
    return actualResponse_;
}

AlterTableColumnsResponse& GPUdb::alterTableColumns( const AlterTableColumnsRequest& request_,
                                                     AlterTableColumnsResponse& response_ ) const
{
    submitRequest("/alter/table/columns", request_, response_, false);
    return response_;
}

AlterTableColumnsResponse GPUdb::alterTableColumns( const std::string& tableName,
                                                    const std::vector<std::map<std::string, std::string> >& columnAlterations,
                                                    const std::map<std::string, std::string>& options ) const
{
    AlterTableColumnsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnAlterations = columnAlterations;
    actualRequest_.options = options;
    AlterTableColumnsResponse actualResponse_;
    submitRequest("/alter/table/columns", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterTableColumnsResponse& GPUdb::alterTableColumns( const std::string& tableName,
                                                     const std::vector<std::map<std::string, std::string> >& columnAlterations,
                                                     const std::map<std::string, std::string>& options,
                                                     AlterTableColumnsResponse& response_ ) const
{
    AlterTableColumnsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnAlterations = columnAlterations;
    actualRequest_.options = options;
    submitRequest("/alter/table/columns", actualRequest_, response_, false);
    return response_;
}

AlterTableMetadataResponse GPUdb::alterTableMetadata( const AlterTableMetadataRequest& request_ ) const
{
    AlterTableMetadataResponse actualResponse_;
    submitRequest("/alter/table/metadata", request_, actualResponse_, false);
    return actualResponse_;
}

AlterTableMetadataResponse& GPUdb::alterTableMetadata( const AlterTableMetadataRequest& request_,
                                                       AlterTableMetadataResponse& response_ ) const
{
    submitRequest("/alter/table/metadata", request_, response_, false);
    return response_;
}

AlterTableMetadataResponse GPUdb::alterTableMetadata( const std::vector<std::string>& tableNames,
                                                      const std::map<std::string, std::string>& metadataMap,
                                                      const std::map<std::string, std::string>& options ) const
{
    AlterTableMetadataRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.metadataMap = metadataMap;
    actualRequest_.options = options;
    AlterTableMetadataResponse actualResponse_;
    submitRequest("/alter/table/metadata", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterTableMetadataResponse& GPUdb::alterTableMetadata( const std::vector<std::string>& tableNames,
                                                       const std::map<std::string, std::string>& metadataMap,
                                                       const std::map<std::string, std::string>& options,
                                                       AlterTableMetadataResponse& response_ ) const
{
    AlterTableMetadataRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.metadataMap = metadataMap;
    actualRequest_.options = options;
    submitRequest("/alter/table/metadata", actualRequest_, response_, false);
    return response_;
}

AlterTableMonitorResponse GPUdb::alterTableMonitor( const AlterTableMonitorRequest& request_ ) const
{
    AlterTableMonitorResponse actualResponse_;
    submitRequest("/alter/tablemonitor", request_, actualResponse_, false);
    return actualResponse_;
}

AlterTableMonitorResponse& GPUdb::alterTableMonitor( const AlterTableMonitorRequest& request_,
                                                     AlterTableMonitorResponse& response_ ) const
{
    submitRequest("/alter/tablemonitor", request_, response_, false);
    return response_;
}

AlterTableMonitorResponse GPUdb::alterTableMonitor( const std::string& topicId,
                                                    const std::map<std::string, std::string>& monitorUpdatesMap,
                                                    const std::map<std::string, std::string>& options ) const
{
    AlterTableMonitorRequest actualRequest_;
    actualRequest_.topicId = topicId;
    actualRequest_.monitorUpdatesMap = monitorUpdatesMap;
    actualRequest_.options = options;
    AlterTableMonitorResponse actualResponse_;
    submitRequest("/alter/tablemonitor", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterTableMonitorResponse& GPUdb::alterTableMonitor( const std::string& topicId,
                                                     const std::map<std::string, std::string>& monitorUpdatesMap,
                                                     const std::map<std::string, std::string>& options,
                                                     AlterTableMonitorResponse& response_ ) const
{
    AlterTableMonitorRequest actualRequest_;
    actualRequest_.topicId = topicId;
    actualRequest_.monitorUpdatesMap = monitorUpdatesMap;
    actualRequest_.options = options;
    submitRequest("/alter/tablemonitor", actualRequest_, response_, false);
    return response_;
}

AlterTierResponse GPUdb::alterTier( const AlterTierRequest& request_ ) const
{
    AlterTierResponse actualResponse_;
    submitRequest("/alter/tier", request_, actualResponse_, false);
    return actualResponse_;
}

AlterTierResponse& GPUdb::alterTier( const AlterTierRequest& request_,
                                     AlterTierResponse& response_ ) const
{
    submitRequest("/alter/tier", request_, response_, false);
    return response_;
}

AlterTierResponse GPUdb::alterTier( const std::string& name,
                                    const std::map<std::string, std::string>& options ) const
{
    AlterTierRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    AlterTierResponse actualResponse_;
    submitRequest("/alter/tier", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterTierResponse& GPUdb::alterTier( const std::string& name,
                                     const std::map<std::string, std::string>& options,
                                     AlterTierResponse& response_ ) const
{
    AlterTierRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    submitRequest("/alter/tier", actualRequest_, response_, false);
    return response_;
}

AlterUserResponse GPUdb::alterUser( const AlterUserRequest& request_ ) const
{
    AlterUserResponse actualResponse_;
    submitRequest("/alter/user", request_, actualResponse_, false);
    return actualResponse_;
}

AlterUserResponse& GPUdb::alterUser( const AlterUserRequest& request_,
                                     AlterUserResponse& response_ ) const
{
    submitRequest("/alter/user", request_, response_, false);
    return response_;
}

AlterUserResponse GPUdb::alterUser( const std::string& name,
                                    const std::string& action,
                                    const std::string& value,
                                    const std::map<std::string, std::string>& options ) const
{
    AlterUserRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.action = action;
    actualRequest_.value = value;
    actualRequest_.options = options;
    AlterUserResponse actualResponse_;
    submitRequest("/alter/user", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterUserResponse& GPUdb::alterUser( const std::string& name,
                                     const std::string& action,
                                     const std::string& value,
                                     const std::map<std::string, std::string>& options,
                                     AlterUserResponse& response_ ) const
{
    AlterUserRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.action = action;
    actualRequest_.value = value;
    actualRequest_.options = options;
    submitRequest("/alter/user", actualRequest_, response_, false);
    return response_;
}

AlterVideoResponse GPUdb::alterVideo( const AlterVideoRequest& request_ ) const
{
    AlterVideoResponse actualResponse_;
    submitRequest("/alter/video", request_, actualResponse_, false);
    return actualResponse_;
}

AlterVideoResponse& GPUdb::alterVideo( const AlterVideoRequest& request_,
                                       AlterVideoResponse& response_ ) const
{
    submitRequest("/alter/video", request_, response_, false);
    return response_;
}

AlterVideoResponse GPUdb::alterVideo( const std::string& path,
                                      const std::map<std::string, std::string>& options ) const
{
    AlterVideoRequest actualRequest_;
    actualRequest_.path = path;
    actualRequest_.options = options;
    AlterVideoResponse actualResponse_;
    submitRequest("/alter/video", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterVideoResponse& GPUdb::alterVideo( const std::string& path,
                                       const std::map<std::string, std::string>& options,
                                       AlterVideoResponse& response_ ) const
{
    AlterVideoRequest actualRequest_;
    actualRequest_.path = path;
    actualRequest_.options = options;
    submitRequest("/alter/video", actualRequest_, response_, false);
    return response_;
}

AlterWalResponse GPUdb::alterWal( const AlterWalRequest& request_ ) const
{
    AlterWalResponse actualResponse_;
    submitRequest("/alter/wal", request_, actualResponse_, false);
    return actualResponse_;
}

AlterWalResponse& GPUdb::alterWal( const AlterWalRequest& request_,
                                   AlterWalResponse& response_ ) const
{
    submitRequest("/alter/wal", request_, response_, false);
    return response_;
}

AlterWalResponse GPUdb::alterWal( const std::vector<std::string>& tableNames,
                                  const std::map<std::string, std::string>& options ) const
{
    AlterWalRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.options = options;
    AlterWalResponse actualResponse_;
    submitRequest("/alter/wal", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AlterWalResponse& GPUdb::alterWal( const std::vector<std::string>& tableNames,
                                   const std::map<std::string, std::string>& options,
                                   AlterWalResponse& response_ ) const
{
    AlterWalRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.options = options;
    submitRequest("/alter/wal", actualRequest_, response_, false);
    return response_;
}

AppendRecordsResponse GPUdb::appendRecords( const AppendRecordsRequest& request_ ) const
{
    AppendRecordsResponse actualResponse_;
    submitRequest("/append/records", request_, actualResponse_, false);
    return actualResponse_;
}

AppendRecordsResponse& GPUdb::appendRecords( const AppendRecordsRequest& request_,
                                             AppendRecordsResponse& response_ ) const
{
    submitRequest("/append/records", request_, response_, false);
    return response_;
}

AppendRecordsResponse GPUdb::appendRecords( const std::string& tableName,
                                            const std::string& sourceTableName,
                                            const std::map<std::string, std::string>& fieldMap,
                                            const std::map<std::string, std::string>& options ) const
{
    AppendRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.sourceTableName = sourceTableName;
    actualRequest_.fieldMap = fieldMap;
    actualRequest_.options = options;
    AppendRecordsResponse actualResponse_;
    submitRequest("/append/records", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

AppendRecordsResponse& GPUdb::appendRecords( const std::string& tableName,
                                             const std::string& sourceTableName,
                                             const std::map<std::string, std::string>& fieldMap,
                                             const std::map<std::string, std::string>& options,
                                             AppendRecordsResponse& response_ ) const
{
    AppendRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.sourceTableName = sourceTableName;
    actualRequest_.fieldMap = fieldMap;
    actualRequest_.options = options;
    submitRequest("/append/records", actualRequest_, response_, false);
    return response_;
}

ClearStatisticsResponse GPUdb::clearStatistics( const ClearStatisticsRequest& request_ ) const
{
    ClearStatisticsResponse actualResponse_;
    submitRequest("/clear/statistics", request_, actualResponse_, false);
    return actualResponse_;
}

ClearStatisticsResponse& GPUdb::clearStatistics( const ClearStatisticsRequest& request_,
                                                 ClearStatisticsResponse& response_ ) const
{
    submitRequest("/clear/statistics", request_, response_, false);
    return response_;
}

ClearStatisticsResponse GPUdb::clearStatistics( const std::string& tableName,
                                                const std::string& columnName,
                                                const std::map<std::string, std::string>& options ) const
{
    ClearStatisticsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnName = columnName;
    actualRequest_.options = options;
    ClearStatisticsResponse actualResponse_;
    submitRequest("/clear/statistics", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ClearStatisticsResponse& GPUdb::clearStatistics( const std::string& tableName,
                                                 const std::string& columnName,
                                                 const std::map<std::string, std::string>& options,
                                                 ClearStatisticsResponse& response_ ) const
{
    ClearStatisticsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnName = columnName;
    actualRequest_.options = options;
    submitRequest("/clear/statistics", actualRequest_, response_, false);
    return response_;
}

ClearTableResponse GPUdb::clearTable( const ClearTableRequest& request_ ) const
{
    ClearTableResponse actualResponse_;
    submitRequest("/clear/table", request_, actualResponse_, false);
    return actualResponse_;
}

ClearTableResponse& GPUdb::clearTable( const ClearTableRequest& request_,
                                       ClearTableResponse& response_ ) const
{
    submitRequest("/clear/table", request_, response_, false);
    return response_;
}

ClearTableResponse GPUdb::clearTable( const std::string& tableName,
                                      const std::string& authorization,
                                      const std::map<std::string, std::string>& options ) const
{
    ClearTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.authorization = authorization;
    actualRequest_.options = options;
    ClearTableResponse actualResponse_;
    submitRequest("/clear/table", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ClearTableResponse& GPUdb::clearTable( const std::string& tableName,
                                       const std::string& authorization,
                                       const std::map<std::string, std::string>& options,
                                       ClearTableResponse& response_ ) const
{
    ClearTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.authorization = authorization;
    actualRequest_.options = options;
    submitRequest("/clear/table", actualRequest_, response_, false);
    return response_;
}

ClearTableMonitorResponse GPUdb::clearTableMonitor( const ClearTableMonitorRequest& request_ ) const
{
    ClearTableMonitorResponse actualResponse_;
    submitRequest("/clear/tablemonitor", request_, actualResponse_, false);
    return actualResponse_;
}

ClearTableMonitorResponse& GPUdb::clearTableMonitor( const ClearTableMonitorRequest& request_,
                                                     ClearTableMonitorResponse& response_ ) const
{
    submitRequest("/clear/tablemonitor", request_, response_, false);
    return response_;
}

ClearTableMonitorResponse GPUdb::clearTableMonitor( const std::string& topicId,
                                                    const std::map<std::string, std::string>& options ) const
{
    ClearTableMonitorRequest actualRequest_;
    actualRequest_.topicId = topicId;
    actualRequest_.options = options;
    ClearTableMonitorResponse actualResponse_;
    submitRequest("/clear/tablemonitor", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ClearTableMonitorResponse& GPUdb::clearTableMonitor( const std::string& topicId,
                                                     const std::map<std::string, std::string>& options,
                                                     ClearTableMonitorResponse& response_ ) const
{
    ClearTableMonitorRequest actualRequest_;
    actualRequest_.topicId = topicId;
    actualRequest_.options = options;
    submitRequest("/clear/tablemonitor", actualRequest_, response_, false);
    return response_;
}

ClearTriggerResponse GPUdb::clearTrigger( const ClearTriggerRequest& request_ ) const
{
    ClearTriggerResponse actualResponse_;
    submitRequest("/clear/trigger", request_, actualResponse_, false);
    return actualResponse_;
}

ClearTriggerResponse& GPUdb::clearTrigger( const ClearTriggerRequest& request_,
                                           ClearTriggerResponse& response_ ) const
{
    submitRequest("/clear/trigger", request_, response_, false);
    return response_;
}

ClearTriggerResponse GPUdb::clearTrigger( const std::string& triggerId,
                                          const std::map<std::string, std::string>& options ) const
{
    ClearTriggerRequest actualRequest_;
    actualRequest_.triggerId = triggerId;
    actualRequest_.options = options;
    ClearTriggerResponse actualResponse_;
    submitRequest("/clear/trigger", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ClearTriggerResponse& GPUdb::clearTrigger( const std::string& triggerId,
                                           const std::map<std::string, std::string>& options,
                                           ClearTriggerResponse& response_ ) const
{
    ClearTriggerRequest actualRequest_;
    actualRequest_.triggerId = triggerId;
    actualRequest_.options = options;
    submitRequest("/clear/trigger", actualRequest_, response_, false);
    return response_;
}

CollectStatisticsResponse GPUdb::collectStatistics( const CollectStatisticsRequest& request_ ) const
{
    CollectStatisticsResponse actualResponse_;
    submitRequest("/collect/statistics", request_, actualResponse_, false);
    return actualResponse_;
}

CollectStatisticsResponse& GPUdb::collectStatistics( const CollectStatisticsRequest& request_,
                                                     CollectStatisticsResponse& response_ ) const
{
    submitRequest("/collect/statistics", request_, response_, false);
    return response_;
}

CollectStatisticsResponse GPUdb::collectStatistics( const std::string& tableName,
                                                    const std::vector<std::string>& columnNames,
                                                    const std::map<std::string, std::string>& options ) const
{
    CollectStatisticsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnNames = columnNames;
    actualRequest_.options = options;
    CollectStatisticsResponse actualResponse_;
    submitRequest("/collect/statistics", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CollectStatisticsResponse& GPUdb::collectStatistics( const std::string& tableName,
                                                     const std::vector<std::string>& columnNames,
                                                     const std::map<std::string, std::string>& options,
                                                     CollectStatisticsResponse& response_ ) const
{
    CollectStatisticsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnNames = columnNames;
    actualRequest_.options = options;
    submitRequest("/collect/statistics", actualRequest_, response_, false);
    return response_;
}

CreateContainerRegistryResponse GPUdb::createContainerRegistry( const CreateContainerRegistryRequest& request_ ) const
{
    CreateContainerRegistryResponse actualResponse_;
    submitRequest("/create/container/registry", request_, actualResponse_, false);
    return actualResponse_;
}

CreateContainerRegistryResponse& GPUdb::createContainerRegistry( const CreateContainerRegistryRequest& request_,
                                                                 CreateContainerRegistryResponse& response_ ) const
{
    submitRequest("/create/container/registry", request_, response_, false);
    return response_;
}

CreateContainerRegistryResponse GPUdb::createContainerRegistry( const std::string& registryName,
                                                                const std::string& uri,
                                                                const std::string& credential,
                                                                const std::map<std::string, std::string>& options ) const
{
    CreateContainerRegistryRequest actualRequest_;
    actualRequest_.registryName = registryName;
    actualRequest_.uri = uri;
    actualRequest_.credential = credential;
    actualRequest_.options = options;
    CreateContainerRegistryResponse actualResponse_;
    submitRequest("/create/container/registry", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateContainerRegistryResponse& GPUdb::createContainerRegistry( const std::string& registryName,
                                                                 const std::string& uri,
                                                                 const std::string& credential,
                                                                 const std::map<std::string, std::string>& options,
                                                                 CreateContainerRegistryResponse& response_ ) const
{
    CreateContainerRegistryRequest actualRequest_;
    actualRequest_.registryName = registryName;
    actualRequest_.uri = uri;
    actualRequest_.credential = credential;
    actualRequest_.options = options;
    submitRequest("/create/container/registry", actualRequest_, response_, false);
    return response_;
}

CreateCredentialResponse GPUdb::createCredential( const CreateCredentialRequest& request_ ) const
{
    CreateCredentialResponse actualResponse_;
    submitRequest("/create/credential", request_, actualResponse_, false);
    return actualResponse_;
}

CreateCredentialResponse& GPUdb::createCredential( const CreateCredentialRequest& request_,
                                                   CreateCredentialResponse& response_ ) const
{
    submitRequest("/create/credential", request_, response_, false);
    return response_;
}

CreateCredentialResponse GPUdb::createCredential( const std::string& credentialName,
                                                  const std::string& type,
                                                  const std::string& identity,
                                                  const std::string& secret,
                                                  const std::map<std::string, std::string>& options ) const
{
    CreateCredentialRequest actualRequest_;
    actualRequest_.credentialName = credentialName;
    actualRequest_.type = type;
    actualRequest_.identity = identity;
    actualRequest_.secret = secret;
    actualRequest_.options = options;
    CreateCredentialResponse actualResponse_;
    submitRequest("/create/credential", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateCredentialResponse& GPUdb::createCredential( const std::string& credentialName,
                                                   const std::string& type,
                                                   const std::string& identity,
                                                   const std::string& secret,
                                                   const std::map<std::string, std::string>& options,
                                                   CreateCredentialResponse& response_ ) const
{
    CreateCredentialRequest actualRequest_;
    actualRequest_.credentialName = credentialName;
    actualRequest_.type = type;
    actualRequest_.identity = identity;
    actualRequest_.secret = secret;
    actualRequest_.options = options;
    submitRequest("/create/credential", actualRequest_, response_, false);
    return response_;
}

CreateDatasinkResponse GPUdb::createDatasink( const CreateDatasinkRequest& request_ ) const
{
    CreateDatasinkResponse actualResponse_;
    submitRequest("/create/datasink", request_, actualResponse_, false);
    return actualResponse_;
}

CreateDatasinkResponse& GPUdb::createDatasink( const CreateDatasinkRequest& request_,
                                               CreateDatasinkResponse& response_ ) const
{
    submitRequest("/create/datasink", request_, response_, false);
    return response_;
}

CreateDatasinkResponse GPUdb::createDatasink( const std::string& name,
                                              const std::string& destination,
                                              const std::map<std::string, std::string>& options ) const
{
    CreateDatasinkRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.destination = destination;
    actualRequest_.options = options;
    CreateDatasinkResponse actualResponse_;
    submitRequest("/create/datasink", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateDatasinkResponse& GPUdb::createDatasink( const std::string& name,
                                               const std::string& destination,
                                               const std::map<std::string, std::string>& options,
                                               CreateDatasinkResponse& response_ ) const
{
    CreateDatasinkRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.destination = destination;
    actualRequest_.options = options;
    submitRequest("/create/datasink", actualRequest_, response_, false);
    return response_;
}

CreateDatasourceResponse GPUdb::createDatasource( const CreateDatasourceRequest& request_ ) const
{
    CreateDatasourceResponse actualResponse_;
    submitRequest("/create/datasource", request_, actualResponse_, false);
    return actualResponse_;
}

CreateDatasourceResponse& GPUdb::createDatasource( const CreateDatasourceRequest& request_,
                                                   CreateDatasourceResponse& response_ ) const
{
    submitRequest("/create/datasource", request_, response_, false);
    return response_;
}

CreateDatasourceResponse GPUdb::createDatasource( const std::string& name,
                                                  const std::string& location,
                                                  const std::string& userName,
                                                  const std::string& password,
                                                  const std::map<std::string, std::string>& options ) const
{
    CreateDatasourceRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.location = location;
    actualRequest_.userName = userName;
    actualRequest_.password = password;
    actualRequest_.options = options;
    CreateDatasourceResponse actualResponse_;
    submitRequest("/create/datasource", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateDatasourceResponse& GPUdb::createDatasource( const std::string& name,
                                                   const std::string& location,
                                                   const std::string& userName,
                                                   const std::string& password,
                                                   const std::map<std::string, std::string>& options,
                                                   CreateDatasourceResponse& response_ ) const
{
    CreateDatasourceRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.location = location;
    actualRequest_.userName = userName;
    actualRequest_.password = password;
    actualRequest_.options = options;
    submitRequest("/create/datasource", actualRequest_, response_, false);
    return response_;
}

CreateDeltaTableResponse GPUdb::createDeltaTable( const CreateDeltaTableRequest& request_ ) const
{
    CreateDeltaTableResponse actualResponse_;
    submitRequest("/create/deltatable", request_, actualResponse_, false);
    return actualResponse_;
}

CreateDeltaTableResponse& GPUdb::createDeltaTable( const CreateDeltaTableRequest& request_,
                                                   CreateDeltaTableResponse& response_ ) const
{
    submitRequest("/create/deltatable", request_, response_, false);
    return response_;
}

CreateDeltaTableResponse GPUdb::createDeltaTable( const std::string& deltaTableName,
                                                  const std::string& tableName,
                                                  const std::map<std::string, std::string>& options ) const
{
    CreateDeltaTableRequest actualRequest_;
    actualRequest_.deltaTableName = deltaTableName;
    actualRequest_.tableName = tableName;
    actualRequest_.options = options;
    CreateDeltaTableResponse actualResponse_;
    submitRequest("/create/deltatable", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateDeltaTableResponse& GPUdb::createDeltaTable( const std::string& deltaTableName,
                                                   const std::string& tableName,
                                                   const std::map<std::string, std::string>& options,
                                                   CreateDeltaTableResponse& response_ ) const
{
    CreateDeltaTableRequest actualRequest_;
    actualRequest_.deltaTableName = deltaTableName;
    actualRequest_.tableName = tableName;
    actualRequest_.options = options;
    submitRequest("/create/deltatable", actualRequest_, response_, false);
    return response_;
}

CreateDirectoryResponse GPUdb::createDirectory( const CreateDirectoryRequest& request_ ) const
{
    CreateDirectoryResponse actualResponse_;
    submitRequest("/create/directory", request_, actualResponse_, false);
    return actualResponse_;
}

CreateDirectoryResponse& GPUdb::createDirectory( const CreateDirectoryRequest& request_,
                                                 CreateDirectoryResponse& response_ ) const
{
    submitRequest("/create/directory", request_, response_, false);
    return response_;
}

CreateDirectoryResponse GPUdb::createDirectory( const std::string& directoryName,
                                                const std::map<std::string, std::string>& options ) const
{
    CreateDirectoryRequest actualRequest_;
    actualRequest_.directoryName = directoryName;
    actualRequest_.options = options;
    CreateDirectoryResponse actualResponse_;
    submitRequest("/create/directory", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateDirectoryResponse& GPUdb::createDirectory( const std::string& directoryName,
                                                 const std::map<std::string, std::string>& options,
                                                 CreateDirectoryResponse& response_ ) const
{
    CreateDirectoryRequest actualRequest_;
    actualRequest_.directoryName = directoryName;
    actualRequest_.options = options;
    submitRequest("/create/directory", actualRequest_, response_, false);
    return response_;
}

CreateEnvironmentResponse GPUdb::createEnvironment( const CreateEnvironmentRequest& request_ ) const
{
    CreateEnvironmentResponse actualResponse_;
    submitRequest("/create/environment", request_, actualResponse_, false);
    return actualResponse_;
}

CreateEnvironmentResponse& GPUdb::createEnvironment( const CreateEnvironmentRequest& request_,
                                                     CreateEnvironmentResponse& response_ ) const
{
    submitRequest("/create/environment", request_, response_, false);
    return response_;
}

CreateEnvironmentResponse GPUdb::createEnvironment( const std::string& environmentName,
                                                    const std::map<std::string, std::string>& options ) const
{
    CreateEnvironmentRequest actualRequest_;
    actualRequest_.environmentName = environmentName;
    actualRequest_.options = options;
    CreateEnvironmentResponse actualResponse_;
    submitRequest("/create/environment", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateEnvironmentResponse& GPUdb::createEnvironment( const std::string& environmentName,
                                                     const std::map<std::string, std::string>& options,
                                                     CreateEnvironmentResponse& response_ ) const
{
    CreateEnvironmentRequest actualRequest_;
    actualRequest_.environmentName = environmentName;
    actualRequest_.options = options;
    submitRequest("/create/environment", actualRequest_, response_, false);
    return response_;
}

CreateGraphResponse GPUdb::createGraph( const CreateGraphRequest& request_ ) const
{
    CreateGraphResponse actualResponse_;
    submitRequest("/create/graph", request_, actualResponse_, false);
    return actualResponse_;
}

CreateGraphResponse& GPUdb::createGraph( const CreateGraphRequest& request_,
                                         CreateGraphResponse& response_ ) const
{
    submitRequest("/create/graph", request_, response_, false);
    return response_;
}

CreateGraphResponse GPUdb::createGraph( const std::string& graphName,
                                        const bool directedGraph,
                                        const std::vector<std::string>& nodes,
                                        const std::vector<std::string>& edges,
                                        const std::vector<std::string>& weights,
                                        const std::vector<std::string>& restrictions,
                                        const std::map<std::string, std::string>& options ) const
{
    CreateGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.directedGraph = directedGraph;
    actualRequest_.nodes = nodes;
    actualRequest_.edges = edges;
    actualRequest_.weights = weights;
    actualRequest_.restrictions = restrictions;
    actualRequest_.options = options;
    CreateGraphResponse actualResponse_;
    submitRequest("/create/graph", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateGraphResponse& GPUdb::createGraph( const std::string& graphName,
                                         const bool directedGraph,
                                         const std::vector<std::string>& nodes,
                                         const std::vector<std::string>& edges,
                                         const std::vector<std::string>& weights,
                                         const std::vector<std::string>& restrictions,
                                         const std::map<std::string, std::string>& options,
                                         CreateGraphResponse& response_ ) const
{
    CreateGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.directedGraph = directedGraph;
    actualRequest_.nodes = nodes;
    actualRequest_.edges = edges;
    actualRequest_.weights = weights;
    actualRequest_.restrictions = restrictions;
    actualRequest_.options = options;
    submitRequest("/create/graph", actualRequest_, response_, false);
    return response_;
}

CreateJobResponse GPUdb::createJob( const CreateJobRequest& request_ ) const
{
    CreateJobResponse actualResponse_;
    submitRequest("/create/job", request_, actualResponse_, false);
    return actualResponse_;
}

CreateJobResponse& GPUdb::createJob( const CreateJobRequest& request_,
                                     CreateJobResponse& response_ ) const
{
    submitRequest("/create/job", request_, response_, false);
    return response_;
}

CreateJobResponse GPUdb::createJob( const std::string& endpoint,
                                    const std::string& requestEncoding,
                                    const std::vector<uint8_t>& data,
                                    const std::string& dataStr,
                                    const std::map<std::string, std::string>& options ) const
{
    CreateJobRequest actualRequest_;
    actualRequest_.endpoint = endpoint;
    actualRequest_.requestEncoding = requestEncoding;
    actualRequest_.data = data;
    actualRequest_.dataStr = dataStr;
    actualRequest_.options = options;
    CreateJobResponse actualResponse_;
    submitRequest("/create/job", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateJobResponse& GPUdb::createJob( const std::string& endpoint,
                                     const std::string& requestEncoding,
                                     const std::vector<uint8_t>& data,
                                     const std::string& dataStr,
                                     const std::map<std::string, std::string>& options,
                                     CreateJobResponse& response_ ) const
{
    CreateJobRequest actualRequest_;
    actualRequest_.endpoint = endpoint;
    actualRequest_.requestEncoding = requestEncoding;
    actualRequest_.data = data;
    actualRequest_.dataStr = dataStr;
    actualRequest_.options = options;
    submitRequest("/create/job", actualRequest_, response_, false);
    return response_;
}

CreateJoinTableResponse GPUdb::createJoinTable( const CreateJoinTableRequest& request_ ) const
{
    CreateJoinTableResponse actualResponse_;
    submitRequest("/create/jointable", request_, actualResponse_, false);
    return actualResponse_;
}

CreateJoinTableResponse& GPUdb::createJoinTable( const CreateJoinTableRequest& request_,
                                                 CreateJoinTableResponse& response_ ) const
{
    submitRequest("/create/jointable", request_, response_, false);
    return response_;
}

CreateJoinTableResponse GPUdb::createJoinTable( const std::string& joinTableName,
                                                const std::vector<std::string>& tableNames,
                                                const std::vector<std::string>& columnNames,
                                                const std::vector<std::string>& expressions,
                                                const std::map<std::string, std::string>& options ) const
{
    CreateJoinTableRequest actualRequest_;
    actualRequest_.joinTableName = joinTableName;
    actualRequest_.tableNames = tableNames;
    actualRequest_.columnNames = columnNames;
    actualRequest_.expressions = expressions;
    actualRequest_.options = options;
    CreateJoinTableResponse actualResponse_;
    submitRequest("/create/jointable", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateJoinTableResponse& GPUdb::createJoinTable( const std::string& joinTableName,
                                                 const std::vector<std::string>& tableNames,
                                                 const std::vector<std::string>& columnNames,
                                                 const std::vector<std::string>& expressions,
                                                 const std::map<std::string, std::string>& options,
                                                 CreateJoinTableResponse& response_ ) const
{
    CreateJoinTableRequest actualRequest_;
    actualRequest_.joinTableName = joinTableName;
    actualRequest_.tableNames = tableNames;
    actualRequest_.columnNames = columnNames;
    actualRequest_.expressions = expressions;
    actualRequest_.options = options;
    submitRequest("/create/jointable", actualRequest_, response_, false);
    return response_;
}

CreateMaterializedViewResponse GPUdb::createMaterializedView( const CreateMaterializedViewRequest& request_ ) const
{
    CreateMaterializedViewResponse actualResponse_;
    submitRequest("/create/materializedview", request_, actualResponse_, false);
    return actualResponse_;
}

CreateMaterializedViewResponse& GPUdb::createMaterializedView( const CreateMaterializedViewRequest& request_,
                                                               CreateMaterializedViewResponse& response_ ) const
{
    submitRequest("/create/materializedview", request_, response_, false);
    return response_;
}

CreateMaterializedViewResponse GPUdb::createMaterializedView( const std::string& tableName,
                                                              const std::map<std::string, std::string>& options ) const
{
    CreateMaterializedViewRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.options = options;
    CreateMaterializedViewResponse actualResponse_;
    submitRequest("/create/materializedview", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateMaterializedViewResponse& GPUdb::createMaterializedView( const std::string& tableName,
                                                               const std::map<std::string, std::string>& options,
                                                               CreateMaterializedViewResponse& response_ ) const
{
    CreateMaterializedViewRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.options = options;
    submitRequest("/create/materializedview", actualRequest_, response_, false);
    return response_;
}

CreateProcResponse GPUdb::createProc( const CreateProcRequest& request_ ) const
{
    CreateProcResponse actualResponse_;
    submitRequest("/create/proc", request_, actualResponse_, false);
    return actualResponse_;
}

CreateProcResponse& GPUdb::createProc( const CreateProcRequest& request_,
                                       CreateProcResponse& response_ ) const
{
    submitRequest("/create/proc", request_, response_, false);
    return response_;
}

CreateProcResponse GPUdb::createProc( const std::string& procName,
                                      const std::string& executionMode,
                                      const std::map<std::string, std::vector<uint8_t> >& files,
                                      const std::string& command,
                                      const std::vector<std::string>& args,
                                      const std::map<std::string, std::string>& options ) const
{
    CreateProcRequest actualRequest_;
    actualRequest_.procName = procName;
    actualRequest_.executionMode = executionMode;
    actualRequest_.files = files;
    actualRequest_.command = command;
    actualRequest_.args = args;
    actualRequest_.options = options;
    CreateProcResponse actualResponse_;
    submitRequest("/create/proc", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateProcResponse& GPUdb::createProc( const std::string& procName,
                                       const std::string& executionMode,
                                       const std::map<std::string, std::vector<uint8_t> >& files,
                                       const std::string& command,
                                       const std::vector<std::string>& args,
                                       const std::map<std::string, std::string>& options,
                                       CreateProcResponse& response_ ) const
{
    CreateProcRequest actualRequest_;
    actualRequest_.procName = procName;
    actualRequest_.executionMode = executionMode;
    actualRequest_.files = files;
    actualRequest_.command = command;
    actualRequest_.args = args;
    actualRequest_.options = options;
    submitRequest("/create/proc", actualRequest_, response_, false);
    return response_;
}

CreateProjectionResponse GPUdb::createProjection( const CreateProjectionRequest& request_ ) const
{
    CreateProjectionResponse actualResponse_;
    submitRequest("/create/projection", request_, actualResponse_, false);
    return actualResponse_;
}

CreateProjectionResponse& GPUdb::createProjection( const CreateProjectionRequest& request_,
                                                   CreateProjectionResponse& response_ ) const
{
    submitRequest("/create/projection", request_, response_, false);
    return response_;
}

CreateProjectionResponse GPUdb::createProjection( const std::string& tableName,
                                                  const std::string& projectionName,
                                                  const std::vector<std::string>& columnNames,
                                                  const std::map<std::string, std::string>& options ) const
{
    CreateProjectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.projectionName = projectionName;
    actualRequest_.columnNames = columnNames;
    actualRequest_.options = options;
    CreateProjectionResponse actualResponse_;
    submitRequest("/create/projection", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateProjectionResponse& GPUdb::createProjection( const std::string& tableName,
                                                   const std::string& projectionName,
                                                   const std::vector<std::string>& columnNames,
                                                   const std::map<std::string, std::string>& options,
                                                   CreateProjectionResponse& response_ ) const
{
    CreateProjectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.projectionName = projectionName;
    actualRequest_.columnNames = columnNames;
    actualRequest_.options = options;
    submitRequest("/create/projection", actualRequest_, response_, false);
    return response_;
}

CreateResourceGroupResponse GPUdb::createResourceGroup( const CreateResourceGroupRequest& request_ ) const
{
    CreateResourceGroupResponse actualResponse_;
    submitRequest("/create/resourcegroup", request_, actualResponse_, false);
    return actualResponse_;
}

CreateResourceGroupResponse& GPUdb::createResourceGroup( const CreateResourceGroupRequest& request_,
                                                         CreateResourceGroupResponse& response_ ) const
{
    submitRequest("/create/resourcegroup", request_, response_, false);
    return response_;
}

CreateResourceGroupResponse GPUdb::createResourceGroup( const std::string& name,
                                                        const std::map<std::string, std::map<std::string, std::string> >& tierAttributes,
                                                        const std::string& ranking,
                                                        const std::string& adjoiningResourceGroup,
                                                        const std::map<std::string, std::string>& options ) const
{
    CreateResourceGroupRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.tierAttributes = tierAttributes;
    actualRequest_.ranking = ranking;
    actualRequest_.adjoiningResourceGroup = adjoiningResourceGroup;
    actualRequest_.options = options;
    CreateResourceGroupResponse actualResponse_;
    submitRequest("/create/resourcegroup", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateResourceGroupResponse& GPUdb::createResourceGroup( const std::string& name,
                                                         const std::map<std::string, std::map<std::string, std::string> >& tierAttributes,
                                                         const std::string& ranking,
                                                         const std::string& adjoiningResourceGroup,
                                                         const std::map<std::string, std::string>& options,
                                                         CreateResourceGroupResponse& response_ ) const
{
    CreateResourceGroupRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.tierAttributes = tierAttributes;
    actualRequest_.ranking = ranking;
    actualRequest_.adjoiningResourceGroup = adjoiningResourceGroup;
    actualRequest_.options = options;
    submitRequest("/create/resourcegroup", actualRequest_, response_, false);
    return response_;
}

CreateRoleResponse GPUdb::createRole( const CreateRoleRequest& request_ ) const
{
    CreateRoleResponse actualResponse_;
    submitRequest("/create/role", request_, actualResponse_, false);
    return actualResponse_;
}

CreateRoleResponse& GPUdb::createRole( const CreateRoleRequest& request_,
                                       CreateRoleResponse& response_ ) const
{
    submitRequest("/create/role", request_, response_, false);
    return response_;
}

CreateRoleResponse GPUdb::createRole( const std::string& name,
                                      const std::map<std::string, std::string>& options ) const
{
    CreateRoleRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    CreateRoleResponse actualResponse_;
    submitRequest("/create/role", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateRoleResponse& GPUdb::createRole( const std::string& name,
                                       const std::map<std::string, std::string>& options,
                                       CreateRoleResponse& response_ ) const
{
    CreateRoleRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    submitRequest("/create/role", actualRequest_, response_, false);
    return response_;
}

CreateSchemaResponse GPUdb::createSchema( const CreateSchemaRequest& request_ ) const
{
    CreateSchemaResponse actualResponse_;
    submitRequest("/create/schema", request_, actualResponse_, false);
    return actualResponse_;
}

CreateSchemaResponse& GPUdb::createSchema( const CreateSchemaRequest& request_,
                                           CreateSchemaResponse& response_ ) const
{
    submitRequest("/create/schema", request_, response_, false);
    return response_;
}

CreateSchemaResponse GPUdb::createSchema( const std::string& schemaName,
                                          const std::map<std::string, std::string>& options ) const
{
    CreateSchemaRequest actualRequest_;
    actualRequest_.schemaName = schemaName;
    actualRequest_.options = options;
    CreateSchemaResponse actualResponse_;
    submitRequest("/create/schema", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateSchemaResponse& GPUdb::createSchema( const std::string& schemaName,
                                           const std::map<std::string, std::string>& options,
                                           CreateSchemaResponse& response_ ) const
{
    CreateSchemaRequest actualRequest_;
    actualRequest_.schemaName = schemaName;
    actualRequest_.options = options;
    submitRequest("/create/schema", actualRequest_, response_, false);
    return response_;
}

CreateStateTableResponse GPUdb::createStateTable( const CreateStateTableRequest& request_ ) const
{
    CreateStateTableResponse actualResponse_;
    submitRequest("/create/statetable", request_, actualResponse_, false);
    return actualResponse_;
}

CreateStateTableResponse& GPUdb::createStateTable( const CreateStateTableRequest& request_,
                                                   CreateStateTableResponse& response_ ) const
{
    submitRequest("/create/statetable", request_, response_, false);
    return response_;
}

CreateStateTableResponse GPUdb::createStateTable( const std::string& tableName,
                                                  const std::string& inputTableName,
                                                  const std::string& initTableName,
                                                  const std::map<std::string, std::string>& options ) const
{
    CreateStateTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.inputTableName = inputTableName;
    actualRequest_.initTableName = initTableName;
    actualRequest_.options = options;
    CreateStateTableResponse actualResponse_;
    submitRequest("/create/statetable", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateStateTableResponse& GPUdb::createStateTable( const std::string& tableName,
                                                   const std::string& inputTableName,
                                                   const std::string& initTableName,
                                                   const std::map<std::string, std::string>& options,
                                                   CreateStateTableResponse& response_ ) const
{
    CreateStateTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.inputTableName = inputTableName;
    actualRequest_.initTableName = initTableName;
    actualRequest_.options = options;
    submitRequest("/create/statetable", actualRequest_, response_, false);
    return response_;
}

CreateTableResponse GPUdb::createTable( const CreateTableRequest& request_ ) const
{
    CreateTableResponse actualResponse_;
    submitRequest("/create/table", request_, actualResponse_, false);
    return actualResponse_;
}

CreateTableResponse& GPUdb::createTable( const CreateTableRequest& request_,
                                         CreateTableResponse& response_ ) const
{
    submitRequest("/create/table", request_, response_, false);
    return response_;
}

CreateTableResponse GPUdb::createTable( const std::string& tableName,
                                        const std::string& typeId,
                                        const std::map<std::string, std::string>& options ) const
{
    CreateTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.typeId = typeId;
    actualRequest_.options = options;
    CreateTableResponse actualResponse_;
    submitRequest("/create/table", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateTableResponse& GPUdb::createTable( const std::string& tableName,
                                         const std::string& typeId,
                                         const std::map<std::string, std::string>& options,
                                         CreateTableResponse& response_ ) const
{
    CreateTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.typeId = typeId;
    actualRequest_.options = options;
    submitRequest("/create/table", actualRequest_, response_, false);
    return response_;
}

CreateTableExternalResponse GPUdb::createTableExternal( const CreateTableExternalRequest& request_ ) const
{
    CreateTableExternalResponse actualResponse_;
    submitRequest("/create/table/external", request_, actualResponse_, false);
    return actualResponse_;
}

CreateTableExternalResponse& GPUdb::createTableExternal( const CreateTableExternalRequest& request_,
                                                         CreateTableExternalResponse& response_ ) const
{
    submitRequest("/create/table/external", request_, response_, false);
    return response_;
}

CreateTableExternalResponse GPUdb::createTableExternal( const std::string& tableName,
                                                        const std::vector<std::string>& filepaths,
                                                        const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                        const std::map<std::string, std::string>& createTableOptions,
                                                        const std::map<std::string, std::string>& options ) const
{
    CreateTableExternalRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.filepaths = filepaths;
    actualRequest_.modifyColumns = modifyColumns;
    actualRequest_.createTableOptions = createTableOptions;
    actualRequest_.options = options;
    CreateTableExternalResponse actualResponse_;
    submitRequest("/create/table/external", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateTableExternalResponse& GPUdb::createTableExternal( const std::string& tableName,
                                                         const std::vector<std::string>& filepaths,
                                                         const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                         const std::map<std::string, std::string>& createTableOptions,
                                                         const std::map<std::string, std::string>& options,
                                                         CreateTableExternalResponse& response_ ) const
{
    CreateTableExternalRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.filepaths = filepaths;
    actualRequest_.modifyColumns = modifyColumns;
    actualRequest_.createTableOptions = createTableOptions;
    actualRequest_.options = options;
    submitRequest("/create/table/external", actualRequest_, response_, false);
    return response_;
}

CreateTableMonitorResponse GPUdb::createTableMonitor( const CreateTableMonitorRequest& request_ ) const
{
    CreateTableMonitorResponse actualResponse_;
    submitRequest("/create/tablemonitor", request_, actualResponse_, false);
    return actualResponse_;
}

CreateTableMonitorResponse& GPUdb::createTableMonitor( const CreateTableMonitorRequest& request_,
                                                       CreateTableMonitorResponse& response_ ) const
{
    submitRequest("/create/tablemonitor", request_, response_, false);
    return response_;
}

CreateTableMonitorResponse GPUdb::createTableMonitor( const std::string& tableName,
                                                      const std::map<std::string, std::string>& options ) const
{
    CreateTableMonitorRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.options = options;
    CreateTableMonitorResponse actualResponse_;
    submitRequest("/create/tablemonitor", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateTableMonitorResponse& GPUdb::createTableMonitor( const std::string& tableName,
                                                       const std::map<std::string, std::string>& options,
                                                       CreateTableMonitorResponse& response_ ) const
{
    CreateTableMonitorRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.options = options;
    submitRequest("/create/tablemonitor", actualRequest_, response_, false);
    return response_;
}

CreateTriggerByAreaResponse GPUdb::createTriggerByArea( const CreateTriggerByAreaRequest& request_ ) const
{
    CreateTriggerByAreaResponse actualResponse_;
    submitRequest("/create/trigger/byarea", request_, actualResponse_, false);
    return actualResponse_;
}

CreateTriggerByAreaResponse& GPUdb::createTriggerByArea( const CreateTriggerByAreaRequest& request_,
                                                         CreateTriggerByAreaResponse& response_ ) const
{
    submitRequest("/create/trigger/byarea", request_, response_, false);
    return response_;
}

CreateTriggerByAreaResponse GPUdb::createTriggerByArea( const std::string& requestId,
                                                        const std::vector<std::string>& tableNames,
                                                        const std::string& xColumnName,
                                                        const std::vector<double>& xVector,
                                                        const std::string& yColumnName,
                                                        const std::vector<double>& yVector,
                                                        const std::map<std::string, std::string>& options ) const
{
    CreateTriggerByAreaRequest actualRequest_;
    actualRequest_.requestId = requestId;
    actualRequest_.tableNames = tableNames;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.xVector = xVector;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.yVector = yVector;
    actualRequest_.options = options;
    CreateTriggerByAreaResponse actualResponse_;
    submitRequest("/create/trigger/byarea", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateTriggerByAreaResponse& GPUdb::createTriggerByArea( const std::string& requestId,
                                                         const std::vector<std::string>& tableNames,
                                                         const std::string& xColumnName,
                                                         const std::vector<double>& xVector,
                                                         const std::string& yColumnName,
                                                         const std::vector<double>& yVector,
                                                         const std::map<std::string, std::string>& options,
                                                         CreateTriggerByAreaResponse& response_ ) const
{
    CreateTriggerByAreaRequest actualRequest_;
    actualRequest_.requestId = requestId;
    actualRequest_.tableNames = tableNames;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.xVector = xVector;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.yVector = yVector;
    actualRequest_.options = options;
    submitRequest("/create/trigger/byarea", actualRequest_, response_, false);
    return response_;
}

CreateTriggerByRangeResponse GPUdb::createTriggerByRange( const CreateTriggerByRangeRequest& request_ ) const
{
    CreateTriggerByRangeResponse actualResponse_;
    submitRequest("/create/trigger/byrange", request_, actualResponse_, false);
    return actualResponse_;
}

CreateTriggerByRangeResponse& GPUdb::createTriggerByRange( const CreateTriggerByRangeRequest& request_,
                                                           CreateTriggerByRangeResponse& response_ ) const
{
    submitRequest("/create/trigger/byrange", request_, response_, false);
    return response_;
}

CreateTriggerByRangeResponse GPUdb::createTriggerByRange( const std::string& requestId,
                                                          const std::vector<std::string>& tableNames,
                                                          const std::string& columnName,
                                                          const double min,
                                                          const double max,
                                                          const std::map<std::string, std::string>& options ) const
{
    CreateTriggerByRangeRequest actualRequest_;
    actualRequest_.requestId = requestId;
    actualRequest_.tableNames = tableNames;
    actualRequest_.columnName = columnName;
    actualRequest_.min = min;
    actualRequest_.max = max;
    actualRequest_.options = options;
    CreateTriggerByRangeResponse actualResponse_;
    submitRequest("/create/trigger/byrange", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateTriggerByRangeResponse& GPUdb::createTriggerByRange( const std::string& requestId,
                                                           const std::vector<std::string>& tableNames,
                                                           const std::string& columnName,
                                                           const double min,
                                                           const double max,
                                                           const std::map<std::string, std::string>& options,
                                                           CreateTriggerByRangeResponse& response_ ) const
{
    CreateTriggerByRangeRequest actualRequest_;
    actualRequest_.requestId = requestId;
    actualRequest_.tableNames = tableNames;
    actualRequest_.columnName = columnName;
    actualRequest_.min = min;
    actualRequest_.max = max;
    actualRequest_.options = options;
    submitRequest("/create/trigger/byrange", actualRequest_, response_, false);
    return response_;
}

CreateTypeResponse GPUdb::createType( const CreateTypeRequest& request_ ) const
{
    CreateTypeResponse actualResponse_;
    submitRequest("/create/type", request_, actualResponse_, false);
    setDecoderIfMissing( actualResponse_.typeId,
                         actualResponse_.label,
                         actualResponse_.typeDefinition,
                         actualResponse_.properties );
    return actualResponse_;
}

CreateTypeResponse& GPUdb::createType( const CreateTypeRequest& request_,
                                       CreateTypeResponse& response_ ) const
{
    submitRequest("/create/type", request_, response_, false);
    setDecoderIfMissing( response_.typeId,
                         response_.label,
                         response_.typeDefinition,
                         response_.properties );
    return response_;
}

CreateTypeResponse GPUdb::createType( const std::string& typeDefinition,
                                      const std::string& label,
                                      const std::map<std::string, std::vector<std::string> >& properties,
                                      const std::map<std::string, std::string>& options ) const
{
    CreateTypeRequest actualRequest_;
    actualRequest_.typeDefinition = typeDefinition;
    actualRequest_.label = label;
    actualRequest_.properties = properties;
    actualRequest_.options = options;
    CreateTypeResponse actualResponse_;
    submitRequest("/create/type", actualRequest_, actualResponse_, false);
    setDecoderIfMissing( actualResponse_.typeId,
                         actualResponse_.label,
                         actualResponse_.typeDefinition,
                         actualResponse_.properties );
    return actualResponse_;
}

CreateTypeResponse& GPUdb::createType( const std::string& typeDefinition,
                                       const std::string& label,
                                       const std::map<std::string, std::vector<std::string> >& properties,
                                       const std::map<std::string, std::string>& options,
                                       CreateTypeResponse& response_ ) const
{
    CreateTypeRequest actualRequest_;
    actualRequest_.typeDefinition = typeDefinition;
    actualRequest_.label = label;
    actualRequest_.properties = properties;
    actualRequest_.options = options;
    submitRequest("/create/type", actualRequest_, response_, false);
    setDecoderIfMissing( response_.typeId,
                         response_.label,
                         response_.typeDefinition,
                         response_.properties );
    return response_;
}

CreateUnionResponse GPUdb::createUnion( const CreateUnionRequest& request_ ) const
{
    CreateUnionResponse actualResponse_;
    submitRequest("/create/union", request_, actualResponse_, false);
    return actualResponse_;
}

CreateUnionResponse& GPUdb::createUnion( const CreateUnionRequest& request_,
                                         CreateUnionResponse& response_ ) const
{
    submitRequest("/create/union", request_, response_, false);
    return response_;
}

CreateUnionResponse GPUdb::createUnion( const std::string& tableName,
                                        const std::vector<std::string>& tableNames,
                                        const std::vector<std::vector<std::string> >& inputColumnNames,
                                        const std::vector<std::string>& outputColumnNames,
                                        const std::map<std::string, std::string>& options ) const
{
    CreateUnionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.tableNames = tableNames;
    actualRequest_.inputColumnNames = inputColumnNames;
    actualRequest_.outputColumnNames = outputColumnNames;
    actualRequest_.options = options;
    CreateUnionResponse actualResponse_;
    submitRequest("/create/union", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateUnionResponse& GPUdb::createUnion( const std::string& tableName,
                                         const std::vector<std::string>& tableNames,
                                         const std::vector<std::vector<std::string> >& inputColumnNames,
                                         const std::vector<std::string>& outputColumnNames,
                                         const std::map<std::string, std::string>& options,
                                         CreateUnionResponse& response_ ) const
{
    CreateUnionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.tableNames = tableNames;
    actualRequest_.inputColumnNames = inputColumnNames;
    actualRequest_.outputColumnNames = outputColumnNames;
    actualRequest_.options = options;
    submitRequest("/create/union", actualRequest_, response_, false);
    return response_;
}

CreateUserExternalResponse GPUdb::createUserExternal( const CreateUserExternalRequest& request_ ) const
{
    CreateUserExternalResponse actualResponse_;
    submitRequest("/create/user/external", request_, actualResponse_, false);
    return actualResponse_;
}

CreateUserExternalResponse& GPUdb::createUserExternal( const CreateUserExternalRequest& request_,
                                                       CreateUserExternalResponse& response_ ) const
{
    submitRequest("/create/user/external", request_, response_, false);
    return response_;
}

CreateUserExternalResponse GPUdb::createUserExternal( const std::string& name,
                                                      const std::map<std::string, std::string>& options ) const
{
    CreateUserExternalRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    CreateUserExternalResponse actualResponse_;
    submitRequest("/create/user/external", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateUserExternalResponse& GPUdb::createUserExternal( const std::string& name,
                                                       const std::map<std::string, std::string>& options,
                                                       CreateUserExternalResponse& response_ ) const
{
    CreateUserExternalRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    submitRequest("/create/user/external", actualRequest_, response_, false);
    return response_;
}

CreateUserInternalResponse GPUdb::createUserInternal( const CreateUserInternalRequest& request_ ) const
{
    CreateUserInternalResponse actualResponse_;
    submitRequest("/create/user/internal", request_, actualResponse_, false);
    return actualResponse_;
}

CreateUserInternalResponse& GPUdb::createUserInternal( const CreateUserInternalRequest& request_,
                                                       CreateUserInternalResponse& response_ ) const
{
    submitRequest("/create/user/internal", request_, response_, false);
    return response_;
}

CreateUserInternalResponse GPUdb::createUserInternal( const std::string& name,
                                                      const std::string& password,
                                                      const std::map<std::string, std::string>& options ) const
{
    CreateUserInternalRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.password = password;
    actualRequest_.options = options;
    CreateUserInternalResponse actualResponse_;
    submitRequest("/create/user/internal", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateUserInternalResponse& GPUdb::createUserInternal( const std::string& name,
                                                       const std::string& password,
                                                       const std::map<std::string, std::string>& options,
                                                       CreateUserInternalResponse& response_ ) const
{
    CreateUserInternalRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.password = password;
    actualRequest_.options = options;
    submitRequest("/create/user/internal", actualRequest_, response_, false);
    return response_;
}

CreateVideoResponse GPUdb::createVideo( const CreateVideoRequest& request_ ) const
{
    CreateVideoResponse actualResponse_;
    submitRequest("/create/video", request_, actualResponse_, false);
    return actualResponse_;
}

CreateVideoResponse& GPUdb::createVideo( const CreateVideoRequest& request_,
                                         CreateVideoResponse& response_ ) const
{
    submitRequest("/create/video", request_, response_, false);
    return response_;
}

CreateVideoResponse GPUdb::createVideo( const std::string& attribute,
                                        const std::string& begin,
                                        const double durationSeconds,
                                        const std::string& end,
                                        const double framesPerSecond,
                                        const std::string& style,
                                        const std::string& path,
                                        const std::string& styleParameters,
                                        const std::map<std::string, std::string>& options ) const
{
    CreateVideoRequest actualRequest_;
    actualRequest_.attribute = attribute;
    actualRequest_.begin = begin;
    actualRequest_.durationSeconds = durationSeconds;
    actualRequest_.end = end;
    actualRequest_.framesPerSecond = framesPerSecond;
    actualRequest_.style = style;
    actualRequest_.path = path;
    actualRequest_.styleParameters = styleParameters;
    actualRequest_.options = options;
    CreateVideoResponse actualResponse_;
    submitRequest("/create/video", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

CreateVideoResponse& GPUdb::createVideo( const std::string& attribute,
                                         const std::string& begin,
                                         const double durationSeconds,
                                         const std::string& end,
                                         const double framesPerSecond,
                                         const std::string& style,
                                         const std::string& path,
                                         const std::string& styleParameters,
                                         const std::map<std::string, std::string>& options,
                                         CreateVideoResponse& response_ ) const
{
    CreateVideoRequest actualRequest_;
    actualRequest_.attribute = attribute;
    actualRequest_.begin = begin;
    actualRequest_.durationSeconds = durationSeconds;
    actualRequest_.end = end;
    actualRequest_.framesPerSecond = framesPerSecond;
    actualRequest_.style = style;
    actualRequest_.path = path;
    actualRequest_.styleParameters = styleParameters;
    actualRequest_.options = options;
    submitRequest("/create/video", actualRequest_, response_, false);
    return response_;
}

DeleteDirectoryResponse GPUdb::deleteDirectory( const DeleteDirectoryRequest& request_ ) const
{
    DeleteDirectoryResponse actualResponse_;
    submitRequest("/delete/directory", request_, actualResponse_, false);
    return actualResponse_;
}

DeleteDirectoryResponse& GPUdb::deleteDirectory( const DeleteDirectoryRequest& request_,
                                                 DeleteDirectoryResponse& response_ ) const
{
    submitRequest("/delete/directory", request_, response_, false);
    return response_;
}

DeleteDirectoryResponse GPUdb::deleteDirectory( const std::string& directoryName,
                                                const std::map<std::string, std::string>& options ) const
{
    DeleteDirectoryRequest actualRequest_;
    actualRequest_.directoryName = directoryName;
    actualRequest_.options = options;
    DeleteDirectoryResponse actualResponse_;
    submitRequest("/delete/directory", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DeleteDirectoryResponse& GPUdb::deleteDirectory( const std::string& directoryName,
                                                 const std::map<std::string, std::string>& options,
                                                 DeleteDirectoryResponse& response_ ) const
{
    DeleteDirectoryRequest actualRequest_;
    actualRequest_.directoryName = directoryName;
    actualRequest_.options = options;
    submitRequest("/delete/directory", actualRequest_, response_, false);
    return response_;
}

DeleteFilesResponse GPUdb::deleteFiles( const DeleteFilesRequest& request_ ) const
{
    DeleteFilesResponse actualResponse_;
    submitRequest("/delete/files", request_, actualResponse_, false);
    return actualResponse_;
}

DeleteFilesResponse& GPUdb::deleteFiles( const DeleteFilesRequest& request_,
                                         DeleteFilesResponse& response_ ) const
{
    submitRequest("/delete/files", request_, response_, false);
    return response_;
}

DeleteFilesResponse GPUdb::deleteFiles( const std::vector<std::string>& fileNames,
                                        const std::map<std::string, std::string>& options ) const
{
    DeleteFilesRequest actualRequest_;
    actualRequest_.fileNames = fileNames;
    actualRequest_.options = options;
    DeleteFilesResponse actualResponse_;
    submitRequest("/delete/files", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DeleteFilesResponse& GPUdb::deleteFiles( const std::vector<std::string>& fileNames,
                                         const std::map<std::string, std::string>& options,
                                         DeleteFilesResponse& response_ ) const
{
    DeleteFilesRequest actualRequest_;
    actualRequest_.fileNames = fileNames;
    actualRequest_.options = options;
    submitRequest("/delete/files", actualRequest_, response_, false);
    return response_;
}

DeleteGraphResponse GPUdb::deleteGraph( const DeleteGraphRequest& request_ ) const
{
    DeleteGraphResponse actualResponse_;
    submitRequest("/delete/graph", request_, actualResponse_, false);
    return actualResponse_;
}

DeleteGraphResponse& GPUdb::deleteGraph( const DeleteGraphRequest& request_,
                                         DeleteGraphResponse& response_ ) const
{
    submitRequest("/delete/graph", request_, response_, false);
    return response_;
}

DeleteGraphResponse GPUdb::deleteGraph( const std::string& graphName,
                                        const std::map<std::string, std::string>& options ) const
{
    DeleteGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.options = options;
    DeleteGraphResponse actualResponse_;
    submitRequest("/delete/graph", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DeleteGraphResponse& GPUdb::deleteGraph( const std::string& graphName,
                                         const std::map<std::string, std::string>& options,
                                         DeleteGraphResponse& response_ ) const
{
    DeleteGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.options = options;
    submitRequest("/delete/graph", actualRequest_, response_, false);
    return response_;
}

DeleteProcResponse GPUdb::deleteProc( const DeleteProcRequest& request_ ) const
{
    DeleteProcResponse actualResponse_;
    submitRequest("/delete/proc", request_, actualResponse_, false);
    return actualResponse_;
}

DeleteProcResponse& GPUdb::deleteProc( const DeleteProcRequest& request_,
                                       DeleteProcResponse& response_ ) const
{
    submitRequest("/delete/proc", request_, response_, false);
    return response_;
}

DeleteProcResponse GPUdb::deleteProc( const std::string& procName,
                                      const std::map<std::string, std::string>& options ) const
{
    DeleteProcRequest actualRequest_;
    actualRequest_.procName = procName;
    actualRequest_.options = options;
    DeleteProcResponse actualResponse_;
    submitRequest("/delete/proc", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DeleteProcResponse& GPUdb::deleteProc( const std::string& procName,
                                       const std::map<std::string, std::string>& options,
                                       DeleteProcResponse& response_ ) const
{
    DeleteProcRequest actualRequest_;
    actualRequest_.procName = procName;
    actualRequest_.options = options;
    submitRequest("/delete/proc", actualRequest_, response_, false);
    return response_;
}

DeleteRecordsResponse GPUdb::deleteRecords( const DeleteRecordsRequest& request_ ) const
{
    DeleteRecordsResponse actualResponse_;
    submitRequest("/delete/records", request_, actualResponse_, false);
    return actualResponse_;
}

DeleteRecordsResponse& GPUdb::deleteRecords( const DeleteRecordsRequest& request_,
                                             DeleteRecordsResponse& response_ ) const
{
    submitRequest("/delete/records", request_, response_, false);
    return response_;
}

DeleteRecordsResponse GPUdb::deleteRecords( const std::string& tableName,
                                            const std::vector<std::string>& expressions,
                                            const std::map<std::string, std::string>& options ) const
{
    DeleteRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.expressions = expressions;
    actualRequest_.options = options;
    DeleteRecordsResponse actualResponse_;
    submitRequest("/delete/records", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DeleteRecordsResponse& GPUdb::deleteRecords( const std::string& tableName,
                                             const std::vector<std::string>& expressions,
                                             const std::map<std::string, std::string>& options,
                                             DeleteRecordsResponse& response_ ) const
{
    DeleteRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.expressions = expressions;
    actualRequest_.options = options;
    submitRequest("/delete/records", actualRequest_, response_, false);
    return response_;
}

DeleteResourceGroupResponse GPUdb::deleteResourceGroup( const DeleteResourceGroupRequest& request_ ) const
{
    DeleteResourceGroupResponse actualResponse_;
    submitRequest("/delete/resourcegroup", request_, actualResponse_, false);
    return actualResponse_;
}

DeleteResourceGroupResponse& GPUdb::deleteResourceGroup( const DeleteResourceGroupRequest& request_,
                                                         DeleteResourceGroupResponse& response_ ) const
{
    submitRequest("/delete/resourcegroup", request_, response_, false);
    return response_;
}

DeleteResourceGroupResponse GPUdb::deleteResourceGroup( const std::string& name,
                                                        const std::map<std::string, std::string>& options ) const
{
    DeleteResourceGroupRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    DeleteResourceGroupResponse actualResponse_;
    submitRequest("/delete/resourcegroup", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DeleteResourceGroupResponse& GPUdb::deleteResourceGroup( const std::string& name,
                                                         const std::map<std::string, std::string>& options,
                                                         DeleteResourceGroupResponse& response_ ) const
{
    DeleteResourceGroupRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    submitRequest("/delete/resourcegroup", actualRequest_, response_, false);
    return response_;
}

DeleteRoleResponse GPUdb::deleteRole( const DeleteRoleRequest& request_ ) const
{
    DeleteRoleResponse actualResponse_;
    submitRequest("/delete/role", request_, actualResponse_, false);
    return actualResponse_;
}

DeleteRoleResponse& GPUdb::deleteRole( const DeleteRoleRequest& request_,
                                       DeleteRoleResponse& response_ ) const
{
    submitRequest("/delete/role", request_, response_, false);
    return response_;
}

DeleteRoleResponse GPUdb::deleteRole( const std::string& name,
                                      const std::map<std::string, std::string>& options ) const
{
    DeleteRoleRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    DeleteRoleResponse actualResponse_;
    submitRequest("/delete/role", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DeleteRoleResponse& GPUdb::deleteRole( const std::string& name,
                                       const std::map<std::string, std::string>& options,
                                       DeleteRoleResponse& response_ ) const
{
    DeleteRoleRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    submitRequest("/delete/role", actualRequest_, response_, false);
    return response_;
}

DeleteUserResponse GPUdb::deleteUser( const DeleteUserRequest& request_ ) const
{
    DeleteUserResponse actualResponse_;
    submitRequest("/delete/user", request_, actualResponse_, false);
    return actualResponse_;
}

DeleteUserResponse& GPUdb::deleteUser( const DeleteUserRequest& request_,
                                       DeleteUserResponse& response_ ) const
{
    submitRequest("/delete/user", request_, response_, false);
    return response_;
}

DeleteUserResponse GPUdb::deleteUser( const std::string& name,
                                      const std::map<std::string, std::string>& options ) const
{
    DeleteUserRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    DeleteUserResponse actualResponse_;
    submitRequest("/delete/user", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DeleteUserResponse& GPUdb::deleteUser( const std::string& name,
                                       const std::map<std::string, std::string>& options,
                                       DeleteUserResponse& response_ ) const
{
    DeleteUserRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    submitRequest("/delete/user", actualRequest_, response_, false);
    return response_;
}

DownloadFilesResponse GPUdb::downloadFiles( const DownloadFilesRequest& request_ ) const
{
    DownloadFilesResponse actualResponse_;
    submitRequest("/download/files", request_, actualResponse_, false);
    return actualResponse_;
}

DownloadFilesResponse& GPUdb::downloadFiles( const DownloadFilesRequest& request_,
                                             DownloadFilesResponse& response_ ) const
{
    submitRequest("/download/files", request_, response_, false);
    return response_;
}

DownloadFilesResponse GPUdb::downloadFiles( const std::vector<std::string>& fileNames,
                                            const std::vector<int64_t>& readOffsets,
                                            const std::vector<int64_t>& readLengths,
                                            const std::map<std::string, std::string>& options ) const
{
    DownloadFilesRequest actualRequest_;
    actualRequest_.fileNames = fileNames;
    actualRequest_.readOffsets = readOffsets;
    actualRequest_.readLengths = readLengths;
    actualRequest_.options = options;
    DownloadFilesResponse actualResponse_;
    submitRequest("/download/files", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DownloadFilesResponse& GPUdb::downloadFiles( const std::vector<std::string>& fileNames,
                                             const std::vector<int64_t>& readOffsets,
                                             const std::vector<int64_t>& readLengths,
                                             const std::map<std::string, std::string>& options,
                                             DownloadFilesResponse& response_ ) const
{
    DownloadFilesRequest actualRequest_;
    actualRequest_.fileNames = fileNames;
    actualRequest_.readOffsets = readOffsets;
    actualRequest_.readLengths = readLengths;
    actualRequest_.options = options;
    submitRequest("/download/files", actualRequest_, response_, false);
    return response_;
}

DropContainerRegistryResponse GPUdb::dropContainerRegistry( const DropContainerRegistryRequest& request_ ) const
{
    DropContainerRegistryResponse actualResponse_;
    submitRequest("/drop/container/registry", request_, actualResponse_, false);
    return actualResponse_;
}

DropContainerRegistryResponse& GPUdb::dropContainerRegistry( const DropContainerRegistryRequest& request_,
                                                             DropContainerRegistryResponse& response_ ) const
{
    submitRequest("/drop/container/registry", request_, response_, false);
    return response_;
}

DropContainerRegistryResponse GPUdb::dropContainerRegistry( const std::string& registryName,
                                                            const std::map<std::string, std::string>& options ) const
{
    DropContainerRegistryRequest actualRequest_;
    actualRequest_.registryName = registryName;
    actualRequest_.options = options;
    DropContainerRegistryResponse actualResponse_;
    submitRequest("/drop/container/registry", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DropContainerRegistryResponse& GPUdb::dropContainerRegistry( const std::string& registryName,
                                                             const std::map<std::string, std::string>& options,
                                                             DropContainerRegistryResponse& response_ ) const
{
    DropContainerRegistryRequest actualRequest_;
    actualRequest_.registryName = registryName;
    actualRequest_.options = options;
    submitRequest("/drop/container/registry", actualRequest_, response_, false);
    return response_;
}

DropCredentialResponse GPUdb::dropCredential( const DropCredentialRequest& request_ ) const
{
    DropCredentialResponse actualResponse_;
    submitRequest("/drop/credential", request_, actualResponse_, false);
    return actualResponse_;
}

DropCredentialResponse& GPUdb::dropCredential( const DropCredentialRequest& request_,
                                               DropCredentialResponse& response_ ) const
{
    submitRequest("/drop/credential", request_, response_, false);
    return response_;
}

DropCredentialResponse GPUdb::dropCredential( const std::string& credentialName,
                                              const std::map<std::string, std::string>& options ) const
{
    DropCredentialRequest actualRequest_;
    actualRequest_.credentialName = credentialName;
    actualRequest_.options = options;
    DropCredentialResponse actualResponse_;
    submitRequest("/drop/credential", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DropCredentialResponse& GPUdb::dropCredential( const std::string& credentialName,
                                               const std::map<std::string, std::string>& options,
                                               DropCredentialResponse& response_ ) const
{
    DropCredentialRequest actualRequest_;
    actualRequest_.credentialName = credentialName;
    actualRequest_.options = options;
    submitRequest("/drop/credential", actualRequest_, response_, false);
    return response_;
}

DropDatasinkResponse GPUdb::dropDatasink( const DropDatasinkRequest& request_ ) const
{
    DropDatasinkResponse actualResponse_;
    submitRequest("/drop/datasink", request_, actualResponse_, false);
    return actualResponse_;
}

DropDatasinkResponse& GPUdb::dropDatasink( const DropDatasinkRequest& request_,
                                           DropDatasinkResponse& response_ ) const
{
    submitRequest("/drop/datasink", request_, response_, false);
    return response_;
}

DropDatasinkResponse GPUdb::dropDatasink( const std::string& name,
                                          const std::map<std::string, std::string>& options ) const
{
    DropDatasinkRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    DropDatasinkResponse actualResponse_;
    submitRequest("/drop/datasink", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DropDatasinkResponse& GPUdb::dropDatasink( const std::string& name,
                                           const std::map<std::string, std::string>& options,
                                           DropDatasinkResponse& response_ ) const
{
    DropDatasinkRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    submitRequest("/drop/datasink", actualRequest_, response_, false);
    return response_;
}

DropDatasourceResponse GPUdb::dropDatasource( const DropDatasourceRequest& request_ ) const
{
    DropDatasourceResponse actualResponse_;
    submitRequest("/drop/datasource", request_, actualResponse_, false);
    return actualResponse_;
}

DropDatasourceResponse& GPUdb::dropDatasource( const DropDatasourceRequest& request_,
                                               DropDatasourceResponse& response_ ) const
{
    submitRequest("/drop/datasource", request_, response_, false);
    return response_;
}

DropDatasourceResponse GPUdb::dropDatasource( const std::string& name,
                                              const std::map<std::string, std::string>& options ) const
{
    DropDatasourceRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    DropDatasourceResponse actualResponse_;
    submitRequest("/drop/datasource", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DropDatasourceResponse& GPUdb::dropDatasource( const std::string& name,
                                               const std::map<std::string, std::string>& options,
                                               DropDatasourceResponse& response_ ) const
{
    DropDatasourceRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    submitRequest("/drop/datasource", actualRequest_, response_, false);
    return response_;
}

DropEnvironmentResponse GPUdb::dropEnvironment( const DropEnvironmentRequest& request_ ) const
{
    DropEnvironmentResponse actualResponse_;
    submitRequest("/drop/environment", request_, actualResponse_, false);
    return actualResponse_;
}

DropEnvironmentResponse& GPUdb::dropEnvironment( const DropEnvironmentRequest& request_,
                                                 DropEnvironmentResponse& response_ ) const
{
    submitRequest("/drop/environment", request_, response_, false);
    return response_;
}

DropEnvironmentResponse GPUdb::dropEnvironment( const std::string& environmentName,
                                                const std::map<std::string, std::string>& options ) const
{
    DropEnvironmentRequest actualRequest_;
    actualRequest_.environmentName = environmentName;
    actualRequest_.options = options;
    DropEnvironmentResponse actualResponse_;
    submitRequest("/drop/environment", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DropEnvironmentResponse& GPUdb::dropEnvironment( const std::string& environmentName,
                                                 const std::map<std::string, std::string>& options,
                                                 DropEnvironmentResponse& response_ ) const
{
    DropEnvironmentRequest actualRequest_;
    actualRequest_.environmentName = environmentName;
    actualRequest_.options = options;
    submitRequest("/drop/environment", actualRequest_, response_, false);
    return response_;
}

DropModelResponse GPUdb::dropModel( const DropModelRequest& request_ ) const
{
    DropModelResponse actualResponse_;
    submitRequest("/drop/model", request_, actualResponse_, false);
    return actualResponse_;
}

DropModelResponse& GPUdb::dropModel( const DropModelRequest& request_,
                                     DropModelResponse& response_ ) const
{
    submitRequest("/drop/model", request_, response_, false);
    return response_;
}

DropModelResponse GPUdb::dropModel( const std::string& modelName,
                                    const std::map<std::string, std::string>& options ) const
{
    DropModelRequest actualRequest_;
    actualRequest_.modelName = modelName;
    actualRequest_.options = options;
    DropModelResponse actualResponse_;
    submitRequest("/drop/model", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DropModelResponse& GPUdb::dropModel( const std::string& modelName,
                                     const std::map<std::string, std::string>& options,
                                     DropModelResponse& response_ ) const
{
    DropModelRequest actualRequest_;
    actualRequest_.modelName = modelName;
    actualRequest_.options = options;
    submitRequest("/drop/model", actualRequest_, response_, false);
    return response_;
}

DropSchemaResponse GPUdb::dropSchema( const DropSchemaRequest& request_ ) const
{
    DropSchemaResponse actualResponse_;
    submitRequest("/drop/schema", request_, actualResponse_, false);
    return actualResponse_;
}

DropSchemaResponse& GPUdb::dropSchema( const DropSchemaRequest& request_,
                                       DropSchemaResponse& response_ ) const
{
    submitRequest("/drop/schema", request_, response_, false);
    return response_;
}

DropSchemaResponse GPUdb::dropSchema( const std::string& schemaName,
                                      const std::map<std::string, std::string>& options ) const
{
    DropSchemaRequest actualRequest_;
    actualRequest_.schemaName = schemaName;
    actualRequest_.options = options;
    DropSchemaResponse actualResponse_;
    submitRequest("/drop/schema", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

DropSchemaResponse& GPUdb::dropSchema( const std::string& schemaName,
                                       const std::map<std::string, std::string>& options,
                                       DropSchemaResponse& response_ ) const
{
    DropSchemaRequest actualRequest_;
    actualRequest_.schemaName = schemaName;
    actualRequest_.options = options;
    submitRequest("/drop/schema", actualRequest_, response_, false);
    return response_;
}

EvaluateModelResponse GPUdb::evaluateModel( const EvaluateModelRequest& request_ ) const
{
    EvaluateModelResponse actualResponse_;
    submitRequest("/evaluate/model", request_, actualResponse_, false);
    return actualResponse_;
}

EvaluateModelResponse& GPUdb::evaluateModel( const EvaluateModelRequest& request_,
                                             EvaluateModelResponse& response_ ) const
{
    submitRequest("/evaluate/model", request_, response_, false);
    return response_;
}

EvaluateModelResponse GPUdb::evaluateModel( const std::string& modelName,
                                            const int32_t replicas,
                                            const std::string& deploymentMode,
                                            const std::string& sourceTable,
                                            const std::string& destinationTable,
                                            const std::map<std::string, std::string>& options ) const
{
    EvaluateModelRequest actualRequest_;
    actualRequest_.modelName = modelName;
    actualRequest_.replicas = replicas;
    actualRequest_.deploymentMode = deploymentMode;
    actualRequest_.sourceTable = sourceTable;
    actualRequest_.destinationTable = destinationTable;
    actualRequest_.options = options;
    EvaluateModelResponse actualResponse_;
    submitRequest("/evaluate/model", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

EvaluateModelResponse& GPUdb::evaluateModel( const std::string& modelName,
                                             const int32_t replicas,
                                             const std::string& deploymentMode,
                                             const std::string& sourceTable,
                                             const std::string& destinationTable,
                                             const std::map<std::string, std::string>& options,
                                             EvaluateModelResponse& response_ ) const
{
    EvaluateModelRequest actualRequest_;
    actualRequest_.modelName = modelName;
    actualRequest_.replicas = replicas;
    actualRequest_.deploymentMode = deploymentMode;
    actualRequest_.sourceTable = sourceTable;
    actualRequest_.destinationTable = destinationTable;
    actualRequest_.options = options;
    submitRequest("/evaluate/model", actualRequest_, response_, false);
    return response_;
}

ExecuteProcResponse GPUdb::executeProc( const ExecuteProcRequest& request_ ) const
{
    ExecuteProcResponse actualResponse_;
    submitRequest("/execute/proc", request_, actualResponse_, false);
    return actualResponse_;
}

ExecuteProcResponse& GPUdb::executeProc( const ExecuteProcRequest& request_,
                                         ExecuteProcResponse& response_ ) const
{
    submitRequest("/execute/proc", request_, response_, false);
    return response_;
}

ExecuteProcResponse GPUdb::executeProc( const std::string& procName,
                                        const std::map<std::string, std::string>& params,
                                        const std::map<std::string, std::vector<uint8_t> >& binParams,
                                        const std::vector<std::string>& inputTableNames,
                                        const std::map<std::string, std::vector<std::string> >& inputColumnNames,
                                        const std::vector<std::string>& outputTableNames,
                                        const std::map<std::string, std::string>& options ) const
{
    ExecuteProcRequest actualRequest_;
    actualRequest_.procName = procName;
    actualRequest_.params = params;
    actualRequest_.binParams = binParams;
    actualRequest_.inputTableNames = inputTableNames;
    actualRequest_.inputColumnNames = inputColumnNames;
    actualRequest_.outputTableNames = outputTableNames;
    actualRequest_.options = options;
    ExecuteProcResponse actualResponse_;
    submitRequest("/execute/proc", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ExecuteProcResponse& GPUdb::executeProc( const std::string& procName,
                                         const std::map<std::string, std::string>& params,
                                         const std::map<std::string, std::vector<uint8_t> >& binParams,
                                         const std::vector<std::string>& inputTableNames,
                                         const std::map<std::string, std::vector<std::string> >& inputColumnNames,
                                         const std::vector<std::string>& outputTableNames,
                                         const std::map<std::string, std::string>& options,
                                         ExecuteProcResponse& response_ ) const
{
    ExecuteProcRequest actualRequest_;
    actualRequest_.procName = procName;
    actualRequest_.params = params;
    actualRequest_.binParams = binParams;
    actualRequest_.inputTableNames = inputTableNames;
    actualRequest_.inputColumnNames = inputColumnNames;
    actualRequest_.outputTableNames = outputTableNames;
    actualRequest_.options = options;
    submitRequest("/execute/proc", actualRequest_, response_, false);
    return response_;
}

RawExecuteSqlResponse GPUdb::executeSqlRaw( const ExecuteSqlRequest& request_ ) const
{
    RawExecuteSqlResponse actualResponse_;
    submitRequest("/execute/sql", request_, actualResponse_, false);
    return actualResponse_;
}

RawExecuteSqlResponse& GPUdb::executeSqlRaw( const ExecuteSqlRequest& request_,
                                             RawExecuteSqlResponse& response_ ) const
{
    submitRequest("/execute/sql", request_, response_, false);
    return response_;
}

ExecuteSqlResponse GPUdb::executeSql( const ExecuteSqlRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawExecuteSqlResponse actualResponse_;
    submitRequest("/execute/sql", request_, actualResponse_, false);
    ExecuteSqlResponse response_;
    response_.countAffected = actualResponse_.countAffected;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.pagingTable = actualResponse_.pagingTable;
    response_.info = actualResponse_.info;
    return response_;
}

ExecuteSqlResponse& GPUdb::executeSql( const ExecuteSqlRequest& request_,
                                       ExecuteSqlResponse& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawExecuteSqlResponse actualResponse_;
    submitRequest("/execute/sql", request_, actualResponse_, false);
    response_.countAffected = actualResponse_.countAffected;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.pagingTable = actualResponse_.pagingTable;
    response_.info = actualResponse_.info;
    return response_;
}

ExecuteSqlResponse GPUdb::executeSql( const std::string& statement,
                                      const int64_t offset,
                                      const int64_t limit,
                                      const std::string& requestSchemaStr,
                                      const std::vector<std::vector<uint8_t> >& data,
                                      const std::map<std::string, std::string>& options ) const
{
    ExecuteSqlRequest actualRequest_;
    actualRequest_.statement = statement;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.requestSchemaStr = requestSchemaStr;
    actualRequest_.data = data;
    actualRequest_.options = options;
    RawExecuteSqlResponse actualResponse_;
    submitRequest("/execute/sql", actualRequest_, actualResponse_, false);
    ExecuteSqlResponse response_;
    response_.countAffected = actualResponse_.countAffected;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.pagingTable = actualResponse_.pagingTable;
    response_.info = actualResponse_.info;
    return response_;
}

ExecuteSqlResponse& GPUdb::executeSql( const std::string& statement,
                                       const int64_t offset,
                                       const int64_t limit,
                                       const std::string& requestSchemaStr,
                                       const std::vector<std::vector<uint8_t> >& data,
                                       const std::map<std::string, std::string>& options,
                                       ExecuteSqlResponse& response_ ) const
{
    ExecuteSqlRequest actualRequest_;
    actualRequest_.statement = statement;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.requestSchemaStr = requestSchemaStr;
    actualRequest_.data = data;
    actualRequest_.options = options;
    RawExecuteSqlResponse actualResponse_;
    submitRequest("/execute/sql", actualRequest_, actualResponse_, false);
    response_.countAffected = actualResponse_.countAffected;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.pagingTable = actualResponse_.pagingTable;
    response_.info = actualResponse_.info;
    return response_;
}

ExportQueryMetricsResponse GPUdb::exportQueryMetrics( const ExportQueryMetricsRequest& request_ ) const
{
    ExportQueryMetricsResponse actualResponse_;
    submitRequest("/export/query/metrics", request_, actualResponse_, false);
    return actualResponse_;
}

ExportQueryMetricsResponse& GPUdb::exportQueryMetrics( const ExportQueryMetricsRequest& request_,
                                                       ExportQueryMetricsResponse& response_ ) const
{
    submitRequest("/export/query/metrics", request_, response_, false);
    return response_;
}

ExportQueryMetricsResponse GPUdb::exportQueryMetrics( const std::map<std::string, std::string>& options ) const
{
    ExportQueryMetricsRequest actualRequest_;
    actualRequest_.options = options;
    ExportQueryMetricsResponse actualResponse_;
    submitRequest("/export/query/metrics", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ExportQueryMetricsResponse& GPUdb::exportQueryMetrics( const std::map<std::string, std::string>& options,
                                                       ExportQueryMetricsResponse& response_ ) const
{
    ExportQueryMetricsRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/export/query/metrics", actualRequest_, response_, false);
    return response_;
}

ExportRecordsToFilesResponse GPUdb::exportRecordsToFiles( const ExportRecordsToFilesRequest& request_ ) const
{
    ExportRecordsToFilesResponse actualResponse_;
    submitRequest("/export/records/tofiles", request_, actualResponse_, false);
    return actualResponse_;
}

ExportRecordsToFilesResponse& GPUdb::exportRecordsToFiles( const ExportRecordsToFilesRequest& request_,
                                                           ExportRecordsToFilesResponse& response_ ) const
{
    submitRequest("/export/records/tofiles", request_, response_, false);
    return response_;
}

ExportRecordsToFilesResponse GPUdb::exportRecordsToFiles( const std::string& tableName,
                                                          const std::string& filepath,
                                                          const std::map<std::string, std::string>& options ) const
{
    ExportRecordsToFilesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.filepath = filepath;
    actualRequest_.options = options;
    ExportRecordsToFilesResponse actualResponse_;
    submitRequest("/export/records/tofiles", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ExportRecordsToFilesResponse& GPUdb::exportRecordsToFiles( const std::string& tableName,
                                                           const std::string& filepath,
                                                           const std::map<std::string, std::string>& options,
                                                           ExportRecordsToFilesResponse& response_ ) const
{
    ExportRecordsToFilesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.filepath = filepath;
    actualRequest_.options = options;
    submitRequest("/export/records/tofiles", actualRequest_, response_, false);
    return response_;
}

ExportRecordsToTableResponse GPUdb::exportRecordsToTable( const ExportRecordsToTableRequest& request_ ) const
{
    ExportRecordsToTableResponse actualResponse_;
    submitRequest("/export/records/totable", request_, actualResponse_, false);
    return actualResponse_;
}

ExportRecordsToTableResponse& GPUdb::exportRecordsToTable( const ExportRecordsToTableRequest& request_,
                                                           ExportRecordsToTableResponse& response_ ) const
{
    submitRequest("/export/records/totable", request_, response_, false);
    return response_;
}

ExportRecordsToTableResponse GPUdb::exportRecordsToTable( const std::string& tableName,
                                                          const std::string& remoteQuery,
                                                          const std::map<std::string, std::string>& options ) const
{
    ExportRecordsToTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.remoteQuery = remoteQuery;
    actualRequest_.options = options;
    ExportRecordsToTableResponse actualResponse_;
    submitRequest("/export/records/totable", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ExportRecordsToTableResponse& GPUdb::exportRecordsToTable( const std::string& tableName,
                                                           const std::string& remoteQuery,
                                                           const std::map<std::string, std::string>& options,
                                                           ExportRecordsToTableResponse& response_ ) const
{
    ExportRecordsToTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.remoteQuery = remoteQuery;
    actualRequest_.options = options;
    submitRequest("/export/records/totable", actualRequest_, response_, false);
    return response_;
}

FilterResponse GPUdb::filter( const FilterRequest& request_ ) const
{
    FilterResponse actualResponse_;
    submitRequest("/filter", request_, actualResponse_, false);
    return actualResponse_;
}

FilterResponse& GPUdb::filter( const FilterRequest& request_,
                               FilterResponse& response_ ) const
{
    submitRequest("/filter", request_, response_, false);
    return response_;
}

FilterResponse GPUdb::filter( const std::string& tableName,
                              const std::string& viewName,
                              const std::string& expression,
                              const std::map<std::string, std::string>& options ) const
{
    FilterRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.expression = expression;
    actualRequest_.options = options;
    FilterResponse actualResponse_;
    submitRequest("/filter", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterResponse& GPUdb::filter( const std::string& tableName,
                               const std::string& viewName,
                               const std::string& expression,
                               const std::map<std::string, std::string>& options,
                               FilterResponse& response_ ) const
{
    FilterRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.expression = expression;
    actualRequest_.options = options;
    submitRequest("/filter", actualRequest_, response_, false);
    return response_;
}

FilterByAreaResponse GPUdb::filterByArea( const FilterByAreaRequest& request_ ) const
{
    FilterByAreaResponse actualResponse_;
    submitRequest("/filter/byarea", request_, actualResponse_, false);
    return actualResponse_;
}

FilterByAreaResponse& GPUdb::filterByArea( const FilterByAreaRequest& request_,
                                           FilterByAreaResponse& response_ ) const
{
    submitRequest("/filter/byarea", request_, response_, false);
    return response_;
}

FilterByAreaResponse GPUdb::filterByArea( const std::string& tableName,
                                          const std::string& viewName,
                                          const std::string& xColumnName,
                                          const std::vector<double>& xVector,
                                          const std::string& yColumnName,
                                          const std::vector<double>& yVector,
                                          const std::map<std::string, std::string>& options ) const
{
    FilterByAreaRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.xVector = xVector;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.yVector = yVector;
    actualRequest_.options = options;
    FilterByAreaResponse actualResponse_;
    submitRequest("/filter/byarea", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterByAreaResponse& GPUdb::filterByArea( const std::string& tableName,
                                           const std::string& viewName,
                                           const std::string& xColumnName,
                                           const std::vector<double>& xVector,
                                           const std::string& yColumnName,
                                           const std::vector<double>& yVector,
                                           const std::map<std::string, std::string>& options,
                                           FilterByAreaResponse& response_ ) const
{
    FilterByAreaRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.xVector = xVector;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.yVector = yVector;
    actualRequest_.options = options;
    submitRequest("/filter/byarea", actualRequest_, response_, false);
    return response_;
}

FilterByAreaGeometryResponse GPUdb::filterByAreaGeometry( const FilterByAreaGeometryRequest& request_ ) const
{
    FilterByAreaGeometryResponse actualResponse_;
    submitRequest("/filter/byarea/geometry", request_, actualResponse_, false);
    return actualResponse_;
}

FilterByAreaGeometryResponse& GPUdb::filterByAreaGeometry( const FilterByAreaGeometryRequest& request_,
                                                           FilterByAreaGeometryResponse& response_ ) const
{
    submitRequest("/filter/byarea/geometry", request_, response_, false);
    return response_;
}

FilterByAreaGeometryResponse GPUdb::filterByAreaGeometry( const std::string& tableName,
                                                          const std::string& viewName,
                                                          const std::string& columnName,
                                                          const std::vector<double>& xVector,
                                                          const std::vector<double>& yVector,
                                                          const std::map<std::string, std::string>& options ) const
{
    FilterByAreaGeometryRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnName = columnName;
    actualRequest_.xVector = xVector;
    actualRequest_.yVector = yVector;
    actualRequest_.options = options;
    FilterByAreaGeometryResponse actualResponse_;
    submitRequest("/filter/byarea/geometry", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterByAreaGeometryResponse& GPUdb::filterByAreaGeometry( const std::string& tableName,
                                                           const std::string& viewName,
                                                           const std::string& columnName,
                                                           const std::vector<double>& xVector,
                                                           const std::vector<double>& yVector,
                                                           const std::map<std::string, std::string>& options,
                                                           FilterByAreaGeometryResponse& response_ ) const
{
    FilterByAreaGeometryRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnName = columnName;
    actualRequest_.xVector = xVector;
    actualRequest_.yVector = yVector;
    actualRequest_.options = options;
    submitRequest("/filter/byarea/geometry", actualRequest_, response_, false);
    return response_;
}

FilterByBoxResponse GPUdb::filterByBox( const FilterByBoxRequest& request_ ) const
{
    FilterByBoxResponse actualResponse_;
    submitRequest("/filter/bybox", request_, actualResponse_, false);
    return actualResponse_;
}

FilterByBoxResponse& GPUdb::filterByBox( const FilterByBoxRequest& request_,
                                         FilterByBoxResponse& response_ ) const
{
    submitRequest("/filter/bybox", request_, response_, false);
    return response_;
}

FilterByBoxResponse GPUdb::filterByBox( const std::string& tableName,
                                        const std::string& viewName,
                                        const std::string& xColumnName,
                                        const double minX,
                                        const double maxX,
                                        const std::string& yColumnName,
                                        const double minY,
                                        const double maxY,
                                        const std::map<std::string, std::string>& options ) const
{
    FilterByBoxRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.options = options;
    FilterByBoxResponse actualResponse_;
    submitRequest("/filter/bybox", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterByBoxResponse& GPUdb::filterByBox( const std::string& tableName,
                                         const std::string& viewName,
                                         const std::string& xColumnName,
                                         const double minX,
                                         const double maxX,
                                         const std::string& yColumnName,
                                         const double minY,
                                         const double maxY,
                                         const std::map<std::string, std::string>& options,
                                         FilterByBoxResponse& response_ ) const
{
    FilterByBoxRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.options = options;
    submitRequest("/filter/bybox", actualRequest_, response_, false);
    return response_;
}

FilterByBoxGeometryResponse GPUdb::filterByBoxGeometry( const FilterByBoxGeometryRequest& request_ ) const
{
    FilterByBoxGeometryResponse actualResponse_;
    submitRequest("/filter/bybox/geometry", request_, actualResponse_, false);
    return actualResponse_;
}

FilterByBoxGeometryResponse& GPUdb::filterByBoxGeometry( const FilterByBoxGeometryRequest& request_,
                                                         FilterByBoxGeometryResponse& response_ ) const
{
    submitRequest("/filter/bybox/geometry", request_, response_, false);
    return response_;
}

FilterByBoxGeometryResponse GPUdb::filterByBoxGeometry( const std::string& tableName,
                                                        const std::string& viewName,
                                                        const std::string& columnName,
                                                        const double minX,
                                                        const double maxX,
                                                        const double minY,
                                                        const double maxY,
                                                        const std::map<std::string, std::string>& options ) const
{
    FilterByBoxGeometryRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnName = columnName;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.options = options;
    FilterByBoxGeometryResponse actualResponse_;
    submitRequest("/filter/bybox/geometry", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterByBoxGeometryResponse& GPUdb::filterByBoxGeometry( const std::string& tableName,
                                                         const std::string& viewName,
                                                         const std::string& columnName,
                                                         const double minX,
                                                         const double maxX,
                                                         const double minY,
                                                         const double maxY,
                                                         const std::map<std::string, std::string>& options,
                                                         FilterByBoxGeometryResponse& response_ ) const
{
    FilterByBoxGeometryRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnName = columnName;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.options = options;
    submitRequest("/filter/bybox/geometry", actualRequest_, response_, false);
    return response_;
}

FilterByGeometryResponse GPUdb::filterByGeometry( const FilterByGeometryRequest& request_ ) const
{
    FilterByGeometryResponse actualResponse_;
    submitRequest("/filter/bygeometry", request_, actualResponse_, false);
    return actualResponse_;
}

FilterByGeometryResponse& GPUdb::filterByGeometry( const FilterByGeometryRequest& request_,
                                                   FilterByGeometryResponse& response_ ) const
{
    submitRequest("/filter/bygeometry", request_, response_, false);
    return response_;
}

FilterByGeometryResponse GPUdb::filterByGeometry( const std::string& tableName,
                                                  const std::string& viewName,
                                                  const std::string& columnName,
                                                  const std::string& inputWkt,
                                                  const std::string& operation,
                                                  const std::map<std::string, std::string>& options ) const
{
    FilterByGeometryRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnName = columnName;
    actualRequest_.inputWkt = inputWkt;
    actualRequest_.operation = operation;
    actualRequest_.options = options;
    FilterByGeometryResponse actualResponse_;
    submitRequest("/filter/bygeometry", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterByGeometryResponse& GPUdb::filterByGeometry( const std::string& tableName,
                                                   const std::string& viewName,
                                                   const std::string& columnName,
                                                   const std::string& inputWkt,
                                                   const std::string& operation,
                                                   const std::map<std::string, std::string>& options,
                                                   FilterByGeometryResponse& response_ ) const
{
    FilterByGeometryRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnName = columnName;
    actualRequest_.inputWkt = inputWkt;
    actualRequest_.operation = operation;
    actualRequest_.options = options;
    submitRequest("/filter/bygeometry", actualRequest_, response_, false);
    return response_;
}

FilterByListResponse GPUdb::filterByList( const FilterByListRequest& request_ ) const
{
    FilterByListResponse actualResponse_;
    submitRequest("/filter/bylist", request_, actualResponse_, false);
    return actualResponse_;
}

FilterByListResponse& GPUdb::filterByList( const FilterByListRequest& request_,
                                           FilterByListResponse& response_ ) const
{
    submitRequest("/filter/bylist", request_, response_, false);
    return response_;
}

FilterByListResponse GPUdb::filterByList( const std::string& tableName,
                                          const std::string& viewName,
                                          const std::map<std::string, std::vector<std::string> >& columnValuesMap,
                                          const std::map<std::string, std::string>& options ) const
{
    FilterByListRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnValuesMap = columnValuesMap;
    actualRequest_.options = options;
    FilterByListResponse actualResponse_;
    submitRequest("/filter/bylist", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterByListResponse& GPUdb::filterByList( const std::string& tableName,
                                           const std::string& viewName,
                                           const std::map<std::string, std::vector<std::string> >& columnValuesMap,
                                           const std::map<std::string, std::string>& options,
                                           FilterByListResponse& response_ ) const
{
    FilterByListRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnValuesMap = columnValuesMap;
    actualRequest_.options = options;
    submitRequest("/filter/bylist", actualRequest_, response_, false);
    return response_;
}

FilterByRadiusResponse GPUdb::filterByRadius( const FilterByRadiusRequest& request_ ) const
{
    FilterByRadiusResponse actualResponse_;
    submitRequest("/filter/byradius", request_, actualResponse_, false);
    return actualResponse_;
}

FilterByRadiusResponse& GPUdb::filterByRadius( const FilterByRadiusRequest& request_,
                                               FilterByRadiusResponse& response_ ) const
{
    submitRequest("/filter/byradius", request_, response_, false);
    return response_;
}

FilterByRadiusResponse GPUdb::filterByRadius( const std::string& tableName,
                                              const std::string& viewName,
                                              const std::string& xColumnName,
                                              const double xCenter,
                                              const std::string& yColumnName,
                                              const double yCenter,
                                              const double radius,
                                              const std::map<std::string, std::string>& options ) const
{
    FilterByRadiusRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.xCenter = xCenter;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.yCenter = yCenter;
    actualRequest_.radius = radius;
    actualRequest_.options = options;
    FilterByRadiusResponse actualResponse_;
    submitRequest("/filter/byradius", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterByRadiusResponse& GPUdb::filterByRadius( const std::string& tableName,
                                               const std::string& viewName,
                                               const std::string& xColumnName,
                                               const double xCenter,
                                               const std::string& yColumnName,
                                               const double yCenter,
                                               const double radius,
                                               const std::map<std::string, std::string>& options,
                                               FilterByRadiusResponse& response_ ) const
{
    FilterByRadiusRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.xCenter = xCenter;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.yCenter = yCenter;
    actualRequest_.radius = radius;
    actualRequest_.options = options;
    submitRequest("/filter/byradius", actualRequest_, response_, false);
    return response_;
}

FilterByRadiusGeometryResponse GPUdb::filterByRadiusGeometry( const FilterByRadiusGeometryRequest& request_ ) const
{
    FilterByRadiusGeometryResponse actualResponse_;
    submitRequest("/filter/byradius/geometry", request_, actualResponse_, false);
    return actualResponse_;
}

FilterByRadiusGeometryResponse& GPUdb::filterByRadiusGeometry( const FilterByRadiusGeometryRequest& request_,
                                                               FilterByRadiusGeometryResponse& response_ ) const
{
    submitRequest("/filter/byradius/geometry", request_, response_, false);
    return response_;
}

FilterByRadiusGeometryResponse GPUdb::filterByRadiusGeometry( const std::string& tableName,
                                                              const std::string& viewName,
                                                              const std::string& columnName,
                                                              const double xCenter,
                                                              const double yCenter,
                                                              const double radius,
                                                              const std::map<std::string, std::string>& options ) const
{
    FilterByRadiusGeometryRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnName = columnName;
    actualRequest_.xCenter = xCenter;
    actualRequest_.yCenter = yCenter;
    actualRequest_.radius = radius;
    actualRequest_.options = options;
    FilterByRadiusGeometryResponse actualResponse_;
    submitRequest("/filter/byradius/geometry", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterByRadiusGeometryResponse& GPUdb::filterByRadiusGeometry( const std::string& tableName,
                                                               const std::string& viewName,
                                                               const std::string& columnName,
                                                               const double xCenter,
                                                               const double yCenter,
                                                               const double radius,
                                                               const std::map<std::string, std::string>& options,
                                                               FilterByRadiusGeometryResponse& response_ ) const
{
    FilterByRadiusGeometryRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnName = columnName;
    actualRequest_.xCenter = xCenter;
    actualRequest_.yCenter = yCenter;
    actualRequest_.radius = radius;
    actualRequest_.options = options;
    submitRequest("/filter/byradius/geometry", actualRequest_, response_, false);
    return response_;
}

FilterByRangeResponse GPUdb::filterByRange( const FilterByRangeRequest& request_ ) const
{
    FilterByRangeResponse actualResponse_;
    submitRequest("/filter/byrange", request_, actualResponse_, false);
    return actualResponse_;
}

FilterByRangeResponse& GPUdb::filterByRange( const FilterByRangeRequest& request_,
                                             FilterByRangeResponse& response_ ) const
{
    submitRequest("/filter/byrange", request_, response_, false);
    return response_;
}

FilterByRangeResponse GPUdb::filterByRange( const std::string& tableName,
                                            const std::string& viewName,
                                            const std::string& columnName,
                                            const double lowerBound,
                                            const double upperBound,
                                            const std::map<std::string, std::string>& options ) const
{
    FilterByRangeRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnName = columnName;
    actualRequest_.lowerBound = lowerBound;
    actualRequest_.upperBound = upperBound;
    actualRequest_.options = options;
    FilterByRangeResponse actualResponse_;
    submitRequest("/filter/byrange", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterByRangeResponse& GPUdb::filterByRange( const std::string& tableName,
                                             const std::string& viewName,
                                             const std::string& columnName,
                                             const double lowerBound,
                                             const double upperBound,
                                             const std::map<std::string, std::string>& options,
                                             FilterByRangeResponse& response_ ) const
{
    FilterByRangeRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnName = columnName;
    actualRequest_.lowerBound = lowerBound;
    actualRequest_.upperBound = upperBound;
    actualRequest_.options = options;
    submitRequest("/filter/byrange", actualRequest_, response_, false);
    return response_;
}

FilterBySeriesResponse GPUdb::filterBySeries( const FilterBySeriesRequest& request_ ) const
{
    FilterBySeriesResponse actualResponse_;
    submitRequest("/filter/byseries", request_, actualResponse_, false);
    return actualResponse_;
}

FilterBySeriesResponse& GPUdb::filterBySeries( const FilterBySeriesRequest& request_,
                                               FilterBySeriesResponse& response_ ) const
{
    submitRequest("/filter/byseries", request_, response_, false);
    return response_;
}

FilterBySeriesResponse GPUdb::filterBySeries( const std::string& tableName,
                                              const std::string& viewName,
                                              const std::string& trackId,
                                              const std::vector<std::string>& targetTrackIds,
                                              const std::map<std::string, std::string>& options ) const
{
    FilterBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.trackId = trackId;
    actualRequest_.targetTrackIds = targetTrackIds;
    actualRequest_.options = options;
    FilterBySeriesResponse actualResponse_;
    submitRequest("/filter/byseries", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterBySeriesResponse& GPUdb::filterBySeries( const std::string& tableName,
                                               const std::string& viewName,
                                               const std::string& trackId,
                                               const std::vector<std::string>& targetTrackIds,
                                               const std::map<std::string, std::string>& options,
                                               FilterBySeriesResponse& response_ ) const
{
    FilterBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.trackId = trackId;
    actualRequest_.targetTrackIds = targetTrackIds;
    actualRequest_.options = options;
    submitRequest("/filter/byseries", actualRequest_, response_, false);
    return response_;
}

FilterByStringResponse GPUdb::filterByString( const FilterByStringRequest& request_ ) const
{
    FilterByStringResponse actualResponse_;
    submitRequest("/filter/bystring", request_, actualResponse_, false);
    return actualResponse_;
}

FilterByStringResponse& GPUdb::filterByString( const FilterByStringRequest& request_,
                                               FilterByStringResponse& response_ ) const
{
    submitRequest("/filter/bystring", request_, response_, false);
    return response_;
}

FilterByStringResponse GPUdb::filterByString( const std::string& tableName,
                                              const std::string& viewName,
                                              const std::string& expression,
                                              const std::string& mode,
                                              const std::vector<std::string>& columnNames,
                                              const std::map<std::string, std::string>& options ) const
{
    FilterByStringRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.expression = expression;
    actualRequest_.mode = mode;
    actualRequest_.columnNames = columnNames;
    actualRequest_.options = options;
    FilterByStringResponse actualResponse_;
    submitRequest("/filter/bystring", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterByStringResponse& GPUdb::filterByString( const std::string& tableName,
                                               const std::string& viewName,
                                               const std::string& expression,
                                               const std::string& mode,
                                               const std::vector<std::string>& columnNames,
                                               const std::map<std::string, std::string>& options,
                                               FilterByStringResponse& response_ ) const
{
    FilterByStringRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.expression = expression;
    actualRequest_.mode = mode;
    actualRequest_.columnNames = columnNames;
    actualRequest_.options = options;
    submitRequest("/filter/bystring", actualRequest_, response_, false);
    return response_;
}

FilterByTableResponse GPUdb::filterByTable( const FilterByTableRequest& request_ ) const
{
    FilterByTableResponse actualResponse_;
    submitRequest("/filter/bytable", request_, actualResponse_, false);
    return actualResponse_;
}

FilterByTableResponse& GPUdb::filterByTable( const FilterByTableRequest& request_,
                                             FilterByTableResponse& response_ ) const
{
    submitRequest("/filter/bytable", request_, response_, false);
    return response_;
}

FilterByTableResponse GPUdb::filterByTable( const std::string& tableName,
                                            const std::string& viewName,
                                            const std::string& columnName,
                                            const std::string& sourceTableName,
                                            const std::string& sourceTableColumnName,
                                            const std::map<std::string, std::string>& options ) const
{
    FilterByTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnName = columnName;
    actualRequest_.sourceTableName = sourceTableName;
    actualRequest_.sourceTableColumnName = sourceTableColumnName;
    actualRequest_.options = options;
    FilterByTableResponse actualResponse_;
    submitRequest("/filter/bytable", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterByTableResponse& GPUdb::filterByTable( const std::string& tableName,
                                             const std::string& viewName,
                                             const std::string& columnName,
                                             const std::string& sourceTableName,
                                             const std::string& sourceTableColumnName,
                                             const std::map<std::string, std::string>& options,
                                             FilterByTableResponse& response_ ) const
{
    FilterByTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.columnName = columnName;
    actualRequest_.sourceTableName = sourceTableName;
    actualRequest_.sourceTableColumnName = sourceTableColumnName;
    actualRequest_.options = options;
    submitRequest("/filter/bytable", actualRequest_, response_, false);
    return response_;
}

FilterByValueResponse GPUdb::filterByValue( const FilterByValueRequest& request_ ) const
{
    FilterByValueResponse actualResponse_;
    submitRequest("/filter/byvalue", request_, actualResponse_, false);
    return actualResponse_;
}

FilterByValueResponse& GPUdb::filterByValue( const FilterByValueRequest& request_,
                                             FilterByValueResponse& response_ ) const
{
    submitRequest("/filter/byvalue", request_, response_, false);
    return response_;
}

FilterByValueResponse GPUdb::filterByValue( const std::string& tableName,
                                            const std::string& viewName,
                                            const bool isString,
                                            const double value,
                                            const std::string& valueStr,
                                            const std::string& columnName,
                                            const std::map<std::string, std::string>& options ) const
{
    FilterByValueRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.isString = isString;
    actualRequest_.value = value;
    actualRequest_.valueStr = valueStr;
    actualRequest_.columnName = columnName;
    actualRequest_.options = options;
    FilterByValueResponse actualResponse_;
    submitRequest("/filter/byvalue", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

FilterByValueResponse& GPUdb::filterByValue( const std::string& tableName,
                                             const std::string& viewName,
                                             const bool isString,
                                             const double value,
                                             const std::string& valueStr,
                                             const std::string& columnName,
                                             const std::map<std::string, std::string>& options,
                                             FilterByValueResponse& response_ ) const
{
    FilterByValueRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.viewName = viewName;
    actualRequest_.isString = isString;
    actualRequest_.value = value;
    actualRequest_.valueStr = valueStr;
    actualRequest_.columnName = columnName;
    actualRequest_.options = options;
    submitRequest("/filter/byvalue", actualRequest_, response_, false);
    return response_;
}

GetJobResponse GPUdb::getJob( const GetJobRequest& request_ ) const
{
    GetJobResponse actualResponse_;
    submitRequest("/get/job", request_, actualResponse_, false);
    return actualResponse_;
}

GetJobResponse& GPUdb::getJob( const GetJobRequest& request_,
                               GetJobResponse& response_ ) const
{
    submitRequest("/get/job", request_, response_, false);
    return response_;
}

GetJobResponse GPUdb::getJob( const int64_t jobId,
                              const std::map<std::string, std::string>& options ) const
{
    GetJobRequest actualRequest_;
    actualRequest_.jobId = jobId;
    actualRequest_.options = options;
    GetJobResponse actualResponse_;
    submitRequest("/get/job", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

GetJobResponse& GPUdb::getJob( const int64_t jobId,
                               const std::map<std::string, std::string>& options,
                               GetJobResponse& response_ ) const
{
    GetJobRequest actualRequest_;
    actualRequest_.jobId = jobId;
    actualRequest_.options = options;
    submitRequest("/get/job", actualRequest_, response_, false);
    return response_;
}

RawGetRecordsResponse GPUdb::getRecordsRaw( const GetRecordsRequest& request_ ) const
{
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    return actualResponse_;
}

RawGetRecordsResponse& GPUdb::getRecordsRaw( const GetRecordsRequest& request_,
                                             RawGetRecordsResponse& response_ ) const
{
    submitRequest("/get/records", request_, response_, false);
    return response_;
}

template<>
GetRecordsResponse<boost::any> GPUdb::getRecords( const GetRecordsRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    GetRecordsResponse<boost::any> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    avro::DecoderPtr dataDecoder_ = getDecoder(actualResponse_.typeName);
    dataDecoder_->resizeVector(response_.data, actualResponse_.recordsBinary.size());
    dataDecoder_->decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

template<>
GetRecordsResponse<boost::any>& GPUdb::getRecords( const GetRecordsRequest& request_,
                                                   GetRecordsResponse<boost::any>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    avro::DecoderPtr dataDecoder_ = getDecoder(actualResponse_.typeName);
    dataDecoder_->resizeVector(response_.data, actualResponse_.recordsBinary.size());
    dataDecoder_->decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

template<>
GetRecordsResponse<boost::any> GPUdb::getRecords( const std::string& tableName,
                                                  const int64_t offset,
                                                  const int64_t limit,
                                                  const std::map<std::string, std::string>& options ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    GetRecordsResponse<boost::any> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    avro::DecoderPtr dataDecoder_ = getDecoder(actualResponse_.typeName);
    dataDecoder_->resizeVector(response_.data, actualResponse_.recordsBinary.size());
    dataDecoder_->decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

template<>
GetRecordsResponse<boost::any>& GPUdb::getRecords( const std::string& tableName,
                                                   const int64_t offset,
                                                   const int64_t limit,
                                                   const std::map<std::string, std::string>& options,
                                                   GetRecordsResponse<boost::any>& response_ ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    avro::DecoderPtr dataDecoder_ = getDecoder(actualResponse_.typeName);
    dataDecoder_->resizeVector(response_.data, actualResponse_.recordsBinary.size());
    dataDecoder_->decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

RawGetRecordsByColumnResponse GPUdb::getRecordsByColumnRaw( const GetRecordsByColumnRequest& request_ ) const
{
    RawGetRecordsByColumnResponse actualResponse_;
    submitRequest("/get/records/bycolumn", request_, actualResponse_, false);
    return actualResponse_;
}

RawGetRecordsByColumnResponse& GPUdb::getRecordsByColumnRaw( const GetRecordsByColumnRequest& request_,
                                                             RawGetRecordsByColumnResponse& response_ ) const
{
    submitRequest("/get/records/bycolumn", request_, response_, false);
    return response_;
}

GetRecordsByColumnResponse GPUdb::getRecordsByColumn( const GetRecordsByColumnRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsByColumnResponse actualResponse_;
    submitRequest("/get/records/bycolumn", request_, actualResponse_, false);
    GetRecordsByColumnResponse response_;
    response_.tableName = actualResponse_.tableName;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

GetRecordsByColumnResponse& GPUdb::getRecordsByColumn( const GetRecordsByColumnRequest& request_,
                                                       GetRecordsByColumnResponse& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsByColumnResponse actualResponse_;
    submitRequest("/get/records/bycolumn", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

GetRecordsByColumnResponse GPUdb::getRecordsByColumn( const std::string& tableName,
                                                      const std::vector<std::string>& columnNames,
                                                      const int64_t offset,
                                                      const int64_t limit,
                                                      const std::map<std::string, std::string>& options ) const
{
    GetRecordsByColumnRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnNames = columnNames;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsByColumnResponse actualResponse_;
    submitRequest("/get/records/bycolumn", actualRequest_, actualResponse_, false);
    GetRecordsByColumnResponse response_;
    response_.tableName = actualResponse_.tableName;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

GetRecordsByColumnResponse& GPUdb::getRecordsByColumn( const std::string& tableName,
                                                       const std::vector<std::string>& columnNames,
                                                       const int64_t offset,
                                                       const int64_t limit,
                                                       const std::map<std::string, std::string>& options,
                                                       GetRecordsByColumnResponse& response_ ) const
{
    GetRecordsByColumnRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.columnNames = columnNames;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsByColumnResponse actualResponse_;
    submitRequest("/get/records/bycolumn", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.responseSchemaStr = actualResponse_.responseSchemaStr;
    gpudb::GenericRecord::transpose( actualResponse_.responseSchemaStr, actualResponse_.binaryEncodedResponse, response_.data, response_.dataTypePtr );
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    response_.info = actualResponse_.info;
    return response_;
}

RawGetRecordsBySeriesResponse GPUdb::getRecordsBySeriesRaw( const GetRecordsBySeriesRequest& request_ ) const
{
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    return actualResponse_;
}

RawGetRecordsBySeriesResponse& GPUdb::getRecordsBySeriesRaw( const GetRecordsBySeriesRequest& request_,
                                                             RawGetRecordsBySeriesResponse& response_ ) const
{
    submitRequest("/get/records/byseries", request_, response_, false);
    return response_;
}

template<>
GetRecordsBySeriesResponse<boost::any> GPUdb::getRecordsBySeries( const GetRecordsBySeriesRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    GetRecordsBySeriesResponse<boost::any> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<boost::any>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        avro::DecoderPtr decoder_ = getDecoder(actualResponse_.typeNames[i_]);
        decoder_->resizeVector(response_.data[i_], actualResponse_.listRecordsBinary[i_].size());
        decoder_->decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

template<>
GetRecordsBySeriesResponse<boost::any>& GPUdb::getRecordsBySeries( const GetRecordsBySeriesRequest& request_,
                                                                   GetRecordsBySeriesResponse<boost::any>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<boost::any>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        avro::DecoderPtr decoder_ = getDecoder(actualResponse_.typeNames[i_]);
        decoder_->resizeVector(response_.data[i_], actualResponse_.listRecordsBinary[i_].size());
        decoder_->decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

template<>
GetRecordsBySeriesResponse<boost::any> GPUdb::getRecordsBySeries( const std::string& tableName,
                                                                  const std::string& worldTableName,
                                                                  const int32_t offset,
                                                                  const int32_t limit,
                                                                  const std::map<std::string, std::string>& options ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    GetRecordsBySeriesResponse<boost::any> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<boost::any>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        avro::DecoderPtr decoder_ = getDecoder(actualResponse_.typeNames[i_]);
        decoder_->resizeVector(response_.data[i_], actualResponse_.listRecordsBinary[i_].size());
        decoder_->decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

template<>
GetRecordsBySeriesResponse<boost::any>& GPUdb::getRecordsBySeries( const std::string& tableName,
                                                                   const std::string& worldTableName,
                                                                   const int32_t offset,
                                                                   const int32_t limit,
                                                                   const std::map<std::string, std::string>& options,
                                                                   GetRecordsBySeriesResponse<boost::any>& response_ ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<boost::any>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        avro::DecoderPtr decoder_ = getDecoder(actualResponse_.typeNames[i_]);
        decoder_->resizeVector(response_.data[i_], actualResponse_.listRecordsBinary[i_].size());
        decoder_->decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    response_.info = actualResponse_.info;
    return response_;
}

RawGetRecordsFromCollectionResponse GPUdb::getRecordsFromCollectionRaw( const GetRecordsFromCollectionRequest& request_ ) const
{
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    return actualResponse_;
}

RawGetRecordsFromCollectionResponse& GPUdb::getRecordsFromCollectionRaw( const GetRecordsFromCollectionRequest& request_,
                                                                         RawGetRecordsFromCollectionResponse& response_ ) const
{
    submitRequest("/get/records/fromcollection", request_, response_, false);
    return response_;
}

template<>
GetRecordsFromCollectionResponse<boost::any> GPUdb::getRecordsFromCollection( const GetRecordsFromCollectionRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    GetRecordsFromCollectionResponse<boost::any> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;

    if (actualResponse_.recordsBinary.size() > 0)
    {
        response_.data.reserve(actualResponse_.recordsBinary.size());
        std::string& lastTypeId_ = actualResponse_.typeNames[0];
        size_t start_ = 0;

        for (std::vector<std::vector<uint8_t> >::size_type i_ = 1; i_ < actualResponse_.recordsBinary.size(); ++i_)
        {
            std::string& typeId_ = actualResponse_.typeNames[i_];

            if (typeId_ != lastTypeId_)
            {
                avro::DecoderPtr decoder_ = getDecoder(lastTypeId_);
                decoder_->resizeVector(response_.data, i_);
                decoder_->decode(&response_.data[start_], &actualResponse_.recordsBinary[start_], i_ - start_, this->m_threadCount, this->m_executor);
                lastTypeId_ = typeId_;
                start_ = i_;
            }
        }

        avro::DecoderPtr decoder_ = getDecoder(lastTypeId_);
        decoder_->resizeVector(response_.data, actualResponse_.recordsBinary.size());
        decoder_->decode(&response_.data[start_], &actualResponse_.recordsBinary[start_], actualResponse_.recordsBinary.size() - start_, this->m_threadCount, this->m_executor);
    }
    else
    {
        response_.data.clear();
    }

    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

template<>
GetRecordsFromCollectionResponse<boost::any>& GPUdb::getRecordsFromCollection( const GetRecordsFromCollectionRequest& request_,
                                                                               GetRecordsFromCollectionResponse<boost::any>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;

    if (actualResponse_.recordsBinary.size() > 0)
    {
        response_.data.reserve(actualResponse_.recordsBinary.size());
        std::string& lastTypeId_ = actualResponse_.typeNames[0];
        size_t start_ = 0;

        for (std::vector<std::vector<uint8_t> >::size_type i_ = 1; i_ < actualResponse_.recordsBinary.size(); ++i_)
        {
            std::string& typeId_ = actualResponse_.typeNames[i_];

            if (typeId_ != lastTypeId_)
            {
                avro::DecoderPtr decoder_ = getDecoder(lastTypeId_);
                decoder_->resizeVector(response_.data, i_);
                decoder_->decode(&response_.data[start_], &actualResponse_.recordsBinary[start_], i_ - start_, this->m_threadCount, this->m_executor);
                lastTypeId_ = typeId_;
                start_ = i_;
            }
        }

        avro::DecoderPtr decoder_ = getDecoder(lastTypeId_);
        decoder_->resizeVector(response_.data, actualResponse_.recordsBinary.size());
        decoder_->decode(&response_.data[start_], &actualResponse_.recordsBinary[start_], actualResponse_.recordsBinary.size() - start_, this->m_threadCount, this->m_executor);
    }
    else
    {
        response_.data.clear();
    }

    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

template<>
GetRecordsFromCollectionResponse<boost::any> GPUdb::getRecordsFromCollection( const std::string& tableName,
                                                                              const int64_t offset,
                                                                              const int64_t limit,
                                                                              const std::map<std::string, std::string>& options ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    GetRecordsFromCollectionResponse<boost::any> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;

    if (actualResponse_.recordsBinary.size() > 0)
    {
        response_.data.reserve(actualResponse_.recordsBinary.size());
        std::string& lastTypeId_ = actualResponse_.typeNames[0];
        size_t start_ = 0;

        for (std::vector<std::vector<uint8_t> >::size_type i_ = 1; i_ < actualResponse_.recordsBinary.size(); ++i_)
        {
            std::string& typeId_ = actualResponse_.typeNames[i_];

            if (typeId_ != lastTypeId_)
            {
                avro::DecoderPtr decoder_ = getDecoder(lastTypeId_);
                decoder_->resizeVector(response_.data, i_);
                decoder_->decode(&response_.data[start_], &actualResponse_.recordsBinary[start_], i_ - start_, this->m_threadCount, this->m_executor);
                lastTypeId_ = typeId_;
                start_ = i_;
            }
        }

        avro::DecoderPtr decoder_ = getDecoder(lastTypeId_);
        decoder_->resizeVector(response_.data, actualResponse_.recordsBinary.size());
        decoder_->decode(&response_.data[start_], &actualResponse_.recordsBinary[start_], actualResponse_.recordsBinary.size() - start_, this->m_threadCount, this->m_executor);
    }
    else
    {
        response_.data.clear();
    }

    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

template<>
GetRecordsFromCollectionResponse<boost::any>& GPUdb::getRecordsFromCollection( const std::string& tableName,
                                                                               const int64_t offset,
                                                                               const int64_t limit,
                                                                               const std::map<std::string, std::string>& options,
                                                                               GetRecordsFromCollectionResponse<boost::any>& response_ ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;

    if (actualResponse_.recordsBinary.size() > 0)
    {
        response_.data.reserve(actualResponse_.recordsBinary.size());
        std::string& lastTypeId_ = actualResponse_.typeNames[0];
        size_t start_ = 0;

        for (std::vector<std::vector<uint8_t> >::size_type i_ = 1; i_ < actualResponse_.recordsBinary.size(); ++i_)
        {
            std::string& typeId_ = actualResponse_.typeNames[i_];

            if (typeId_ != lastTypeId_)
            {
                avro::DecoderPtr decoder_ = getDecoder(lastTypeId_);
                decoder_->resizeVector(response_.data, i_);
                decoder_->decode(&response_.data[start_], &actualResponse_.recordsBinary[start_], i_ - start_, this->m_threadCount, this->m_executor);
                lastTypeId_ = typeId_;
                start_ = i_;
            }
        }

        avro::DecoderPtr decoder_ = getDecoder(lastTypeId_);
        decoder_->resizeVector(response_.data, actualResponse_.recordsBinary.size());
        decoder_->decode(&response_.data[start_], &actualResponse_.recordsBinary[start_], actualResponse_.recordsBinary.size() - start_, this->m_threadCount, this->m_executor);
    }
    else
    {
        response_.data.clear();
    }

    response_.recordIds = actualResponse_.recordIds;
    response_.info = actualResponse_.info;
    return response_;
}

GetVectortileResponse GPUdb::getVectortile( const GetVectortileRequest& request_ ) const
{
    GetVectortileResponse actualResponse_;
    submitRequest("/get/vectortile", request_, actualResponse_, false);
    return actualResponse_;
}

GetVectortileResponse& GPUdb::getVectortile( const GetVectortileRequest& request_,
                                             GetVectortileResponse& response_ ) const
{
    submitRequest("/get/vectortile", request_, response_, false);
    return response_;
}

GetVectortileResponse GPUdb::getVectortile( const std::vector<std::string>& tableNames,
                                            const std::vector<std::string>& columnNames,
                                            const std::map<std::string, std::vector<std::string> >& layers,
                                            const int32_t tileX,
                                            const int32_t tileY,
                                            const int32_t zoom,
                                            const std::map<std::string, std::string>& options ) const
{
    GetVectortileRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.columnNames = columnNames;
    actualRequest_.layers = layers;
    actualRequest_.tileX = tileX;
    actualRequest_.tileY = tileY;
    actualRequest_.zoom = zoom;
    actualRequest_.options = options;
    GetVectortileResponse actualResponse_;
    submitRequest("/get/vectortile", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

GetVectortileResponse& GPUdb::getVectortile( const std::vector<std::string>& tableNames,
                                             const std::vector<std::string>& columnNames,
                                             const std::map<std::string, std::vector<std::string> >& layers,
                                             const int32_t tileX,
                                             const int32_t tileY,
                                             const int32_t zoom,
                                             const std::map<std::string, std::string>& options,
                                             GetVectortileResponse& response_ ) const
{
    GetVectortileRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.columnNames = columnNames;
    actualRequest_.layers = layers;
    actualRequest_.tileX = tileX;
    actualRequest_.tileY = tileY;
    actualRequest_.zoom = zoom;
    actualRequest_.options = options;
    submitRequest("/get/vectortile", actualRequest_, response_, false);
    return response_;
}

GrantPermissionResponse GPUdb::grantPermission( const GrantPermissionRequest& request_ ) const
{
    GrantPermissionResponse actualResponse_;
    submitRequest("/grant/permission", request_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionResponse& GPUdb::grantPermission( const GrantPermissionRequest& request_,
                                                 GrantPermissionResponse& response_ ) const
{
    submitRequest("/grant/permission", request_, response_, false);
    return response_;
}

GrantPermissionResponse GPUdb::grantPermission( const std::string& principal,
                                                const std::string& object,
                                                const std::string& objectType,
                                                const std::string& permission,
                                                const std::map<std::string, std::string>& options ) const
{
    GrantPermissionRequest actualRequest_;
    actualRequest_.principal = principal;
    actualRequest_.object = object;
    actualRequest_.objectType = objectType;
    actualRequest_.permission = permission;
    actualRequest_.options = options;
    GrantPermissionResponse actualResponse_;
    submitRequest("/grant/permission", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionResponse& GPUdb::grantPermission( const std::string& principal,
                                                 const std::string& object,
                                                 const std::string& objectType,
                                                 const std::string& permission,
                                                 const std::map<std::string, std::string>& options,
                                                 GrantPermissionResponse& response_ ) const
{
    GrantPermissionRequest actualRequest_;
    actualRequest_.principal = principal;
    actualRequest_.object = object;
    actualRequest_.objectType = objectType;
    actualRequest_.permission = permission;
    actualRequest_.options = options;
    submitRequest("/grant/permission", actualRequest_, response_, false);
    return response_;
}

GrantPermissionCredentialResponse GPUdb::grantPermissionCredential( const GrantPermissionCredentialRequest& request_ ) const
{
    GrantPermissionCredentialResponse actualResponse_;
    submitRequest("/grant/permission/credential", request_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionCredentialResponse& GPUdb::grantPermissionCredential( const GrantPermissionCredentialRequest& request_,
                                                                     GrantPermissionCredentialResponse& response_ ) const
{
    submitRequest("/grant/permission/credential", request_, response_, false);
    return response_;
}

GrantPermissionCredentialResponse GPUdb::grantPermissionCredential( const std::string& name,
                                                                    const std::string& permission,
                                                                    const std::string& credentialName,
                                                                    const std::map<std::string, std::string>& options ) const
{
    GrantPermissionCredentialRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.credentialName = credentialName;
    actualRequest_.options = options;
    GrantPermissionCredentialResponse actualResponse_;
    submitRequest("/grant/permission/credential", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionCredentialResponse& GPUdb::grantPermissionCredential( const std::string& name,
                                                                     const std::string& permission,
                                                                     const std::string& credentialName,
                                                                     const std::map<std::string, std::string>& options,
                                                                     GrantPermissionCredentialResponse& response_ ) const
{
    GrantPermissionCredentialRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.credentialName = credentialName;
    actualRequest_.options = options;
    submitRequest("/grant/permission/credential", actualRequest_, response_, false);
    return response_;
}

GrantPermissionDatasourceResponse GPUdb::grantPermissionDatasource( const GrantPermissionDatasourceRequest& request_ ) const
{
    GrantPermissionDatasourceResponse actualResponse_;
    submitRequest("/grant/permission/datasource", request_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionDatasourceResponse& GPUdb::grantPermissionDatasource( const GrantPermissionDatasourceRequest& request_,
                                                                     GrantPermissionDatasourceResponse& response_ ) const
{
    submitRequest("/grant/permission/datasource", request_, response_, false);
    return response_;
}

GrantPermissionDatasourceResponse GPUdb::grantPermissionDatasource( const std::string& name,
                                                                    const std::string& permission,
                                                                    const std::string& datasourceName,
                                                                    const std::map<std::string, std::string>& options ) const
{
    GrantPermissionDatasourceRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.datasourceName = datasourceName;
    actualRequest_.options = options;
    GrantPermissionDatasourceResponse actualResponse_;
    submitRequest("/grant/permission/datasource", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionDatasourceResponse& GPUdb::grantPermissionDatasource( const std::string& name,
                                                                     const std::string& permission,
                                                                     const std::string& datasourceName,
                                                                     const std::map<std::string, std::string>& options,
                                                                     GrantPermissionDatasourceResponse& response_ ) const
{
    GrantPermissionDatasourceRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.datasourceName = datasourceName;
    actualRequest_.options = options;
    submitRequest("/grant/permission/datasource", actualRequest_, response_, false);
    return response_;
}

GrantPermissionDirectoryResponse GPUdb::grantPermissionDirectory( const GrantPermissionDirectoryRequest& request_ ) const
{
    GrantPermissionDirectoryResponse actualResponse_;
    submitRequest("/grant/permission/directory", request_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionDirectoryResponse& GPUdb::grantPermissionDirectory( const GrantPermissionDirectoryRequest& request_,
                                                                   GrantPermissionDirectoryResponse& response_ ) const
{
    submitRequest("/grant/permission/directory", request_, response_, false);
    return response_;
}

GrantPermissionDirectoryResponse GPUdb::grantPermissionDirectory( const std::string& name,
                                                                  const std::string& permission,
                                                                  const std::string& directoryName,
                                                                  const std::map<std::string, std::string>& options ) const
{
    GrantPermissionDirectoryRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.directoryName = directoryName;
    actualRequest_.options = options;
    GrantPermissionDirectoryResponse actualResponse_;
    submitRequest("/grant/permission/directory", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionDirectoryResponse& GPUdb::grantPermissionDirectory( const std::string& name,
                                                                   const std::string& permission,
                                                                   const std::string& directoryName,
                                                                   const std::map<std::string, std::string>& options,
                                                                   GrantPermissionDirectoryResponse& response_ ) const
{
    GrantPermissionDirectoryRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.directoryName = directoryName;
    actualRequest_.options = options;
    submitRequest("/grant/permission/directory", actualRequest_, response_, false);
    return response_;
}

GrantPermissionProcResponse GPUdb::grantPermissionProc( const GrantPermissionProcRequest& request_ ) const
{
    GrantPermissionProcResponse actualResponse_;
    submitRequest("/grant/permission/proc", request_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionProcResponse& GPUdb::grantPermissionProc( const GrantPermissionProcRequest& request_,
                                                         GrantPermissionProcResponse& response_ ) const
{
    submitRequest("/grant/permission/proc", request_, response_, false);
    return response_;
}

GrantPermissionProcResponse GPUdb::grantPermissionProc( const std::string& name,
                                                        const std::string& permission,
                                                        const std::string& procName,
                                                        const std::map<std::string, std::string>& options ) const
{
    GrantPermissionProcRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.procName = procName;
    actualRequest_.options = options;
    GrantPermissionProcResponse actualResponse_;
    submitRequest("/grant/permission/proc", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionProcResponse& GPUdb::grantPermissionProc( const std::string& name,
                                                         const std::string& permission,
                                                         const std::string& procName,
                                                         const std::map<std::string, std::string>& options,
                                                         GrantPermissionProcResponse& response_ ) const
{
    GrantPermissionProcRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.procName = procName;
    actualRequest_.options = options;
    submitRequest("/grant/permission/proc", actualRequest_, response_, false);
    return response_;
}

GrantPermissionSystemResponse GPUdb::grantPermissionSystem( const GrantPermissionSystemRequest& request_ ) const
{
    GrantPermissionSystemResponse actualResponse_;
    submitRequest("/grant/permission/system", request_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionSystemResponse& GPUdb::grantPermissionSystem( const GrantPermissionSystemRequest& request_,
                                                             GrantPermissionSystemResponse& response_ ) const
{
    submitRequest("/grant/permission/system", request_, response_, false);
    return response_;
}

GrantPermissionSystemResponse GPUdb::grantPermissionSystem( const std::string& name,
                                                            const std::string& permission,
                                                            const std::map<std::string, std::string>& options ) const
{
    GrantPermissionSystemRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.options = options;
    GrantPermissionSystemResponse actualResponse_;
    submitRequest("/grant/permission/system", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionSystemResponse& GPUdb::grantPermissionSystem( const std::string& name,
                                                             const std::string& permission,
                                                             const std::map<std::string, std::string>& options,
                                                             GrantPermissionSystemResponse& response_ ) const
{
    GrantPermissionSystemRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.options = options;
    submitRequest("/grant/permission/system", actualRequest_, response_, false);
    return response_;
}

GrantPermissionTableResponse GPUdb::grantPermissionTable( const GrantPermissionTableRequest& request_ ) const
{
    GrantPermissionTableResponse actualResponse_;
    submitRequest("/grant/permission/table", request_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionTableResponse& GPUdb::grantPermissionTable( const GrantPermissionTableRequest& request_,
                                                           GrantPermissionTableResponse& response_ ) const
{
    submitRequest("/grant/permission/table", request_, response_, false);
    return response_;
}

GrantPermissionTableResponse GPUdb::grantPermissionTable( const std::string& name,
                                                          const std::string& permission,
                                                          const std::string& tableName,
                                                          const std::string& filterExpression,
                                                          const std::map<std::string, std::string>& options ) const
{
    GrantPermissionTableRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.tableName = tableName;
    actualRequest_.filterExpression = filterExpression;
    actualRequest_.options = options;
    GrantPermissionTableResponse actualResponse_;
    submitRequest("/grant/permission/table", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

GrantPermissionTableResponse& GPUdb::grantPermissionTable( const std::string& name,
                                                           const std::string& permission,
                                                           const std::string& tableName,
                                                           const std::string& filterExpression,
                                                           const std::map<std::string, std::string>& options,
                                                           GrantPermissionTableResponse& response_ ) const
{
    GrantPermissionTableRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.tableName = tableName;
    actualRequest_.filterExpression = filterExpression;
    actualRequest_.options = options;
    submitRequest("/grant/permission/table", actualRequest_, response_, false);
    return response_;
}

GrantRoleResponse GPUdb::grantRole( const GrantRoleRequest& request_ ) const
{
    GrantRoleResponse actualResponse_;
    submitRequest("/grant/role", request_, actualResponse_, false);
    return actualResponse_;
}

GrantRoleResponse& GPUdb::grantRole( const GrantRoleRequest& request_,
                                     GrantRoleResponse& response_ ) const
{
    submitRequest("/grant/role", request_, response_, false);
    return response_;
}

GrantRoleResponse GPUdb::grantRole( const std::string& role,
                                    const std::string& member,
                                    const std::map<std::string, std::string>& options ) const
{
    GrantRoleRequest actualRequest_;
    actualRequest_.role = role;
    actualRequest_.member = member;
    actualRequest_.options = options;
    GrantRoleResponse actualResponse_;
    submitRequest("/grant/role", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

GrantRoleResponse& GPUdb::grantRole( const std::string& role,
                                     const std::string& member,
                                     const std::map<std::string, std::string>& options,
                                     GrantRoleResponse& response_ ) const
{
    GrantRoleRequest actualRequest_;
    actualRequest_.role = role;
    actualRequest_.member = member;
    actualRequest_.options = options;
    submitRequest("/grant/role", actualRequest_, response_, false);
    return response_;
}

HasPermissionResponse GPUdb::hasPermission( const HasPermissionRequest& request_ ) const
{
    HasPermissionResponse actualResponse_;
    submitRequest("/has/permission", request_, actualResponse_, false);
    return actualResponse_;
}

HasPermissionResponse& GPUdb::hasPermission( const HasPermissionRequest& request_,
                                             HasPermissionResponse& response_ ) const
{
    submitRequest("/has/permission", request_, response_, false);
    return response_;
}

HasPermissionResponse GPUdb::hasPermission( const std::string& principal,
                                            const std::string& object,
                                            const std::string& objectType,
                                            const std::string& permission,
                                            const std::map<std::string, std::string>& options ) const
{
    HasPermissionRequest actualRequest_;
    actualRequest_.principal = principal;
    actualRequest_.object = object;
    actualRequest_.objectType = objectType;
    actualRequest_.permission = permission;
    actualRequest_.options = options;
    HasPermissionResponse actualResponse_;
    submitRequest("/has/permission", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

HasPermissionResponse& GPUdb::hasPermission( const std::string& principal,
                                             const std::string& object,
                                             const std::string& objectType,
                                             const std::string& permission,
                                             const std::map<std::string, std::string>& options,
                                             HasPermissionResponse& response_ ) const
{
    HasPermissionRequest actualRequest_;
    actualRequest_.principal = principal;
    actualRequest_.object = object;
    actualRequest_.objectType = objectType;
    actualRequest_.permission = permission;
    actualRequest_.options = options;
    submitRequest("/has/permission", actualRequest_, response_, false);
    return response_;
}

HasProcResponse GPUdb::hasProc( const HasProcRequest& request_ ) const
{
    HasProcResponse actualResponse_;
    submitRequest("/has/proc", request_, actualResponse_, false);
    return actualResponse_;
}

HasProcResponse& GPUdb::hasProc( const HasProcRequest& request_,
                                 HasProcResponse& response_ ) const
{
    submitRequest("/has/proc", request_, response_, false);
    return response_;
}

HasProcResponse GPUdb::hasProc( const std::string& procName,
                                const std::map<std::string, std::string>& options ) const
{
    HasProcRequest actualRequest_;
    actualRequest_.procName = procName;
    actualRequest_.options = options;
    HasProcResponse actualResponse_;
    submitRequest("/has/proc", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

HasProcResponse& GPUdb::hasProc( const std::string& procName,
                                 const std::map<std::string, std::string>& options,
                                 HasProcResponse& response_ ) const
{
    HasProcRequest actualRequest_;
    actualRequest_.procName = procName;
    actualRequest_.options = options;
    submitRequest("/has/proc", actualRequest_, response_, false);
    return response_;
}

HasRoleResponse GPUdb::hasRole( const HasRoleRequest& request_ ) const
{
    HasRoleResponse actualResponse_;
    submitRequest("/has/role", request_, actualResponse_, false);
    return actualResponse_;
}

HasRoleResponse& GPUdb::hasRole( const HasRoleRequest& request_,
                                 HasRoleResponse& response_ ) const
{
    submitRequest("/has/role", request_, response_, false);
    return response_;
}

HasRoleResponse GPUdb::hasRole( const std::string& principal,
                                const std::string& role,
                                const std::map<std::string, std::string>& options ) const
{
    HasRoleRequest actualRequest_;
    actualRequest_.principal = principal;
    actualRequest_.role = role;
    actualRequest_.options = options;
    HasRoleResponse actualResponse_;
    submitRequest("/has/role", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

HasRoleResponse& GPUdb::hasRole( const std::string& principal,
                                 const std::string& role,
                                 const std::map<std::string, std::string>& options,
                                 HasRoleResponse& response_ ) const
{
    HasRoleRequest actualRequest_;
    actualRequest_.principal = principal;
    actualRequest_.role = role;
    actualRequest_.options = options;
    submitRequest("/has/role", actualRequest_, response_, false);
    return response_;
}

HasSchemaResponse GPUdb::hasSchema( const HasSchemaRequest& request_ ) const
{
    HasSchemaResponse actualResponse_;
    submitRequest("/has/schema", request_, actualResponse_, false);
    return actualResponse_;
}

HasSchemaResponse& GPUdb::hasSchema( const HasSchemaRequest& request_,
                                     HasSchemaResponse& response_ ) const
{
    submitRequest("/has/schema", request_, response_, false);
    return response_;
}

HasSchemaResponse GPUdb::hasSchema( const std::string& schemaName,
                                    const std::map<std::string, std::string>& options ) const
{
    HasSchemaRequest actualRequest_;
    actualRequest_.schemaName = schemaName;
    actualRequest_.options = options;
    HasSchemaResponse actualResponse_;
    submitRequest("/has/schema", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

HasSchemaResponse& GPUdb::hasSchema( const std::string& schemaName,
                                     const std::map<std::string, std::string>& options,
                                     HasSchemaResponse& response_ ) const
{
    HasSchemaRequest actualRequest_;
    actualRequest_.schemaName = schemaName;
    actualRequest_.options = options;
    submitRequest("/has/schema", actualRequest_, response_, false);
    return response_;
}

HasTableResponse GPUdb::hasTable( const HasTableRequest& request_ ) const
{
    HasTableResponse actualResponse_;
    submitRequest("/has/table", request_, actualResponse_, false);
    return actualResponse_;
}

HasTableResponse& GPUdb::hasTable( const HasTableRequest& request_,
                                   HasTableResponse& response_ ) const
{
    submitRequest("/has/table", request_, response_, false);
    return response_;
}

HasTableResponse GPUdb::hasTable( const std::string& tableName,
                                  const std::map<std::string, std::string>& options ) const
{
    HasTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.options = options;
    HasTableResponse actualResponse_;
    submitRequest("/has/table", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

HasTableResponse& GPUdb::hasTable( const std::string& tableName,
                                   const std::map<std::string, std::string>& options,
                                   HasTableResponse& response_ ) const
{
    HasTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.options = options;
    submitRequest("/has/table", actualRequest_, response_, false);
    return response_;
}

HasTypeResponse GPUdb::hasType( const HasTypeRequest& request_ ) const
{
    HasTypeResponse actualResponse_;
    submitRequest("/has/type", request_, actualResponse_, false);
    return actualResponse_;
}

HasTypeResponse& GPUdb::hasType( const HasTypeRequest& request_,
                                 HasTypeResponse& response_ ) const
{
    submitRequest("/has/type", request_, response_, false);
    return response_;
}

HasTypeResponse GPUdb::hasType( const std::string& typeId,
                                const std::map<std::string, std::string>& options ) const
{
    HasTypeRequest actualRequest_;
    actualRequest_.typeId = typeId;
    actualRequest_.options = options;
    HasTypeResponse actualResponse_;
    submitRequest("/has/type", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

HasTypeResponse& GPUdb::hasType( const std::string& typeId,
                                 const std::map<std::string, std::string>& options,
                                 HasTypeResponse& response_ ) const
{
    HasTypeRequest actualRequest_;
    actualRequest_.typeId = typeId;
    actualRequest_.options = options;
    submitRequest("/has/type", actualRequest_, response_, false);
    return response_;
}

ImportModelResponse GPUdb::importModel( const ImportModelRequest& request_ ) const
{
    ImportModelResponse actualResponse_;
    submitRequest("/import/model", request_, actualResponse_, false);
    return actualResponse_;
}

ImportModelResponse& GPUdb::importModel( const ImportModelRequest& request_,
                                         ImportModelResponse& response_ ) const
{
    submitRequest("/import/model", request_, response_, false);
    return response_;
}

ImportModelResponse GPUdb::importModel( const std::string& modelName,
                                        const std::string& registryName,
                                        const std::string& container,
                                        const std::string& runFunction,
                                        const std::string& modelType,
                                        const std::map<std::string, std::string>& options ) const
{
    ImportModelRequest actualRequest_;
    actualRequest_.modelName = modelName;
    actualRequest_.registryName = registryName;
    actualRequest_.container = container;
    actualRequest_.runFunction = runFunction;
    actualRequest_.modelType = modelType;
    actualRequest_.options = options;
    ImportModelResponse actualResponse_;
    submitRequest("/import/model", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ImportModelResponse& GPUdb::importModel( const std::string& modelName,
                                         const std::string& registryName,
                                         const std::string& container,
                                         const std::string& runFunction,
                                         const std::string& modelType,
                                         const std::map<std::string, std::string>& options,
                                         ImportModelResponse& response_ ) const
{
    ImportModelRequest actualRequest_;
    actualRequest_.modelName = modelName;
    actualRequest_.registryName = registryName;
    actualRequest_.container = container;
    actualRequest_.runFunction = runFunction;
    actualRequest_.modelType = modelType;
    actualRequest_.options = options;
    submitRequest("/import/model", actualRequest_, response_, false);
    return response_;
}

InsertRecordsResponse GPUdb::insertRecordsRaw( const RawInsertRecordsRequest& request_ ) const
{
    InsertRecordsResponse actualResponse_;
    submitRequest("/insert/records", request_, actualResponse_, true);
    return actualResponse_;
}

InsertRecordsResponse& GPUdb::insertRecordsRaw( const RawInsertRecordsRequest& request_,
                                                InsertRecordsResponse& response_ ) const
{
    submitRequest("/insert/records", request_, response_, true);
    return response_;
}

InsertRecordsFromFilesResponse GPUdb::insertRecordsFromFiles( const InsertRecordsFromFilesRequest& request_ ) const
{
    InsertRecordsFromFilesResponse actualResponse_;
    submitRequest("/insert/records/fromfiles", request_, actualResponse_, false);
    return actualResponse_;
}

InsertRecordsFromFilesResponse& GPUdb::insertRecordsFromFiles( const InsertRecordsFromFilesRequest& request_,
                                                               InsertRecordsFromFilesResponse& response_ ) const
{
    submitRequest("/insert/records/fromfiles", request_, response_, false);
    return response_;
}

InsertRecordsFromFilesResponse GPUdb::insertRecordsFromFiles( const std::string& tableName,
                                                              const std::vector<std::string>& filepaths,
                                                              const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                              const std::map<std::string, std::string>& createTableOptions,
                                                              const std::map<std::string, std::string>& options ) const
{
    InsertRecordsFromFilesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.filepaths = filepaths;
    actualRequest_.modifyColumns = modifyColumns;
    actualRequest_.createTableOptions = createTableOptions;
    actualRequest_.options = options;
    InsertRecordsFromFilesResponse actualResponse_;
    submitRequest("/insert/records/fromfiles", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

InsertRecordsFromFilesResponse& GPUdb::insertRecordsFromFiles( const std::string& tableName,
                                                               const std::vector<std::string>& filepaths,
                                                               const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                               const std::map<std::string, std::string>& createTableOptions,
                                                               const std::map<std::string, std::string>& options,
                                                               InsertRecordsFromFilesResponse& response_ ) const
{
    InsertRecordsFromFilesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.filepaths = filepaths;
    actualRequest_.modifyColumns = modifyColumns;
    actualRequest_.createTableOptions = createTableOptions;
    actualRequest_.options = options;
    submitRequest("/insert/records/fromfiles", actualRequest_, response_, false);
    return response_;
}

InsertRecordsFromPayloadResponse GPUdb::insertRecordsFromPayload( const InsertRecordsFromPayloadRequest& request_ ) const
{
    InsertRecordsFromPayloadResponse actualResponse_;
    submitRequest("/insert/records/frompayload", request_, actualResponse_, false);
    return actualResponse_;
}

InsertRecordsFromPayloadResponse& GPUdb::insertRecordsFromPayload( const InsertRecordsFromPayloadRequest& request_,
                                                                   InsertRecordsFromPayloadResponse& response_ ) const
{
    submitRequest("/insert/records/frompayload", request_, response_, false);
    return response_;
}

InsertRecordsFromPayloadResponse GPUdb::insertRecordsFromPayload( const std::string& tableName,
                                                                  const std::string& dataText,
                                                                  const std::vector<uint8_t>& dataBytes,
                                                                  const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                                  const std::map<std::string, std::string>& createTableOptions,
                                                                  const std::map<std::string, std::string>& options ) const
{
    InsertRecordsFromPayloadRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.dataText = dataText;
    actualRequest_.dataBytes = dataBytes;
    actualRequest_.modifyColumns = modifyColumns;
    actualRequest_.createTableOptions = createTableOptions;
    actualRequest_.options = options;
    InsertRecordsFromPayloadResponse actualResponse_;
    submitRequest("/insert/records/frompayload", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

InsertRecordsFromPayloadResponse& GPUdb::insertRecordsFromPayload( const std::string& tableName,
                                                                   const std::string& dataText,
                                                                   const std::vector<uint8_t>& dataBytes,
                                                                   const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                                   const std::map<std::string, std::string>& createTableOptions,
                                                                   const std::map<std::string, std::string>& options,
                                                                   InsertRecordsFromPayloadResponse& response_ ) const
{
    InsertRecordsFromPayloadRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.dataText = dataText;
    actualRequest_.dataBytes = dataBytes;
    actualRequest_.modifyColumns = modifyColumns;
    actualRequest_.createTableOptions = createTableOptions;
    actualRequest_.options = options;
    submitRequest("/insert/records/frompayload", actualRequest_, response_, false);
    return response_;
}

InsertRecordsFromQueryResponse GPUdb::insertRecordsFromQuery( const InsertRecordsFromQueryRequest& request_ ) const
{
    InsertRecordsFromQueryResponse actualResponse_;
    submitRequest("/insert/records/fromquery", request_, actualResponse_, false);
    return actualResponse_;
}

InsertRecordsFromQueryResponse& GPUdb::insertRecordsFromQuery( const InsertRecordsFromQueryRequest& request_,
                                                               InsertRecordsFromQueryResponse& response_ ) const
{
    submitRequest("/insert/records/fromquery", request_, response_, false);
    return response_;
}

InsertRecordsFromQueryResponse GPUdb::insertRecordsFromQuery( const std::string& tableName,
                                                              const std::string& remoteQuery,
                                                              const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                              const std::map<std::string, std::string>& createTableOptions,
                                                              const std::map<std::string, std::string>& options ) const
{
    InsertRecordsFromQueryRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.remoteQuery = remoteQuery;
    actualRequest_.modifyColumns = modifyColumns;
    actualRequest_.createTableOptions = createTableOptions;
    actualRequest_.options = options;
    InsertRecordsFromQueryResponse actualResponse_;
    submitRequest("/insert/records/fromquery", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

InsertRecordsFromQueryResponse& GPUdb::insertRecordsFromQuery( const std::string& tableName,
                                                               const std::string& remoteQuery,
                                                               const std::map<std::string, std::map<std::string, std::string> >& modifyColumns,
                                                               const std::map<std::string, std::string>& createTableOptions,
                                                               const std::map<std::string, std::string>& options,
                                                               InsertRecordsFromQueryResponse& response_ ) const
{
    InsertRecordsFromQueryRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.remoteQuery = remoteQuery;
    actualRequest_.modifyColumns = modifyColumns;
    actualRequest_.createTableOptions = createTableOptions;
    actualRequest_.options = options;
    submitRequest("/insert/records/fromquery", actualRequest_, response_, false);
    return response_;
}

InsertRecordsRandomResponse GPUdb::insertRecordsRandom( const InsertRecordsRandomRequest& request_ ) const
{
    InsertRecordsRandomResponse actualResponse_;
    submitRequest("/insert/records/random", request_, actualResponse_, false);
    return actualResponse_;
}

InsertRecordsRandomResponse& GPUdb::insertRecordsRandom( const InsertRecordsRandomRequest& request_,
                                                         InsertRecordsRandomResponse& response_ ) const
{
    submitRequest("/insert/records/random", request_, response_, false);
    return response_;
}

InsertRecordsRandomResponse GPUdb::insertRecordsRandom( const std::string& tableName,
                                                        const int64_t count,
                                                        const std::map<std::string, std::map<std::string, double> >& options ) const
{
    InsertRecordsRandomRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.count = count;
    actualRequest_.options = options;
    InsertRecordsRandomResponse actualResponse_;
    submitRequest("/insert/records/random", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

InsertRecordsRandomResponse& GPUdb::insertRecordsRandom( const std::string& tableName,
                                                         const int64_t count,
                                                         const std::map<std::string, std::map<std::string, double> >& options,
                                                         InsertRecordsRandomResponse& response_ ) const
{
    InsertRecordsRandomRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.count = count;
    actualRequest_.options = options;
    submitRequest("/insert/records/random", actualRequest_, response_, false);
    return response_;
}

InsertSymbolResponse GPUdb::insertSymbol( const InsertSymbolRequest& request_ ) const
{
    InsertSymbolResponse actualResponse_;
    submitRequest("/insert/symbol", request_, actualResponse_, false);
    return actualResponse_;
}

InsertSymbolResponse& GPUdb::insertSymbol( const InsertSymbolRequest& request_,
                                           InsertSymbolResponse& response_ ) const
{
    submitRequest("/insert/symbol", request_, response_, false);
    return response_;
}

InsertSymbolResponse GPUdb::insertSymbol( const std::string& symbolId,
                                          const std::string& symbolFormat,
                                          const std::vector<uint8_t>& symbolData,
                                          const std::map<std::string, std::string>& options ) const
{
    InsertSymbolRequest actualRequest_;
    actualRequest_.symbolId = symbolId;
    actualRequest_.symbolFormat = symbolFormat;
    actualRequest_.symbolData = symbolData;
    actualRequest_.options = options;
    InsertSymbolResponse actualResponse_;
    submitRequest("/insert/symbol", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

InsertSymbolResponse& GPUdb::insertSymbol( const std::string& symbolId,
                                           const std::string& symbolFormat,
                                           const std::vector<uint8_t>& symbolData,
                                           const std::map<std::string, std::string>& options,
                                           InsertSymbolResponse& response_ ) const
{
    InsertSymbolRequest actualRequest_;
    actualRequest_.symbolId = symbolId;
    actualRequest_.symbolFormat = symbolFormat;
    actualRequest_.symbolData = symbolData;
    actualRequest_.options = options;
    submitRequest("/insert/symbol", actualRequest_, response_, false);
    return response_;
}

KillProcResponse GPUdb::killProc( const KillProcRequest& request_ ) const
{
    KillProcResponse actualResponse_;
    submitRequest("/kill/proc", request_, actualResponse_, false);
    return actualResponse_;
}

KillProcResponse& GPUdb::killProc( const KillProcRequest& request_,
                                   KillProcResponse& response_ ) const
{
    submitRequest("/kill/proc", request_, response_, false);
    return response_;
}

KillProcResponse GPUdb::killProc( const std::string& runId,
                                  const std::map<std::string, std::string>& options ) const
{
    KillProcRequest actualRequest_;
    actualRequest_.runId = runId;
    actualRequest_.options = options;
    KillProcResponse actualResponse_;
    submitRequest("/kill/proc", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

KillProcResponse& GPUdb::killProc( const std::string& runId,
                                   const std::map<std::string, std::string>& options,
                                   KillProcResponse& response_ ) const
{
    KillProcRequest actualRequest_;
    actualRequest_.runId = runId;
    actualRequest_.options = options;
    submitRequest("/kill/proc", actualRequest_, response_, false);
    return response_;
}

ListGraphResponse GPUdb::listGraph( const ListGraphRequest& request_ ) const
{
    ListGraphResponse actualResponse_;
    submitRequest("/list/graph", request_, actualResponse_, false);
    return actualResponse_;
}

ListGraphResponse& GPUdb::listGraph( const ListGraphRequest& request_,
                                     ListGraphResponse& response_ ) const
{
    submitRequest("/list/graph", request_, response_, false);
    return response_;
}

ListGraphResponse GPUdb::listGraph( const std::string& graphName,
                                    const std::map<std::string, std::string>& options ) const
{
    ListGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.options = options;
    ListGraphResponse actualResponse_;
    submitRequest("/list/graph", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ListGraphResponse& GPUdb::listGraph( const std::string& graphName,
                                     const std::map<std::string, std::string>& options,
                                     ListGraphResponse& response_ ) const
{
    ListGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.options = options;
    submitRequest("/list/graph", actualRequest_, response_, false);
    return response_;
}

LockTableResponse GPUdb::lockTable( const LockTableRequest& request_ ) const
{
    LockTableResponse actualResponse_;
    submitRequest("/lock/table", request_, actualResponse_, false);
    return actualResponse_;
}

LockTableResponse& GPUdb::lockTable( const LockTableRequest& request_,
                                     LockTableResponse& response_ ) const
{
    submitRequest("/lock/table", request_, response_, false);
    return response_;
}

LockTableResponse GPUdb::lockTable( const std::string& tableName,
                                    const std::string& lockType,
                                    const std::map<std::string, std::string>& options ) const
{
    LockTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.lockType = lockType;
    actualRequest_.options = options;
    LockTableResponse actualResponse_;
    submitRequest("/lock/table", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

LockTableResponse& GPUdb::lockTable( const std::string& tableName,
                                     const std::string& lockType,
                                     const std::map<std::string, std::string>& options,
                                     LockTableResponse& response_ ) const
{
    LockTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.lockType = lockType;
    actualRequest_.options = options;
    submitRequest("/lock/table", actualRequest_, response_, false);
    return response_;
}

MatchGraphResponse GPUdb::matchGraph( const MatchGraphRequest& request_ ) const
{
    MatchGraphResponse actualResponse_;
    submitRequest("/match/graph", request_, actualResponse_, false);
    return actualResponse_;
}

MatchGraphResponse& GPUdb::matchGraph( const MatchGraphRequest& request_,
                                       MatchGraphResponse& response_ ) const
{
    submitRequest("/match/graph", request_, response_, false);
    return response_;
}

MatchGraphResponse GPUdb::matchGraph( const std::string& graphName,
                                      const std::vector<std::string>& samplePoints,
                                      const std::string& solveMethod,
                                      const std::string& solutionTable,
                                      const std::map<std::string, std::string>& options ) const
{
    MatchGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.samplePoints = samplePoints;
    actualRequest_.solveMethod = solveMethod;
    actualRequest_.solutionTable = solutionTable;
    actualRequest_.options = options;
    MatchGraphResponse actualResponse_;
    submitRequest("/match/graph", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

MatchGraphResponse& GPUdb::matchGraph( const std::string& graphName,
                                       const std::vector<std::string>& samplePoints,
                                       const std::string& solveMethod,
                                       const std::string& solutionTable,
                                       const std::map<std::string, std::string>& options,
                                       MatchGraphResponse& response_ ) const
{
    MatchGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.samplePoints = samplePoints;
    actualRequest_.solveMethod = solveMethod;
    actualRequest_.solutionTable = solutionTable;
    actualRequest_.options = options;
    submitRequest("/match/graph", actualRequest_, response_, false);
    return response_;
}

MergeRecordsResponse GPUdb::mergeRecords( const MergeRecordsRequest& request_ ) const
{
    MergeRecordsResponse actualResponse_;
    submitRequest("/merge/records", request_, actualResponse_, false);
    return actualResponse_;
}

MergeRecordsResponse& GPUdb::mergeRecords( const MergeRecordsRequest& request_,
                                           MergeRecordsResponse& response_ ) const
{
    submitRequest("/merge/records", request_, response_, false);
    return response_;
}

MergeRecordsResponse GPUdb::mergeRecords( const std::string& tableName,
                                          const std::vector<std::string>& sourceTableNames,
                                          const std::vector<std::map<std::string, std::string> >& fieldMaps,
                                          const std::map<std::string, std::string>& options ) const
{
    MergeRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.sourceTableNames = sourceTableNames;
    actualRequest_.fieldMaps = fieldMaps;
    actualRequest_.options = options;
    MergeRecordsResponse actualResponse_;
    submitRequest("/merge/records", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

MergeRecordsResponse& GPUdb::mergeRecords( const std::string& tableName,
                                           const std::vector<std::string>& sourceTableNames,
                                           const std::vector<std::map<std::string, std::string> >& fieldMaps,
                                           const std::map<std::string, std::string>& options,
                                           MergeRecordsResponse& response_ ) const
{
    MergeRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.sourceTableNames = sourceTableNames;
    actualRequest_.fieldMaps = fieldMaps;
    actualRequest_.options = options;
    submitRequest("/merge/records", actualRequest_, response_, false);
    return response_;
}

ModifyGraphResponse GPUdb::modifyGraph( const ModifyGraphRequest& request_ ) const
{
    ModifyGraphResponse actualResponse_;
    submitRequest("/modify/graph", request_, actualResponse_, false);
    return actualResponse_;
}

ModifyGraphResponse& GPUdb::modifyGraph( const ModifyGraphRequest& request_,
                                         ModifyGraphResponse& response_ ) const
{
    submitRequest("/modify/graph", request_, response_, false);
    return response_;
}

ModifyGraphResponse GPUdb::modifyGraph( const std::string& graphName,
                                        const std::vector<std::string>& nodes,
                                        const std::vector<std::string>& edges,
                                        const std::vector<std::string>& weights,
                                        const std::vector<std::string>& restrictions,
                                        const std::map<std::string, std::string>& options ) const
{
    ModifyGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.nodes = nodes;
    actualRequest_.edges = edges;
    actualRequest_.weights = weights;
    actualRequest_.restrictions = restrictions;
    actualRequest_.options = options;
    ModifyGraphResponse actualResponse_;
    submitRequest("/modify/graph", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ModifyGraphResponse& GPUdb::modifyGraph( const std::string& graphName,
                                         const std::vector<std::string>& nodes,
                                         const std::vector<std::string>& edges,
                                         const std::vector<std::string>& weights,
                                         const std::vector<std::string>& restrictions,
                                         const std::map<std::string, std::string>& options,
                                         ModifyGraphResponse& response_ ) const
{
    ModifyGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.nodes = nodes;
    actualRequest_.edges = edges;
    actualRequest_.weights = weights;
    actualRequest_.restrictions = restrictions;
    actualRequest_.options = options;
    submitRequest("/modify/graph", actualRequest_, response_, false);
    return response_;
}

QueryGraphResponse GPUdb::queryGraph( const QueryGraphRequest& request_ ) const
{
    QueryGraphResponse actualResponse_;
    submitRequest("/query/graph", request_, actualResponse_, false);
    return actualResponse_;
}

QueryGraphResponse& GPUdb::queryGraph( const QueryGraphRequest& request_,
                                       QueryGraphResponse& response_ ) const
{
    submitRequest("/query/graph", request_, response_, false);
    return response_;
}

QueryGraphResponse GPUdb::queryGraph( const std::string& graphName,
                                      const std::vector<std::string>& queries,
                                      const std::vector<std::string>& restrictions,
                                      const std::string& adjacencyTable,
                                      const int32_t rings,
                                      const std::map<std::string, std::string>& options ) const
{
    QueryGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.queries = queries;
    actualRequest_.restrictions = restrictions;
    actualRequest_.adjacencyTable = adjacencyTable;
    actualRequest_.rings = rings;
    actualRequest_.options = options;
    QueryGraphResponse actualResponse_;
    submitRequest("/query/graph", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

QueryGraphResponse& GPUdb::queryGraph( const std::string& graphName,
                                       const std::vector<std::string>& queries,
                                       const std::vector<std::string>& restrictions,
                                       const std::string& adjacencyTable,
                                       const int32_t rings,
                                       const std::map<std::string, std::string>& options,
                                       QueryGraphResponse& response_ ) const
{
    QueryGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.queries = queries;
    actualRequest_.restrictions = restrictions;
    actualRequest_.adjacencyTable = adjacencyTable;
    actualRequest_.rings = rings;
    actualRequest_.options = options;
    submitRequest("/query/graph", actualRequest_, response_, false);
    return response_;
}

RepartitionGraphResponse GPUdb::repartitionGraph( const RepartitionGraphRequest& request_ ) const
{
    RepartitionGraphResponse actualResponse_;
    submitRequest("/repartition/graph", request_, actualResponse_, false);
    return actualResponse_;
}

RepartitionGraphResponse& GPUdb::repartitionGraph( const RepartitionGraphRequest& request_,
                                                   RepartitionGraphResponse& response_ ) const
{
    submitRequest("/repartition/graph", request_, response_, false);
    return response_;
}

RepartitionGraphResponse GPUdb::repartitionGraph( const std::string& graphName,
                                                  const std::map<std::string, std::string>& options ) const
{
    RepartitionGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.options = options;
    RepartitionGraphResponse actualResponse_;
    submitRequest("/repartition/graph", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

RepartitionGraphResponse& GPUdb::repartitionGraph( const std::string& graphName,
                                                   const std::map<std::string, std::string>& options,
                                                   RepartitionGraphResponse& response_ ) const
{
    RepartitionGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.options = options;
    submitRequest("/repartition/graph", actualRequest_, response_, false);
    return response_;
}

ReserveResourceResponse GPUdb::reserveResource( const ReserveResourceRequest& request_ ) const
{
    ReserveResourceResponse actualResponse_;
    submitRequest("/reserve/resource", request_, actualResponse_, false);
    return actualResponse_;
}

ReserveResourceResponse& GPUdb::reserveResource( const ReserveResourceRequest& request_,
                                                 ReserveResourceResponse& response_ ) const
{
    submitRequest("/reserve/resource", request_, response_, false);
    return response_;
}

ReserveResourceResponse GPUdb::reserveResource( const std::string& component,
                                                const std::string& name,
                                                const std::string& action,
                                                const int64_t bytesRequested,
                                                const int64_t ownerId,
                                                const std::map<std::string, std::string>& options ) const
{
    ReserveResourceRequest actualRequest_;
    actualRequest_.component = component;
    actualRequest_.name = name;
    actualRequest_.action = action;
    actualRequest_.bytesRequested = bytesRequested;
    actualRequest_.ownerId = ownerId;
    actualRequest_.options = options;
    ReserveResourceResponse actualResponse_;
    submitRequest("/reserve/resource", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ReserveResourceResponse& GPUdb::reserveResource( const std::string& component,
                                                 const std::string& name,
                                                 const std::string& action,
                                                 const int64_t bytesRequested,
                                                 const int64_t ownerId,
                                                 const std::map<std::string, std::string>& options,
                                                 ReserveResourceResponse& response_ ) const
{
    ReserveResourceRequest actualRequest_;
    actualRequest_.component = component;
    actualRequest_.name = name;
    actualRequest_.action = action;
    actualRequest_.bytesRequested = bytesRequested;
    actualRequest_.ownerId = ownerId;
    actualRequest_.options = options;
    submitRequest("/reserve/resource", actualRequest_, response_, false);
    return response_;
}

RevokePermissionResponse GPUdb::revokePermission( const RevokePermissionRequest& request_ ) const
{
    RevokePermissionResponse actualResponse_;
    submitRequest("/revoke/permission", request_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionResponse& GPUdb::revokePermission( const RevokePermissionRequest& request_,
                                                   RevokePermissionResponse& response_ ) const
{
    submitRequest("/revoke/permission", request_, response_, false);
    return response_;
}

RevokePermissionResponse GPUdb::revokePermission( const std::string& principal,
                                                  const std::string& object,
                                                  const std::string& objectType,
                                                  const std::string& permission,
                                                  const std::map<std::string, std::string>& options ) const
{
    RevokePermissionRequest actualRequest_;
    actualRequest_.principal = principal;
    actualRequest_.object = object;
    actualRequest_.objectType = objectType;
    actualRequest_.permission = permission;
    actualRequest_.options = options;
    RevokePermissionResponse actualResponse_;
    submitRequest("/revoke/permission", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionResponse& GPUdb::revokePermission( const std::string& principal,
                                                   const std::string& object,
                                                   const std::string& objectType,
                                                   const std::string& permission,
                                                   const std::map<std::string, std::string>& options,
                                                   RevokePermissionResponse& response_ ) const
{
    RevokePermissionRequest actualRequest_;
    actualRequest_.principal = principal;
    actualRequest_.object = object;
    actualRequest_.objectType = objectType;
    actualRequest_.permission = permission;
    actualRequest_.options = options;
    submitRequest("/revoke/permission", actualRequest_, response_, false);
    return response_;
}

RevokePermissionCredentialResponse GPUdb::revokePermissionCredential( const RevokePermissionCredentialRequest& request_ ) const
{
    RevokePermissionCredentialResponse actualResponse_;
    submitRequest("/revoke/permission/credential", request_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionCredentialResponse& GPUdb::revokePermissionCredential( const RevokePermissionCredentialRequest& request_,
                                                                       RevokePermissionCredentialResponse& response_ ) const
{
    submitRequest("/revoke/permission/credential", request_, response_, false);
    return response_;
}

RevokePermissionCredentialResponse GPUdb::revokePermissionCredential( const std::string& name,
                                                                      const std::string& permission,
                                                                      const std::string& credentialName,
                                                                      const std::map<std::string, std::string>& options ) const
{
    RevokePermissionCredentialRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.credentialName = credentialName;
    actualRequest_.options = options;
    RevokePermissionCredentialResponse actualResponse_;
    submitRequest("/revoke/permission/credential", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionCredentialResponse& GPUdb::revokePermissionCredential( const std::string& name,
                                                                       const std::string& permission,
                                                                       const std::string& credentialName,
                                                                       const std::map<std::string, std::string>& options,
                                                                       RevokePermissionCredentialResponse& response_ ) const
{
    RevokePermissionCredentialRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.credentialName = credentialName;
    actualRequest_.options = options;
    submitRequest("/revoke/permission/credential", actualRequest_, response_, false);
    return response_;
}

RevokePermissionDatasourceResponse GPUdb::revokePermissionDatasource( const RevokePermissionDatasourceRequest& request_ ) const
{
    RevokePermissionDatasourceResponse actualResponse_;
    submitRequest("/revoke/permission/datasource", request_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionDatasourceResponse& GPUdb::revokePermissionDatasource( const RevokePermissionDatasourceRequest& request_,
                                                                       RevokePermissionDatasourceResponse& response_ ) const
{
    submitRequest("/revoke/permission/datasource", request_, response_, false);
    return response_;
}

RevokePermissionDatasourceResponse GPUdb::revokePermissionDatasource( const std::string& name,
                                                                      const std::string& permission,
                                                                      const std::string& datasourceName,
                                                                      const std::map<std::string, std::string>& options ) const
{
    RevokePermissionDatasourceRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.datasourceName = datasourceName;
    actualRequest_.options = options;
    RevokePermissionDatasourceResponse actualResponse_;
    submitRequest("/revoke/permission/datasource", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionDatasourceResponse& GPUdb::revokePermissionDatasource( const std::string& name,
                                                                       const std::string& permission,
                                                                       const std::string& datasourceName,
                                                                       const std::map<std::string, std::string>& options,
                                                                       RevokePermissionDatasourceResponse& response_ ) const
{
    RevokePermissionDatasourceRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.datasourceName = datasourceName;
    actualRequest_.options = options;
    submitRequest("/revoke/permission/datasource", actualRequest_, response_, false);
    return response_;
}

RevokePermissionDirectoryResponse GPUdb::revokePermissionDirectory( const RevokePermissionDirectoryRequest& request_ ) const
{
    RevokePermissionDirectoryResponse actualResponse_;
    submitRequest("/revoke/permission/directory", request_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionDirectoryResponse& GPUdb::revokePermissionDirectory( const RevokePermissionDirectoryRequest& request_,
                                                                     RevokePermissionDirectoryResponse& response_ ) const
{
    submitRequest("/revoke/permission/directory", request_, response_, false);
    return response_;
}

RevokePermissionDirectoryResponse GPUdb::revokePermissionDirectory( const std::string& name,
                                                                    const std::string& permission,
                                                                    const std::string& directoryName,
                                                                    const std::map<std::string, std::string>& options ) const
{
    RevokePermissionDirectoryRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.directoryName = directoryName;
    actualRequest_.options = options;
    RevokePermissionDirectoryResponse actualResponse_;
    submitRequest("/revoke/permission/directory", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionDirectoryResponse& GPUdb::revokePermissionDirectory( const std::string& name,
                                                                     const std::string& permission,
                                                                     const std::string& directoryName,
                                                                     const std::map<std::string, std::string>& options,
                                                                     RevokePermissionDirectoryResponse& response_ ) const
{
    RevokePermissionDirectoryRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.directoryName = directoryName;
    actualRequest_.options = options;
    submitRequest("/revoke/permission/directory", actualRequest_, response_, false);
    return response_;
}

RevokePermissionProcResponse GPUdb::revokePermissionProc( const RevokePermissionProcRequest& request_ ) const
{
    RevokePermissionProcResponse actualResponse_;
    submitRequest("/revoke/permission/proc", request_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionProcResponse& GPUdb::revokePermissionProc( const RevokePermissionProcRequest& request_,
                                                           RevokePermissionProcResponse& response_ ) const
{
    submitRequest("/revoke/permission/proc", request_, response_, false);
    return response_;
}

RevokePermissionProcResponse GPUdb::revokePermissionProc( const std::string& name,
                                                          const std::string& permission,
                                                          const std::string& procName,
                                                          const std::map<std::string, std::string>& options ) const
{
    RevokePermissionProcRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.procName = procName;
    actualRequest_.options = options;
    RevokePermissionProcResponse actualResponse_;
    submitRequest("/revoke/permission/proc", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionProcResponse& GPUdb::revokePermissionProc( const std::string& name,
                                                           const std::string& permission,
                                                           const std::string& procName,
                                                           const std::map<std::string, std::string>& options,
                                                           RevokePermissionProcResponse& response_ ) const
{
    RevokePermissionProcRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.procName = procName;
    actualRequest_.options = options;
    submitRequest("/revoke/permission/proc", actualRequest_, response_, false);
    return response_;
}

RevokePermissionSystemResponse GPUdb::revokePermissionSystem( const RevokePermissionSystemRequest& request_ ) const
{
    RevokePermissionSystemResponse actualResponse_;
    submitRequest("/revoke/permission/system", request_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionSystemResponse& GPUdb::revokePermissionSystem( const RevokePermissionSystemRequest& request_,
                                                               RevokePermissionSystemResponse& response_ ) const
{
    submitRequest("/revoke/permission/system", request_, response_, false);
    return response_;
}

RevokePermissionSystemResponse GPUdb::revokePermissionSystem( const std::string& name,
                                                              const std::string& permission,
                                                              const std::map<std::string, std::string>& options ) const
{
    RevokePermissionSystemRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.options = options;
    RevokePermissionSystemResponse actualResponse_;
    submitRequest("/revoke/permission/system", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionSystemResponse& GPUdb::revokePermissionSystem( const std::string& name,
                                                               const std::string& permission,
                                                               const std::map<std::string, std::string>& options,
                                                               RevokePermissionSystemResponse& response_ ) const
{
    RevokePermissionSystemRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.options = options;
    submitRequest("/revoke/permission/system", actualRequest_, response_, false);
    return response_;
}

RevokePermissionTableResponse GPUdb::revokePermissionTable( const RevokePermissionTableRequest& request_ ) const
{
    RevokePermissionTableResponse actualResponse_;
    submitRequest("/revoke/permission/table", request_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionTableResponse& GPUdb::revokePermissionTable( const RevokePermissionTableRequest& request_,
                                                             RevokePermissionTableResponse& response_ ) const
{
    submitRequest("/revoke/permission/table", request_, response_, false);
    return response_;
}

RevokePermissionTableResponse GPUdb::revokePermissionTable( const std::string& name,
                                                            const std::string& permission,
                                                            const std::string& tableName,
                                                            const std::map<std::string, std::string>& options ) const
{
    RevokePermissionTableRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.tableName = tableName;
    actualRequest_.options = options;
    RevokePermissionTableResponse actualResponse_;
    submitRequest("/revoke/permission/table", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

RevokePermissionTableResponse& GPUdb::revokePermissionTable( const std::string& name,
                                                             const std::string& permission,
                                                             const std::string& tableName,
                                                             const std::map<std::string, std::string>& options,
                                                             RevokePermissionTableResponse& response_ ) const
{
    RevokePermissionTableRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.permission = permission;
    actualRequest_.tableName = tableName;
    actualRequest_.options = options;
    submitRequest("/revoke/permission/table", actualRequest_, response_, false);
    return response_;
}

RevokeRoleResponse GPUdb::revokeRole( const RevokeRoleRequest& request_ ) const
{
    RevokeRoleResponse actualResponse_;
    submitRequest("/revoke/role", request_, actualResponse_, false);
    return actualResponse_;
}

RevokeRoleResponse& GPUdb::revokeRole( const RevokeRoleRequest& request_,
                                       RevokeRoleResponse& response_ ) const
{
    submitRequest("/revoke/role", request_, response_, false);
    return response_;
}

RevokeRoleResponse GPUdb::revokeRole( const std::string& role,
                                      const std::string& member,
                                      const std::map<std::string, std::string>& options ) const
{
    RevokeRoleRequest actualRequest_;
    actualRequest_.role = role;
    actualRequest_.member = member;
    actualRequest_.options = options;
    RevokeRoleResponse actualResponse_;
    submitRequest("/revoke/role", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

RevokeRoleResponse& GPUdb::revokeRole( const std::string& role,
                                       const std::string& member,
                                       const std::map<std::string, std::string>& options,
                                       RevokeRoleResponse& response_ ) const
{
    RevokeRoleRequest actualRequest_;
    actualRequest_.role = role;
    actualRequest_.member = member;
    actualRequest_.options = options;
    submitRequest("/revoke/role", actualRequest_, response_, false);
    return response_;
}

ShowContainerRegistryResponse GPUdb::showContainerRegistry( const ShowContainerRegistryRequest& request_ ) const
{
    ShowContainerRegistryResponse actualResponse_;
    submitRequest("/show/container/registry", request_, actualResponse_, false);
    return actualResponse_;
}

ShowContainerRegistryResponse& GPUdb::showContainerRegistry( const ShowContainerRegistryRequest& request_,
                                                             ShowContainerRegistryResponse& response_ ) const
{
    submitRequest("/show/container/registry", request_, response_, false);
    return response_;
}

ShowContainerRegistryResponse GPUdb::showContainerRegistry( const std::string& registryName,
                                                            const std::map<std::string, std::string>& options ) const
{
    ShowContainerRegistryRequest actualRequest_;
    actualRequest_.registryName = registryName;
    actualRequest_.options = options;
    ShowContainerRegistryResponse actualResponse_;
    submitRequest("/show/container/registry", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowContainerRegistryResponse& GPUdb::showContainerRegistry( const std::string& registryName,
                                                             const std::map<std::string, std::string>& options,
                                                             ShowContainerRegistryResponse& response_ ) const
{
    ShowContainerRegistryRequest actualRequest_;
    actualRequest_.registryName = registryName;
    actualRequest_.options = options;
    submitRequest("/show/container/registry", actualRequest_, response_, false);
    return response_;
}

ShowCredentialResponse GPUdb::showCredential( const ShowCredentialRequest& request_ ) const
{
    ShowCredentialResponse actualResponse_;
    submitRequest("/show/credential", request_, actualResponse_, false);
    return actualResponse_;
}

ShowCredentialResponse& GPUdb::showCredential( const ShowCredentialRequest& request_,
                                               ShowCredentialResponse& response_ ) const
{
    submitRequest("/show/credential", request_, response_, false);
    return response_;
}

ShowCredentialResponse GPUdb::showCredential( const std::string& credentialName,
                                              const std::map<std::string, std::string>& options ) const
{
    ShowCredentialRequest actualRequest_;
    actualRequest_.credentialName = credentialName;
    actualRequest_.options = options;
    ShowCredentialResponse actualResponse_;
    submitRequest("/show/credential", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowCredentialResponse& GPUdb::showCredential( const std::string& credentialName,
                                               const std::map<std::string, std::string>& options,
                                               ShowCredentialResponse& response_ ) const
{
    ShowCredentialRequest actualRequest_;
    actualRequest_.credentialName = credentialName;
    actualRequest_.options = options;
    submitRequest("/show/credential", actualRequest_, response_, false);
    return response_;
}

ShowDatasinkResponse GPUdb::showDatasink( const ShowDatasinkRequest& request_ ) const
{
    ShowDatasinkResponse actualResponse_;
    submitRequest("/show/datasink", request_, actualResponse_, false);
    return actualResponse_;
}

ShowDatasinkResponse& GPUdb::showDatasink( const ShowDatasinkRequest& request_,
                                           ShowDatasinkResponse& response_ ) const
{
    submitRequest("/show/datasink", request_, response_, false);
    return response_;
}

ShowDatasinkResponse GPUdb::showDatasink( const std::string& name,
                                          const std::map<std::string, std::string>& options ) const
{
    ShowDatasinkRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    ShowDatasinkResponse actualResponse_;
    submitRequest("/show/datasink", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowDatasinkResponse& GPUdb::showDatasink( const std::string& name,
                                           const std::map<std::string, std::string>& options,
                                           ShowDatasinkResponse& response_ ) const
{
    ShowDatasinkRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    submitRequest("/show/datasink", actualRequest_, response_, false);
    return response_;
}

ShowDatasourceResponse GPUdb::showDatasource( const ShowDatasourceRequest& request_ ) const
{
    ShowDatasourceResponse actualResponse_;
    submitRequest("/show/datasource", request_, actualResponse_, false);
    return actualResponse_;
}

ShowDatasourceResponse& GPUdb::showDatasource( const ShowDatasourceRequest& request_,
                                               ShowDatasourceResponse& response_ ) const
{
    submitRequest("/show/datasource", request_, response_, false);
    return response_;
}

ShowDatasourceResponse GPUdb::showDatasource( const std::string& name,
                                              const std::map<std::string, std::string>& options ) const
{
    ShowDatasourceRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    ShowDatasourceResponse actualResponse_;
    submitRequest("/show/datasource", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowDatasourceResponse& GPUdb::showDatasource( const std::string& name,
                                               const std::map<std::string, std::string>& options,
                                               ShowDatasourceResponse& response_ ) const
{
    ShowDatasourceRequest actualRequest_;
    actualRequest_.name = name;
    actualRequest_.options = options;
    submitRequest("/show/datasource", actualRequest_, response_, false);
    return response_;
}

ShowDirectoriesResponse GPUdb::showDirectories( const ShowDirectoriesRequest& request_ ) const
{
    ShowDirectoriesResponse actualResponse_;
    submitRequest("/show/directories", request_, actualResponse_, false);
    return actualResponse_;
}

ShowDirectoriesResponse& GPUdb::showDirectories( const ShowDirectoriesRequest& request_,
                                                 ShowDirectoriesResponse& response_ ) const
{
    submitRequest("/show/directories", request_, response_, false);
    return response_;
}

ShowDirectoriesResponse GPUdb::showDirectories( const std::string& directoryName,
                                                const std::map<std::string, std::string>& options ) const
{
    ShowDirectoriesRequest actualRequest_;
    actualRequest_.directoryName = directoryName;
    actualRequest_.options = options;
    ShowDirectoriesResponse actualResponse_;
    submitRequest("/show/directories", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowDirectoriesResponse& GPUdb::showDirectories( const std::string& directoryName,
                                                 const std::map<std::string, std::string>& options,
                                                 ShowDirectoriesResponse& response_ ) const
{
    ShowDirectoriesRequest actualRequest_;
    actualRequest_.directoryName = directoryName;
    actualRequest_.options = options;
    submitRequest("/show/directories", actualRequest_, response_, false);
    return response_;
}

ShowEnvironmentResponse GPUdb::showEnvironment( const ShowEnvironmentRequest& request_ ) const
{
    ShowEnvironmentResponse actualResponse_;
    submitRequest("/show/environment", request_, actualResponse_, false);
    return actualResponse_;
}

ShowEnvironmentResponse& GPUdb::showEnvironment( const ShowEnvironmentRequest& request_,
                                                 ShowEnvironmentResponse& response_ ) const
{
    submitRequest("/show/environment", request_, response_, false);
    return response_;
}

ShowEnvironmentResponse GPUdb::showEnvironment( const std::string& environmentName,
                                                const std::map<std::string, std::string>& options ) const
{
    ShowEnvironmentRequest actualRequest_;
    actualRequest_.environmentName = environmentName;
    actualRequest_.options = options;
    ShowEnvironmentResponse actualResponse_;
    submitRequest("/show/environment", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowEnvironmentResponse& GPUdb::showEnvironment( const std::string& environmentName,
                                                 const std::map<std::string, std::string>& options,
                                                 ShowEnvironmentResponse& response_ ) const
{
    ShowEnvironmentRequest actualRequest_;
    actualRequest_.environmentName = environmentName;
    actualRequest_.options = options;
    submitRequest("/show/environment", actualRequest_, response_, false);
    return response_;
}

ShowFilesResponse GPUdb::showFiles( const ShowFilesRequest& request_ ) const
{
    ShowFilesResponse actualResponse_;
    submitRequest("/show/files", request_, actualResponse_, false);
    return actualResponse_;
}

ShowFilesResponse& GPUdb::showFiles( const ShowFilesRequest& request_,
                                     ShowFilesResponse& response_ ) const
{
    submitRequest("/show/files", request_, response_, false);
    return response_;
}

ShowFilesResponse GPUdb::showFiles( const std::vector<std::string>& paths,
                                    const std::map<std::string, std::string>& options ) const
{
    ShowFilesRequest actualRequest_;
    actualRequest_.paths = paths;
    actualRequest_.options = options;
    ShowFilesResponse actualResponse_;
    submitRequest("/show/files", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowFilesResponse& GPUdb::showFiles( const std::vector<std::string>& paths,
                                     const std::map<std::string, std::string>& options,
                                     ShowFilesResponse& response_ ) const
{
    ShowFilesRequest actualRequest_;
    actualRequest_.paths = paths;
    actualRequest_.options = options;
    submitRequest("/show/files", actualRequest_, response_, false);
    return response_;
}

ShowFunctionsResponse GPUdb::showFunctions( const ShowFunctionsRequest& request_ ) const
{
    ShowFunctionsResponse actualResponse_;
    submitRequest("/show/functions", request_, actualResponse_, false);
    return actualResponse_;
}

ShowFunctionsResponse& GPUdb::showFunctions( const ShowFunctionsRequest& request_,
                                             ShowFunctionsResponse& response_ ) const
{
    submitRequest("/show/functions", request_, response_, false);
    return response_;
}

ShowFunctionsResponse GPUdb::showFunctions( const std::vector<std::string>& names,
                                            const std::map<std::string, std::string>& options ) const
{
    ShowFunctionsRequest actualRequest_;
    actualRequest_.names = names;
    actualRequest_.options = options;
    ShowFunctionsResponse actualResponse_;
    submitRequest("/show/functions", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowFunctionsResponse& GPUdb::showFunctions( const std::vector<std::string>& names,
                                             const std::map<std::string, std::string>& options,
                                             ShowFunctionsResponse& response_ ) const
{
    ShowFunctionsRequest actualRequest_;
    actualRequest_.names = names;
    actualRequest_.options = options;
    submitRequest("/show/functions", actualRequest_, response_, false);
    return response_;
}

ShowGraphResponse GPUdb::showGraph( const ShowGraphRequest& request_ ) const
{
    ShowGraphResponse actualResponse_;
    submitRequest("/show/graph", request_, actualResponse_, false);
    return actualResponse_;
}

ShowGraphResponse& GPUdb::showGraph( const ShowGraphRequest& request_,
                                     ShowGraphResponse& response_ ) const
{
    submitRequest("/show/graph", request_, response_, false);
    return response_;
}

ShowGraphResponse GPUdb::showGraph( const std::string& graphName,
                                    const std::map<std::string, std::string>& options ) const
{
    ShowGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.options = options;
    ShowGraphResponse actualResponse_;
    submitRequest("/show/graph", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowGraphResponse& GPUdb::showGraph( const std::string& graphName,
                                     const std::map<std::string, std::string>& options,
                                     ShowGraphResponse& response_ ) const
{
    ShowGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.options = options;
    submitRequest("/show/graph", actualRequest_, response_, false);
    return response_;
}

ShowGraphGrammarResponse GPUdb::showGraphGrammar( const ShowGraphGrammarRequest& request_ ) const
{
    ShowGraphGrammarResponse actualResponse_;
    submitRequest("/show/graph/grammar", request_, actualResponse_, false);
    return actualResponse_;
}

ShowGraphGrammarResponse& GPUdb::showGraphGrammar( const ShowGraphGrammarRequest& request_,
                                                   ShowGraphGrammarResponse& response_ ) const
{
    submitRequest("/show/graph/grammar", request_, response_, false);
    return response_;
}

ShowGraphGrammarResponse GPUdb::showGraphGrammar( const std::map<std::string, std::string>& options ) const
{
    ShowGraphGrammarRequest actualRequest_;
    actualRequest_.options = options;
    ShowGraphGrammarResponse actualResponse_;
    submitRequest("/show/graph/grammar", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowGraphGrammarResponse& GPUdb::showGraphGrammar( const std::map<std::string, std::string>& options,
                                                   ShowGraphGrammarResponse& response_ ) const
{
    ShowGraphGrammarRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/show/graph/grammar", actualRequest_, response_, false);
    return response_;
}

ShowModelResponse GPUdb::showModel( const ShowModelRequest& request_ ) const
{
    ShowModelResponse actualResponse_;
    submitRequest("/show/model", request_, actualResponse_, false);
    return actualResponse_;
}

ShowModelResponse& GPUdb::showModel( const ShowModelRequest& request_,
                                     ShowModelResponse& response_ ) const
{
    submitRequest("/show/model", request_, response_, false);
    return response_;
}

ShowModelResponse GPUdb::showModel( const std::vector<std::string>& modelNames,
                                    const std::map<std::string, std::string>& options ) const
{
    ShowModelRequest actualRequest_;
    actualRequest_.modelNames = modelNames;
    actualRequest_.options = options;
    ShowModelResponse actualResponse_;
    submitRequest("/show/model", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowModelResponse& GPUdb::showModel( const std::vector<std::string>& modelNames,
                                     const std::map<std::string, std::string>& options,
                                     ShowModelResponse& response_ ) const
{
    ShowModelRequest actualRequest_;
    actualRequest_.modelNames = modelNames;
    actualRequest_.options = options;
    submitRequest("/show/model", actualRequest_, response_, false);
    return response_;
}

ShowProcResponse GPUdb::showProc( const ShowProcRequest& request_ ) const
{
    ShowProcResponse actualResponse_;
    submitRequest("/show/proc", request_, actualResponse_, false);
    return actualResponse_;
}

ShowProcResponse& GPUdb::showProc( const ShowProcRequest& request_,
                                   ShowProcResponse& response_ ) const
{
    submitRequest("/show/proc", request_, response_, false);
    return response_;
}

ShowProcResponse GPUdb::showProc( const std::string& procName,
                                  const std::map<std::string, std::string>& options ) const
{
    ShowProcRequest actualRequest_;
    actualRequest_.procName = procName;
    actualRequest_.options = options;
    ShowProcResponse actualResponse_;
    submitRequest("/show/proc", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowProcResponse& GPUdb::showProc( const std::string& procName,
                                   const std::map<std::string, std::string>& options,
                                   ShowProcResponse& response_ ) const
{
    ShowProcRequest actualRequest_;
    actualRequest_.procName = procName;
    actualRequest_.options = options;
    submitRequest("/show/proc", actualRequest_, response_, false);
    return response_;
}

ShowProcStatusResponse GPUdb::showProcStatus( const ShowProcStatusRequest& request_ ) const
{
    ShowProcStatusResponse actualResponse_;
    submitRequest("/show/proc/status", request_, actualResponse_, false);
    return actualResponse_;
}

ShowProcStatusResponse& GPUdb::showProcStatus( const ShowProcStatusRequest& request_,
                                               ShowProcStatusResponse& response_ ) const
{
    submitRequest("/show/proc/status", request_, response_, false);
    return response_;
}

ShowProcStatusResponse GPUdb::showProcStatus( const std::string& runId,
                                              const std::map<std::string, std::string>& options ) const
{
    ShowProcStatusRequest actualRequest_;
    actualRequest_.runId = runId;
    actualRequest_.options = options;
    ShowProcStatusResponse actualResponse_;
    submitRequest("/show/proc/status", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowProcStatusResponse& GPUdb::showProcStatus( const std::string& runId,
                                               const std::map<std::string, std::string>& options,
                                               ShowProcStatusResponse& response_ ) const
{
    ShowProcStatusRequest actualRequest_;
    actualRequest_.runId = runId;
    actualRequest_.options = options;
    submitRequest("/show/proc/status", actualRequest_, response_, false);
    return response_;
}

ShowResourceObjectsResponse GPUdb::showResourceObjects( const ShowResourceObjectsRequest& request_ ) const
{
    ShowResourceObjectsResponse actualResponse_;
    submitRequest("/show/resource/objects", request_, actualResponse_, false);
    return actualResponse_;
}

ShowResourceObjectsResponse& GPUdb::showResourceObjects( const ShowResourceObjectsRequest& request_,
                                                         ShowResourceObjectsResponse& response_ ) const
{
    submitRequest("/show/resource/objects", request_, response_, false);
    return response_;
}

ShowResourceObjectsResponse GPUdb::showResourceObjects( const std::map<std::string, std::string>& options ) const
{
    ShowResourceObjectsRequest actualRequest_;
    actualRequest_.options = options;
    ShowResourceObjectsResponse actualResponse_;
    submitRequest("/show/resource/objects", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowResourceObjectsResponse& GPUdb::showResourceObjects( const std::map<std::string, std::string>& options,
                                                         ShowResourceObjectsResponse& response_ ) const
{
    ShowResourceObjectsRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/show/resource/objects", actualRequest_, response_, false);
    return response_;
}

ShowResourceStatisticsResponse GPUdb::showResourceStatistics( const ShowResourceStatisticsRequest& request_ ) const
{
    ShowResourceStatisticsResponse actualResponse_;
    submitRequest("/show/resource/statistics", request_, actualResponse_, false);
    return actualResponse_;
}

ShowResourceStatisticsResponse& GPUdb::showResourceStatistics( const ShowResourceStatisticsRequest& request_,
                                                               ShowResourceStatisticsResponse& response_ ) const
{
    submitRequest("/show/resource/statistics", request_, response_, false);
    return response_;
}

ShowResourceStatisticsResponse GPUdb::showResourceStatistics( const std::map<std::string, std::string>& options ) const
{
    ShowResourceStatisticsRequest actualRequest_;
    actualRequest_.options = options;
    ShowResourceStatisticsResponse actualResponse_;
    submitRequest("/show/resource/statistics", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowResourceStatisticsResponse& GPUdb::showResourceStatistics( const std::map<std::string, std::string>& options,
                                                               ShowResourceStatisticsResponse& response_ ) const
{
    ShowResourceStatisticsRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/show/resource/statistics", actualRequest_, response_, false);
    return response_;
}

ShowResourceGroupsResponse GPUdb::showResourceGroups( const ShowResourceGroupsRequest& request_ ) const
{
    ShowResourceGroupsResponse actualResponse_;
    submitRequest("/show/resourcegroups", request_, actualResponse_, false);
    return actualResponse_;
}

ShowResourceGroupsResponse& GPUdb::showResourceGroups( const ShowResourceGroupsRequest& request_,
                                                       ShowResourceGroupsResponse& response_ ) const
{
    submitRequest("/show/resourcegroups", request_, response_, false);
    return response_;
}

ShowResourceGroupsResponse GPUdb::showResourceGroups( const std::vector<std::string>& names,
                                                      const std::map<std::string, std::string>& options ) const
{
    ShowResourceGroupsRequest actualRequest_;
    actualRequest_.names = names;
    actualRequest_.options = options;
    ShowResourceGroupsResponse actualResponse_;
    submitRequest("/show/resourcegroups", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowResourceGroupsResponse& GPUdb::showResourceGroups( const std::vector<std::string>& names,
                                                       const std::map<std::string, std::string>& options,
                                                       ShowResourceGroupsResponse& response_ ) const
{
    ShowResourceGroupsRequest actualRequest_;
    actualRequest_.names = names;
    actualRequest_.options = options;
    submitRequest("/show/resourcegroups", actualRequest_, response_, false);
    return response_;
}

ShowSchemaResponse GPUdb::showSchema( const ShowSchemaRequest& request_ ) const
{
    ShowSchemaResponse actualResponse_;
    submitRequest("/show/schema", request_, actualResponse_, false);
    return actualResponse_;
}

ShowSchemaResponse& GPUdb::showSchema( const ShowSchemaRequest& request_,
                                       ShowSchemaResponse& response_ ) const
{
    submitRequest("/show/schema", request_, response_, false);
    return response_;
}

ShowSchemaResponse GPUdb::showSchema( const std::string& schemaName,
                                      const std::map<std::string, std::string>& options ) const
{
    ShowSchemaRequest actualRequest_;
    actualRequest_.schemaName = schemaName;
    actualRequest_.options = options;
    ShowSchemaResponse actualResponse_;
    submitRequest("/show/schema", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowSchemaResponse& GPUdb::showSchema( const std::string& schemaName,
                                       const std::map<std::string, std::string>& options,
                                       ShowSchemaResponse& response_ ) const
{
    ShowSchemaRequest actualRequest_;
    actualRequest_.schemaName = schemaName;
    actualRequest_.options = options;
    submitRequest("/show/schema", actualRequest_, response_, false);
    return response_;
}

ShowSecurityResponse GPUdb::showSecurity( const ShowSecurityRequest& request_ ) const
{
    ShowSecurityResponse actualResponse_;
    submitRequest("/show/security", request_, actualResponse_, false);
    return actualResponse_;
}

ShowSecurityResponse& GPUdb::showSecurity( const ShowSecurityRequest& request_,
                                           ShowSecurityResponse& response_ ) const
{
    submitRequest("/show/security", request_, response_, false);
    return response_;
}

ShowSecurityResponse GPUdb::showSecurity( const std::vector<std::string>& names,
                                          const std::map<std::string, std::string>& options ) const
{
    ShowSecurityRequest actualRequest_;
    actualRequest_.names = names;
    actualRequest_.options = options;
    ShowSecurityResponse actualResponse_;
    submitRequest("/show/security", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowSecurityResponse& GPUdb::showSecurity( const std::vector<std::string>& names,
                                           const std::map<std::string, std::string>& options,
                                           ShowSecurityResponse& response_ ) const
{
    ShowSecurityRequest actualRequest_;
    actualRequest_.names = names;
    actualRequest_.options = options;
    submitRequest("/show/security", actualRequest_, response_, false);
    return response_;
}

ShowSqlProcResponse GPUdb::showSqlProc( const ShowSqlProcRequest& request_ ) const
{
    ShowSqlProcResponse actualResponse_;
    submitRequest("/show/sql/proc", request_, actualResponse_, false);
    return actualResponse_;
}

ShowSqlProcResponse& GPUdb::showSqlProc( const ShowSqlProcRequest& request_,
                                         ShowSqlProcResponse& response_ ) const
{
    submitRequest("/show/sql/proc", request_, response_, false);
    return response_;
}

ShowSqlProcResponse GPUdb::showSqlProc( const std::string& procedureName,
                                        const std::map<std::string, std::string>& options ) const
{
    ShowSqlProcRequest actualRequest_;
    actualRequest_.procedureName = procedureName;
    actualRequest_.options = options;
    ShowSqlProcResponse actualResponse_;
    submitRequest("/show/sql/proc", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowSqlProcResponse& GPUdb::showSqlProc( const std::string& procedureName,
                                         const std::map<std::string, std::string>& options,
                                         ShowSqlProcResponse& response_ ) const
{
    ShowSqlProcRequest actualRequest_;
    actualRequest_.procedureName = procedureName;
    actualRequest_.options = options;
    submitRequest("/show/sql/proc", actualRequest_, response_, false);
    return response_;
}

ShowStatisticsResponse GPUdb::showStatistics( const ShowStatisticsRequest& request_ ) const
{
    ShowStatisticsResponse actualResponse_;
    submitRequest("/show/statistics", request_, actualResponse_, false);
    return actualResponse_;
}

ShowStatisticsResponse& GPUdb::showStatistics( const ShowStatisticsRequest& request_,
                                               ShowStatisticsResponse& response_ ) const
{
    submitRequest("/show/statistics", request_, response_, false);
    return response_;
}

ShowStatisticsResponse GPUdb::showStatistics( const std::vector<std::string>& tableNames,
                                              const std::map<std::string, std::string>& options ) const
{
    ShowStatisticsRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.options = options;
    ShowStatisticsResponse actualResponse_;
    submitRequest("/show/statistics", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowStatisticsResponse& GPUdb::showStatistics( const std::vector<std::string>& tableNames,
                                               const std::map<std::string, std::string>& options,
                                               ShowStatisticsResponse& response_ ) const
{
    ShowStatisticsRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.options = options;
    submitRequest("/show/statistics", actualRequest_, response_, false);
    return response_;
}

ShowSystemPropertiesResponse GPUdb::showSystemProperties( const ShowSystemPropertiesRequest& request_ ) const
{
    ShowSystemPropertiesResponse actualResponse_;
    submitRequest("/show/system/properties", request_, actualResponse_, false);
    return actualResponse_;
}

ShowSystemPropertiesResponse& GPUdb::showSystemProperties( const ShowSystemPropertiesRequest& request_,
                                                           ShowSystemPropertiesResponse& response_ ) const
{
    submitRequest("/show/system/properties", request_, response_, false);
    return response_;
}

ShowSystemPropertiesResponse GPUdb::showSystemProperties( const std::map<std::string, std::string>& options ) const
{
    ShowSystemPropertiesRequest actualRequest_;
    actualRequest_.options = options;
    ShowSystemPropertiesResponse actualResponse_;
    submitRequest("/show/system/properties", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowSystemPropertiesResponse& GPUdb::showSystemProperties( const std::map<std::string, std::string>& options,
                                                           ShowSystemPropertiesResponse& response_ ) const
{
    ShowSystemPropertiesRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/show/system/properties", actualRequest_, response_, false);
    return response_;
}

ShowSystemStatusResponse GPUdb::showSystemStatus( const ShowSystemStatusRequest& request_ ) const
{
    ShowSystemStatusResponse actualResponse_;
    submitRequest("/show/system/status", request_, actualResponse_, false);
    return actualResponse_;
}

ShowSystemStatusResponse& GPUdb::showSystemStatus( const ShowSystemStatusRequest& request_,
                                                   ShowSystemStatusResponse& response_ ) const
{
    submitRequest("/show/system/status", request_, response_, false);
    return response_;
}

ShowSystemStatusResponse GPUdb::showSystemStatus( const std::map<std::string, std::string>& options ) const
{
    ShowSystemStatusRequest actualRequest_;
    actualRequest_.options = options;
    ShowSystemStatusResponse actualResponse_;
    submitRequest("/show/system/status", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowSystemStatusResponse& GPUdb::showSystemStatus( const std::map<std::string, std::string>& options,
                                                   ShowSystemStatusResponse& response_ ) const
{
    ShowSystemStatusRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/show/system/status", actualRequest_, response_, false);
    return response_;
}

ShowSystemTimingResponse GPUdb::showSystemTiming( const ShowSystemTimingRequest& request_ ) const
{
    ShowSystemTimingResponse actualResponse_;
    submitRequest("/show/system/timing", request_, actualResponse_, false);
    return actualResponse_;
}

ShowSystemTimingResponse& GPUdb::showSystemTiming( const ShowSystemTimingRequest& request_,
                                                   ShowSystemTimingResponse& response_ ) const
{
    submitRequest("/show/system/timing", request_, response_, false);
    return response_;
}

ShowSystemTimingResponse GPUdb::showSystemTiming( const std::map<std::string, std::string>& options ) const
{
    ShowSystemTimingRequest actualRequest_;
    actualRequest_.options = options;
    ShowSystemTimingResponse actualResponse_;
    submitRequest("/show/system/timing", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowSystemTimingResponse& GPUdb::showSystemTiming( const std::map<std::string, std::string>& options,
                                                   ShowSystemTimingResponse& response_ ) const
{
    ShowSystemTimingRequest actualRequest_;
    actualRequest_.options = options;
    submitRequest("/show/system/timing", actualRequest_, response_, false);
    return response_;
}

ShowTableResponse GPUdb::showTable( const ShowTableRequest& request_ ) const
{
    ShowTableResponse actualResponse_;
    submitRequest("/show/table", request_, actualResponse_, false);

    std::vector<std::string>::size_type i_;
    for ( i_ = 0; i_ < actualResponse_.typeIds.size(); ++i_)
    {
        if ( actualResponse_.typeSchemas[i_].empty() )
        {
            // Skip generating a type if no schema is available
            continue;
        }
        setDecoderIfMissing( actualResponse_.typeIds[i_],
                             actualResponse_.typeLabels[i_],
                             actualResponse_.typeSchemas[i_],
                             actualResponse_.properties[i_] );
    }

    return actualResponse_;
}

ShowTableResponse& GPUdb::showTable( const ShowTableRequest& request_,
                                     ShowTableResponse& response_ ) const
{
    submitRequest("/show/table", request_, response_, false);

    std::vector<std::string>::size_type i_;
    for ( i_ = 0; i_ < response_.typeIds.size(); ++i_)
    {
        if ( response_.typeSchemas[i_].empty() )
        {
            // Skip generating a type if no schema is available
            continue;
        }
        setDecoderIfMissing( response_.typeIds[i_],
                             response_.typeLabels[i_],
                             response_.typeSchemas[i_],
                             response_.properties[i_] );
    }

    return response_;
}

ShowTableResponse GPUdb::showTable( const std::string& tableName,
                                    const std::map<std::string, std::string>& options ) const
{
    ShowTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.options = options;
    ShowTableResponse actualResponse_;
    submitRequest("/show/table", actualRequest_, actualResponse_, false);

    std::vector<std::string>::size_type i_;
    for ( i_ = 0; i_ < actualResponse_.typeIds.size(); ++i_)
    {
        if ( actualResponse_.typeSchemas[i_].empty() )
        {
            // Skip generating a type if no schema is available
            continue;
        }
        setDecoderIfMissing( actualResponse_.typeIds[i_],
                             actualResponse_.typeLabels[i_],
                             actualResponse_.typeSchemas[i_],
                             actualResponse_.properties[i_] );
    }

    return actualResponse_;
}

ShowTableResponse& GPUdb::showTable( const std::string& tableName,
                                     const std::map<std::string, std::string>& options,
                                     ShowTableResponse& response_ ) const
{
    ShowTableRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.options = options;
    submitRequest("/show/table", actualRequest_, response_, false);

    std::vector<std::string>::size_type i_;
    for ( i_ = 0; i_ < response_.typeIds.size(); ++i_)
    {
        if ( response_.typeSchemas[i_].empty() )
        {
            // Skip generating a type if no schema is available
            continue;
        }
        setDecoderIfMissing( response_.typeIds[i_],
                             response_.typeLabels[i_],
                             response_.typeSchemas[i_],
                             response_.properties[i_] );
    }

    return response_;
}

ShowTableMetadataResponse GPUdb::showTableMetadata( const ShowTableMetadataRequest& request_ ) const
{
    ShowTableMetadataResponse actualResponse_;
    submitRequest("/show/table/metadata", request_, actualResponse_, false);
    return actualResponse_;
}

ShowTableMetadataResponse& GPUdb::showTableMetadata( const ShowTableMetadataRequest& request_,
                                                     ShowTableMetadataResponse& response_ ) const
{
    submitRequest("/show/table/metadata", request_, response_, false);
    return response_;
}

ShowTableMetadataResponse GPUdb::showTableMetadata( const std::vector<std::string>& tableNames,
                                                    const std::map<std::string, std::string>& options ) const
{
    ShowTableMetadataRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.options = options;
    ShowTableMetadataResponse actualResponse_;
    submitRequest("/show/table/metadata", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowTableMetadataResponse& GPUdb::showTableMetadata( const std::vector<std::string>& tableNames,
                                                     const std::map<std::string, std::string>& options,
                                                     ShowTableMetadataResponse& response_ ) const
{
    ShowTableMetadataRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.options = options;
    submitRequest("/show/table/metadata", actualRequest_, response_, false);
    return response_;
}

ShowTableMonitorsResponse GPUdb::showTableMonitors( const ShowTableMonitorsRequest& request_ ) const
{
    ShowTableMonitorsResponse actualResponse_;
    submitRequest("/show/tablemonitors", request_, actualResponse_, false);
    return actualResponse_;
}

ShowTableMonitorsResponse& GPUdb::showTableMonitors( const ShowTableMonitorsRequest& request_,
                                                     ShowTableMonitorsResponse& response_ ) const
{
    submitRequest("/show/tablemonitors", request_, response_, false);
    return response_;
}

ShowTableMonitorsResponse GPUdb::showTableMonitors( const std::vector<std::string>& monitorIds,
                                                    const std::map<std::string, std::string>& options ) const
{
    ShowTableMonitorsRequest actualRequest_;
    actualRequest_.monitorIds = monitorIds;
    actualRequest_.options = options;
    ShowTableMonitorsResponse actualResponse_;
    submitRequest("/show/tablemonitors", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowTableMonitorsResponse& GPUdb::showTableMonitors( const std::vector<std::string>& monitorIds,
                                                     const std::map<std::string, std::string>& options,
                                                     ShowTableMonitorsResponse& response_ ) const
{
    ShowTableMonitorsRequest actualRequest_;
    actualRequest_.monitorIds = monitorIds;
    actualRequest_.options = options;
    submitRequest("/show/tablemonitors", actualRequest_, response_, false);
    return response_;
}

ShowTablesByTypeResponse GPUdb::showTablesByType( const ShowTablesByTypeRequest& request_ ) const
{
    ShowTablesByTypeResponse actualResponse_;
    submitRequest("/show/tables/bytype", request_, actualResponse_, false);
    return actualResponse_;
}

ShowTablesByTypeResponse& GPUdb::showTablesByType( const ShowTablesByTypeRequest& request_,
                                                   ShowTablesByTypeResponse& response_ ) const
{
    submitRequest("/show/tables/bytype", request_, response_, false);
    return response_;
}

ShowTablesByTypeResponse GPUdb::showTablesByType( const std::string& typeId,
                                                  const std::string& label,
                                                  const std::map<std::string, std::string>& options ) const
{
    ShowTablesByTypeRequest actualRequest_;
    actualRequest_.typeId = typeId;
    actualRequest_.label = label;
    actualRequest_.options = options;
    ShowTablesByTypeResponse actualResponse_;
    submitRequest("/show/tables/bytype", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowTablesByTypeResponse& GPUdb::showTablesByType( const std::string& typeId,
                                                   const std::string& label,
                                                   const std::map<std::string, std::string>& options,
                                                   ShowTablesByTypeResponse& response_ ) const
{
    ShowTablesByTypeRequest actualRequest_;
    actualRequest_.typeId = typeId;
    actualRequest_.label = label;
    actualRequest_.options = options;
    submitRequest("/show/tables/bytype", actualRequest_, response_, false);
    return response_;
}

ShowTriggersResponse GPUdb::showTriggers( const ShowTriggersRequest& request_ ) const
{
    ShowTriggersResponse actualResponse_;
    submitRequest("/show/triggers", request_, actualResponse_, false);
    return actualResponse_;
}

ShowTriggersResponse& GPUdb::showTriggers( const ShowTriggersRequest& request_,
                                           ShowTriggersResponse& response_ ) const
{
    submitRequest("/show/triggers", request_, response_, false);
    return response_;
}

ShowTriggersResponse GPUdb::showTriggers( const std::vector<std::string>& triggerIds,
                                          const std::map<std::string, std::string>& options ) const
{
    ShowTriggersRequest actualRequest_;
    actualRequest_.triggerIds = triggerIds;
    actualRequest_.options = options;
    ShowTriggersResponse actualResponse_;
    submitRequest("/show/triggers", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowTriggersResponse& GPUdb::showTriggers( const std::vector<std::string>& triggerIds,
                                           const std::map<std::string, std::string>& options,
                                           ShowTriggersResponse& response_ ) const
{
    ShowTriggersRequest actualRequest_;
    actualRequest_.triggerIds = triggerIds;
    actualRequest_.options = options;
    submitRequest("/show/triggers", actualRequest_, response_, false);
    return response_;
}

ShowTypesResponse GPUdb::showTypes( const ShowTypesRequest& request_ ) const
{
    ShowTypesResponse actualResponse_;
    submitRequest("/show/types", request_, actualResponse_, false);

    std::vector<std::string>::size_type i_;
    for ( i_ = 0; i_ < actualResponse_.typeIds.size(); ++i_)
    {
        if ( actualResponse_.typeSchemas[i_].empty() )
        {
            // Skip generating a type if no schema is available
            continue;
        }
        setDecoderIfMissing( actualResponse_.typeIds[i_],
                             actualResponse_.labels[i_],
                             actualResponse_.typeSchemas[i_],
                             actualResponse_.properties[i_] );
    }

    return actualResponse_;
}

ShowTypesResponse& GPUdb::showTypes( const ShowTypesRequest& request_,
                                     ShowTypesResponse& response_ ) const
{
    submitRequest("/show/types", request_, response_, false);

    std::vector<std::string>::size_type i_;
    for ( i_ = 0; i_ < response_.typeIds.size(); ++i_)
    {
        if ( response_.typeSchemas[i_].empty() )
        {
            // Skip generating a type if no schema is available
            continue;
        }
        setDecoderIfMissing( response_.typeIds[i_],
                             response_.labels[i_],
                             response_.typeSchemas[i_],
                             response_.properties[i_] );
    }

    return response_;
}

ShowTypesResponse GPUdb::showTypes( const std::string& typeId,
                                    const std::string& label,
                                    const std::map<std::string, std::string>& options ) const
{
    ShowTypesRequest actualRequest_;
    actualRequest_.typeId = typeId;
    actualRequest_.label = label;
    actualRequest_.options = options;
    ShowTypesResponse actualResponse_;
    submitRequest("/show/types", actualRequest_, actualResponse_, false);

    std::vector<std::string>::size_type i_;
    for ( i_ = 0; i_ < actualResponse_.typeIds.size(); ++i_)
    {
        if ( actualResponse_.typeSchemas[i_].empty() )
        {
            // Skip generating a type if no schema is available
            continue;
        }
        setDecoderIfMissing( actualResponse_.typeIds[i_],
                             actualResponse_.labels[i_],
                             actualResponse_.typeSchemas[i_],
                             actualResponse_.properties[i_] );
    }

    return actualResponse_;
}

ShowTypesResponse& GPUdb::showTypes( const std::string& typeId,
                                     const std::string& label,
                                     const std::map<std::string, std::string>& options,
                                     ShowTypesResponse& response_ ) const
{
    ShowTypesRequest actualRequest_;
    actualRequest_.typeId = typeId;
    actualRequest_.label = label;
    actualRequest_.options = options;
    submitRequest("/show/types", actualRequest_, response_, false);

    std::vector<std::string>::size_type i_;
    for ( i_ = 0; i_ < response_.typeIds.size(); ++i_)
    {
        if ( response_.typeSchemas[i_].empty() )
        {
            // Skip generating a type if no schema is available
            continue;
        }
        setDecoderIfMissing( response_.typeIds[i_],
                             response_.labels[i_],
                             response_.typeSchemas[i_],
                             response_.properties[i_] );
    }

    return response_;
}

ShowVideoResponse GPUdb::showVideo( const ShowVideoRequest& request_ ) const
{
    ShowVideoResponse actualResponse_;
    submitRequest("/show/video", request_, actualResponse_, false);
    return actualResponse_;
}

ShowVideoResponse& GPUdb::showVideo( const ShowVideoRequest& request_,
                                     ShowVideoResponse& response_ ) const
{
    submitRequest("/show/video", request_, response_, false);
    return response_;
}

ShowVideoResponse GPUdb::showVideo( const std::vector<std::string>& paths,
                                    const std::map<std::string, std::string>& options ) const
{
    ShowVideoRequest actualRequest_;
    actualRequest_.paths = paths;
    actualRequest_.options = options;
    ShowVideoResponse actualResponse_;
    submitRequest("/show/video", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowVideoResponse& GPUdb::showVideo( const std::vector<std::string>& paths,
                                     const std::map<std::string, std::string>& options,
                                     ShowVideoResponse& response_ ) const
{
    ShowVideoRequest actualRequest_;
    actualRequest_.paths = paths;
    actualRequest_.options = options;
    submitRequest("/show/video", actualRequest_, response_, false);
    return response_;
}

ShowWalResponse GPUdb::showWal( const ShowWalRequest& request_ ) const
{
    ShowWalResponse actualResponse_;
    submitRequest("/show/wal", request_, actualResponse_, false);
    return actualResponse_;
}

ShowWalResponse& GPUdb::showWal( const ShowWalRequest& request_,
                                 ShowWalResponse& response_ ) const
{
    submitRequest("/show/wal", request_, response_, false);
    return response_;
}

ShowWalResponse GPUdb::showWal( const std::vector<std::string>& tableNames,
                                const std::map<std::string, std::string>& options ) const
{
    ShowWalRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.options = options;
    ShowWalResponse actualResponse_;
    submitRequest("/show/wal", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

ShowWalResponse& GPUdb::showWal( const std::vector<std::string>& tableNames,
                                 const std::map<std::string, std::string>& options,
                                 ShowWalResponse& response_ ) const
{
    ShowWalRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.options = options;
    submitRequest("/show/wal", actualRequest_, response_, false);
    return response_;
}

SolveGraphResponse GPUdb::solveGraph( const SolveGraphRequest& request_ ) const
{
    SolveGraphResponse actualResponse_;
    submitRequest("/solve/graph", request_, actualResponse_, false);
    return actualResponse_;
}

SolveGraphResponse& GPUdb::solveGraph( const SolveGraphRequest& request_,
                                       SolveGraphResponse& response_ ) const
{
    submitRequest("/solve/graph", request_, response_, false);
    return response_;
}

SolveGraphResponse GPUdb::solveGraph( const std::string& graphName,
                                      const std::vector<std::string>& weightsOnEdges,
                                      const std::vector<std::string>& restrictions,
                                      const std::string& solverType,
                                      const std::vector<std::string>& sourceNodes,
                                      const std::vector<std::string>& destinationNodes,
                                      const std::string& solutionTable,
                                      const std::map<std::string, std::string>& options ) const
{
    SolveGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.weightsOnEdges = weightsOnEdges;
    actualRequest_.restrictions = restrictions;
    actualRequest_.solverType = solverType;
    actualRequest_.sourceNodes = sourceNodes;
    actualRequest_.destinationNodes = destinationNodes;
    actualRequest_.solutionTable = solutionTable;
    actualRequest_.options = options;
    SolveGraphResponse actualResponse_;
    submitRequest("/solve/graph", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

SolveGraphResponse& GPUdb::solveGraph( const std::string& graphName,
                                       const std::vector<std::string>& weightsOnEdges,
                                       const std::vector<std::string>& restrictions,
                                       const std::string& solverType,
                                       const std::vector<std::string>& sourceNodes,
                                       const std::vector<std::string>& destinationNodes,
                                       const std::string& solutionTable,
                                       const std::map<std::string, std::string>& options,
                                       SolveGraphResponse& response_ ) const
{
    SolveGraphRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.weightsOnEdges = weightsOnEdges;
    actualRequest_.restrictions = restrictions;
    actualRequest_.solverType = solverType;
    actualRequest_.sourceNodes = sourceNodes;
    actualRequest_.destinationNodes = destinationNodes;
    actualRequest_.solutionTable = solutionTable;
    actualRequest_.options = options;
    submitRequest("/solve/graph", actualRequest_, response_, false);
    return response_;
}

UpdateRecordsResponse GPUdb::updateRecordsRaw( const RawUpdateRecordsRequest& request_ ) const
{
    UpdateRecordsResponse actualResponse_;
    submitRequest("/update/records", request_, actualResponse_, true);
    return actualResponse_;
}

UpdateRecordsResponse& GPUdb::updateRecordsRaw( const RawUpdateRecordsRequest& request_,
                                                UpdateRecordsResponse& response_ ) const
{
    submitRequest("/update/records", request_, response_, true);
    return response_;
}

UpdateRecordsBySeriesResponse GPUdb::updateRecordsBySeries( const UpdateRecordsBySeriesRequest& request_ ) const
{
    UpdateRecordsBySeriesResponse actualResponse_;
    submitRequest("/update/records/byseries", request_, actualResponse_, false);
    return actualResponse_;
}

UpdateRecordsBySeriesResponse& GPUdb::updateRecordsBySeries( const UpdateRecordsBySeriesRequest& request_,
                                                             UpdateRecordsBySeriesResponse& response_ ) const
{
    submitRequest("/update/records/byseries", request_, response_, false);
    return response_;
}

UpdateRecordsBySeriesResponse GPUdb::updateRecordsBySeries( const std::string& tableName,
                                                            const std::string& worldTableName,
                                                            const std::string& viewName,
                                                            const std::vector<std::string>& reserved,
                                                            const std::map<std::string, std::string>& options ) const
{
    UpdateRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.viewName = viewName;
    actualRequest_.reserved = reserved;
    actualRequest_.options = options;
    UpdateRecordsBySeriesResponse actualResponse_;
    submitRequest("/update/records/byseries", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

UpdateRecordsBySeriesResponse& GPUdb::updateRecordsBySeries( const std::string& tableName,
                                                             const std::string& worldTableName,
                                                             const std::string& viewName,
                                                             const std::vector<std::string>& reserved,
                                                             const std::map<std::string, std::string>& options,
                                                             UpdateRecordsBySeriesResponse& response_ ) const
{
    UpdateRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.viewName = viewName;
    actualRequest_.reserved = reserved;
    actualRequest_.options = options;
    submitRequest("/update/records/byseries", actualRequest_, response_, false);
    return response_;
}

UploadFilesResponse GPUdb::uploadFiles( const UploadFilesRequest& request_ ) const
{
    UploadFilesResponse actualResponse_;
    submitRequest("/upload/files", request_, actualResponse_, false);
    return actualResponse_;
}

UploadFilesResponse& GPUdb::uploadFiles( const UploadFilesRequest& request_,
                                         UploadFilesResponse& response_ ) const
{
    submitRequest("/upload/files", request_, response_, false);
    return response_;
}

UploadFilesResponse GPUdb::uploadFiles( const std::vector<std::string>& fileNames,
                                        const std::vector<std::vector<uint8_t> >& fileData,
                                        const std::map<std::string, std::string>& options ) const
{
    UploadFilesRequest actualRequest_;
    actualRequest_.fileNames = fileNames;
    actualRequest_.fileData = fileData;
    actualRequest_.options = options;
    UploadFilesResponse actualResponse_;
    submitRequest("/upload/files", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

UploadFilesResponse& GPUdb::uploadFiles( const std::vector<std::string>& fileNames,
                                         const std::vector<std::vector<uint8_t> >& fileData,
                                         const std::map<std::string, std::string>& options,
                                         UploadFilesResponse& response_ ) const
{
    UploadFilesRequest actualRequest_;
    actualRequest_.fileNames = fileNames;
    actualRequest_.fileData = fileData;
    actualRequest_.options = options;
    submitRequest("/upload/files", actualRequest_, response_, false);
    return response_;
}

UploadFilesFromurlResponse GPUdb::uploadFilesFromurl( const UploadFilesFromurlRequest& request_ ) const
{
    UploadFilesFromurlResponse actualResponse_;
    submitRequest("/upload/files/fromurl", request_, actualResponse_, false);
    return actualResponse_;
}

UploadFilesFromurlResponse& GPUdb::uploadFilesFromurl( const UploadFilesFromurlRequest& request_,
                                                       UploadFilesFromurlResponse& response_ ) const
{
    submitRequest("/upload/files/fromurl", request_, response_, false);
    return response_;
}

UploadFilesFromurlResponse GPUdb::uploadFilesFromurl( const std::vector<std::string>& fileNames,
                                                      const std::vector<std::string>& urls,
                                                      const std::map<std::string, std::string>& options ) const
{
    UploadFilesFromurlRequest actualRequest_;
    actualRequest_.fileNames = fileNames;
    actualRequest_.urls = urls;
    actualRequest_.options = options;
    UploadFilesFromurlResponse actualResponse_;
    submitRequest("/upload/files/fromurl", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

UploadFilesFromurlResponse& GPUdb::uploadFilesFromurl( const std::vector<std::string>& fileNames,
                                                       const std::vector<std::string>& urls,
                                                       const std::map<std::string, std::string>& options,
                                                       UploadFilesFromurlResponse& response_ ) const
{
    UploadFilesFromurlRequest actualRequest_;
    actualRequest_.fileNames = fileNames;
    actualRequest_.urls = urls;
    actualRequest_.options = options;
    submitRequest("/upload/files/fromurl", actualRequest_, response_, false);
    return response_;
}

VisualizeGetFeatureInfoResponse GPUdb::visualizeGetFeatureInfo( const VisualizeGetFeatureInfoRequest& request_ ) const
{
    VisualizeGetFeatureInfoResponse actualResponse_;
    submitRequest("/visualize/getfeatureinfo", request_, actualResponse_, false);
    return actualResponse_;
}

VisualizeGetFeatureInfoResponse& GPUdb::visualizeGetFeatureInfo( const VisualizeGetFeatureInfoRequest& request_,
                                                                 VisualizeGetFeatureInfoResponse& response_ ) const
{
    submitRequest("/visualize/getfeatureinfo", request_, response_, false);
    return response_;
}

VisualizeGetFeatureInfoResponse GPUdb::visualizeGetFeatureInfo( const std::vector<std::string>& tableNames,
                                                                const std::vector<std::string>& xColumnNames,
                                                                const std::vector<std::string>& yColumnNames,
                                                                const std::vector<std::string>& geometryColumnNames,
                                                                const std::vector<std::vector<std::string> >& queryColumnNames,
                                                                const std::string& projection,
                                                                const double minX,
                                                                const double maxX,
                                                                const double minY,
                                                                const double maxY,
                                                                const int32_t width,
                                                                const int32_t height,
                                                                const int32_t x,
                                                                const int32_t y,
                                                                const int32_t radius,
                                                                const int64_t limit,
                                                                const std::string& encoding,
                                                                const std::map<std::string, std::string>& options ) const
{
    VisualizeGetFeatureInfoRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.xColumnNames = xColumnNames;
    actualRequest_.yColumnNames = yColumnNames;
    actualRequest_.geometryColumnNames = geometryColumnNames;
    actualRequest_.queryColumnNames = queryColumnNames;
    actualRequest_.projection = projection;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.x = x;
    actualRequest_.y = y;
    actualRequest_.radius = radius;
    actualRequest_.limit = limit;
    actualRequest_.encoding = encoding;
    actualRequest_.options = options;
    VisualizeGetFeatureInfoResponse actualResponse_;
    submitRequest("/visualize/getfeatureinfo", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

VisualizeGetFeatureInfoResponse& GPUdb::visualizeGetFeatureInfo( const std::vector<std::string>& tableNames,
                                                                 const std::vector<std::string>& xColumnNames,
                                                                 const std::vector<std::string>& yColumnNames,
                                                                 const std::vector<std::string>& geometryColumnNames,
                                                                 const std::vector<std::vector<std::string> >& queryColumnNames,
                                                                 const std::string& projection,
                                                                 const double minX,
                                                                 const double maxX,
                                                                 const double minY,
                                                                 const double maxY,
                                                                 const int32_t width,
                                                                 const int32_t height,
                                                                 const int32_t x,
                                                                 const int32_t y,
                                                                 const int32_t radius,
                                                                 const int64_t limit,
                                                                 const std::string& encoding,
                                                                 const std::map<std::string, std::string>& options,
                                                                 VisualizeGetFeatureInfoResponse& response_ ) const
{
    VisualizeGetFeatureInfoRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.xColumnNames = xColumnNames;
    actualRequest_.yColumnNames = yColumnNames;
    actualRequest_.geometryColumnNames = geometryColumnNames;
    actualRequest_.queryColumnNames = queryColumnNames;
    actualRequest_.projection = projection;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.x = x;
    actualRequest_.y = y;
    actualRequest_.radius = radius;
    actualRequest_.limit = limit;
    actualRequest_.encoding = encoding;
    actualRequest_.options = options;
    submitRequest("/visualize/getfeatureinfo", actualRequest_, response_, false);
    return response_;
}

VisualizeImageResponse GPUdb::visualizeImage( const VisualizeImageRequest& request_ ) const
{
    VisualizeImageResponse actualResponse_;
    submitRequest("/visualize/image", request_, actualResponse_, false);
    return actualResponse_;
}

VisualizeImageResponse& GPUdb::visualizeImage( const VisualizeImageRequest& request_,
                                               VisualizeImageResponse& response_ ) const
{
    submitRequest("/visualize/image", request_, response_, false);
    return response_;
}

VisualizeImageResponse GPUdb::visualizeImage( const std::vector<std::string>& tableNames,
                                              const std::vector<std::string>& worldTableNames,
                                              const std::string& xColumnName,
                                              const std::string& yColumnName,
                                              const std::string& symbolColumnName,
                                              const std::string& geometryColumnName,
                                              const std::vector<std::vector<std::string> >& trackIds,
                                              const double minX,
                                              const double maxX,
                                              const double minY,
                                              const double maxY,
                                              const int32_t width,
                                              const int32_t height,
                                              const std::string& projection,
                                              const int64_t bgColor,
                                              const std::map<std::string, std::vector<std::string> >& styleOptions,
                                              const std::map<std::string, std::string>& options ) const
{
    VisualizeImageRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.worldTableNames = worldTableNames;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.symbolColumnName = symbolColumnName;
    actualRequest_.geometryColumnName = geometryColumnName;
    actualRequest_.trackIds = trackIds;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.projection = projection;
    actualRequest_.bgColor = bgColor;
    actualRequest_.styleOptions = styleOptions;
    actualRequest_.options = options;
    VisualizeImageResponse actualResponse_;
    submitRequest("/visualize/image", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

VisualizeImageResponse& GPUdb::visualizeImage( const std::vector<std::string>& tableNames,
                                               const std::vector<std::string>& worldTableNames,
                                               const std::string& xColumnName,
                                               const std::string& yColumnName,
                                               const std::string& symbolColumnName,
                                               const std::string& geometryColumnName,
                                               const std::vector<std::vector<std::string> >& trackIds,
                                               const double minX,
                                               const double maxX,
                                               const double minY,
                                               const double maxY,
                                               const int32_t width,
                                               const int32_t height,
                                               const std::string& projection,
                                               const int64_t bgColor,
                                               const std::map<std::string, std::vector<std::string> >& styleOptions,
                                               const std::map<std::string, std::string>& options,
                                               VisualizeImageResponse& response_ ) const
{
    VisualizeImageRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.worldTableNames = worldTableNames;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.symbolColumnName = symbolColumnName;
    actualRequest_.geometryColumnName = geometryColumnName;
    actualRequest_.trackIds = trackIds;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.projection = projection;
    actualRequest_.bgColor = bgColor;
    actualRequest_.styleOptions = styleOptions;
    actualRequest_.options = options;
    submitRequest("/visualize/image", actualRequest_, response_, false);
    return response_;
}

VisualizeImageChartResponse GPUdb::visualizeImageChart( const VisualizeImageChartRequest& request_ ) const
{
    VisualizeImageChartResponse actualResponse_;
    submitRequest("/visualize/image/chart", request_, actualResponse_, false);
    return actualResponse_;
}

VisualizeImageChartResponse& GPUdb::visualizeImageChart( const VisualizeImageChartRequest& request_,
                                                         VisualizeImageChartResponse& response_ ) const
{
    submitRequest("/visualize/image/chart", request_, response_, false);
    return response_;
}

VisualizeImageChartResponse GPUdb::visualizeImageChart( const std::string& tableName,
                                                        const std::vector<std::string>& xColumnNames,
                                                        const std::vector<std::string>& yColumnNames,
                                                        const double minX,
                                                        const double maxX,
                                                        const double minY,
                                                        const double maxY,
                                                        const int32_t width,
                                                        const int32_t height,
                                                        const std::string& bgColor,
                                                        const std::map<std::string, std::vector<std::string> >& styleOptions,
                                                        const std::map<std::string, std::string>& options ) const
{
    VisualizeImageChartRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.xColumnNames = xColumnNames;
    actualRequest_.yColumnNames = yColumnNames;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.bgColor = bgColor;
    actualRequest_.styleOptions = styleOptions;
    actualRequest_.options = options;
    VisualizeImageChartResponse actualResponse_;
    submitRequest("/visualize/image/chart", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

VisualizeImageChartResponse& GPUdb::visualizeImageChart( const std::string& tableName,
                                                         const std::vector<std::string>& xColumnNames,
                                                         const std::vector<std::string>& yColumnNames,
                                                         const double minX,
                                                         const double maxX,
                                                         const double minY,
                                                         const double maxY,
                                                         const int32_t width,
                                                         const int32_t height,
                                                         const std::string& bgColor,
                                                         const std::map<std::string, std::vector<std::string> >& styleOptions,
                                                         const std::map<std::string, std::string>& options,
                                                         VisualizeImageChartResponse& response_ ) const
{
    VisualizeImageChartRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.xColumnNames = xColumnNames;
    actualRequest_.yColumnNames = yColumnNames;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.bgColor = bgColor;
    actualRequest_.styleOptions = styleOptions;
    actualRequest_.options = options;
    submitRequest("/visualize/image/chart", actualRequest_, response_, false);
    return response_;
}

VisualizeImageClassbreakResponse GPUdb::visualizeImageClassbreak( const VisualizeImageClassbreakRequest& request_ ) const
{
    VisualizeImageClassbreakResponse actualResponse_;
    submitRequest("/visualize/image/classbreak", request_, actualResponse_, false);
    return actualResponse_;
}

VisualizeImageClassbreakResponse& GPUdb::visualizeImageClassbreak( const VisualizeImageClassbreakRequest& request_,
                                                                   VisualizeImageClassbreakResponse& response_ ) const
{
    submitRequest("/visualize/image/classbreak", request_, response_, false);
    return response_;
}

VisualizeImageClassbreakResponse GPUdb::visualizeImageClassbreak( const std::vector<std::string>& tableNames,
                                                                  const std::vector<std::string>& worldTableNames,
                                                                  const std::string& xColumnName,
                                                                  const std::string& yColumnName,
                                                                  const std::string& symbolColumnName,
                                                                  const std::string& geometryColumnName,
                                                                  const std::vector<std::vector<std::string> >& trackIds,
                                                                  const std::string& cbAttr,
                                                                  const std::vector<std::string>& cbVals,
                                                                  const std::string& cbPointcolorAttr,
                                                                  const std::vector<std::string>& cbPointcolorVals,
                                                                  const std::string& cbPointalphaAttr,
                                                                  const std::vector<std::string>& cbPointalphaVals,
                                                                  const std::string& cbPointsizeAttr,
                                                                  const std::vector<std::string>& cbPointsizeVals,
                                                                  const std::string& cbPointshapeAttr,
                                                                  const std::vector<std::string>& cbPointshapeVals,
                                                                  const double minX,
                                                                  const double maxX,
                                                                  const double minY,
                                                                  const double maxY,
                                                                  const int32_t width,
                                                                  const int32_t height,
                                                                  const std::string& projection,
                                                                  const int64_t bgColor,
                                                                  const std::map<std::string, std::vector<std::string> >& styleOptions,
                                                                  const std::map<std::string, std::string>& options,
                                                                  const std::vector<int32_t>& cbTransparencyVec ) const
{
    VisualizeImageClassbreakRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.worldTableNames = worldTableNames;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.symbolColumnName = symbolColumnName;
    actualRequest_.geometryColumnName = geometryColumnName;
    actualRequest_.trackIds = trackIds;
    actualRequest_.cbAttr = cbAttr;
    actualRequest_.cbVals = cbVals;
    actualRequest_.cbPointcolorAttr = cbPointcolorAttr;
    actualRequest_.cbPointcolorVals = cbPointcolorVals;
    actualRequest_.cbPointalphaAttr = cbPointalphaAttr;
    actualRequest_.cbPointalphaVals = cbPointalphaVals;
    actualRequest_.cbPointsizeAttr = cbPointsizeAttr;
    actualRequest_.cbPointsizeVals = cbPointsizeVals;
    actualRequest_.cbPointshapeAttr = cbPointshapeAttr;
    actualRequest_.cbPointshapeVals = cbPointshapeVals;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.projection = projection;
    actualRequest_.bgColor = bgColor;
    actualRequest_.styleOptions = styleOptions;
    actualRequest_.options = options;
    actualRequest_.cbTransparencyVec = cbTransparencyVec;
    VisualizeImageClassbreakResponse actualResponse_;
    submitRequest("/visualize/image/classbreak", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

VisualizeImageClassbreakResponse& GPUdb::visualizeImageClassbreak( const std::vector<std::string>& tableNames,
                                                                   const std::vector<std::string>& worldTableNames,
                                                                   const std::string& xColumnName,
                                                                   const std::string& yColumnName,
                                                                   const std::string& symbolColumnName,
                                                                   const std::string& geometryColumnName,
                                                                   const std::vector<std::vector<std::string> >& trackIds,
                                                                   const std::string& cbAttr,
                                                                   const std::vector<std::string>& cbVals,
                                                                   const std::string& cbPointcolorAttr,
                                                                   const std::vector<std::string>& cbPointcolorVals,
                                                                   const std::string& cbPointalphaAttr,
                                                                   const std::vector<std::string>& cbPointalphaVals,
                                                                   const std::string& cbPointsizeAttr,
                                                                   const std::vector<std::string>& cbPointsizeVals,
                                                                   const std::string& cbPointshapeAttr,
                                                                   const std::vector<std::string>& cbPointshapeVals,
                                                                   const double minX,
                                                                   const double maxX,
                                                                   const double minY,
                                                                   const double maxY,
                                                                   const int32_t width,
                                                                   const int32_t height,
                                                                   const std::string& projection,
                                                                   const int64_t bgColor,
                                                                   const std::map<std::string, std::vector<std::string> >& styleOptions,
                                                                   const std::map<std::string, std::string>& options,
                                                                   const std::vector<int32_t>& cbTransparencyVec,
                                                                   VisualizeImageClassbreakResponse& response_ ) const
{
    VisualizeImageClassbreakRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.worldTableNames = worldTableNames;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.symbolColumnName = symbolColumnName;
    actualRequest_.geometryColumnName = geometryColumnName;
    actualRequest_.trackIds = trackIds;
    actualRequest_.cbAttr = cbAttr;
    actualRequest_.cbVals = cbVals;
    actualRequest_.cbPointcolorAttr = cbPointcolorAttr;
    actualRequest_.cbPointcolorVals = cbPointcolorVals;
    actualRequest_.cbPointalphaAttr = cbPointalphaAttr;
    actualRequest_.cbPointalphaVals = cbPointalphaVals;
    actualRequest_.cbPointsizeAttr = cbPointsizeAttr;
    actualRequest_.cbPointsizeVals = cbPointsizeVals;
    actualRequest_.cbPointshapeAttr = cbPointshapeAttr;
    actualRequest_.cbPointshapeVals = cbPointshapeVals;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.projection = projection;
    actualRequest_.bgColor = bgColor;
    actualRequest_.styleOptions = styleOptions;
    actualRequest_.options = options;
    actualRequest_.cbTransparencyVec = cbTransparencyVec;
    submitRequest("/visualize/image/classbreak", actualRequest_, response_, false);
    return response_;
}

VisualizeImageContourResponse GPUdb::visualizeImageContour( const VisualizeImageContourRequest& request_ ) const
{
    VisualizeImageContourResponse actualResponse_;
    submitRequest("/visualize/image/contour", request_, actualResponse_, false);
    return actualResponse_;
}

VisualizeImageContourResponse& GPUdb::visualizeImageContour( const VisualizeImageContourRequest& request_,
                                                             VisualizeImageContourResponse& response_ ) const
{
    submitRequest("/visualize/image/contour", request_, response_, false);
    return response_;
}

VisualizeImageContourResponse GPUdb::visualizeImageContour( const std::vector<std::string>& tableNames,
                                                            const std::string& xColumnName,
                                                            const std::string& yColumnName,
                                                            const std::string& valueColumnName,
                                                            const double minX,
                                                            const double maxX,
                                                            const double minY,
                                                            const double maxY,
                                                            const int32_t width,
                                                            const int32_t height,
                                                            const std::string& projection,
                                                            const std::map<std::string, std::string>& styleOptions,
                                                            const std::map<std::string, std::string>& options ) const
{
    VisualizeImageContourRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.valueColumnName = valueColumnName;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.projection = projection;
    actualRequest_.styleOptions = styleOptions;
    actualRequest_.options = options;
    VisualizeImageContourResponse actualResponse_;
    submitRequest("/visualize/image/contour", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

VisualizeImageContourResponse& GPUdb::visualizeImageContour( const std::vector<std::string>& tableNames,
                                                             const std::string& xColumnName,
                                                             const std::string& yColumnName,
                                                             const std::string& valueColumnName,
                                                             const double minX,
                                                             const double maxX,
                                                             const double minY,
                                                             const double maxY,
                                                             const int32_t width,
                                                             const int32_t height,
                                                             const std::string& projection,
                                                             const std::map<std::string, std::string>& styleOptions,
                                                             const std::map<std::string, std::string>& options,
                                                             VisualizeImageContourResponse& response_ ) const
{
    VisualizeImageContourRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.valueColumnName = valueColumnName;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.projection = projection;
    actualRequest_.styleOptions = styleOptions;
    actualRequest_.options = options;
    submitRequest("/visualize/image/contour", actualRequest_, response_, false);
    return response_;
}

VisualizeImageHeatmapResponse GPUdb::visualizeImageHeatmap( const VisualizeImageHeatmapRequest& request_ ) const
{
    VisualizeImageHeatmapResponse actualResponse_;
    submitRequest("/visualize/image/heatmap", request_, actualResponse_, false);
    return actualResponse_;
}

VisualizeImageHeatmapResponse& GPUdb::visualizeImageHeatmap( const VisualizeImageHeatmapRequest& request_,
                                                             VisualizeImageHeatmapResponse& response_ ) const
{
    submitRequest("/visualize/image/heatmap", request_, response_, false);
    return response_;
}

VisualizeImageHeatmapResponse GPUdb::visualizeImageHeatmap( const std::vector<std::string>& tableNames,
                                                            const std::string& xColumnName,
                                                            const std::string& yColumnName,
                                                            const std::string& valueColumnName,
                                                            const std::string& geometryColumnName,
                                                            const double minX,
                                                            const double maxX,
                                                            const double minY,
                                                            const double maxY,
                                                            const int32_t width,
                                                            const int32_t height,
                                                            const std::string& projection,
                                                            const std::map<std::string, std::string>& styleOptions,
                                                            const std::map<std::string, std::string>& options ) const
{
    VisualizeImageHeatmapRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.valueColumnName = valueColumnName;
    actualRequest_.geometryColumnName = geometryColumnName;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.projection = projection;
    actualRequest_.styleOptions = styleOptions;
    actualRequest_.options = options;
    VisualizeImageHeatmapResponse actualResponse_;
    submitRequest("/visualize/image/heatmap", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

VisualizeImageHeatmapResponse& GPUdb::visualizeImageHeatmap( const std::vector<std::string>& tableNames,
                                                             const std::string& xColumnName,
                                                             const std::string& yColumnName,
                                                             const std::string& valueColumnName,
                                                             const std::string& geometryColumnName,
                                                             const double minX,
                                                             const double maxX,
                                                             const double minY,
                                                             const double maxY,
                                                             const int32_t width,
                                                             const int32_t height,
                                                             const std::string& projection,
                                                             const std::map<std::string, std::string>& styleOptions,
                                                             const std::map<std::string, std::string>& options,
                                                             VisualizeImageHeatmapResponse& response_ ) const
{
    VisualizeImageHeatmapRequest actualRequest_;
    actualRequest_.tableNames = tableNames;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.valueColumnName = valueColumnName;
    actualRequest_.geometryColumnName = geometryColumnName;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.projection = projection;
    actualRequest_.styleOptions = styleOptions;
    actualRequest_.options = options;
    submitRequest("/visualize/image/heatmap", actualRequest_, response_, false);
    return response_;
}

VisualizeImageLabelsResponse GPUdb::visualizeImageLabels( const VisualizeImageLabelsRequest& request_ ) const
{
    VisualizeImageLabelsResponse actualResponse_;
    submitRequest("/visualize/image/labels", request_, actualResponse_, false);
    return actualResponse_;
}

VisualizeImageLabelsResponse& GPUdb::visualizeImageLabels( const VisualizeImageLabelsRequest& request_,
                                                           VisualizeImageLabelsResponse& response_ ) const
{
    submitRequest("/visualize/image/labels", request_, response_, false);
    return response_;
}

VisualizeImageLabelsResponse GPUdb::visualizeImageLabels( const std::string& tableName,
                                                          const std::string& xColumnName,
                                                          const std::string& yColumnName,
                                                          const std::string& xOffset,
                                                          const std::string& yOffset,
                                                          const std::string& textString,
                                                          const std::string& font,
                                                          const std::string& textColor,
                                                          const std::string& textAngle,
                                                          const std::string& textScale,
                                                          const std::string& drawBox,
                                                          const std::string& drawLeader,
                                                          const std::string& lineWidth,
                                                          const std::string& lineColor,
                                                          const std::string& fillColor,
                                                          const std::string& leaderXColumnName,
                                                          const std::string& leaderYColumnName,
                                                          const std::string& filter,
                                                          const double minX,
                                                          const double maxX,
                                                          const double minY,
                                                          const double maxY,
                                                          const int32_t width,
                                                          const int32_t height,
                                                          const std::string& projection,
                                                          const std::map<std::string, std::string>& options ) const
{
    VisualizeImageLabelsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.xOffset = xOffset;
    actualRequest_.yOffset = yOffset;
    actualRequest_.textString = textString;
    actualRequest_.font = font;
    actualRequest_.textColor = textColor;
    actualRequest_.textAngle = textAngle;
    actualRequest_.textScale = textScale;
    actualRequest_.drawBox = drawBox;
    actualRequest_.drawLeader = drawLeader;
    actualRequest_.lineWidth = lineWidth;
    actualRequest_.lineColor = lineColor;
    actualRequest_.fillColor = fillColor;
    actualRequest_.leaderXColumnName = leaderXColumnName;
    actualRequest_.leaderYColumnName = leaderYColumnName;
    actualRequest_.filter = filter;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.projection = projection;
    actualRequest_.options = options;
    VisualizeImageLabelsResponse actualResponse_;
    submitRequest("/visualize/image/labels", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

VisualizeImageLabelsResponse& GPUdb::visualizeImageLabels( const std::string& tableName,
                                                           const std::string& xColumnName,
                                                           const std::string& yColumnName,
                                                           const std::string& xOffset,
                                                           const std::string& yOffset,
                                                           const std::string& textString,
                                                           const std::string& font,
                                                           const std::string& textColor,
                                                           const std::string& textAngle,
                                                           const std::string& textScale,
                                                           const std::string& drawBox,
                                                           const std::string& drawLeader,
                                                           const std::string& lineWidth,
                                                           const std::string& lineColor,
                                                           const std::string& fillColor,
                                                           const std::string& leaderXColumnName,
                                                           const std::string& leaderYColumnName,
                                                           const std::string& filter,
                                                           const double minX,
                                                           const double maxX,
                                                           const double minY,
                                                           const double maxY,
                                                           const int32_t width,
                                                           const int32_t height,
                                                           const std::string& projection,
                                                           const std::map<std::string, std::string>& options,
                                                           VisualizeImageLabelsResponse& response_ ) const
{
    VisualizeImageLabelsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.xColumnName = xColumnName;
    actualRequest_.yColumnName = yColumnName;
    actualRequest_.xOffset = xOffset;
    actualRequest_.yOffset = yOffset;
    actualRequest_.textString = textString;
    actualRequest_.font = font;
    actualRequest_.textColor = textColor;
    actualRequest_.textAngle = textAngle;
    actualRequest_.textScale = textScale;
    actualRequest_.drawBox = drawBox;
    actualRequest_.drawLeader = drawLeader;
    actualRequest_.lineWidth = lineWidth;
    actualRequest_.lineColor = lineColor;
    actualRequest_.fillColor = fillColor;
    actualRequest_.leaderXColumnName = leaderXColumnName;
    actualRequest_.leaderYColumnName = leaderYColumnName;
    actualRequest_.filter = filter;
    actualRequest_.minX = minX;
    actualRequest_.maxX = maxX;
    actualRequest_.minY = minY;
    actualRequest_.maxY = maxY;
    actualRequest_.width = width;
    actualRequest_.height = height;
    actualRequest_.projection = projection;
    actualRequest_.options = options;
    submitRequest("/visualize/image/labels", actualRequest_, response_, false);
    return response_;
}

VisualizeIsochroneResponse GPUdb::visualizeIsochrone( const VisualizeIsochroneRequest& request_ ) const
{
    VisualizeIsochroneResponse actualResponse_;
    submitRequest("/visualize/isochrone", request_, actualResponse_, false);
    return actualResponse_;
}

VisualizeIsochroneResponse& GPUdb::visualizeIsochrone( const VisualizeIsochroneRequest& request_,
                                                       VisualizeIsochroneResponse& response_ ) const
{
    submitRequest("/visualize/isochrone", request_, response_, false);
    return response_;
}

VisualizeIsochroneResponse GPUdb::visualizeIsochrone( const std::string& graphName,
                                                      const std::string& sourceNode,
                                                      const double maxSolutionRadius,
                                                      const std::vector<std::string>& weightsOnEdges,
                                                      const std::vector<std::string>& restrictions,
                                                      const int32_t numLevels,
                                                      const bool generateImage,
                                                      const std::string& levelsTable,
                                                      const std::map<std::string, std::string>& styleOptions,
                                                      const std::map<std::string, std::string>& solveOptions,
                                                      const std::map<std::string, std::string>& contourOptions,
                                                      const std::map<std::string, std::string>& options ) const
{
    VisualizeIsochroneRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.sourceNode = sourceNode;
    actualRequest_.maxSolutionRadius = maxSolutionRadius;
    actualRequest_.weightsOnEdges = weightsOnEdges;
    actualRequest_.restrictions = restrictions;
    actualRequest_.numLevels = numLevels;
    actualRequest_.generateImage = generateImage;
    actualRequest_.levelsTable = levelsTable;
    actualRequest_.styleOptions = styleOptions;
    actualRequest_.solveOptions = solveOptions;
    actualRequest_.contourOptions = contourOptions;
    actualRequest_.options = options;
    VisualizeIsochroneResponse actualResponse_;
    submitRequest("/visualize/isochrone", actualRequest_, actualResponse_, false);
    return actualResponse_;
}

VisualizeIsochroneResponse& GPUdb::visualizeIsochrone( const std::string& graphName,
                                                       const std::string& sourceNode,
                                                       const double maxSolutionRadius,
                                                       const std::vector<std::string>& weightsOnEdges,
                                                       const std::vector<std::string>& restrictions,
                                                       const int32_t numLevels,
                                                       const bool generateImage,
                                                       const std::string& levelsTable,
                                                       const std::map<std::string, std::string>& styleOptions,
                                                       const std::map<std::string, std::string>& solveOptions,
                                                       const std::map<std::string, std::string>& contourOptions,
                                                       const std::map<std::string, std::string>& options,
                                                       VisualizeIsochroneResponse& response_ ) const
{
    VisualizeIsochroneRequest actualRequest_;
    actualRequest_.graphName = graphName;
    actualRequest_.sourceNode = sourceNode;
    actualRequest_.maxSolutionRadius = maxSolutionRadius;
    actualRequest_.weightsOnEdges = weightsOnEdges;
    actualRequest_.restrictions = restrictions;
    actualRequest_.numLevels = numLevels;
    actualRequest_.generateImage = generateImage;
    actualRequest_.levelsTable = levelsTable;
    actualRequest_.styleOptions = styleOptions;
    actualRequest_.solveOptions = solveOptions;
    actualRequest_.contourOptions = contourOptions;
    actualRequest_.options = options;
    submitRequest("/visualize/isochrone", actualRequest_, response_, false);
    return response_;
}
